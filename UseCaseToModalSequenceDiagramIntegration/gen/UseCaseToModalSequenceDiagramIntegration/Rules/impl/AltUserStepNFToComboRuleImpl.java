/**
 */
package UseCaseToModalSequenceDiagramIntegration.Rules.impl;

import ModalSequenceDiagram.CombinedFragment;
import ModalSequenceDiagram.Interaction;
import ModalSequenceDiagram.InteractionConstraint;
import ModalSequenceDiagram.InteractionFragment;
import ModalSequenceDiagram.InteractionOperand;
import ModalSequenceDiagram.InteractionOperatorKind;
import ModalSequenceDiagram.Lifeline;
import ModalSequenceDiagram.LiteralString;
import ModalSequenceDiagram.Message;
import ModalSequenceDiagram.MessageOccurrenceSpecification;
import ModalSequenceDiagram.ModalSequenceDiagramFactory;
import ModalSequenceDiagram.ValueSpecification;

import TGGLanguage.csp.CSP;

import TGGLanguage.modelgenerator.RuleEntryContainer;
import TGGLanguage.modelgenerator.RuleEntryList;

import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.ModelgeneratorRuleResult;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import TGGRuntime.impl.AbstractRuleImpl;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.Flow;
import UseCaseDSL.NamedFlow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.StepAlternative;
import UseCaseDSL.StepType;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;

import UseCaseToModalSequenceDiagramIntegration.ActorToLifeline;
import UseCaseToModalSequenceDiagramIntegration.FlowToInteractionFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToCombinedFragment;

import UseCaseToModalSequenceDiagramIntegration.Rules.AltUserStepNFToComboRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.RulesPackage;

import UseCaseToModalSequenceDiagramIntegration.StepAlternativeToInteractionOperand;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToInteraction;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToModalSequenceDiagramIntegrationFactory;

import java.lang.Iterable;

import java.lang.reflect.InvocationTargetException;

import java.util.LinkedList;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;
// <-- [user defined imports]
import org.moflon.csp.*;
import csp.constraints.*;
import TGGLanguage.csp.*;

// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Alt User Step NF To Combo Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * </p>
 *
 * @generated
 */
public class AltUserStepNFToComboRuleImpl extends AbstractRuleImpl implements
		AltUserStepNFToComboRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AltUserStepNFToComboRuleImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return RulesPackage.eINSTANCE.getAltUserStepNFToComboRule();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, UseCase useCase, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		// initial bindings
		Object[] result1_black = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_0_1_blackBBBBBBBBBB(this,
						match, packageDeclaration, actor, sysActor, flow,
						useCase, step, alt, altFlow);
		if (result1_black == null) {
			throw new RuntimeException(
					"Pattern matching in node [initial bindings] failed");
		}

		// Solve CSP
		Object[] result2_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_0_2_bindingAndBlackFBBBBBBBBBB(
						this, match, packageDeclaration, actor, sysActor, flow,
						useCase, step, alt, altFlow);
		if (result2_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [Solve CSP] failed");
		}
		CSP csp = (CSP) result2_bindingAndBlack[0];
		// Check CSP
		if (AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_0_3_expressionFBB(this, csp)) {

			// collect elements to be translated
			Object[] result4_black = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_0_4_blackBBBBBBBBB(match,
							packageDeclaration, actor, sysActor, flow, useCase,
							step, alt, altFlow);
			if (result4_black == null) {
				throw new RuntimeException(
						"Pattern matching in node [collect elements to be translated] failed");
			}
			AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_0_4_greenBBBBBBFFFF(
							match, actor, flow, step, alt, altFlow);
			// EMoflonEdge flow__step____steps = (EMoflonEdge) result4_green[6];
			// EMoflonEdge step__alt____stepAlternative = (EMoflonEdge) result4_green[7];
			// EMoflonEdge step__actor____actor = (EMoflonEdge) result4_green[8];
			// EMoflonEdge alt__altFlow____ref = (EMoflonEdge) result4_green[9];

			// collect context elements
			Object[] result5_black = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_0_5_blackBBBBBBBBB(match,
							packageDeclaration, actor, sysActor, flow, useCase,
							step, alt, altFlow);
			if (result5_black == null) {
				throw new RuntimeException(
						"Pattern matching in node [collect context elements] failed");
			}
			AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_0_5_greenBBBBBBFFFF(
							match, packageDeclaration, actor, sysActor, flow,
							useCase);
			// EMoflonEdge packageDeclaration__actor____actors = (EMoflonEdge) result5_green[6];
			// EMoflonEdge packageDeclaration__sysActor____actors = (EMoflonEdge) result5_green[7];
			// EMoflonEdge useCase__flow____flows = (EMoflonEdge) result5_green[8];
			// EMoflonEdge packageDeclaration__useCase____useCases = (EMoflonEdge) result5_green[9];

			// register objects to match
			AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_0_6_expressionBBBBBBBBBB(
							this, match, packageDeclaration, actor, sysActor,
							flow, useCase, step, alt, altFlow);
			return AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_0_7_expressionF();
		} else {
			return AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_0_8_expressionF();
		}

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch) {
		// perform transformation
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_1_1_bindingAndBlackFFFFFFFFFFFFFFFFFFBB(
						this, isApplicableMatch);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [perform transformation] failed");
		}
		PackageDeclaration packageDeclaration = (PackageDeclaration) result1_bindingAndBlack[0];
		Actor actor = (Actor) result1_bindingAndBlack[1];
		Actor sysActor = (Actor) result1_bindingAndBlack[2];
		Lifeline sysLine = (Lifeline) result1_bindingAndBlack[3];
		ActorToLifeline sysActorToSysLine = (ActorToLifeline) result1_bindingAndBlack[4];
		InteractionOperand parentOperand = (InteractionOperand) result1_bindingAndBlack[5];
		CombinedFragment parentCombo = (CombinedFragment) result1_bindingAndBlack[6];
		NamedFlow flow = (NamedFlow) result1_bindingAndBlack[7];
		FlowToInteractionFragment flowToParentOperand = (FlowToInteractionFragment) result1_bindingAndBlack[8];
		Lifeline line = (Lifeline) result1_bindingAndBlack[9];
		Interaction interaction = (Interaction) result1_bindingAndBlack[10];
		UseCase useCase = (UseCase) result1_bindingAndBlack[11];
		UseCaseToInteraction useCaseToInteraction = (UseCaseToInteraction) result1_bindingAndBlack[12];
		ActorToLifeline actorToLine = (ActorToLifeline) result1_bindingAndBlack[13];
		NormalStep step = (NormalStep) result1_bindingAndBlack[14];
		AlternativeFlowAlternative alt = (AlternativeFlowAlternative) result1_bindingAndBlack[15];
		AlternativeFlow altFlow = (AlternativeFlow) result1_bindingAndBlack[16];
		CSP csp = (CSP) result1_bindingAndBlack[17];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_1_1_greenBFFFBBFBBBBFFFFBFB(
						sysLine, parentOperand, parentCombo, line, interaction,
						step, alt, altFlow, csp);
		MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result1_green[1];
		CombinedFragment combo = (CombinedFragment) result1_green[2];
		InteractionOperand operand = (InteractionOperand) result1_green[3];
		MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result1_green[6];
		NormalStepToCombinedFragment stepToCombo = (NormalStepToCombinedFragment) result1_green[11];
		StepAlternativeToInteractionOperand alternative1ToOperand = (StepAlternativeToInteractionOperand) result1_green[12];
		InteractionConstraint guard = (InteractionConstraint) result1_green[13];
		LiteralString spec = (LiteralString) result1_green[14];
		FlowToInteractionFragment altFlowToOperand = (FlowToInteractionFragment) result1_green[16];

		// collect translated elements
		Object[] result2_black = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_1_2_blackBBBBBBBBBBBB(
						messageSend, combo, operand, messageReceive, step, alt,
						stepToCombo, alternative1ToOperand, guard, spec,
						altFlow, altFlowToOperand);
		if (result2_black == null) {
			throw new RuntimeException(
					"Pattern matching in node [collect translated elements] failed");
		}
		Object[] result2_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_1_2_greenFBBBBBBBBBBBB(
						messageSend, combo, operand, messageReceive, step, alt,
						stepToCombo, alternative1ToOperand, guard, spec,
						altFlow, altFlowToOperand);
		PerformRuleResult ruleresult = (PerformRuleResult) result2_green[0];

		// bookkeeping for edges
		Object[] result3_black = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_1_3_blackBBBBBBBBBBBBBBBBBBBBBBBBBBB(
						ruleresult, packageDeclaration, actor, sysActor,
						sysLine, sysActorToSysLine, messageSend, combo,
						operand, parentOperand, parentCombo, flow,
						flowToParentOperand, messageReceive, line, interaction,
						useCase, useCaseToInteraction, actorToLine, step, alt,
						stepToCombo, alternative1ToOperand, guard, spec,
						altFlow, altFlowToOperand);
		if (result3_black == null) {
			throw new RuntimeException(
					"Pattern matching in node [bookkeeping for edges] failed");
		}
		AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_1_3_greenBBBBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF(
						ruleresult, actor, sysLine, messageSend, combo,
						operand, parentOperand, parentCombo, flow,
						messageReceive, line, interaction, step, alt,
						stepToCombo, alternative1ToOperand, guard, spec,
						altFlow, altFlowToOperand);
		// EMoflonEdge sysLine__messageSend____coveredBy = (EMoflonEdge) result3_green[20];
		// EMoflonEdge messageSend__sysLine____covered = (EMoflonEdge) result3_green[21];
		// EMoflonEdge sysLine__combo____coveredBy = (EMoflonEdge) result3_green[22];
		// EMoflonEdge combo__sysLine____covered = (EMoflonEdge) result3_green[23];
		// EMoflonEdge sysLine__operand____coveredBy = (EMoflonEdge) result3_green[24];
		// EMoflonEdge operand__sysLine____covered = (EMoflonEdge) result3_green[25];
		// EMoflonEdge sysLine__parentOperand____coveredBy = (EMoflonEdge) result3_green[26];
		// EMoflonEdge parentOperand__sysLine____covered = (EMoflonEdge) result3_green[27];
		// EMoflonEdge sysLine__parentCombo____coveredBy = (EMoflonEdge) result3_green[28];
		// EMoflonEdge parentCombo__sysLine____covered = (EMoflonEdge) result3_green[29];
		// EMoflonEdge parentOperand__messageReceive____fragment = (EMoflonEdge) result3_green[30];
		// EMoflonEdge messageReceive__parentOperand____enclosingOperand = (EMoflonEdge) result3_green[31];
		// EMoflonEdge line__parentOperand____coveredBy = (EMoflonEdge) result3_green[32];
		// EMoflonEdge parentOperand__line____covered = (EMoflonEdge) result3_green[33];
		// EMoflonEdge line__parentCombo____coveredBy = (EMoflonEdge) result3_green[34];
		// EMoflonEdge parentCombo__line____covered = (EMoflonEdge) result3_green[35];
		// EMoflonEdge combo__interaction____enclosingInteraction = (EMoflonEdge) result3_green[36];
		// EMoflonEdge interaction__combo____fragment = (EMoflonEdge) result3_green[37];
		// EMoflonEdge flow__step____steps = (EMoflonEdge) result3_green[38];
		// EMoflonEdge step__alt____stepAlternative = (EMoflonEdge) result3_green[39];
		// EMoflonEdge step__actor____actor = (EMoflonEdge) result3_green[40];
		// EMoflonEdge alt__altFlow____ref = (EMoflonEdge) result3_green[41];
		// EMoflonEdge line__operand____coveredBy = (EMoflonEdge) result3_green[42];
		// EMoflonEdge operand__line____covered = (EMoflonEdge) result3_green[43];
		// EMoflonEdge stepToCombo__step____source = (EMoflonEdge) result3_green[44];
		// EMoflonEdge stepToCombo__combo____target = (EMoflonEdge) result3_green[45];
		// EMoflonEdge operand__guard____guard = (EMoflonEdge) result3_green[46];
		// EMoflonEdge alternative1ToOperand__alt____source = (EMoflonEdge) result3_green[47];
		// EMoflonEdge alternative1ToOperand__operand____target = (EMoflonEdge) result3_green[48];
		// EMoflonEdge guard__spec____specification = (EMoflonEdge) result3_green[49];
		// EMoflonEdge altFlowToOperand__altFlow____source = (EMoflonEdge) result3_green[50];
		// EMoflonEdge altFlowToOperand__operand____target = (EMoflonEdge) result3_green[51];

		// perform postprocessing story node is empty
		// register objects
		AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_1_5_expressionBBBBBBBBBBBBBBBBBBBBBBBBBBBB(
						this, ruleresult, packageDeclaration, actor, sysActor,
						sysLine, sysActorToSysLine, messageSend, combo,
						operand, parentOperand, parentCombo, flow,
						flowToParentOperand, messageReceive, line, interaction,
						useCase, useCaseToInteraction, actorToLine, step, alt,
						stepToCombo, alternative1ToOperand, guard, spec,
						altFlow, altFlowToOperand);
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_1_6_expressionFB(ruleresult);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_FWD(Match match) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_2_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation performOperation = (EOperation) result1_bindingAndBlack[0];
		// EClass eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_2_1_greenBF(performOperation);
		IsApplicableRuleResult ruleresult = (IsApplicableRuleResult) result1_green[1];

		// ForEach core match
		Object[] result2_binding = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_2_2_bindingFFFFFFFFB(match);
		if (result2_binding == null) {
			throw new RuntimeException("Binding in node core match failed");
		}
		PackageDeclaration packageDeclaration = (PackageDeclaration) result2_binding[0];
		Actor actor = (Actor) result2_binding[1];
		Actor sysActor = (Actor) result2_binding[2];
		NamedFlow flow = (NamedFlow) result2_binding[3];
		UseCase useCase = (UseCase) result2_binding[4];
		NormalStep step = (NormalStep) result2_binding[5];
		AlternativeFlowAlternative alt = (AlternativeFlowAlternative) result2_binding[6];
		AlternativeFlow altFlow = (AlternativeFlow) result2_binding[7];
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_2_2_blackBBBFFFBFFFBFFBBBB(
						packageDeclaration, actor, sysActor, flow, useCase,
						step, alt, altFlow, match)) {
			Lifeline sysLine = (Lifeline) result2_black[3];
			ActorToLifeline sysActorToSysLine = (ActorToLifeline) result2_black[4];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[5];
			FlowToInteractionFragment flowToParentOperand = (FlowToInteractionFragment) result2_black[7];
			Lifeline line = (Lifeline) result2_black[8];
			Interaction interaction = (Interaction) result2_black[9];
			UseCaseToInteraction useCaseToInteraction = (UseCaseToInteraction) result2_black[11];
			ActorToLifeline actorToLine = (ActorToLifeline) result2_black[12];
			// ForEach find context
			for (Object[] result3_black : AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_2_3_blackBBBBBBFBBBBBBBBBB(
							packageDeclaration, actor, sysActor, sysLine,
							sysActorToSysLine, parentOperand, flow,
							flowToParentOperand, line, interaction, useCase,
							useCaseToInteraction, actorToLine, step, alt,
							altFlow)) {
				CombinedFragment parentCombo = (CombinedFragment) result3_black[6];
				Object[] result3_green = AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_2_3_greenBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFF(
								packageDeclaration, actor, sysActor, sysLine,
								sysActorToSysLine, parentOperand, parentCombo,
								flow, flowToParentOperand, line, interaction,
								useCase, useCaseToInteraction, actorToLine,
								step, alt, altFlow);
				IsApplicableMatch isApplicableMatch = (IsApplicableMatch) result3_green[17];
				// EMoflonEdge packageDeclaration__actor____actors = (EMoflonEdge) result3_green[18];
				// EMoflonEdge packageDeclaration__sysActor____actors = (EMoflonEdge) result3_green[19];
				// EMoflonEdge sysActorToSysLine__sysActor____source = (EMoflonEdge) result3_green[20];
				// EMoflonEdge sysActorToSysLine__sysLine____target = (EMoflonEdge) result3_green[21];
				// EMoflonEdge parentCombo__parentOperand____operand = (EMoflonEdge) result3_green[22];
				// EMoflonEdge flowToParentOperand__flow____source = (EMoflonEdge) result3_green[23];
				// EMoflonEdge flowToParentOperand__parentOperand____target = (EMoflonEdge) result3_green[24];
				// EMoflonEdge line__interaction____interaction = (EMoflonEdge) result3_green[25];
				// EMoflonEdge interaction__line____lifeline = (EMoflonEdge) result3_green[26];
				// EMoflonEdge useCase__flow____flows = (EMoflonEdge) result3_green[27];
				// EMoflonEdge useCaseToInteraction__useCase____source = (EMoflonEdge) result3_green[28];
				// EMoflonEdge useCaseToInteraction__interaction____target = (EMoflonEdge) result3_green[29];
				// EMoflonEdge flow__step____steps = (EMoflonEdge) result3_green[30];
				// EMoflonEdge packageDeclaration__useCase____useCases = (EMoflonEdge) result3_green[31];
				// EMoflonEdge actorToLine__actor____source = (EMoflonEdge) result3_green[32];
				// EMoflonEdge actorToLine__line____target = (EMoflonEdge) result3_green[33];
				// EMoflonEdge step__alt____stepAlternative = (EMoflonEdge) result3_green[34];
				// EMoflonEdge step__actor____actor = (EMoflonEdge) result3_green[35];
				// EMoflonEdge alt__altFlow____ref = (EMoflonEdge) result3_green[36];

				// solve CSP
				Object[] result4_bindingAndBlack = AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_2_4_bindingAndBlackFBBBBBBBBBBBBBBBBBBB(
								this, isApplicableMatch, packageDeclaration,
								actor, sysActor, sysLine, sysActorToSysLine,
								parentOperand, parentCombo, flow,
								flowToParentOperand, line, interaction,
								useCase, useCaseToInteraction, actorToLine,
								step, alt, altFlow);
				if (result4_bindingAndBlack == null) {
					throw new RuntimeException(
							"Pattern matching in node [solve CSP] failed");
				}
				CSP csp = (CSP) result4_bindingAndBlack[0];
				// check CSP
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_2_5_expressionFBB(
								this, csp)) {

					// add match to rule result
					Object[] result6_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_2_6_blackBB(
									ruleresult, isApplicableMatch);
					if (result6_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_2_6_greenBB(
									ruleresult, isApplicableMatch);

				} else {
				}

			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_2_7_expressionFB(ruleresult);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, UseCase useCase, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		match.registerObject("packageDeclaration", packageDeclaration);
		match.registerObject("actor", actor);
		match.registerObject("sysActor", sysActor);
		match.registerObject("flow", flow);
		match.registerObject("useCase", useCase);
		match.registerObject("step", step);
		match.registerObject("alt", alt);
		match.registerObject("altFlow", altFlow);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, UseCase useCase, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("person");
		literal0.setType("");
		Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal1", true, csp);
		literal1.setValue("system");
		literal1.setType("");
		Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal2", true, csp);
		literal2.setValue("ALT");
		literal2.setType("");

		// Create attribute variables
		Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"actor.type", true, csp);
		var_actor_type.setValue(actor.getType());
		var_actor_type.setType("UseCaseDSL.ActorType");
		Variable var_sysActor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"sysActor.type", true, csp);
		var_sysActor_type.setValue(sysActor.getType());
		var_sysActor_type.setType("UseCaseDSL.ActorType");
		Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.type", true, csp);
		var_step_type.setValue(step.getType());
		var_step_type.setType("UseCaseDSL.StepType");

		// Create unbound variables

		// Create constraints
		EqActorType eqActorType = new EqActorType();
		EqActorType eqActorType_0 = new EqActorType();
		EqStepType eqStepType = new EqStepType();

		csp.getConstraints().add(eqActorType);
		csp.getConstraints().add(eqActorType_0);
		csp.getConstraints().add(eqStepType);

		// Solve CSP
		eqActorType.setRuleName("");
		eqActorType.solve(var_actor_type, literal0);
		eqActorType_0.setRuleName("");
		eqActorType_0.solve(var_sysActor_type, literal1);
		eqStepType.setRuleName("");
		eqStepType.solve(var_step_type, literal2);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_checkCsp_FWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			InteractionOperand parentOperand, CombinedFragment parentCombo,
			NamedFlow flow, FlowToInteractionFragment flowToParentOperand,
			Lifeline line, Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("");

		// Create attribute variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", true, csp);
		var_altFlow_name.setValue(altFlow.getName());
		var_altFlow_name.setType("String");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", true, csp);
		var_alt_condition.setValue(alt.getCondition());
		var_alt_condition.setType("String");

		// Create unbound variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", csp);
		var_guard_name.setType("String");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", csp);
		var_spec_value.setType("String");
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", csp);
		var_combo_interactionOperator
				.setType("ModalSequenceDiagram.InteractionOperatorKind");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		EqInterOperKind eqInterOperKind = new EqInterOperKind();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eqInterOperKind);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("packageDeclaration",
				packageDeclaration);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("sysActor", sysActor);
		isApplicableMatch.registerObject("sysLine", sysLine);
		isApplicableMatch
				.registerObject("sysActorToSysLine", sysActorToSysLine);
		isApplicableMatch.registerObject("parentOperand", parentOperand);
		isApplicableMatch.registerObject("parentCombo", parentCombo);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("flowToParentOperand",
				flowToParentOperand);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		isApplicableMatch.registerObject("step", step);
		isApplicableMatch.registerObject("alt", alt);
		isApplicableMatch.registerObject("altFlow", altFlow);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isApplicable_checkCsp_FWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_FWD(PerformRuleResult ruleresult,
			EObject packageDeclaration, EObject actor, EObject sysActor,
			EObject sysLine, EObject sysActorToSysLine, EObject messageSend,
			EObject combo, EObject operand, EObject parentOperand,
			EObject parentCombo, EObject flow, EObject flowToParentOperand,
			EObject messageReceive, EObject line, EObject interaction,
			EObject useCase, EObject useCaseToInteraction, EObject actorToLine,
			EObject step, EObject alt, EObject stepToCombo,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand) {
		ruleresult.registerObject("packageDeclaration", packageDeclaration);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("sysActor", sysActor);
		ruleresult.registerObject("sysLine", sysLine);
		ruleresult.registerObject("sysActorToSysLine", sysActorToSysLine);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("parentOperand", parentOperand);
		ruleresult.registerObject("parentCombo", parentCombo);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("flowToParentOperand", flowToParentOperand);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("actorToLine", actorToLine);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkTypes_FWD(Match match) {
		return true
				&& match.getObject("step")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getNormalStep())
				&& match.getObject("alt")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getAlternativeFlowAlternative())
				&& match.getObject("altFlow")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getAlternativeFlow());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		// initial bindings
		Object[] result1_black = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_10_1_blackBBBBBBBBBBBBB(this,
						match, sysLine, messageSend, combo, operand,
						parentOperand, parentCombo, messageReceive, line,
						interaction, guard, spec);
		if (result1_black == null) {
			throw new RuntimeException(
					"Pattern matching in node [initial bindings] failed");
		}

		// Solve CSP
		Object[] result2_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_10_2_bindingAndBlackFBBBBBBBBBBBBB(
						this, match, sysLine, messageSend, combo, operand,
						parentOperand, parentCombo, messageReceive, line,
						interaction, guard, spec);
		if (result2_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [Solve CSP] failed");
		}
		CSP csp = (CSP) result2_bindingAndBlack[0];
		// Check CSP
		if (AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_10_3_expressionFBB(this, csp)) {

			// collect elements to be translated
			Object[] result4_black = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_10_4_blackBBBBBBBBBBBB(
							match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec);
			if (result4_black == null) {
				throw new RuntimeException(
						"Pattern matching in node [collect elements to be translated] failed");
			}
			AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_10_4_greenBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFF(
							match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec);
			// EMoflonEdge sysLine__messageSend____coveredBy = (EMoflonEdge) result4_green[12];
			// EMoflonEdge messageSend__sysLine____covered = (EMoflonEdge) result4_green[13];
			// EMoflonEdge sysLine__combo____coveredBy = (EMoflonEdge) result4_green[14];
			// EMoflonEdge combo__sysLine____covered = (EMoflonEdge) result4_green[15];
			// EMoflonEdge sysLine__operand____coveredBy = (EMoflonEdge) result4_green[16];
			// EMoflonEdge operand__sysLine____covered = (EMoflonEdge) result4_green[17];
			// EMoflonEdge sysLine__parentOperand____coveredBy = (EMoflonEdge) result4_green[18];
			// EMoflonEdge parentOperand__sysLine____covered = (EMoflonEdge) result4_green[19];
			// EMoflonEdge sysLine__parentCombo____coveredBy = (EMoflonEdge) result4_green[20];
			// EMoflonEdge parentCombo__sysLine____covered = (EMoflonEdge) result4_green[21];
			// EMoflonEdge parentOperand__messageReceive____fragment = (EMoflonEdge) result4_green[22];
			// EMoflonEdge messageReceive__parentOperand____enclosingOperand = (EMoflonEdge) result4_green[23];
			// EMoflonEdge line__parentOperand____coveredBy = (EMoflonEdge) result4_green[24];
			// EMoflonEdge parentOperand__line____covered = (EMoflonEdge) result4_green[25];
			// EMoflonEdge line__parentCombo____coveredBy = (EMoflonEdge) result4_green[26];
			// EMoflonEdge parentCombo__line____covered = (EMoflonEdge) result4_green[27];
			// EMoflonEdge combo__interaction____enclosingInteraction = (EMoflonEdge) result4_green[28];
			// EMoflonEdge interaction__combo____fragment = (EMoflonEdge) result4_green[29];
			// EMoflonEdge line__operand____coveredBy = (EMoflonEdge) result4_green[30];
			// EMoflonEdge operand__line____covered = (EMoflonEdge) result4_green[31];
			// EMoflonEdge operand__guard____guard = (EMoflonEdge) result4_green[32];
			// EMoflonEdge guard__spec____specification = (EMoflonEdge) result4_green[33];

			// collect context elements
			Object[] result5_black = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_10_5_blackBBBBBBBBBBBB(
							match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec);
			if (result5_black == null) {
				throw new RuntimeException(
						"Pattern matching in node [collect context elements] failed");
			}
			AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_10_5_greenBBBBBBFFF(
							match, sysLine, parentOperand, parentCombo, line,
							interaction);
			// EMoflonEdge parentCombo__parentOperand____operand = (EMoflonEdge) result5_green[6];
			// EMoflonEdge line__interaction____interaction = (EMoflonEdge) result5_green[7];
			// EMoflonEdge interaction__line____lifeline = (EMoflonEdge) result5_green[8];

			// register objects to match
			AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_10_6_expressionBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec);
			return AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_10_7_expressionF();
		} else {
			return AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_10_8_expressionF();
		}

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch) {
		// perform transformation
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_11_1_bindingAndBlackFFFFFFFFFFFFFFFFFFFFFBB(
						this, isApplicableMatch);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [perform transformation] failed");
		}
		PackageDeclaration packageDeclaration = (PackageDeclaration) result1_bindingAndBlack[0];
		Actor actor = (Actor) result1_bindingAndBlack[1];
		Actor sysActor = (Actor) result1_bindingAndBlack[2];
		Lifeline sysLine = (Lifeline) result1_bindingAndBlack[3];
		ActorToLifeline sysActorToSysLine = (ActorToLifeline) result1_bindingAndBlack[4];
		MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result1_bindingAndBlack[5];
		CombinedFragment combo = (CombinedFragment) result1_bindingAndBlack[6];
		InteractionOperand operand = (InteractionOperand) result1_bindingAndBlack[7];
		InteractionOperand parentOperand = (InteractionOperand) result1_bindingAndBlack[8];
		CombinedFragment parentCombo = (CombinedFragment) result1_bindingAndBlack[9];
		NamedFlow flow = (NamedFlow) result1_bindingAndBlack[10];
		FlowToInteractionFragment flowToParentOperand = (FlowToInteractionFragment) result1_bindingAndBlack[11];
		MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result1_bindingAndBlack[12];
		Lifeline line = (Lifeline) result1_bindingAndBlack[13];
		Interaction interaction = (Interaction) result1_bindingAndBlack[14];
		UseCase useCase = (UseCase) result1_bindingAndBlack[15];
		UseCaseToInteraction useCaseToInteraction = (UseCaseToInteraction) result1_bindingAndBlack[16];
		ActorToLifeline actorToLine = (ActorToLifeline) result1_bindingAndBlack[17];
		InteractionConstraint guard = (InteractionConstraint) result1_bindingAndBlack[18];
		LiteralString spec = (LiteralString) result1_bindingAndBlack[19];
		CSP csp = (CSP) result1_bindingAndBlack[20];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_11_1_greenBBBBFFFFFFB(actor,
						combo, operand, flow, csp);
		NormalStep step = (NormalStep) result1_green[4];
		AlternativeFlowAlternative alt = (AlternativeFlowAlternative) result1_green[5];
		NormalStepToCombinedFragment stepToCombo = (NormalStepToCombinedFragment) result1_green[6];
		StepAlternativeToInteractionOperand alternative1ToOperand = (StepAlternativeToInteractionOperand) result1_green[7];
		AlternativeFlow altFlow = (AlternativeFlow) result1_green[8];
		FlowToInteractionFragment altFlowToOperand = (FlowToInteractionFragment) result1_green[9];

		// collect translated elements
		Object[] result2_black = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_11_2_blackBBBBBBBBBBBB(
						messageSend, combo, operand, messageReceive, step, alt,
						stepToCombo, alternative1ToOperand, guard, spec,
						altFlow, altFlowToOperand);
		if (result2_black == null) {
			throw new RuntimeException(
					"Pattern matching in node [collect translated elements] failed");
		}
		Object[] result2_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_11_2_greenFBBBBBBBBBBBB(
						messageSend, combo, operand, messageReceive, step, alt,
						stepToCombo, alternative1ToOperand, guard, spec,
						altFlow, altFlowToOperand);
		PerformRuleResult ruleresult = (PerformRuleResult) result2_green[0];

		// bookkeeping for edges
		Object[] result3_black = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_11_3_blackBBBBBBBBBBBBBBBBBBBBBBBBBBB(
						ruleresult, packageDeclaration, actor, sysActor,
						sysLine, sysActorToSysLine, messageSend, combo,
						operand, parentOperand, parentCombo, flow,
						flowToParentOperand, messageReceive, line, interaction,
						useCase, useCaseToInteraction, actorToLine, step, alt,
						stepToCombo, alternative1ToOperand, guard, spec,
						altFlow, altFlowToOperand);
		if (result3_black == null) {
			throw new RuntimeException(
					"Pattern matching in node [bookkeeping for edges] failed");
		}
		AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_11_3_greenBBBBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF(
						ruleresult, actor, sysLine, messageSend, combo,
						operand, parentOperand, parentCombo, flow,
						messageReceive, line, interaction, step, alt,
						stepToCombo, alternative1ToOperand, guard, spec,
						altFlow, altFlowToOperand);
		// EMoflonEdge sysLine__messageSend____coveredBy = (EMoflonEdge) result3_green[20];
		// EMoflonEdge messageSend__sysLine____covered = (EMoflonEdge) result3_green[21];
		// EMoflonEdge sysLine__combo____coveredBy = (EMoflonEdge) result3_green[22];
		// EMoflonEdge combo__sysLine____covered = (EMoflonEdge) result3_green[23];
		// EMoflonEdge sysLine__operand____coveredBy = (EMoflonEdge) result3_green[24];
		// EMoflonEdge operand__sysLine____covered = (EMoflonEdge) result3_green[25];
		// EMoflonEdge sysLine__parentOperand____coveredBy = (EMoflonEdge) result3_green[26];
		// EMoflonEdge parentOperand__sysLine____covered = (EMoflonEdge) result3_green[27];
		// EMoflonEdge sysLine__parentCombo____coveredBy = (EMoflonEdge) result3_green[28];
		// EMoflonEdge parentCombo__sysLine____covered = (EMoflonEdge) result3_green[29];
		// EMoflonEdge parentOperand__messageReceive____fragment = (EMoflonEdge) result3_green[30];
		// EMoflonEdge messageReceive__parentOperand____enclosingOperand = (EMoflonEdge) result3_green[31];
		// EMoflonEdge line__parentOperand____coveredBy = (EMoflonEdge) result3_green[32];
		// EMoflonEdge parentOperand__line____covered = (EMoflonEdge) result3_green[33];
		// EMoflonEdge line__parentCombo____coveredBy = (EMoflonEdge) result3_green[34];
		// EMoflonEdge parentCombo__line____covered = (EMoflonEdge) result3_green[35];
		// EMoflonEdge combo__interaction____enclosingInteraction = (EMoflonEdge) result3_green[36];
		// EMoflonEdge interaction__combo____fragment = (EMoflonEdge) result3_green[37];
		// EMoflonEdge flow__step____steps = (EMoflonEdge) result3_green[38];
		// EMoflonEdge step__alt____stepAlternative = (EMoflonEdge) result3_green[39];
		// EMoflonEdge step__actor____actor = (EMoflonEdge) result3_green[40];
		// EMoflonEdge alt__altFlow____ref = (EMoflonEdge) result3_green[41];
		// EMoflonEdge line__operand____coveredBy = (EMoflonEdge) result3_green[42];
		// EMoflonEdge operand__line____covered = (EMoflonEdge) result3_green[43];
		// EMoflonEdge stepToCombo__step____source = (EMoflonEdge) result3_green[44];
		// EMoflonEdge stepToCombo__combo____target = (EMoflonEdge) result3_green[45];
		// EMoflonEdge operand__guard____guard = (EMoflonEdge) result3_green[46];
		// EMoflonEdge alternative1ToOperand__alt____source = (EMoflonEdge) result3_green[47];
		// EMoflonEdge alternative1ToOperand__operand____target = (EMoflonEdge) result3_green[48];
		// EMoflonEdge guard__spec____specification = (EMoflonEdge) result3_green[49];
		// EMoflonEdge altFlowToOperand__altFlow____source = (EMoflonEdge) result3_green[50];
		// EMoflonEdge altFlowToOperand__operand____target = (EMoflonEdge) result3_green[51];

		// perform postprocessing story node is empty
		// register objects
		AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_11_5_expressionBBBBBBBBBBBBBBBBBBBBBBBBBBBB(
						this, ruleresult, packageDeclaration, actor, sysActor,
						sysLine, sysActorToSysLine, messageSend, combo,
						operand, parentOperand, parentCombo, flow,
						flowToParentOperand, messageReceive, line, interaction,
						useCase, useCaseToInteraction, actorToLine, step, alt,
						stepToCombo, alternative1ToOperand, guard, spec,
						altFlow, altFlowToOperand);
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_11_6_expressionFB(ruleresult);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_BWD(Match match) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_12_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation performOperation = (EOperation) result1_bindingAndBlack[0];
		// EClass eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_12_1_greenBF(performOperation);
		IsApplicableRuleResult ruleresult = (IsApplicableRuleResult) result1_green[1];

		// ForEach core match
		Object[] result2_binding = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_12_2_bindingFFFFFFFFFFFB(match);
		if (result2_binding == null) {
			throw new RuntimeException("Binding in node core match failed");
		}
		Lifeline sysLine = (Lifeline) result2_binding[0];
		MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_binding[1];
		CombinedFragment combo = (CombinedFragment) result2_binding[2];
		InteractionOperand operand = (InteractionOperand) result2_binding[3];
		InteractionOperand parentOperand = (InteractionOperand) result2_binding[4];
		CombinedFragment parentCombo = (CombinedFragment) result2_binding[5];
		MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_binding[6];
		Lifeline line = (Lifeline) result2_binding[7];
		Interaction interaction = (Interaction) result2_binding[8];
		InteractionConstraint guard = (InteractionConstraint) result2_binding[9];
		LiteralString spec = (LiteralString) result2_binding[10];
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_12_2_blackFFBFBBBBBFFBBBFFFBBB(
						sysLine, messageSend, combo, operand, parentOperand,
						parentCombo, messageReceive, line, interaction, guard,
						spec, match)) {
			Actor actor = (Actor) result2_black[0];
			Actor sysActor = (Actor) result2_black[1];
			ActorToLifeline sysActorToSysLine = (ActorToLifeline) result2_black[3];
			NamedFlow flow = (NamedFlow) result2_black[9];
			FlowToInteractionFragment flowToParentOperand = (FlowToInteractionFragment) result2_black[10];
			UseCase useCase = (UseCase) result2_black[14];
			UseCaseToInteraction useCaseToInteraction = (UseCaseToInteraction) result2_black[15];
			ActorToLifeline actorToLine = (ActorToLifeline) result2_black[16];
			// ForEach find context
			for (Object[] result3_black : AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_12_3_blackFBBBBBBBBBBBBBBBBBBB(
							actor, sysActor, sysLine, sysActorToSysLine,
							messageSend, combo, operand, parentOperand,
							parentCombo, flow, flowToParentOperand,
							messageReceive, line, interaction, useCase,
							useCaseToInteraction, actorToLine, guard, spec)) {
				PackageDeclaration packageDeclaration = (PackageDeclaration) result3_black[0];
				Object[] result3_green = AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_12_3_greenBBBBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF(
								packageDeclaration, actor, sysActor, sysLine,
								sysActorToSysLine, messageSend, combo, operand,
								parentOperand, parentCombo, flow,
								flowToParentOperand, messageReceive, line,
								interaction, useCase, useCaseToInteraction,
								actorToLine, guard, spec);
				IsApplicableMatch isApplicableMatch = (IsApplicableMatch) result3_green[20];
				// EMoflonEdge packageDeclaration__actor____actors = (EMoflonEdge) result3_green[21];
				// EMoflonEdge packageDeclaration__sysActor____actors = (EMoflonEdge) result3_green[22];
				// EMoflonEdge sysLine__messageSend____coveredBy = (EMoflonEdge) result3_green[23];
				// EMoflonEdge messageSend__sysLine____covered = (EMoflonEdge) result3_green[24];
				// EMoflonEdge sysLine__combo____coveredBy = (EMoflonEdge) result3_green[25];
				// EMoflonEdge combo__sysLine____covered = (EMoflonEdge) result3_green[26];
				// EMoflonEdge sysLine__operand____coveredBy = (EMoflonEdge) result3_green[27];
				// EMoflonEdge operand__sysLine____covered = (EMoflonEdge) result3_green[28];
				// EMoflonEdge sysLine__parentOperand____coveredBy = (EMoflonEdge) result3_green[29];
				// EMoflonEdge parentOperand__sysLine____covered = (EMoflonEdge) result3_green[30];
				// EMoflonEdge sysLine__parentCombo____coveredBy = (EMoflonEdge) result3_green[31];
				// EMoflonEdge parentCombo__sysLine____covered = (EMoflonEdge) result3_green[32];
				// EMoflonEdge sysActorToSysLine__sysActor____source = (EMoflonEdge) result3_green[33];
				// EMoflonEdge sysActorToSysLine__sysLine____target = (EMoflonEdge) result3_green[34];
				// EMoflonEdge parentCombo__parentOperand____operand = (EMoflonEdge) result3_green[35];
				// EMoflonEdge parentOperand__messageReceive____fragment = (EMoflonEdge) result3_green[36];
				// EMoflonEdge messageReceive__parentOperand____enclosingOperand = (EMoflonEdge) result3_green[37];
				// EMoflonEdge flowToParentOperand__flow____source = (EMoflonEdge) result3_green[38];
				// EMoflonEdge flowToParentOperand__parentOperand____target = (EMoflonEdge) result3_green[39];
				// EMoflonEdge line__parentOperand____coveredBy = (EMoflonEdge) result3_green[40];
				// EMoflonEdge parentOperand__line____covered = (EMoflonEdge) result3_green[41];
				// EMoflonEdge line__parentCombo____coveredBy = (EMoflonEdge) result3_green[42];
				// EMoflonEdge parentCombo__line____covered = (EMoflonEdge) result3_green[43];
				// EMoflonEdge combo__interaction____enclosingInteraction = (EMoflonEdge) result3_green[44];
				// EMoflonEdge interaction__combo____fragment = (EMoflonEdge) result3_green[45];
				// EMoflonEdge line__interaction____interaction = (EMoflonEdge) result3_green[46];
				// EMoflonEdge interaction__line____lifeline = (EMoflonEdge) result3_green[47];
				// EMoflonEdge useCase__flow____flows = (EMoflonEdge) result3_green[48];
				// EMoflonEdge useCaseToInteraction__useCase____source = (EMoflonEdge) result3_green[49];
				// EMoflonEdge useCaseToInteraction__interaction____target = (EMoflonEdge) result3_green[50];
				// EMoflonEdge packageDeclaration__useCase____useCases = (EMoflonEdge) result3_green[51];
				// EMoflonEdge actorToLine__actor____source = (EMoflonEdge) result3_green[52];
				// EMoflonEdge actorToLine__line____target = (EMoflonEdge) result3_green[53];
				// EMoflonEdge line__operand____coveredBy = (EMoflonEdge) result3_green[54];
				// EMoflonEdge operand__line____covered = (EMoflonEdge) result3_green[55];
				// EMoflonEdge operand__guard____guard = (EMoflonEdge) result3_green[56];
				// EMoflonEdge guard__spec____specification = (EMoflonEdge) result3_green[57];

				// solve CSP
				Object[] result4_bindingAndBlack = AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_12_4_bindingAndBlackFBBBBBBBBBBBBBBBBBBBBBB(
								this, isApplicableMatch, packageDeclaration,
								actor, sysActor, sysLine, sysActorToSysLine,
								messageSend, combo, operand, parentOperand,
								parentCombo, flow, flowToParentOperand,
								messageReceive, line, interaction, useCase,
								useCaseToInteraction, actorToLine, guard, spec);
				if (result4_bindingAndBlack == null) {
					throw new RuntimeException(
							"Pattern matching in node [solve CSP] failed");
				}
				CSP csp = (CSP) result4_bindingAndBlack[0];
				// check CSP
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_12_5_expressionFBB(
								this, csp)) {

					// add match to rule result
					Object[] result6_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_12_6_blackBB(
									ruleresult, isApplicableMatch);
					if (result6_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_12_6_greenBB(
									ruleresult, isApplicableMatch);

				} else {
				}

			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_12_7_expressionFB(ruleresult);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		match.registerObject("sysLine", sysLine);
		match.registerObject("messageSend", messageSend);
		match.registerObject("combo", combo);
		match.registerObject("operand", operand);
		match.registerObject("parentOperand", parentOperand);
		match.registerObject("parentCombo", parentCombo);
		match.registerObject("messageReceive", messageReceive);
		match.registerObject("line", line);
		match.registerObject("interaction", interaction);
		match.registerObject("guard", guard);
		match.registerObject("spec", spec);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("");

		// Create attribute variables
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", true, csp);
		var_combo_interactionOperator.setValue(combo.getInteractionOperator());
		var_combo_interactionOperator
				.setType("ModalSequenceDiagram.InteractionOperatorKind");

		// Create unbound variables

		// Create constraints
		EqInterOperKind eqInterOperKind = new EqInterOperKind();

		csp.getConstraints().add(eqInterOperKind);

		// Solve CSP
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_checkCsp_BWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo, NamedFlow flow,
			FlowToInteractionFragment flowToParentOperand,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, InteractionConstraint guard,
			LiteralString spec) {// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("person");
		literal0.setType("");
		Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal1", true, csp);
		literal1.setValue("system");
		literal1.setType("");
		Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal2", true, csp);
		literal2.setValue("ALT");
		literal2.setType("");

		// Create attribute variables
		Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"actor.type", true, csp);
		var_actor_type.setValue(actor.getType());
		var_actor_type.setType("UseCaseDSL.ActorType");
		Variable var_sysActor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"sysActor.type", true, csp);
		var_sysActor_type.setValue(sysActor.getType());
		var_sysActor_type.setType("UseCaseDSL.ActorType");
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", true, csp);
		var_guard_name.setValue(guard.getName());
		var_guard_name.setType("String");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", true, csp);
		var_spec_value.setValue(spec.getValue());
		var_spec_value.setType("String");

		// Create unbound variables
		Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.type", csp);
		var_step_type.setType("UseCaseDSL.StepType");
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", csp);
		var_altFlow_name.setType("String");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", csp);
		var_alt_condition.setType("String");

		// Create constraints
		EqActorType eqActorType = new EqActorType();
		EqActorType eqActorType_0 = new EqActorType();
		EqStepType eqStepType = new EqStepType();
		Eq eq = new Eq();
		Eq eq_0 = new Eq();

		csp.getConstraints().add(eqActorType);
		csp.getConstraints().add(eqActorType_0);
		csp.getConstraints().add(eqStepType);
		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);

		// Solve CSP
		eqActorType.setRuleName("");
		eqActorType.solve(var_actor_type, literal0);
		eqActorType_0.setRuleName("");
		eqActorType_0.solve(var_sysActor_type, literal1);
		eqStepType.setRuleName("");
		eqStepType.solve(var_step_type, literal2);
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("packageDeclaration",
				packageDeclaration);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("sysActor", sysActor);
		isApplicableMatch.registerObject("sysLine", sysLine);
		isApplicableMatch
				.registerObject("sysActorToSysLine", sysActorToSysLine);
		isApplicableMatch.registerObject("messageSend", messageSend);
		isApplicableMatch.registerObject("combo", combo);
		isApplicableMatch.registerObject("operand", operand);
		isApplicableMatch.registerObject("parentOperand", parentOperand);
		isApplicableMatch.registerObject("parentCombo", parentCombo);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("flowToParentOperand",
				flowToParentOperand);
		isApplicableMatch.registerObject("messageReceive", messageReceive);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		isApplicableMatch.registerObject("guard", guard);
		isApplicableMatch.registerObject("spec", spec);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isApplicable_checkCsp_BWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_BWD(PerformRuleResult ruleresult,
			EObject packageDeclaration, EObject actor, EObject sysActor,
			EObject sysLine, EObject sysActorToSysLine, EObject messageSend,
			EObject combo, EObject operand, EObject parentOperand,
			EObject parentCombo, EObject flow, EObject flowToParentOperand,
			EObject messageReceive, EObject line, EObject interaction,
			EObject useCase, EObject useCaseToInteraction, EObject actorToLine,
			EObject step, EObject alt, EObject stepToCombo,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand) {
		ruleresult.registerObject("packageDeclaration", packageDeclaration);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("sysActor", sysActor);
		ruleresult.registerObject("sysLine", sysLine);
		ruleresult.registerObject("sysActorToSysLine", sysActorToSysLine);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("parentOperand", parentOperand);
		ruleresult.registerObject("parentCombo", parentCombo);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("flowToParentOperand", flowToParentOperand);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("actorToLine", actorToLine);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkTypes_BWD(Match match) {
		return true
				&& match.getObject("messageSend")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getMessageOccurrenceSpecification())
				&& match.getObject("combo")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getCombinedFragment())
				&& match.getObject("operand")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getInteractionOperand())
				&& match.getObject("messageReceive")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getMessageOccurrenceSpecification())
				&& match.getObject("guard")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getInteractionConstraint())
				&& match.getObject("spec")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getLiteralString());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_207(
			EMoflonEdge _edge_coveredBy) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_20_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_20_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_20_2_blackFFFFFFFFFFFB(_edge_coveredBy)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_20_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_20_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_20_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_20_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_20_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_20_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_208(
			EMoflonEdge _edge_covered) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_21_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_21_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_21_2_blackFFFFFFFFFFFB(_edge_covered)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_21_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_21_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_21_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_21_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_21_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_21_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_209(
			EMoflonEdge _edge_coveredBy) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_22_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_22_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_22_2_blackFFFFFFFFFFFB(_edge_coveredBy)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_22_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_22_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_22_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_22_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_22_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_22_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_210(
			EMoflonEdge _edge_covered) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_23_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_23_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_23_2_blackFFFFFFFFFFFB(_edge_covered)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_23_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_23_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_23_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_23_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_23_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_23_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_211(
			EMoflonEdge _edge_coveredBy) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_24_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_24_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_24_2_blackFFFFFFFFFFFB(_edge_coveredBy)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_24_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_24_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_24_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_24_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_24_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_24_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_212(
			EMoflonEdge _edge_covered) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_25_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_25_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_25_2_blackFFFFFFFFFFFB(_edge_covered)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_25_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_25_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_25_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_25_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_25_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_25_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_213(
			EMoflonEdge _edge_coveredBy) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_26_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_26_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_26_2_blackFFFFFFFFFFFB(_edge_coveredBy)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_26_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_26_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_26_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_26_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_26_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_26_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_214(
			EMoflonEdge _edge_covered) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_27_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_27_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_27_2_blackFFFFFFFFFFFB(_edge_covered)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_27_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_27_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_27_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_27_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_27_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_27_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_215(
			EMoflonEdge _edge_coveredBy) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_28_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_28_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_28_2_blackFFFFFFFFFFFB(_edge_coveredBy)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_28_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_28_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_28_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_28_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_28_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_28_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_216(
			EMoflonEdge _edge_covered) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_29_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_29_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_29_2_blackFFFFFFFFFFFB(_edge_covered)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_29_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_29_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_29_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_29_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_29_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_29_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_217(
			EMoflonEdge _edge_fragment) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_30_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_30_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_30_2_blackFFFFFFFFFFFB(_edge_fragment)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_30_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_30_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_30_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_30_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_30_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_30_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_218(
			EMoflonEdge _edge_enclosingOperand) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_31_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_31_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_31_2_blackFFFFFFFFFFFB(_edge_enclosingOperand)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_31_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_31_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_31_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_31_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_31_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_31_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_219(
			EMoflonEdge _edge_coveredBy) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_32_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_32_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_32_2_blackFFFFFFFFFFFB(_edge_coveredBy)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_32_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_32_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_32_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_32_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_32_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_32_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_220(
			EMoflonEdge _edge_covered) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_33_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_33_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_33_2_blackFFFFFFFFFFFB(_edge_covered)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_33_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_33_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_33_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_33_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_33_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_33_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_221(
			EMoflonEdge _edge_coveredBy) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_34_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_34_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_34_2_blackFFFFFFFFFFFB(_edge_coveredBy)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_34_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_34_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_34_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_34_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_34_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_34_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_222(
			EMoflonEdge _edge_covered) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_35_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_35_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_35_2_blackFFFFFFFFFFFB(_edge_covered)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_35_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_35_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_35_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_35_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_35_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_35_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_223(
			EMoflonEdge _edge_enclosingInteraction) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_36_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_36_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_36_2_blackFFFFFFFFFFFB(_edge_enclosingInteraction)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_36_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_36_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_36_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_36_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_36_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_36_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_224(
			EMoflonEdge _edge_fragment) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_37_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_37_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_37_2_blackFFFFFFFFFFFB(_edge_fragment)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_37_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_37_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_37_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_37_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_37_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_37_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_259(
			EMoflonEdge _edge_steps) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_38_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_38_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_38_2_blackFFFFFFFFB(_edge_steps)) {
			PackageDeclaration packageDeclaration = (PackageDeclaration) result2_black[0];
			Actor actor = (Actor) result2_black[1];
			Actor sysActor = (Actor) result2_black[2];
			NamedFlow flow = (NamedFlow) result2_black[3];
			UseCase useCase = (UseCase) result2_black[4];
			NormalStep step = (NormalStep) result2_black[5];
			AlternativeFlowAlternative alt = (AlternativeFlowAlternative) result2_black[6];
			AlternativeFlow altFlow = (AlternativeFlow) result2_black[7];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_38_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_38_3_expressionFBBBBBBBBBB(
							this, match, packageDeclaration, actor, sysActor,
							flow, useCase, step, alt, altFlow)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_38_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_38_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_38_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_38_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_260(
			EMoflonEdge _edge_stepAlternative) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_39_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_39_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_39_2_blackFFFFFFFFB(_edge_stepAlternative)) {
			PackageDeclaration packageDeclaration = (PackageDeclaration) result2_black[0];
			Actor actor = (Actor) result2_black[1];
			Actor sysActor = (Actor) result2_black[2];
			NamedFlow flow = (NamedFlow) result2_black[3];
			UseCase useCase = (UseCase) result2_black[4];
			NormalStep step = (NormalStep) result2_black[5];
			AlternativeFlowAlternative alt = (AlternativeFlowAlternative) result2_black[6];
			AlternativeFlow altFlow = (AlternativeFlow) result2_black[7];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_39_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_39_3_expressionFBBBBBBBBBB(
							this, match, packageDeclaration, actor, sysActor,
							flow, useCase, step, alt, altFlow)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_39_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_39_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_39_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_39_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_261(
			EMoflonEdge _edge_actor) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_40_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_40_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_40_2_blackFFFFFFFFB(_edge_actor)) {
			PackageDeclaration packageDeclaration = (PackageDeclaration) result2_black[0];
			Actor actor = (Actor) result2_black[1];
			Actor sysActor = (Actor) result2_black[2];
			NamedFlow flow = (NamedFlow) result2_black[3];
			UseCase useCase = (UseCase) result2_black[4];
			NormalStep step = (NormalStep) result2_black[5];
			AlternativeFlowAlternative alt = (AlternativeFlowAlternative) result2_black[6];
			AlternativeFlow altFlow = (AlternativeFlow) result2_black[7];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_40_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_40_3_expressionFBBBBBBBBBB(
							this, match, packageDeclaration, actor, sysActor,
							flow, useCase, step, alt, altFlow)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_40_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_40_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_40_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_40_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_262(
			EMoflonEdge _edge_ref) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_41_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_41_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_41_2_blackFFFFFFFFB(_edge_ref)) {
			PackageDeclaration packageDeclaration = (PackageDeclaration) result2_black[0];
			Actor actor = (Actor) result2_black[1];
			Actor sysActor = (Actor) result2_black[2];
			NamedFlow flow = (NamedFlow) result2_black[3];
			UseCase useCase = (UseCase) result2_black[4];
			NormalStep step = (NormalStep) result2_black[5];
			AlternativeFlowAlternative alt = (AlternativeFlowAlternative) result2_black[6];
			AlternativeFlow altFlow = (AlternativeFlow) result2_black[7];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_41_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_41_3_expressionFBBBBBBBBBB(
							this, match, packageDeclaration, actor, sysActor,
							flow, useCase, step, alt, altFlow)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_41_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_41_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_41_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_41_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_225(
			EMoflonEdge _edge_coveredBy) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_42_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_42_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_42_2_blackFFFFFFFFFFFB(_edge_coveredBy)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_42_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_42_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_42_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_42_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_42_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_42_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_226(
			EMoflonEdge _edge_covered) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_43_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_43_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_43_2_blackFFFFFFFFFFFB(_edge_covered)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_43_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_43_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_43_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_43_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_43_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_43_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_227(
			EMoflonEdge _edge_guard) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_44_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_44_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_44_2_blackFFFFFFFFFFFB(_edge_guard)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_44_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_44_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_44_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_44_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_44_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_44_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_228(
			EMoflonEdge _edge_specification) {
		// prepare return value
		Object[] result1_bindingAndBlack = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_45_1_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching in node [prepare return value] failed");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_45_1_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach test core match and DECs
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_45_2_blackFFFFFFFFFFFB(_edge_specification)) {
			Lifeline sysLine = (Lifeline) result2_black[0];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result2_black[1];
			CombinedFragment combo = (CombinedFragment) result2_black[2];
			InteractionOperand operand = (InteractionOperand) result2_black[3];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[4];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[5];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result2_black[6];
			Lifeline line = (Lifeline) result2_black[7];
			Interaction interaction = (Interaction) result2_black[8];
			InteractionConstraint guard = (InteractionConstraint) result2_black[9];
			LiteralString spec = (LiteralString) result2_black[10];
			Object[] result2_green = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_45_2_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// bookkeeping with generic isAppropriate method
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_45_3_expressionFBBBBBBBBBBBBB(
							this, match, sysLine, messageSend, combo, operand,
							parentOperand, parentCombo, messageReceive, line,
							interaction, guard, spec)) {
				// Ensure that the correct types of elements are matched
				if (AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_45_4_expressionFBB(
								this, match)) {

					// Add match to rule result
					Object[] result5_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_45_5_blackBBB(
									match, __performOperation, __result);
					if (result5_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [Add match to rule result] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_45_5_greenBBB(
									match, __performOperation, __result);

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_45_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RuleResult checkAttributes_FWD(TripleMatch tripleMatch) {// TODO: NICO!!!
		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RuleResult checkAttributes_BWD(TripleMatch tripleMatch) {// TODO: NICO!!!
		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ModelgeneratorRuleResult generateModel(
			RuleEntryContainer ruleEntryContainer,
			ActorToLifeline actorToLineParameter) {
		// create result
		Object[] result1_black = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_48_1_blackB(this);
		if (result1_black == null) {
			throw new RuntimeException(
					"Pattern matching in node [create result] failed");
		}
		Object[] result1_green = AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_48_1_greenFF();
		IsApplicableMatch isApplicableMatch = (IsApplicableMatch) result1_green[0];
		ModelgeneratorRuleResult ruleResult = (ModelgeneratorRuleResult) result1_green[1];

		// ForEach is applicable core
		for (Object[] result2_black : AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_48_2_blackFFFFFFFFFFFFFFFBB(
						ruleEntryContainer, ruleResult)) {
			// RuleEntryList actorToLineList = (RuleEntryList) result2_black[0];
			PackageDeclaration packageDeclaration = (PackageDeclaration) result2_black[1];
			Actor actor = (Actor) result2_black[2];
			ActorToLifeline actorToLine = (ActorToLifeline) result2_black[3];
			Lifeline line = (Lifeline) result2_black[4];
			Interaction interaction = (Interaction) result2_black[5];
			UseCaseToInteraction useCaseToInteraction = (UseCaseToInteraction) result2_black[6];
			UseCase useCase = (UseCase) result2_black[7];
			NamedFlow flow = (NamedFlow) result2_black[8];
			FlowToInteractionFragment flowToParentOperand = (FlowToInteractionFragment) result2_black[9];
			InteractionOperand parentOperand = (InteractionOperand) result2_black[10];
			CombinedFragment parentCombo = (CombinedFragment) result2_black[11];
			Actor sysActor = (Actor) result2_black[12];
			ActorToLifeline sysActorToSysLine = (ActorToLifeline) result2_black[13];
			Lifeline sysLine = (Lifeline) result2_black[14];

			// solve CSP
			Object[] result3_bindingAndBlack = AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_48_3_bindingAndBlackFBBBBBBBBBBBBBBBBB(
							this, isApplicableMatch, packageDeclaration, actor,
							sysActor, sysLine, sysActorToSysLine,
							parentOperand, parentCombo, flow,
							flowToParentOperand, line, interaction, useCase,
							useCaseToInteraction, actorToLine, ruleResult);
			if (result3_bindingAndBlack == null) {
				throw new RuntimeException(
						"Pattern matching in node [solve CSP] failed");
			}
			CSP csp = (CSP) result3_bindingAndBlack[0];
			// check CSP
			if (AltUserStepNFToComboRuleImpl
					.pattern_AltUserStepNFToComboRule_48_4_expressionFBB(this,
							csp)) {
				// check nacs
				Object[] result5_black = AltUserStepNFToComboRuleImpl
						.pattern_AltUserStepNFToComboRule_48_5_blackBBBBBBBBBBBBBB(
								packageDeclaration, actor, sysActor, sysLine,
								sysActorToSysLine, parentOperand, parentCombo,
								flow, flowToParentOperand, line, interaction,
								useCase, useCaseToInteraction, actorToLine);
				if (result5_black != null) {

					// perform
					Object[] result6_black = AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_48_6_blackBBBBBBBBBBBBBBB(
									packageDeclaration, actor, sysActor,
									sysLine, sysActorToSysLine, parentOperand,
									parentCombo, flow, flowToParentOperand,
									line, interaction, useCase,
									useCaseToInteraction, actorToLine,
									ruleResult);
					if (result6_black == null) {
						throw new RuntimeException(
								"Pattern matching in node [perform] failed");
					}
					AltUserStepNFToComboRuleImpl
							.pattern_AltUserStepNFToComboRule_48_6_greenBBFFFBBBFBBFFFFFFFFBB(
									actor, sysLine, parentOperand, parentCombo,
									flow, line, interaction, ruleResult, csp);
					// MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result6_green[2];
					// CombinedFragment combo = (CombinedFragment) result6_green[3];
					// InteractionOperand operand = (InteractionOperand) result6_green[4];
					// MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result6_green[8];
					// NormalStep step = (NormalStep) result6_green[11];
					// AlternativeFlowAlternative alt = (AlternativeFlowAlternative) result6_green[12];
					// NormalStepToCombinedFragment stepToCombo = (NormalStepToCombinedFragment) result6_green[13];
					// StepAlternativeToInteractionOperand alternative1ToOperand = (StepAlternativeToInteractionOperand) result6_green[14];
					// InteractionConstraint guard = (InteractionConstraint) result6_green[15];
					// LiteralString spec = (LiteralString) result6_green[16];
					// AlternativeFlow altFlow = (AlternativeFlow) result6_green[17];
					// FlowToInteractionFragment altFlowToOperand = (FlowToInteractionFragment) result6_green[18];

				} else {
				}

			} else {
			}

		}
		return AltUserStepNFToComboRuleImpl
				.pattern_AltUserStepNFToComboRule_48_7_expressionFB(ruleResult);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			InteractionOperand parentOperand, CombinedFragment parentCombo,
			NamedFlow flow, FlowToInteractionFragment flowToParentOperand,
			Lifeline line, Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, ModelgeneratorRuleResult ruleResult) {// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("person");
		literal0.setType("");
		Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal1", true, csp);
		literal1.setValue("system");
		literal1.setType("");
		Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal2", true, csp);
		literal2.setValue("ALT");
		literal2.setType("");
		Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal3", true, csp);
		literal3.setValue("alt");
		literal3.setType("");

		// Create attribute variables
		Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"actor.type", true, csp);
		var_actor_type.setValue(actor.getType());
		var_actor_type.setType("UseCaseDSL.ActorType");
		Variable var_sysActor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"sysActor.type", true, csp);
		var_sysActor_type.setValue(sysActor.getType());
		var_sysActor_type.setType("UseCaseDSL.ActorType");

		// Create unbound variables
		Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.type", csp);
		var_step_type.setType("UseCaseDSL.StepType");
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", csp);
		var_altFlow_name.setType("String");
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", csp);
		var_guard_name.setType("String");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", csp);
		var_alt_condition.setType("String");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", csp);
		var_spec_value.setType("String");
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", csp);
		var_combo_interactionOperator
				.setType("ModalSequenceDiagram.InteractionOperatorKind");

		// Create constraints
		EqActorType eqActorType = new EqActorType();
		EqActorType eqActorType_0 = new EqActorType();
		EqStepType eqStepType = new EqStepType();
		EqInterOperKind eqInterOperKind = new EqInterOperKind();
		Eq eq = new Eq();
		Eq eq_0 = new Eq();

		csp.getConstraints().add(eqActorType);
		csp.getConstraints().add(eqActorType_0);
		csp.getConstraints().add(eqStepType);
		csp.getConstraints().add(eqInterOperKind);
		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);

		// Solve CSP
		eqActorType.setRuleName("");
		eqActorType.solve(var_actor_type, literal0);
		eqActorType_0.setRuleName("");
		eqActorType_0.solve(var_sysActor_type, literal1);
		eqStepType.setRuleName("");
		eqStepType.solve(var_step_type, literal2);
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal3);
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("packageDeclaration",
				packageDeclaration);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("sysActor", sysActor);
		isApplicableMatch.registerObject("sysLine", sysLine);
		isApplicableMatch
				.registerObject("sysActorToSysLine", sysActorToSysLine);
		isApplicableMatch.registerObject("parentOperand", parentOperand);
		isApplicableMatch.registerObject("parentCombo", parentCombo);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("flowToParentOperand",
				flowToParentOperand);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean generateModel_checkCsp_BWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eInvoke(int operationID, EList<?> arguments)
			throws InvocationTargetException {
		switch (operationID) {
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_PACKAGEDECLARATION_ACTOR_ACTOR_NAMEDFLOW_USECASE_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW:
			return isAppropriate_FWD((Match) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(NamedFlow) arguments.get(4), (UseCase) arguments.get(5),
					(NormalStep) arguments.get(6),
					(AlternativeFlowAlternative) arguments.get(7),
					(AlternativeFlow) arguments.get(8));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
			return perform_FWD((IsApplicableMatch) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH:
			return isApplicable_FWD((Match) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_PACKAGEDECLARATION_ACTOR_ACTOR_NAMEDFLOW_USECASE_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW:
			registerObjectsToMatch_FWD((Match) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(NamedFlow) arguments.get(4), (UseCase) arguments.get(5),
					(NormalStep) arguments.get(6),
					(AlternativeFlowAlternative) arguments.get(7),
					(AlternativeFlow) arguments.get(8));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_PACKAGEDECLARATION_ACTOR_ACTOR_NAMEDFLOW_USECASE_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW:
			return isAppropriate_solveCsp_FWD((Match) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(NamedFlow) arguments.get(4), (UseCase) arguments.get(5),
					(NormalStep) arguments.get(6),
					(AlternativeFlowAlternative) arguments.get(7),
					(AlternativeFlow) arguments.get(8));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP:
			return isAppropriate_checkCsp_FWD((CSP) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_PACKAGEDECLARATION_ACTOR_ACTOR_LIFELINE_ACTORTOLIFELINE_INTERACTIONOPERAND_COMBINEDFRAGMENT_NAMEDFLOW_FLOWTOINTERACTIONFRAGMENT_LIFELINE_INTERACTION_USECASE_USECASETOINTERACTION_ACTORTOLIFELINE_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW:
			return isApplicable_solveCsp_FWD(
					(IsApplicableMatch) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(Lifeline) arguments.get(4),
					(ActorToLifeline) arguments.get(5),
					(InteractionOperand) arguments.get(6),
					(CombinedFragment) arguments.get(7),
					(NamedFlow) arguments.get(8),
					(FlowToInteractionFragment) arguments.get(9),
					(Lifeline) arguments.get(10),
					(Interaction) arguments.get(11),
					(UseCase) arguments.get(12),
					(UseCaseToInteraction) arguments.get(13),
					(ActorToLifeline) arguments.get(14),
					(NormalStep) arguments.get(15),
					(AlternativeFlowAlternative) arguments.get(16),
					(AlternativeFlow) arguments.get(17));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP:
			return isApplicable_checkCsp_FWD((CSP) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_FWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23), (EObject) arguments.get(24),
					(EObject) arguments.get(25), (EObject) arguments.get(26));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH:
			return checkTypes_FWD((Match) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_LIFELINE_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONOPERAND_COMBINEDFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_INTERACTION_INTERACTIONCONSTRAINT_LITERALSTRING:
			return isAppropriate_BWD((Match) arguments.get(0),
					(Lifeline) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(CombinedFragment) arguments.get(3),
					(InteractionOperand) arguments.get(4),
					(InteractionOperand) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(MessageOccurrenceSpecification) arguments.get(7),
					(Lifeline) arguments.get(8),
					(Interaction) arguments.get(9),
					(InteractionConstraint) arguments.get(10),
					(LiteralString) arguments.get(11));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH:
			return perform_BWD((IsApplicableMatch) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH:
			return isApplicable_BWD((Match) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_LIFELINE_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONOPERAND_COMBINEDFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_INTERACTION_INTERACTIONCONSTRAINT_LITERALSTRING:
			registerObjectsToMatch_BWD((Match) arguments.get(0),
					(Lifeline) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(CombinedFragment) arguments.get(3),
					(InteractionOperand) arguments.get(4),
					(InteractionOperand) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(MessageOccurrenceSpecification) arguments.get(7),
					(Lifeline) arguments.get(8),
					(Interaction) arguments.get(9),
					(InteractionConstraint) arguments.get(10),
					(LiteralString) arguments.get(11));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_LIFELINE_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONOPERAND_COMBINEDFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_INTERACTION_INTERACTIONCONSTRAINT_LITERALSTRING:
			return isAppropriate_solveCsp_BWD((Match) arguments.get(0),
					(Lifeline) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(CombinedFragment) arguments.get(3),
					(InteractionOperand) arguments.get(4),
					(InteractionOperand) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(MessageOccurrenceSpecification) arguments.get(7),
					(Lifeline) arguments.get(8),
					(Interaction) arguments.get(9),
					(InteractionConstraint) arguments.get(10),
					(LiteralString) arguments.get(11));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP:
			return isAppropriate_checkCsp_BWD((CSP) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_PACKAGEDECLARATION_ACTOR_ACTOR_LIFELINE_ACTORTOLIFELINE_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONOPERAND_COMBINEDFRAGMENT_NAMEDFLOW_FLOWTOINTERACTIONFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_INTERACTION_USECASE_USECASETOINTERACTION_ACTORTOLIFELINE_INTERACTIONCONSTRAINT_LITERALSTRING:
			return isApplicable_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(Lifeline) arguments.get(4),
					(ActorToLifeline) arguments.get(5),
					(MessageOccurrenceSpecification) arguments.get(6),
					(CombinedFragment) arguments.get(7),
					(InteractionOperand) arguments.get(8),
					(InteractionOperand) arguments.get(9),
					(CombinedFragment) arguments.get(10),
					(NamedFlow) arguments.get(11),
					(FlowToInteractionFragment) arguments.get(12),
					(MessageOccurrenceSpecification) arguments.get(13),
					(Lifeline) arguments.get(14),
					(Interaction) arguments.get(15),
					(UseCase) arguments.get(16),
					(UseCaseToInteraction) arguments.get(17),
					(ActorToLifeline) arguments.get(18),
					(InteractionConstraint) arguments.get(19),
					(LiteralString) arguments.get(20));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP:
			return isApplicable_checkCsp_BWD((CSP) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_BWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23), (EObject) arguments.get(24),
					(EObject) arguments.get(25), (EObject) arguments.get(26));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH:
			return checkTypes_BWD((Match) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_207__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_207((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_208__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_208((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_209__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_209((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_210__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_210((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_211__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_211((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_212__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_212((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_213__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_213((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_214__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_214((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_215__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_215((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_216__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_216((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_217__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_217((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_218__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_218((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_219__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_219((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_220__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_220((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_221__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_221((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_222__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_222((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_223__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_223((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_224__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_224((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_259__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_259((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_260__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_260((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_261__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_261((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_262__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_262((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_225__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_225((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_226__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_226((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_227__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_227((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_228__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_228((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH:
			return checkAttributes_FWD((TripleMatch) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH:
			return checkAttributes_BWD((TripleMatch) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___GENERATE_MODEL__RULEENTRYCONTAINER_ACTORTOLIFELINE:
			return generateModel((RuleEntryContainer) arguments.get(0),
					(ActorToLifeline) arguments.get(1));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___GENERATE_MODEL_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_PACKAGEDECLARATION_ACTOR_ACTOR_LIFELINE_ACTORTOLIFELINE_INTERACTIONOPERAND_COMBINEDFRAGMENT_NAMEDFLOW_FLOWTOINTERACTIONFRAGMENT_LIFELINE_INTERACTION_USECASE_USECASETOINTERACTION_ACTORTOLIFELINE_MODELGENERATORRULERESULT:
			return generateModel_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(Lifeline) arguments.get(4),
					(ActorToLifeline) arguments.get(5),
					(InteractionOperand) arguments.get(6),
					(CombinedFragment) arguments.get(7),
					(NamedFlow) arguments.get(8),
					(FlowToInteractionFragment) arguments.get(9),
					(Lifeline) arguments.get(10),
					(Interaction) arguments.get(11),
					(UseCase) arguments.get(12),
					(UseCaseToInteraction) arguments.get(13),
					(ActorToLifeline) arguments.get(14),
					(ModelgeneratorRuleResult) arguments.get(15));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___GENERATE_MODEL_CHECK_CSP_BWD__CSP:
			return generateModel_checkCsp_BWD((CSP) arguments.get(0));
		}
		return super.eInvoke(operationID, arguments);
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_0_1_blackBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, UseCase useCase, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		if (!actor.equals(sysActor)) {
			if (!altFlow.equals(flow)) {
				return new Object[] { _this, match, packageDeclaration, actor,
						sysActor, flow, useCase, step, alt, altFlow };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_0_2_bindingFBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, UseCase useCase, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		CSP _localVariable_0 = _this.isAppropriate_solveCsp_FWD(match,
				packageDeclaration, actor, sysActor, flow, useCase, step, alt,
				altFlow);
		CSP csp = _localVariable_0;
		if (csp != null) {
			return new Object[] { csp, _this, match, packageDeclaration, actor,
					sysActor, flow, useCase, step, alt, altFlow };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_0_2_blackB(
			CSP csp) {
		return new Object[] { csp };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_0_2_bindingAndBlackFBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, UseCase useCase, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		Object[] result_pattern_AltUserStepNFToComboRule_0_2_binding = pattern_AltUserStepNFToComboRule_0_2_bindingFBBBBBBBBBB(
				_this, match, packageDeclaration, actor, sysActor, flow,
				useCase, step, alt, altFlow);
		if (result_pattern_AltUserStepNFToComboRule_0_2_binding != null) {
			CSP csp = (CSP) result_pattern_AltUserStepNFToComboRule_0_2_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_0_2_black = pattern_AltUserStepNFToComboRule_0_2_blackB(csp);
			if (result_pattern_AltUserStepNFToComboRule_0_2_black != null) {

				return new Object[] { csp, _this, match, packageDeclaration,
						actor, sysActor, flow, useCase, step, alt, altFlow };
			}
		}
		return null;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_0_3_expressionFBB(
			AltUserStepNFToComboRule _this, CSP csp) {
		boolean _localVariable_0 = _this.isAppropriate_checkCsp_FWD(csp);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_0_4_blackBBBBBBBBB(
			Match match, PackageDeclaration packageDeclaration, Actor actor,
			Actor sysActor, NamedFlow flow, UseCase useCase, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		if (!actor.equals(sysActor)) {
			if (!altFlow.equals(flow)) {
				return new Object[] { match, packageDeclaration, actor,
						sysActor, flow, useCase, step, alt, altFlow };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_0_4_greenBBBBBBFFFF(
			Match match, Actor actor, NamedFlow flow, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		EMoflonEdge flow__step____steps = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge step__alt____stepAlternative = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge step__actor____actor = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge alt__altFlow____ref = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		match.getToBeTranslatedNodes().add(step);
		match.getToBeTranslatedNodes().add(alt);
		match.getToBeTranslatedNodes().add(altFlow);
		String flow__step____steps_name_prime = "steps";
		String step__alt____stepAlternative_name_prime = "stepAlternative";
		String step__actor____actor_name_prime = "actor";
		String alt__altFlow____ref_name_prime = "ref";
		flow__step____steps.setSrc(flow);
		flow__step____steps.setTrg(step);
		match.getToBeTranslatedEdges().add(flow__step____steps);
		step__alt____stepAlternative.setSrc(step);
		step__alt____stepAlternative.setTrg(alt);
		match.getToBeTranslatedEdges().add(step__alt____stepAlternative);
		step__actor____actor.setSrc(step);
		step__actor____actor.setTrg(actor);
		match.getToBeTranslatedEdges().add(step__actor____actor);
		alt__altFlow____ref.setSrc(alt);
		alt__altFlow____ref.setTrg(altFlow);
		match.getToBeTranslatedEdges().add(alt__altFlow____ref);
		flow__step____steps.setName(flow__step____steps_name_prime);
		step__alt____stepAlternative
				.setName(step__alt____stepAlternative_name_prime);
		step__actor____actor.setName(step__actor____actor_name_prime);
		alt__altFlow____ref.setName(alt__altFlow____ref_name_prime);
		return new Object[] { match, actor, flow, step, alt, altFlow,
				flow__step____steps, step__alt____stepAlternative,
				step__actor____actor, alt__altFlow____ref };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_0_5_blackBBBBBBBBB(
			Match match, PackageDeclaration packageDeclaration, Actor actor,
			Actor sysActor, NamedFlow flow, UseCase useCase, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		if (!actor.equals(sysActor)) {
			if (!altFlow.equals(flow)) {
				return new Object[] { match, packageDeclaration, actor,
						sysActor, flow, useCase, step, alt, altFlow };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_0_5_greenBBBBBBFFFF(
			Match match, PackageDeclaration packageDeclaration, Actor actor,
			Actor sysActor, NamedFlow flow, UseCase useCase) {
		EMoflonEdge packageDeclaration__actor____actors = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge packageDeclaration__sysActor____actors = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge useCase__flow____flows = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge packageDeclaration__useCase____useCases = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		match.getContextNodes().add(packageDeclaration);
		match.getContextNodes().add(actor);
		match.getContextNodes().add(sysActor);
		match.getContextNodes().add(flow);
		match.getContextNodes().add(useCase);
		String packageDeclaration__actor____actors_name_prime = "actors";
		String packageDeclaration__sysActor____actors_name_prime = "actors";
		String useCase__flow____flows_name_prime = "flows";
		String packageDeclaration__useCase____useCases_name_prime = "useCases";
		packageDeclaration__actor____actors.setSrc(packageDeclaration);
		packageDeclaration__actor____actors.setTrg(actor);
		match.getContextEdges().add(packageDeclaration__actor____actors);
		packageDeclaration__sysActor____actors.setSrc(packageDeclaration);
		packageDeclaration__sysActor____actors.setTrg(sysActor);
		match.getContextEdges().add(packageDeclaration__sysActor____actors);
		useCase__flow____flows.setSrc(useCase);
		useCase__flow____flows.setTrg(flow);
		match.getContextEdges().add(useCase__flow____flows);
		packageDeclaration__useCase____useCases.setSrc(packageDeclaration);
		packageDeclaration__useCase____useCases.setTrg(useCase);
		match.getContextEdges().add(packageDeclaration__useCase____useCases);
		packageDeclaration__actor____actors
				.setName(packageDeclaration__actor____actors_name_prime);
		packageDeclaration__sysActor____actors
				.setName(packageDeclaration__sysActor____actors_name_prime);
		useCase__flow____flows.setName(useCase__flow____flows_name_prime);
		packageDeclaration__useCase____useCases
				.setName(packageDeclaration__useCase____useCases_name_prime);
		return new Object[] { match, packageDeclaration, actor, sysActor, flow,
				useCase, packageDeclaration__actor____actors,
				packageDeclaration__sysActor____actors, useCase__flow____flows,
				packageDeclaration__useCase____useCases };
	}

	public static final void pattern_AltUserStepNFToComboRule_0_6_expressionBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, UseCase useCase, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		_this.registerObjectsToMatch_FWD(match, packageDeclaration, actor,
				sysActor, flow, useCase, step, alt, altFlow);

	}

	public static final boolean pattern_AltUserStepNFToComboRule_0_7_expressionF() {
		boolean _result = Boolean.valueOf(true);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_0_8_expressionF() {
		boolean _result = false;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_1_1_bindingFFFFFFFFFFFFFFFFFB(
			IsApplicableMatch isApplicableMatch) {
		EObject _localVariable_0 = isApplicableMatch
				.getObject("packageDeclaration");
		EObject _localVariable_1 = isApplicableMatch.getObject("actor");
		EObject _localVariable_2 = isApplicableMatch.getObject("sysActor");
		EObject _localVariable_3 = isApplicableMatch.getObject("sysLine");
		EObject _localVariable_4 = isApplicableMatch
				.getObject("sysActorToSysLine");
		EObject _localVariable_5 = isApplicableMatch.getObject("parentOperand");
		EObject _localVariable_6 = isApplicableMatch.getObject("parentCombo");
		EObject _localVariable_7 = isApplicableMatch.getObject("flow");
		EObject _localVariable_8 = isApplicableMatch
				.getObject("flowToParentOperand");
		EObject _localVariable_9 = isApplicableMatch.getObject("line");
		EObject _localVariable_10 = isApplicableMatch.getObject("interaction");
		EObject _localVariable_11 = isApplicableMatch.getObject("useCase");
		EObject _localVariable_12 = isApplicableMatch
				.getObject("useCaseToInteraction");
		EObject _localVariable_13 = isApplicableMatch.getObject("actorToLine");
		EObject _localVariable_14 = isApplicableMatch.getObject("step");
		EObject _localVariable_15 = isApplicableMatch.getObject("alt");
		EObject _localVariable_16 = isApplicableMatch.getObject("altFlow");
		EObject tmpPackageDeclaration = _localVariable_0;
		EObject tmpActor = _localVariable_1;
		EObject tmpSysActor = _localVariable_2;
		EObject tmpSysLine = _localVariable_3;
		EObject tmpSysActorToSysLine = _localVariable_4;
		EObject tmpParentOperand = _localVariable_5;
		EObject tmpParentCombo = _localVariable_6;
		EObject tmpFlow = _localVariable_7;
		EObject tmpFlowToParentOperand = _localVariable_8;
		EObject tmpLine = _localVariable_9;
		EObject tmpInteraction = _localVariable_10;
		EObject tmpUseCase = _localVariable_11;
		EObject tmpUseCaseToInteraction = _localVariable_12;
		EObject tmpActorToLine = _localVariable_13;
		EObject tmpStep = _localVariable_14;
		EObject tmpAlt = _localVariable_15;
		EObject tmpAltFlow = _localVariable_16;
		if (tmpPackageDeclaration instanceof PackageDeclaration) {
			PackageDeclaration packageDeclaration = (PackageDeclaration) tmpPackageDeclaration;
			if (tmpActor instanceof Actor) {
				Actor actor = (Actor) tmpActor;
				if (tmpSysActor instanceof Actor) {
					Actor sysActor = (Actor) tmpSysActor;
					if (tmpSysLine instanceof Lifeline) {
						Lifeline sysLine = (Lifeline) tmpSysLine;
						if (tmpSysActorToSysLine instanceof ActorToLifeline) {
							ActorToLifeline sysActorToSysLine = (ActorToLifeline) tmpSysActorToSysLine;
							if (tmpParentOperand instanceof InteractionOperand) {
								InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
								if (tmpParentCombo instanceof CombinedFragment) {
									CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
									if (tmpFlow instanceof NamedFlow) {
										NamedFlow flow = (NamedFlow) tmpFlow;
										if (tmpFlowToParentOperand instanceof FlowToInteractionFragment) {
											FlowToInteractionFragment flowToParentOperand = (FlowToInteractionFragment) tmpFlowToParentOperand;
											if (tmpLine instanceof Lifeline) {
												Lifeline line = (Lifeline) tmpLine;
												if (tmpInteraction instanceof Interaction) {
													Interaction interaction = (Interaction) tmpInteraction;
													if (tmpUseCase instanceof UseCase) {
														UseCase useCase = (UseCase) tmpUseCase;
														if (tmpUseCaseToInteraction instanceof UseCaseToInteraction) {
															UseCaseToInteraction useCaseToInteraction = (UseCaseToInteraction) tmpUseCaseToInteraction;
															if (tmpActorToLine instanceof ActorToLifeline) {
																ActorToLifeline actorToLine = (ActorToLifeline) tmpActorToLine;
																if (tmpStep instanceof NormalStep) {
																	NormalStep step = (NormalStep) tmpStep;
																	if (tmpAlt instanceof AlternativeFlowAlternative) {
																		AlternativeFlowAlternative alt = (AlternativeFlowAlternative) tmpAlt;
																		if (tmpAltFlow instanceof AlternativeFlow) {
																			AlternativeFlow altFlow = (AlternativeFlow) tmpAltFlow;
																			return new Object[] {
																					packageDeclaration,
																					actor,
																					sysActor,
																					sysLine,
																					sysActorToSysLine,
																					parentOperand,
																					parentCombo,
																					flow,
																					flowToParentOperand,
																					line,
																					interaction,
																					useCase,
																					useCaseToInteraction,
																					actorToLine,
																					step,
																					alt,
																					altFlow,
																					isApplicableMatch };
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_1_1_blackBBBBBBBBBBBBBBBBBFBB(
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			InteractionOperand parentOperand, CombinedFragment parentCombo,
			NamedFlow flow, FlowToInteractionFragment flowToParentOperand,
			Lifeline line, Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow,
			AltUserStepNFToComboRule _this, IsApplicableMatch isApplicableMatch) {
		if (!actor.equals(sysActor)) {
			if (!line.equals(sysLine)) {
				if (!actorToLine.equals(sysActorToSysLine)) {
					if (!altFlow.equals(flow)) {
						for (EObject tmpCsp : isApplicableMatch
								.getAttributeInfo()) {
							if (tmpCsp instanceof CSP) {
								CSP csp = (CSP) tmpCsp;
								return new Object[] { packageDeclaration,
										actor, sysActor, sysLine,
										sysActorToSysLine, parentOperand,
										parentCombo, flow, flowToParentOperand,
										line, interaction, useCase,
										useCaseToInteraction, actorToLine,
										step, alt, altFlow, csp, _this,
										isApplicableMatch };
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_1_1_bindingAndBlackFFFFFFFFFFFFFFFFFFBB(
			AltUserStepNFToComboRule _this, IsApplicableMatch isApplicableMatch) {
		Object[] result_pattern_AltUserStepNFToComboRule_1_1_binding = pattern_AltUserStepNFToComboRule_1_1_bindingFFFFFFFFFFFFFFFFFB(isApplicableMatch);
		if (result_pattern_AltUserStepNFToComboRule_1_1_binding != null) {
			PackageDeclaration packageDeclaration = (PackageDeclaration) result_pattern_AltUserStepNFToComboRule_1_1_binding[0];
			Actor actor = (Actor) result_pattern_AltUserStepNFToComboRule_1_1_binding[1];
			Actor sysActor = (Actor) result_pattern_AltUserStepNFToComboRule_1_1_binding[2];
			Lifeline sysLine = (Lifeline) result_pattern_AltUserStepNFToComboRule_1_1_binding[3];
			ActorToLifeline sysActorToSysLine = (ActorToLifeline) result_pattern_AltUserStepNFToComboRule_1_1_binding[4];
			InteractionOperand parentOperand = (InteractionOperand) result_pattern_AltUserStepNFToComboRule_1_1_binding[5];
			CombinedFragment parentCombo = (CombinedFragment) result_pattern_AltUserStepNFToComboRule_1_1_binding[6];
			NamedFlow flow = (NamedFlow) result_pattern_AltUserStepNFToComboRule_1_1_binding[7];
			FlowToInteractionFragment flowToParentOperand = (FlowToInteractionFragment) result_pattern_AltUserStepNFToComboRule_1_1_binding[8];
			Lifeline line = (Lifeline) result_pattern_AltUserStepNFToComboRule_1_1_binding[9];
			Interaction interaction = (Interaction) result_pattern_AltUserStepNFToComboRule_1_1_binding[10];
			UseCase useCase = (UseCase) result_pattern_AltUserStepNFToComboRule_1_1_binding[11];
			UseCaseToInteraction useCaseToInteraction = (UseCaseToInteraction) result_pattern_AltUserStepNFToComboRule_1_1_binding[12];
			ActorToLifeline actorToLine = (ActorToLifeline) result_pattern_AltUserStepNFToComboRule_1_1_binding[13];
			NormalStep step = (NormalStep) result_pattern_AltUserStepNFToComboRule_1_1_binding[14];
			AlternativeFlowAlternative alt = (AlternativeFlowAlternative) result_pattern_AltUserStepNFToComboRule_1_1_binding[15];
			AlternativeFlow altFlow = (AlternativeFlow) result_pattern_AltUserStepNFToComboRule_1_1_binding[16];

			Object[] result_pattern_AltUserStepNFToComboRule_1_1_black = pattern_AltUserStepNFToComboRule_1_1_blackBBBBBBBBBBBBBBBBBFBB(
					packageDeclaration, actor, sysActor, sysLine,
					sysActorToSysLine, parentOperand, parentCombo, flow,
					flowToParentOperand, line, interaction, useCase,
					useCaseToInteraction, actorToLine, step, alt, altFlow,
					_this, isApplicableMatch);
			if (result_pattern_AltUserStepNFToComboRule_1_1_black != null) {
				CSP csp = (CSP) result_pattern_AltUserStepNFToComboRule_1_1_black[17];

				return new Object[] { packageDeclaration, actor, sysActor,
						sysLine, sysActorToSysLine, parentOperand, parentCombo,
						flow, flowToParentOperand, line, interaction, useCase,
						useCaseToInteraction, actorToLine, step, alt, altFlow,
						csp, _this, isApplicableMatch };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_1_1_greenBFFFBBFBBBBFFFFBFB(
			Lifeline sysLine, InteractionOperand parentOperand,
			CombinedFragment parentCombo, Lifeline line,
			Interaction interaction, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow, CSP csp) {
		MessageOccurrenceSpecification messageSend = ModalSequenceDiagramFactory.eINSTANCE
				.createMessageOccurrenceSpecification();
		CombinedFragment combo = ModalSequenceDiagramFactory.eINSTANCE
				.createCombinedFragment();
		InteractionOperand operand = ModalSequenceDiagramFactory.eINSTANCE
				.createInteractionOperand();
		MessageOccurrenceSpecification messageReceive = ModalSequenceDiagramFactory.eINSTANCE
				.createMessageOccurrenceSpecification();
		NormalStepToCombinedFragment stepToCombo = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
				.createNormalStepToCombinedFragment();
		StepAlternativeToInteractionOperand alternative1ToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
				.createStepAlternativeToInteractionOperand();
		InteractionConstraint guard = ModalSequenceDiagramFactory.eINSTANCE
				.createInteractionConstraint();
		LiteralString spec = ModalSequenceDiagramFactory.eINSTANCE
				.createLiteralString();
		FlowToInteractionFragment altFlowToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
				.createFlowToInteractionFragment();
		sysLine.getCoveredBy().add(parentOperand);
		sysLine.getCoveredBy().add(parentCombo);
		line.getCoveredBy().add(parentOperand);
		line.getCoveredBy().add(parentCombo);
		Object _localVariable_0 = csp.getValue("combo", "interactionOperator");
		Object _localVariable_1 = csp.getValue("guard", "name");
		Object _localVariable_2 = csp.getValue("spec", "value");
		sysLine.getCoveredBy().add(messageSend);
		sysLine.getCoveredBy().add(combo);
		combo.setEnclosingInteraction(interaction);
		sysLine.getCoveredBy().add(operand);
		line.getCoveredBy().add(operand);
		parentOperand.getFragment().add(messageReceive);
		stepToCombo.setSource(step);
		stepToCombo.setTarget(combo);
		alternative1ToOperand.setSource(alt);
		alternative1ToOperand.setTarget(operand);
		operand.setGuard(guard);
		guard.setSpecification(spec);
		altFlowToOperand.setSource(altFlow);
		altFlowToOperand.setTarget(operand);
		InteractionOperatorKind combo_interactionOperator_prime = (InteractionOperatorKind) _localVariable_0;
		String guard_name_prime = (String) _localVariable_1;
		String spec_value_prime = (String) _localVariable_2;
		combo.setInteractionOperator(combo_interactionOperator_prime);
		guard.setName(guard_name_prime);
		spec.setValue(spec_value_prime);
		return new Object[] { sysLine, messageSend, combo, operand,
				parentOperand, parentCombo, messageReceive, line, interaction,
				step, alt, stepToCombo, alternative1ToOperand, guard, spec,
				altFlow, altFlowToOperand, csp };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_1_2_blackBBBBBBBBBBBB(
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive, NormalStep step,
			AlternativeFlowAlternative alt,
			NormalStepToCombinedFragment stepToCombo,
			StepAlternativeToInteractionOperand alternative1ToOperand,
			InteractionConstraint guard, LiteralString spec,
			AlternativeFlow altFlow, FlowToInteractionFragment altFlowToOperand) {
		if (!messageReceive.equals(messageSend)) {
			return new Object[] { messageSend, combo, operand, messageReceive,
					step, alt, stepToCombo, alternative1ToOperand, guard, spec,
					altFlow, altFlowToOperand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_1_2_greenFBBBBBBBBBBBB(
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive, NormalStep step,
			AlternativeFlowAlternative alt,
			NormalStepToCombinedFragment stepToCombo,
			StepAlternativeToInteractionOperand alternative1ToOperand,
			InteractionConstraint guard, LiteralString spec,
			AlternativeFlow altFlow, FlowToInteractionFragment altFlowToOperand) {
		PerformRuleResult ruleresult = TGGRuntimeFactory.eINSTANCE
				.createPerformRuleResult();
		ruleresult.getCreatedElements().add(messageSend);
		ruleresult.getCreatedElements().add(combo);
		ruleresult.getCreatedElements().add(operand);
		ruleresult.getCreatedElements().add(messageReceive);
		ruleresult.getTranslatedElements().add(step);
		ruleresult.getTranslatedElements().add(alt);
		ruleresult.getCreatedLinkElements().add(stepToCombo);
		ruleresult.getCreatedLinkElements().add(alternative1ToOperand);
		ruleresult.getCreatedElements().add(guard);
		ruleresult.getCreatedElements().add(spec);
		ruleresult.getTranslatedElements().add(altFlow);
		ruleresult.getCreatedLinkElements().add(altFlowToOperand);
		return new Object[] { ruleresult, messageSend, combo, operand,
				messageReceive, step, alt, stepToCombo, alternative1ToOperand,
				guard, spec, altFlow, altFlowToOperand };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_1_3_blackBBBBBBBBBBBBBBBBBBBBBBBBBBB(
			PerformRuleResult ruleresult, EObject packageDeclaration,
			EObject actor, EObject sysActor, EObject sysLine,
			EObject sysActorToSysLine, EObject messageSend, EObject combo,
			EObject operand, EObject parentOperand, EObject parentCombo,
			EObject flow, EObject flowToParentOperand, EObject messageReceive,
			EObject line, EObject interaction, EObject useCase,
			EObject useCaseToInteraction, EObject actorToLine, EObject step,
			EObject alt, EObject stepToCombo, EObject alternative1ToOperand,
			EObject guard, EObject spec, EObject altFlow,
			EObject altFlowToOperand) {
		if (!packageDeclaration.equals(sysActor)) {
			if (!packageDeclaration.equals(sysLine)) {
				if (!packageDeclaration.equals(sysActorToSysLine)) {
					if (!packageDeclaration.equals(parentOperand)) {
						if (!packageDeclaration.equals(parentCombo)) {
							if (!packageDeclaration.equals(useCase)) {
								if (!packageDeclaration
										.equals(useCaseToInteraction)) {
									if (!packageDeclaration.equals(step)) {
										if (!packageDeclaration
												.equals(stepToCombo)) {
											if (!packageDeclaration
													.equals(spec)) {
												if (!actor
														.equals(packageDeclaration)) {
													if (!actor.equals(sysActor)) {
														if (!actor
																.equals(sysLine)) {
															if (!actor
																	.equals(sysActorToSysLine)) {
																if (!actor
																		.equals(messageSend)) {
																	if (!actor
																			.equals(combo)) {
																		if (!actor
																				.equals(operand)) {
																			if (!actor
																					.equals(parentOperand)) {
																				if (!actor
																						.equals(parentCombo)) {
																					if (!actor
																							.equals(flow)) {
																						if (!actor
																								.equals(flowToParentOperand)) {
																							if (!actor
																									.equals(messageReceive)) {
																								if (!actor
																										.equals(line)) {
																									if (!actor
																											.equals(interaction)) {
																										if (!actor
																												.equals(useCase)) {
																											if (!actor
																													.equals(useCaseToInteraction)) {
																												if (!actor
																														.equals(actorToLine)) {
																													if (!actor
																															.equals(step)) {
																														if (!actor
																																.equals(alt)) {
																															if (!actor
																																	.equals(stepToCombo)) {
																																if (!actor
																																		.equals(alternative1ToOperand)) {
																																	if (!actor
																																			.equals(guard)) {
																																		if (!actor
																																				.equals(spec)) {
																																			if (!actor
																																					.equals(altFlow)) {
																																				if (!actor
																																						.equals(altFlowToOperand)) {
																																					if (!sysActor
																																							.equals(sysLine)) {
																																						if (!sysActor
																																								.equals(sysActorToSysLine)) {
																																							if (!sysActor
																																									.equals(useCase)) {
																																								if (!sysActor
																																										.equals(useCaseToInteraction)) {
																																									if (!sysLine
																																											.equals(useCase)) {
																																										if (!sysLine
																																												.equals(useCaseToInteraction)) {
																																											if (!sysActorToSysLine
																																													.equals(sysLine)) {
																																												if (!sysActorToSysLine
																																														.equals(useCase)) {
																																													if (!sysActorToSysLine
																																															.equals(useCaseToInteraction)) {
																																														if (!messageSend
																																																.equals(packageDeclaration)) {
																																															if (!messageSend
																																																	.equals(sysActor)) {
																																																if (!messageSend
																																																		.equals(sysLine)) {
																																																	if (!messageSend
																																																			.equals(sysActorToSysLine)) {
																																																		if (!messageSend
																																																				.equals(operand)) {
																																																			if (!messageSend
																																																					.equals(parentOperand)) {
																																																				if (!messageSend
																																																						.equals(parentCombo)) {
																																																					if (!messageSend
																																																							.equals(useCase)) {
																																																						if (!messageSend
																																																								.equals(useCaseToInteraction)) {
																																																							if (!messageSend
																																																									.equals(step)) {
																																																								if (!messageSend
																																																										.equals(stepToCombo)) {
																																																									if (!messageSend
																																																											.equals(spec)) {
																																																										if (!combo
																																																												.equals(packageDeclaration)) {
																																																											if (!combo
																																																													.equals(sysActor)) {
																																																												if (!combo
																																																														.equals(sysLine)) {
																																																													if (!combo
																																																															.equals(sysActorToSysLine)) {
																																																														if (!combo
																																																																.equals(messageSend)) {
																																																															if (!combo
																																																																	.equals(operand)) {
																																																																if (!combo
																																																																		.equals(parentOperand)) {
																																																																	if (!combo
																																																																			.equals(parentCombo)) {
																																																																		if (!combo
																																																																				.equals(flow)) {
																																																																			if (!combo
																																																																					.equals(flowToParentOperand)) {
																																																																				if (!combo
																																																																						.equals(messageReceive)) {
																																																																					if (!combo
																																																																							.equals(line)) {
																																																																						if (!combo
																																																																								.equals(interaction)) {
																																																																							if (!combo
																																																																									.equals(useCase)) {
																																																																								if (!combo
																																																																										.equals(useCaseToInteraction)) {
																																																																									if (!combo
																																																																											.equals(step)) {
																																																																										if (!combo
																																																																												.equals(stepToCombo)) {
																																																																											if (!combo
																																																																													.equals(guard)) {
																																																																												if (!combo
																																																																														.equals(spec)) {
																																																																													if (!operand
																																																																															.equals(packageDeclaration)) {
																																																																														if (!operand
																																																																																.equals(sysActor)) {
																																																																															if (!operand
																																																																																	.equals(sysLine)) {
																																																																																if (!operand
																																																																																		.equals(sysActorToSysLine)) {
																																																																																	if (!operand
																																																																																			.equals(parentOperand)) {
																																																																																		if (!operand
																																																																																				.equals(parentCombo)) {
																																																																																			if (!operand
																																																																																					.equals(useCase)) {
																																																																																				if (!operand
																																																																																						.equals(useCaseToInteraction)) {
																																																																																					if (!operand
																																																																																							.equals(step)) {
																																																																																						if (!operand
																																																																																								.equals(stepToCombo)) {
																																																																																							if (!operand
																																																																																									.equals(spec)) {
																																																																																								if (!parentOperand
																																																																																										.equals(sysActor)) {
																																																																																									if (!parentOperand
																																																																																											.equals(sysLine)) {
																																																																																										if (!parentOperand
																																																																																												.equals(sysActorToSysLine)) {
																																																																																											if (!parentOperand
																																																																																													.equals(useCase)) {
																																																																																												if (!parentOperand
																																																																																														.equals(useCaseToInteraction)) {
																																																																																													if (!parentOperand
																																																																																															.equals(step)) {
																																																																																														if (!parentOperand
																																																																																																.equals(stepToCombo)) {
																																																																																															if (!parentOperand
																																																																																																	.equals(spec)) {
																																																																																																if (!parentCombo
																																																																																																		.equals(sysActor)) {
																																																																																																	if (!parentCombo
																																																																																																			.equals(sysLine)) {
																																																																																																		if (!parentCombo
																																																																																																				.equals(sysActorToSysLine)) {
																																																																																																			if (!parentCombo
																																																																																																					.equals(parentOperand)) {
																																																																																																				if (!parentCombo
																																																																																																						.equals(useCase)) {
																																																																																																					if (!parentCombo
																																																																																																							.equals(useCaseToInteraction)) {
																																																																																																						if (!parentCombo
																																																																																																								.equals(step)) {
																																																																																																							if (!parentCombo
																																																																																																									.equals(stepToCombo)) {
																																																																																																								if (!parentCombo
																																																																																																										.equals(spec)) {
																																																																																																									if (!flow
																																																																																																											.equals(packageDeclaration)) {
																																																																																																										if (!flow
																																																																																																												.equals(sysActor)) {
																																																																																																											if (!flow
																																																																																																													.equals(sysLine)) {
																																																																																																												if (!flow
																																																																																																														.equals(sysActorToSysLine)) {
																																																																																																													if (!flow
																																																																																																															.equals(messageSend)) {
																																																																																																														if (!flow
																																																																																																																.equals(operand)) {
																																																																																																															if (!flow
																																																																																																																	.equals(parentOperand)) {
																																																																																																																if (!flow
																																																																																																																		.equals(parentCombo)) {
																																																																																																																	if (!flow
																																																																																																																			.equals(flowToParentOperand)) {
																																																																																																																		if (!flow
																																																																																																																				.equals(messageReceive)) {
																																																																																																																			if (!flow
																																																																																																																					.equals(line)) {
																																																																																																																				if (!flow
																																																																																																																						.equals(interaction)) {
																																																																																																																					if (!flow
																																																																																																																							.equals(useCase)) {
																																																																																																																						if (!flow
																																																																																																																								.equals(useCaseToInteraction)) {
																																																																																																																							if (!flow
																																																																																																																									.equals(step)) {
																																																																																																																								if (!flow
																																																																																																																										.equals(stepToCombo)) {
																																																																																																																									if (!flow
																																																																																																																											.equals(guard)) {
																																																																																																																										if (!flow
																																																																																																																												.equals(spec)) {
																																																																																																																											if (!flowToParentOperand
																																																																																																																													.equals(packageDeclaration)) {
																																																																																																																												if (!flowToParentOperand
																																																																																																																														.equals(sysActor)) {
																																																																																																																													if (!flowToParentOperand
																																																																																																																															.equals(sysLine)) {
																																																																																																																														if (!flowToParentOperand
																																																																																																																																.equals(sysActorToSysLine)) {
																																																																																																																															if (!flowToParentOperand
																																																																																																																																	.equals(messageSend)) {
																																																																																																																																if (!flowToParentOperand
																																																																																																																																		.equals(operand)) {
																																																																																																																																	if (!flowToParentOperand
																																																																																																																																			.equals(parentOperand)) {
																																																																																																																																		if (!flowToParentOperand
																																																																																																																																				.equals(parentCombo)) {
																																																																																																																																			if (!flowToParentOperand
																																																																																																																																					.equals(messageReceive)) {
																																																																																																																																				if (!flowToParentOperand
																																																																																																																																						.equals(line)) {
																																																																																																																																					if (!flowToParentOperand
																																																																																																																																							.equals(interaction)) {
																																																																																																																																						if (!flowToParentOperand
																																																																																																																																								.equals(useCase)) {
																																																																																																																																							if (!flowToParentOperand
																																																																																																																																									.equals(useCaseToInteraction)) {
																																																																																																																																								if (!flowToParentOperand
																																																																																																																																										.equals(step)) {
																																																																																																																																									if (!flowToParentOperand
																																																																																																																																											.equals(stepToCombo)) {
																																																																																																																																										if (!flowToParentOperand
																																																																																																																																												.equals(guard)) {
																																																																																																																																											if (!flowToParentOperand
																																																																																																																																													.equals(spec)) {
																																																																																																																																												if (!messageReceive
																																																																																																																																														.equals(packageDeclaration)) {
																																																																																																																																													if (!messageReceive
																																																																																																																																															.equals(sysActor)) {
																																																																																																																																														if (!messageReceive
																																																																																																																																																.equals(sysLine)) {
																																																																																																																																															if (!messageReceive
																																																																																																																																																	.equals(sysActorToSysLine)) {
																																																																																																																																																if (!messageReceive
																																																																																																																																																		.equals(messageSend)) {
																																																																																																																																																	if (!messageReceive
																																																																																																																																																			.equals(operand)) {
																																																																																																																																																		if (!messageReceive
																																																																																																																																																				.equals(parentOperand)) {
																																																																																																																																																			if (!messageReceive
																																																																																																																																																					.equals(parentCombo)) {
																																																																																																																																																				if (!messageReceive
																																																																																																																																																						.equals(useCase)) {
																																																																																																																																																					if (!messageReceive
																																																																																																																																																							.equals(useCaseToInteraction)) {
																																																																																																																																																						if (!messageReceive
																																																																																																																																																								.equals(step)) {
																																																																																																																																																							if (!messageReceive
																																																																																																																																																									.equals(stepToCombo)) {
																																																																																																																																																								if (!messageReceive
																																																																																																																																																										.equals(spec)) {
																																																																																																																																																									if (!line
																																																																																																																																																											.equals(packageDeclaration)) {
																																																																																																																																																										if (!line
																																																																																																																																																												.equals(sysActor)) {
																																																																																																																																																											if (!line
																																																																																																																																																													.equals(sysLine)) {
																																																																																																																																																												if (!line
																																																																																																																																																														.equals(sysActorToSysLine)) {
																																																																																																																																																													if (!line
																																																																																																																																																															.equals(messageSend)) {
																																																																																																																																																														if (!line
																																																																																																																																																																.equals(operand)) {
																																																																																																																																																															if (!line
																																																																																																																																																																	.equals(parentOperand)) {
																																																																																																																																																																if (!line
																																																																																																																																																																		.equals(parentCombo)) {
																																																																																																																																																																	if (!line
																																																																																																																																																																			.equals(messageReceive)) {
																																																																																																																																																																		if (!line
																																																																																																																																																																				.equals(useCase)) {
																																																																																																																																																																			if (!line
																																																																																																																																																																					.equals(useCaseToInteraction)) {
																																																																																																																																																																				if (!line
																																																																																																																																																																						.equals(step)) {
																																																																																																																																																																					if (!line
																																																																																																																																																																							.equals(stepToCombo)) {
																																																																																																																																																																						if (!line
																																																																																																																																																																								.equals(spec)) {
																																																																																																																																																																							if (!interaction
																																																																																																																																																																									.equals(packageDeclaration)) {
																																																																																																																																																																								if (!interaction
																																																																																																																																																																										.equals(sysActor)) {
																																																																																																																																																																									if (!interaction
																																																																																																																																																																											.equals(sysLine)) {
																																																																																																																																																																										if (!interaction
																																																																																																																																																																												.equals(sysActorToSysLine)) {
																																																																																																																																																																											if (!interaction
																																																																																																																																																																													.equals(messageSend)) {
																																																																																																																																																																												if (!interaction
																																																																																																																																																																														.equals(operand)) {
																																																																																																																																																																													if (!interaction
																																																																																																																																																																															.equals(parentOperand)) {
																																																																																																																																																																														if (!interaction
																																																																																																																																																																																.equals(parentCombo)) {
																																																																																																																																																																															if (!interaction
																																																																																																																																																																																	.equals(messageReceive)) {
																																																																																																																																																																																if (!interaction
																																																																																																																																																																																		.equals(line)) {
																																																																																																																																																																																	if (!interaction
																																																																																																																																																																																			.equals(useCase)) {
																																																																																																																																																																																		if (!interaction
																																																																																																																																																																																				.equals(useCaseToInteraction)) {
																																																																																																																																																																																			if (!interaction
																																																																																																																																																																																					.equals(step)) {
																																																																																																																																																																																				if (!interaction
																																																																																																																																																																																						.equals(stepToCombo)) {
																																																																																																																																																																																					if (!interaction
																																																																																																																																																																																							.equals(spec)) {
																																																																																																																																																																																						if (!useCase
																																																																																																																																																																																								.equals(useCaseToInteraction)) {
																																																																																																																																																																																							if (!actorToLine
																																																																																																																																																																																									.equals(packageDeclaration)) {
																																																																																																																																																																																								if (!actorToLine
																																																																																																																																																																																										.equals(sysActor)) {
																																																																																																																																																																																									if (!actorToLine
																																																																																																																																																																																											.equals(sysLine)) {
																																																																																																																																																																																										if (!actorToLine
																																																																																																																																																																																												.equals(sysActorToSysLine)) {
																																																																																																																																																																																											if (!actorToLine
																																																																																																																																																																																													.equals(messageSend)) {
																																																																																																																																																																																												if (!actorToLine
																																																																																																																																																																																														.equals(combo)) {
																																																																																																																																																																																													if (!actorToLine
																																																																																																																																																																																															.equals(operand)) {
																																																																																																																																																																																														if (!actorToLine
																																																																																																																																																																																																.equals(parentOperand)) {
																																																																																																																																																																																															if (!actorToLine
																																																																																																																																																																																																	.equals(parentCombo)) {
																																																																																																																																																																																																if (!actorToLine
																																																																																																																																																																																																		.equals(flow)) {
																																																																																																																																																																																																	if (!actorToLine
																																																																																																																																																																																																			.equals(flowToParentOperand)) {
																																																																																																																																																																																																		if (!actorToLine
																																																																																																																																																																																																				.equals(messageReceive)) {
																																																																																																																																																																																																			if (!actorToLine
																																																																																																																																																																																																					.equals(line)) {
																																																																																																																																																																																																				if (!actorToLine
																																																																																																																																																																																																						.equals(interaction)) {
																																																																																																																																																																																																					if (!actorToLine
																																																																																																																																																																																																							.equals(useCase)) {
																																																																																																																																																																																																						if (!actorToLine
																																																																																																																																																																																																								.equals(useCaseToInteraction)) {
																																																																																																																																																																																																							if (!actorToLine
																																																																																																																																																																																																									.equals(step)) {
																																																																																																																																																																																																								if (!actorToLine
																																																																																																																																																																																																										.equals(alt)) {
																																																																																																																																																																																																									if (!actorToLine
																																																																																																																																																																																																											.equals(stepToCombo)) {
																																																																																																																																																																																																										if (!actorToLine
																																																																																																																																																																																																												.equals(alternative1ToOperand)) {
																																																																																																																																																																																																											if (!actorToLine
																																																																																																																																																																																																													.equals(guard)) {
																																																																																																																																																																																																												if (!actorToLine
																																																																																																																																																																																																														.equals(spec)) {
																																																																																																																																																																																																													if (!actorToLine
																																																																																																																																																																																																															.equals(altFlow)) {
																																																																																																																																																																																																														if (!actorToLine
																																																																																																																																																																																																																.equals(altFlowToOperand)) {
																																																																																																																																																																																																															if (!step
																																																																																																																																																																																																																	.equals(sysActor)) {
																																																																																																																																																																																																																if (!step
																																																																																																																																																																																																																		.equals(sysLine)) {
																																																																																																																																																																																																																	if (!step
																																																																																																																																																																																																																			.equals(sysActorToSysLine)) {
																																																																																																																																																																																																																		if (!step
																																																																																																																																																																																																																				.equals(useCase)) {
																																																																																																																																																																																																																			if (!step
																																																																																																																																																																																																																					.equals(useCaseToInteraction)) {
																																																																																																																																																																																																																				if (!step
																																																																																																																																																																																																																						.equals(stepToCombo)) {
																																																																																																																																																																																																																					if (!alt.equals(packageDeclaration)) {
																																																																																																																																																																																																																						if (!alt.equals(sysActor)) {
																																																																																																																																																																																																																							if (!alt.equals(sysLine)) {
																																																																																																																																																																																																																								if (!alt.equals(sysActorToSysLine)) {
																																																																																																																																																																																																																									if (!alt.equals(messageSend)) {
																																																																																																																																																																																																																										if (!alt.equals(combo)) {
																																																																																																																																																																																																																											if (!alt.equals(operand)) {
																																																																																																																																																																																																																												if (!alt.equals(parentOperand)) {
																																																																																																																																																																																																																													if (!alt.equals(parentCombo)) {
																																																																																																																																																																																																																														if (!alt.equals(flow)) {
																																																																																																																																																																																																																															if (!alt.equals(flowToParentOperand)) {
																																																																																																																																																																																																																																if (!alt.equals(messageReceive)) {
																																																																																																																																																																																																																																	if (!alt.equals(line)) {
																																																																																																																																																																																																																																		if (!alt.equals(interaction)) {
																																																																																																																																																																																																																																			if (!alt.equals(useCase)) {
																																																																																																																																																																																																																																				if (!alt.equals(useCaseToInteraction)) {
																																																																																																																																																																																																																																					if (!alt.equals(step)) {
																																																																																																																																																																																																																																						if (!alt.equals(stepToCombo)) {
																																																																																																																																																																																																																																							if (!alt.equals(alternative1ToOperand)) {
																																																																																																																																																																																																																																								if (!alt.equals(guard)) {
																																																																																																																																																																																																																																									if (!alt.equals(spec)) {
																																																																																																																																																																																																																																										if (!alt.equals(altFlow)) {
																																																																																																																																																																																																																																											if (!alt.equals(altFlowToOperand)) {
																																																																																																																																																																																																																																												if (!stepToCombo
																																																																																																																																																																																																																																														.equals(sysActor)) {
																																																																																																																																																																																																																																													if (!stepToCombo
																																																																																																																																																																																																																																															.equals(sysLine)) {
																																																																																																																																																																																																																																														if (!stepToCombo
																																																																																																																																																																																																																																																.equals(sysActorToSysLine)) {
																																																																																																																																																																																																																																															if (!stepToCombo
																																																																																																																																																																																																																																																	.equals(useCase)) {
																																																																																																																																																																																																																																																if (!stepToCombo
																																																																																																																																																																																																																																																		.equals(useCaseToInteraction)) {
																																																																																																																																																																																																																																																	if (!alternative1ToOperand
																																																																																																																																																																																																																																																			.equals(packageDeclaration)) {
																																																																																																																																																																																																																																																		if (!alternative1ToOperand
																																																																																																																																																																																																																																																				.equals(sysActor)) {
																																																																																																																																																																																																																																																			if (!alternative1ToOperand
																																																																																																																																																																																																																																																					.equals(sysLine)) {
																																																																																																																																																																																																																																																				if (!alternative1ToOperand
																																																																																																																																																																																																																																																						.equals(sysActorToSysLine)) {
																																																																																																																																																																																																																																																					if (!alternative1ToOperand
																																																																																																																																																																																																																																																							.equals(messageSend)) {
																																																																																																																																																																																																																																																						if (!alternative1ToOperand
																																																																																																																																																																																																																																																								.equals(combo)) {
																																																																																																																																																																																																																																																							if (!alternative1ToOperand
																																																																																																																																																																																																																																																									.equals(operand)) {
																																																																																																																																																																																																																																																								if (!alternative1ToOperand
																																																																																																																																																																																																																																																										.equals(parentOperand)) {
																																																																																																																																																																																																																																																									if (!alternative1ToOperand
																																																																																																																																																																																																																																																											.equals(parentCombo)) {
																																																																																																																																																																																																																																																										if (!alternative1ToOperand
																																																																																																																																																																																																																																																												.equals(flow)) {
																																																																																																																																																																																																																																																											if (!alternative1ToOperand
																																																																																																																																																																																																																																																													.equals(flowToParentOperand)) {
																																																																																																																																																																																																																																																												if (!alternative1ToOperand
																																																																																																																																																																																																																																																														.equals(messageReceive)) {
																																																																																																																																																																																																																																																													if (!alternative1ToOperand
																																																																																																																																																																																																																																																															.equals(line)) {
																																																																																																																																																																																																																																																														if (!alternative1ToOperand
																																																																																																																																																																																																																																																																.equals(interaction)) {
																																																																																																																																																																																																																																																															if (!alternative1ToOperand
																																																																																																																																																																																																																																																																	.equals(useCase)) {
																																																																																																																																																																																																																																																																if (!alternative1ToOperand
																																																																																																																																																																																																																																																																		.equals(useCaseToInteraction)) {
																																																																																																																																																																																																																																																																	if (!alternative1ToOperand
																																																																																																																																																																																																																																																																			.equals(step)) {
																																																																																																																																																																																																																																																																		if (!alternative1ToOperand
																																																																																																																																																																																																																																																																				.equals(stepToCombo)) {
																																																																																																																																																																																																																																																																			if (!alternative1ToOperand
																																																																																																																																																																																																																																																																					.equals(guard)) {
																																																																																																																																																																																																																																																																				if (!alternative1ToOperand
																																																																																																																																																																																																																																																																						.equals(spec)) {
																																																																																																																																																																																																																																																																					if (!guard
																																																																																																																																																																																																																																																																							.equals(packageDeclaration)) {
																																																																																																																																																																																																																																																																						if (!guard
																																																																																																																																																																																																																																																																								.equals(sysActor)) {
																																																																																																																																																																																																																																																																							if (!guard
																																																																																																																																																																																																																																																																									.equals(sysLine)) {
																																																																																																																																																																																																																																																																								if (!guard
																																																																																																																																																																																																																																																																										.equals(sysActorToSysLine)) {
																																																																																																																																																																																																																																																																									if (!guard
																																																																																																																																																																																																																																																																											.equals(messageSend)) {
																																																																																																																																																																																																																																																																										if (!guard
																																																																																																																																																																																																																																																																												.equals(operand)) {
																																																																																																																																																																																																																																																																											if (!guard
																																																																																																																																																																																																																																																																													.equals(parentOperand)) {
																																																																																																																																																																																																																																																																												if (!guard
																																																																																																																																																																																																																																																																														.equals(parentCombo)) {
																																																																																																																																																																																																																																																																													if (!guard
																																																																																																																																																																																																																																																																															.equals(messageReceive)) {
																																																																																																																																																																																																																																																																														if (!guard
																																																																																																																																																																																																																																																																																.equals(line)) {
																																																																																																																																																																																																																																																																															if (!guard
																																																																																																																																																																																																																																																																																	.equals(interaction)) {
																																																																																																																																																																																																																																																																																if (!guard
																																																																																																																																																																																																																																																																																		.equals(useCase)) {
																																																																																																																																																																																																																																																																																	if (!guard
																																																																																																																																																																																																																																																																																			.equals(useCaseToInteraction)) {
																																																																																																																																																																																																																																																																																		if (!guard
																																																																																																																																																																																																																																																																																				.equals(step)) {
																																																																																																																																																																																																																																																																																			if (!guard
																																																																																																																																																																																																																																																																																					.equals(stepToCombo)) {
																																																																																																																																																																																																																																																																																				if (!guard
																																																																																																																																																																																																																																																																																						.equals(spec)) {
																																																																																																																																																																																																																																																																																					if (!spec
																																																																																																																																																																																																																																																																																							.equals(sysActor)) {
																																																																																																																																																																																																																																																																																						if (!spec
																																																																																																																																																																																																																																																																																								.equals(sysLine)) {
																																																																																																																																																																																																																																																																																							if (!spec
																																																																																																																																																																																																																																																																																									.equals(sysActorToSysLine)) {
																																																																																																																																																																																																																																																																																								if (!spec
																																																																																																																																																																																																																																																																																										.equals(useCase)) {
																																																																																																																																																																																																																																																																																									if (!spec
																																																																																																																																																																																																																																																																																											.equals(useCaseToInteraction)) {
																																																																																																																																																																																																																																																																																										if (!spec
																																																																																																																																																																																																																																																																																												.equals(step)) {
																																																																																																																																																																																																																																																																																											if (!spec
																																																																																																																																																																																																																																																																																													.equals(stepToCombo)) {
																																																																																																																																																																																																																																																																																												if (!altFlow
																																																																																																																																																																																																																																																																																														.equals(packageDeclaration)) {
																																																																																																																																																																																																																																																																																													if (!altFlow
																																																																																																																																																																																																																																																																																															.equals(sysActor)) {
																																																																																																																																																																																																																																																																																														if (!altFlow
																																																																																																																																																																																																																																																																																																.equals(sysLine)) {
																																																																																																																																																																																																																																																																																															if (!altFlow
																																																																																																																																																																																																																																																																																																	.equals(sysActorToSysLine)) {
																																																																																																																																																																																																																																																																																																if (!altFlow
																																																																																																																																																																																																																																																																																																		.equals(messageSend)) {
																																																																																																																																																																																																																																																																																																	if (!altFlow
																																																																																																																																																																																																																																																																																																			.equals(combo)) {
																																																																																																																																																																																																																																																																																																		if (!altFlow
																																																																																																																																																																																																																																																																																																				.equals(operand)) {
																																																																																																																																																																																																																																																																																																			if (!altFlow
																																																																																																																																																																																																																																																																																																					.equals(parentOperand)) {
																																																																																																																																																																																																																																																																																																				if (!altFlow
																																																																																																																																																																																																																																																																																																						.equals(parentCombo)) {
																																																																																																																																																																																																																																																																																																					if (!altFlow
																																																																																																																																																																																																																																																																																																							.equals(flow)) {
																																																																																																																																																																																																																																																																																																						if (!altFlow
																																																																																																																																																																																																																																																																																																								.equals(flowToParentOperand)) {
																																																																																																																																																																																																																																																																																																							if (!altFlow
																																																																																																																																																																																																																																																																																																									.equals(messageReceive)) {
																																																																																																																																																																																																																																																																																																								if (!altFlow
																																																																																																																																																																																																																																																																																																										.equals(line)) {
																																																																																																																																																																																																																																																																																																									if (!altFlow
																																																																																																																																																																																																																																																																																																											.equals(interaction)) {
																																																																																																																																																																																																																																																																																																										if (!altFlow
																																																																																																																																																																																																																																																																																																												.equals(useCase)) {
																																																																																																																																																																																																																																																																																																											if (!altFlow
																																																																																																																																																																																																																																																																																																													.equals(useCaseToInteraction)) {
																																																																																																																																																																																																																																																																																																												if (!altFlow
																																																																																																																																																																																																																																																																																																														.equals(step)) {
																																																																																																																																																																																																																																																																																																													if (!altFlow
																																																																																																																																																																																																																																																																																																															.equals(stepToCombo)) {
																																																																																																																																																																																																																																																																																																														if (!altFlow
																																																																																																																																																																																																																																																																																																																.equals(alternative1ToOperand)) {
																																																																																																																																																																																																																																																																																																															if (!altFlow
																																																																																																																																																																																																																																																																																																																	.equals(guard)) {
																																																																																																																																																																																																																																																																																																																if (!altFlow
																																																																																																																																																																																																																																																																																																																		.equals(spec)) {
																																																																																																																																																																																																																																																																																																																	if (!altFlow
																																																																																																																																																																																																																																																																																																																			.equals(altFlowToOperand)) {
																																																																																																																																																																																																																																																																																																																		if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																				.equals(packageDeclaration)) {
																																																																																																																																																																																																																																																																																																																			if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																					.equals(sysActor)) {
																																																																																																																																																																																																																																																																																																																				if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																						.equals(sysLine)) {
																																																																																																																																																																																																																																																																																																																					if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																							.equals(sysActorToSysLine)) {
																																																																																																																																																																																																																																																																																																																						if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																								.equals(messageSend)) {
																																																																																																																																																																																																																																																																																																																							if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																									.equals(combo)) {
																																																																																																																																																																																																																																																																																																																								if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																										.equals(operand)) {
																																																																																																																																																																																																																																																																																																																									if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																											.equals(parentOperand)) {
																																																																																																																																																																																																																																																																																																																										if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																												.equals(parentCombo)) {
																																																																																																																																																																																																																																																																																																																											if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																													.equals(flow)) {
																																																																																																																																																																																																																																																																																																																												if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																														.equals(flowToParentOperand)) {
																																																																																																																																																																																																																																																																																																																													if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																															.equals(messageReceive)) {
																																																																																																																																																																																																																																																																																																																														if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																.equals(line)) {
																																																																																																																																																																																																																																																																																																																															if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																	.equals(interaction)) {
																																																																																																																																																																																																																																																																																																																																if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																		.equals(useCase)) {
																																																																																																																																																																																																																																																																																																																																	if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																			.equals(useCaseToInteraction)) {
																																																																																																																																																																																																																																																																																																																																		if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																				.equals(step)) {
																																																																																																																																																																																																																																																																																																																																			if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																					.equals(stepToCombo)) {
																																																																																																																																																																																																																																																																																																																																				if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																						.equals(alternative1ToOperand)) {
																																																																																																																																																																																																																																																																																																																																					if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																							.equals(guard)) {
																																																																																																																																																																																																																																																																																																																																						if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																								.equals(spec)) {
																																																																																																																																																																																																																																																																																																																																							return new Object[] {
																																																																																																																																																																																																																																																																																																																																									ruleresult,
																																																																																																																																																																																																																																																																																																																																									packageDeclaration,
																																																																																																																																																																																																																																																																																																																																									actor,
																																																																																																																																																																																																																																																																																																																																									sysActor,
																																																																																																																																																																																																																																																																																																																																									sysLine,
																																																																																																																																																																																																																																																																																																																																									sysActorToSysLine,
																																																																																																																																																																																																																																																																																																																																									messageSend,
																																																																																																																																																																																																																																																																																																																																									combo,
																																																																																																																																																																																																																																																																																																																																									operand,
																																																																																																																																																																																																																																																																																																																																									parentOperand,
																																																																																																																																																																																																																																																																																																																																									parentCombo,
																																																																																																																																																																																																																																																																																																																																									flow,
																																																																																																																																																																																																																																																																																																																																									flowToParentOperand,
																																																																																																																																																																																																																																																																																																																																									messageReceive,
																																																																																																																																																																																																																																																																																																																																									line,
																																																																																																																																																																																																																																																																																																																																									interaction,
																																																																																																																																																																																																																																																																																																																																									useCase,
																																																																																																																																																																																																																																																																																																																																									useCaseToInteraction,
																																																																																																																																																																																																																																																																																																																																									actorToLine,
																																																																																																																																																																																																																																																																																																																																									step,
																																																																																																																																																																																																																																																																																																																																									alt,
																																																																																																																																																																																																																																																																																																																																									stepToCombo,
																																																																																																																																																																																																																																																																																																																																									alternative1ToOperand,
																																																																																																																																																																																																																																																																																																																																									guard,
																																																																																																																																																																																																																																																																																																																																									spec,
																																																																																																																																																																																																																																																																																																																																									altFlow,
																																																																																																																																																																																																																																																																																																																																									altFlowToOperand };
																																																																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																}
																																																																																																																																																																																																																															}
																																																																																																																																																																																																																														}
																																																																																																																																																																																																																													}
																																																																																																																																																																																																																												}
																																																																																																																																																																																																																											}
																																																																																																																																																																																																																										}
																																																																																																																																																																																																																									}
																																																																																																																																																																																																																								}
																																																																																																																																																																																																																							}
																																																																																																																																																																																																																						}
																																																																																																																																																																																																																					}
																																																																																																																																																																																																																				}
																																																																																																																																																																																																																			}
																																																																																																																																																																																																																		}
																																																																																																																																																																																																																	}
																																																																																																																																																																																																																}
																																																																																																																																																																																																															}
																																																																																																																																																																																																														}
																																																																																																																																																																																																													}
																																																																																																																																																																																																												}
																																																																																																																																																																																																											}
																																																																																																																																																																																																										}
																																																																																																																																																																																																									}
																																																																																																																																																																																																								}
																																																																																																																																																																																																							}
																																																																																																																																																																																																						}
																																																																																																																																																																																																					}
																																																																																																																																																																																																				}
																																																																																																																																																																																																			}
																																																																																																																																																																																																		}
																																																																																																																																																																																																	}
																																																																																																																																																																																																}
																																																																																																																																																																																															}
																																																																																																																																																																																														}
																																																																																																																																																																																													}
																																																																																																																																																																																												}
																																																																																																																																																																																											}
																																																																																																																																																																																										}
																																																																																																																																																																																									}
																																																																																																																																																																																								}
																																																																																																																																																																																							}
																																																																																																																																																																																						}
																																																																																																																																																																																					}
																																																																																																																																																																																				}
																																																																																																																																																																																			}
																																																																																																																																																																																		}
																																																																																																																																																																																	}
																																																																																																																																																																																}
																																																																																																																																																																															}
																																																																																																																																																																														}
																																																																																																																																																																													}
																																																																																																																																																																												}
																																																																																																																																																																											}
																																																																																																																																																																										}
																																																																																																																																																																									}
																																																																																																																																																																								}
																																																																																																																																																																							}
																																																																																																																																																																						}
																																																																																																																																																																					}
																																																																																																																																																																				}
																																																																																																																																																																			}
																																																																																																																																																																		}
																																																																																																																																																																	}
																																																																																																																																																																}
																																																																																																																																																															}
																																																																																																																																																														}
																																																																																																																																																													}
																																																																																																																																																												}
																																																																																																																																																											}
																																																																																																																																																										}
																																																																																																																																																									}
																																																																																																																																																								}
																																																																																																																																																							}
																																																																																																																																																						}
																																																																																																																																																					}
																																																																																																																																																				}
																																																																																																																																																			}
																																																																																																																																																		}
																																																																																																																																																	}
																																																																																																																																																}
																																																																																																																																															}
																																																																																																																																														}
																																																																																																																																													}
																																																																																																																																												}
																																																																																																																																											}
																																																																																																																																										}
																																																																																																																																									}
																																																																																																																																								}
																																																																																																																																							}
																																																																																																																																						}
																																																																																																																																					}
																																																																																																																																				}
																																																																																																																																			}
																																																																																																																																		}
																																																																																																																																	}
																																																																																																																																}
																																																																																																																															}
																																																																																																																														}
																																																																																																																													}
																																																																																																																												}
																																																																																																																											}
																																																																																																																										}
																																																																																																																									}
																																																																																																																								}
																																																																																																																							}
																																																																																																																						}
																																																																																																																					}
																																																																																																																				}
																																																																																																																			}
																																																																																																																		}
																																																																																																																	}
																																																																																																																}
																																																																																																															}
																																																																																																														}
																																																																																																													}
																																																																																																												}
																																																																																																											}
																																																																																																										}
																																																																																																									}
																																																																																																								}
																																																																																																							}
																																																																																																						}
																																																																																																					}
																																																																																																				}
																																																																																																			}
																																																																																																		}
																																																																																																	}
																																																																																																}
																																																																																															}
																																																																																														}
																																																																																													}
																																																																																												}
																																																																																											}
																																																																																										}
																																																																																									}
																																																																																								}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_1_3_greenBBBBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF(
			PerformRuleResult ruleresult, EObject actor, EObject sysLine,
			EObject messageSend, EObject combo, EObject operand,
			EObject parentOperand, EObject parentCombo, EObject flow,
			EObject messageReceive, EObject line, EObject interaction,
			EObject step, EObject alt, EObject stepToCombo,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand) {
		EMoflonEdge sysLine__messageSend____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge messageSend__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysLine__combo____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge combo__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysLine__operand____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge operand__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysLine__parentOperand____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentOperand__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysLine__parentCombo____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentCombo__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentOperand__messageReceive____fragment = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge messageReceive__parentOperand____enclosingOperand = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge line__parentOperand____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentOperand__line____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge line__parentCombo____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentCombo__line____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge combo__interaction____enclosingInteraction = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge interaction__combo____fragment = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge flow__step____steps = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge step__alt____stepAlternative = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge step__actor____actor = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge alt__altFlow____ref = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge line__operand____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge operand__line____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge stepToCombo__step____source = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge stepToCombo__combo____target = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge operand__guard____guard = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge alternative1ToOperand__alt____source = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge alternative1ToOperand__operand____target = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge guard__spec____specification = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge altFlowToOperand__altFlow____source = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge altFlowToOperand__operand____target = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		String ruleresult_ruleName_prime = "AltUserStepNFToComboRule";
		String sysLine__messageSend____coveredBy_name_prime = "coveredBy";
		String messageSend__sysLine____covered_name_prime = "covered";
		String sysLine__combo____coveredBy_name_prime = "coveredBy";
		String combo__sysLine____covered_name_prime = "covered";
		String sysLine__operand____coveredBy_name_prime = "coveredBy";
		String operand__sysLine____covered_name_prime = "covered";
		String sysLine__parentOperand____coveredBy_name_prime = "coveredBy";
		String parentOperand__sysLine____covered_name_prime = "covered";
		String sysLine__parentCombo____coveredBy_name_prime = "coveredBy";
		String parentCombo__sysLine____covered_name_prime = "covered";
		String parentOperand__messageReceive____fragment_name_prime = "fragment";
		String messageReceive__parentOperand____enclosingOperand_name_prime = "enclosingOperand";
		String line__parentOperand____coveredBy_name_prime = "coveredBy";
		String parentOperand__line____covered_name_prime = "covered";
		String line__parentCombo____coveredBy_name_prime = "coveredBy";
		String parentCombo__line____covered_name_prime = "covered";
		String combo__interaction____enclosingInteraction_name_prime = "enclosingInteraction";
		String interaction__combo____fragment_name_prime = "fragment";
		String flow__step____steps_name_prime = "steps";
		String step__alt____stepAlternative_name_prime = "stepAlternative";
		String step__actor____actor_name_prime = "actor";
		String alt__altFlow____ref_name_prime = "ref";
		String line__operand____coveredBy_name_prime = "coveredBy";
		String operand__line____covered_name_prime = "covered";
		String stepToCombo__step____source_name_prime = "source";
		String stepToCombo__combo____target_name_prime = "target";
		String operand__guard____guard_name_prime = "guard";
		String alternative1ToOperand__alt____source_name_prime = "source";
		String alternative1ToOperand__operand____target_name_prime = "target";
		String guard__spec____specification_name_prime = "specification";
		String altFlowToOperand__altFlow____source_name_prime = "source";
		String altFlowToOperand__operand____target_name_prime = "target";
		sysLine__messageSend____coveredBy.setSrc(sysLine);
		sysLine__messageSend____coveredBy.setTrg(messageSend);
		ruleresult.getCreatedEdges().add(sysLine__messageSend____coveredBy);
		messageSend__sysLine____covered.setSrc(messageSend);
		messageSend__sysLine____covered.setTrg(sysLine);
		ruleresult.getCreatedEdges().add(messageSend__sysLine____covered);
		sysLine__combo____coveredBy.setSrc(sysLine);
		sysLine__combo____coveredBy.setTrg(combo);
		ruleresult.getCreatedEdges().add(sysLine__combo____coveredBy);
		combo__sysLine____covered.setSrc(combo);
		combo__sysLine____covered.setTrg(sysLine);
		ruleresult.getCreatedEdges().add(combo__sysLine____covered);
		sysLine__operand____coveredBy.setSrc(sysLine);
		sysLine__operand____coveredBy.setTrg(operand);
		ruleresult.getCreatedEdges().add(sysLine__operand____coveredBy);
		operand__sysLine____covered.setSrc(operand);
		operand__sysLine____covered.setTrg(sysLine);
		ruleresult.getCreatedEdges().add(operand__sysLine____covered);
		sysLine__parentOperand____coveredBy.setSrc(sysLine);
		sysLine__parentOperand____coveredBy.setTrg(parentOperand);
		ruleresult.getCreatedEdges().add(sysLine__parentOperand____coveredBy);
		parentOperand__sysLine____covered.setSrc(parentOperand);
		parentOperand__sysLine____covered.setTrg(sysLine);
		ruleresult.getCreatedEdges().add(parentOperand__sysLine____covered);
		sysLine__parentCombo____coveredBy.setSrc(sysLine);
		sysLine__parentCombo____coveredBy.setTrg(parentCombo);
		ruleresult.getCreatedEdges().add(sysLine__parentCombo____coveredBy);
		parentCombo__sysLine____covered.setSrc(parentCombo);
		parentCombo__sysLine____covered.setTrg(sysLine);
		ruleresult.getCreatedEdges().add(parentCombo__sysLine____covered);
		parentOperand__messageReceive____fragment.setSrc(parentOperand);
		parentOperand__messageReceive____fragment.setTrg(messageReceive);
		ruleresult.getCreatedEdges().add(
				parentOperand__messageReceive____fragment);
		messageReceive__parentOperand____enclosingOperand
				.setSrc(messageReceive);
		messageReceive__parentOperand____enclosingOperand.setTrg(parentOperand);
		ruleresult.getCreatedEdges().add(
				messageReceive__parentOperand____enclosingOperand);
		line__parentOperand____coveredBy.setSrc(line);
		line__parentOperand____coveredBy.setTrg(parentOperand);
		ruleresult.getCreatedEdges().add(line__parentOperand____coveredBy);
		parentOperand__line____covered.setSrc(parentOperand);
		parentOperand__line____covered.setTrg(line);
		ruleresult.getCreatedEdges().add(parentOperand__line____covered);
		line__parentCombo____coveredBy.setSrc(line);
		line__parentCombo____coveredBy.setTrg(parentCombo);
		ruleresult.getCreatedEdges().add(line__parentCombo____coveredBy);
		parentCombo__line____covered.setSrc(parentCombo);
		parentCombo__line____covered.setTrg(line);
		ruleresult.getCreatedEdges().add(parentCombo__line____covered);
		combo__interaction____enclosingInteraction.setSrc(combo);
		combo__interaction____enclosingInteraction.setTrg(interaction);
		ruleresult.getCreatedEdges().add(
				combo__interaction____enclosingInteraction);
		interaction__combo____fragment.setSrc(interaction);
		interaction__combo____fragment.setTrg(combo);
		ruleresult.getCreatedEdges().add(interaction__combo____fragment);
		flow__step____steps.setSrc(flow);
		flow__step____steps.setTrg(step);
		ruleresult.getTranslatedEdges().add(flow__step____steps);
		step__alt____stepAlternative.setSrc(step);
		step__alt____stepAlternative.setTrg(alt);
		ruleresult.getTranslatedEdges().add(step__alt____stepAlternative);
		step__actor____actor.setSrc(step);
		step__actor____actor.setTrg(actor);
		ruleresult.getTranslatedEdges().add(step__actor____actor);
		alt__altFlow____ref.setSrc(alt);
		alt__altFlow____ref.setTrg(altFlow);
		ruleresult.getTranslatedEdges().add(alt__altFlow____ref);
		line__operand____coveredBy.setSrc(line);
		line__operand____coveredBy.setTrg(operand);
		ruleresult.getCreatedEdges().add(line__operand____coveredBy);
		operand__line____covered.setSrc(operand);
		operand__line____covered.setTrg(line);
		ruleresult.getCreatedEdges().add(operand__line____covered);
		stepToCombo__step____source.setSrc(stepToCombo);
		stepToCombo__step____source.setTrg(step);
		ruleresult.getCreatedEdges().add(stepToCombo__step____source);
		stepToCombo__combo____target.setSrc(stepToCombo);
		stepToCombo__combo____target.setTrg(combo);
		ruleresult.getCreatedEdges().add(stepToCombo__combo____target);
		operand__guard____guard.setSrc(operand);
		operand__guard____guard.setTrg(guard);
		ruleresult.getCreatedEdges().add(operand__guard____guard);
		alternative1ToOperand__alt____source.setSrc(alternative1ToOperand);
		alternative1ToOperand__alt____source.setTrg(alt);
		ruleresult.getCreatedEdges().add(alternative1ToOperand__alt____source);
		alternative1ToOperand__operand____target.setSrc(alternative1ToOperand);
		alternative1ToOperand__operand____target.setTrg(operand);
		ruleresult.getCreatedEdges().add(
				alternative1ToOperand__operand____target);
		guard__spec____specification.setSrc(guard);
		guard__spec____specification.setTrg(spec);
		ruleresult.getCreatedEdges().add(guard__spec____specification);
		altFlowToOperand__altFlow____source.setSrc(altFlowToOperand);
		altFlowToOperand__altFlow____source.setTrg(altFlow);
		ruleresult.getCreatedEdges().add(altFlowToOperand__altFlow____source);
		altFlowToOperand__operand____target.setSrc(altFlowToOperand);
		altFlowToOperand__operand____target.setTrg(operand);
		ruleresult.getCreatedEdges().add(altFlowToOperand__operand____target);
		ruleresult.setRuleName(ruleresult_ruleName_prime);
		sysLine__messageSend____coveredBy
				.setName(sysLine__messageSend____coveredBy_name_prime);
		messageSend__sysLine____covered
				.setName(messageSend__sysLine____covered_name_prime);
		sysLine__combo____coveredBy
				.setName(sysLine__combo____coveredBy_name_prime);
		combo__sysLine____covered.setName(combo__sysLine____covered_name_prime);
		sysLine__operand____coveredBy
				.setName(sysLine__operand____coveredBy_name_prime);
		operand__sysLine____covered
				.setName(operand__sysLine____covered_name_prime);
		sysLine__parentOperand____coveredBy
				.setName(sysLine__parentOperand____coveredBy_name_prime);
		parentOperand__sysLine____covered
				.setName(parentOperand__sysLine____covered_name_prime);
		sysLine__parentCombo____coveredBy
				.setName(sysLine__parentCombo____coveredBy_name_prime);
		parentCombo__sysLine____covered
				.setName(parentCombo__sysLine____covered_name_prime);
		parentOperand__messageReceive____fragment
				.setName(parentOperand__messageReceive____fragment_name_prime);
		messageReceive__parentOperand____enclosingOperand
				.setName(messageReceive__parentOperand____enclosingOperand_name_prime);
		line__parentOperand____coveredBy
				.setName(line__parentOperand____coveredBy_name_prime);
		parentOperand__line____covered
				.setName(parentOperand__line____covered_name_prime);
		line__parentCombo____coveredBy
				.setName(line__parentCombo____coveredBy_name_prime);
		parentCombo__line____covered
				.setName(parentCombo__line____covered_name_prime);
		combo__interaction____enclosingInteraction
				.setName(combo__interaction____enclosingInteraction_name_prime);
		interaction__combo____fragment
				.setName(interaction__combo____fragment_name_prime);
		flow__step____steps.setName(flow__step____steps_name_prime);
		step__alt____stepAlternative
				.setName(step__alt____stepAlternative_name_prime);
		step__actor____actor.setName(step__actor____actor_name_prime);
		alt__altFlow____ref.setName(alt__altFlow____ref_name_prime);
		line__operand____coveredBy
				.setName(line__operand____coveredBy_name_prime);
		operand__line____covered.setName(operand__line____covered_name_prime);
		stepToCombo__step____source
				.setName(stepToCombo__step____source_name_prime);
		stepToCombo__combo____target
				.setName(stepToCombo__combo____target_name_prime);
		operand__guard____guard.setName(operand__guard____guard_name_prime);
		alternative1ToOperand__alt____source
				.setName(alternative1ToOperand__alt____source_name_prime);
		alternative1ToOperand__operand____target
				.setName(alternative1ToOperand__operand____target_name_prime);
		guard__spec____specification
				.setName(guard__spec____specification_name_prime);
		altFlowToOperand__altFlow____source
				.setName(altFlowToOperand__altFlow____source_name_prime);
		altFlowToOperand__operand____target
				.setName(altFlowToOperand__operand____target_name_prime);
		return new Object[] { ruleresult, actor, sysLine, messageSend, combo,
				operand, parentOperand, parentCombo, flow, messageReceive,
				line, interaction, step, alt, stepToCombo,
				alternative1ToOperand, guard, spec, altFlow, altFlowToOperand,
				sysLine__messageSend____coveredBy,
				messageSend__sysLine____covered, sysLine__combo____coveredBy,
				combo__sysLine____covered, sysLine__operand____coveredBy,
				operand__sysLine____covered,
				sysLine__parentOperand____coveredBy,
				parentOperand__sysLine____covered,
				sysLine__parentCombo____coveredBy,
				parentCombo__sysLine____covered,
				parentOperand__messageReceive____fragment,
				messageReceive__parentOperand____enclosingOperand,
				line__parentOperand____coveredBy,
				parentOperand__line____covered, line__parentCombo____coveredBy,
				parentCombo__line____covered,
				combo__interaction____enclosingInteraction,
				interaction__combo____fragment, flow__step____steps,
				step__alt____stepAlternative, step__actor____actor,
				alt__altFlow____ref, line__operand____coveredBy,
				operand__line____covered, stepToCombo__step____source,
				stepToCombo__combo____target, operand__guard____guard,
				alternative1ToOperand__alt____source,
				alternative1ToOperand__operand____target,
				guard__spec____specification,
				altFlowToOperand__altFlow____source,
				altFlowToOperand__operand____target };
	}

	public static final void pattern_AltUserStepNFToComboRule_1_5_expressionBBBBBBBBBBBBBBBBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, PerformRuleResult ruleresult,
			EObject packageDeclaration, EObject actor, EObject sysActor,
			EObject sysLine, EObject sysActorToSysLine, EObject messageSend,
			EObject combo, EObject operand, EObject parentOperand,
			EObject parentCombo, EObject flow, EObject flowToParentOperand,
			EObject messageReceive, EObject line, EObject interaction,
			EObject useCase, EObject useCaseToInteraction, EObject actorToLine,
			EObject step, EObject alt, EObject stepToCombo,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand) {
		_this.registerObjects_FWD(ruleresult, packageDeclaration, actor,
				sysActor, sysLine, sysActorToSysLine, messageSend, combo,
				operand, parentOperand, parentCombo, flow, flowToParentOperand,
				messageReceive, line, interaction, useCase,
				useCaseToInteraction, actorToLine, step, alt, stepToCombo,
				alternative1ToOperand, guard, spec, altFlow, altFlowToOperand);

	}

	public static final PerformRuleResult pattern_AltUserStepNFToComboRule_1_6_expressionFB(
			PerformRuleResult ruleresult) {
		PerformRuleResult _result = ruleresult;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_2_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass eClass = _localVariable_0;
		if (eClass != null) {
			return new Object[] { eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_2_1_blackFBB(
			EClass eClass, AltUserStepNFToComboRule _this) {
		for (EOperation performOperation : eClass.getEOperations()) {
			String performOperationname = performOperation.getName();
			if (performOperationname.equals("perform_FWD")) {
				return new Object[] { performOperation, eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_2_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_2_1_binding = pattern_AltUserStepNFToComboRule_2_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_2_1_binding != null) {
			EClass eClass = (EClass) result_pattern_AltUserStepNFToComboRule_2_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_2_1_black = pattern_AltUserStepNFToComboRule_2_1_blackFBB(
					eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_2_1_black != null) {
				EOperation performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_2_1_black[0];

				return new Object[] { performOperation, eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_2_1_greenBF(
			EOperation performOperation) {
		IsApplicableRuleResult ruleresult = TGGRuntimeFactory.eINSTANCE
				.createIsApplicableRuleResult();
		boolean ruleresult_success_prime = false;
		String ruleresult_rule_prime = "AltUserStepNFToComboRule";
		ruleresult.setPerformOperation(performOperation);
		ruleresult.setSuccess(Boolean.valueOf(ruleresult_success_prime));
		ruleresult.setRule(ruleresult_rule_prime);
		return new Object[] { performOperation, ruleresult };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_2_2_bindingFFFFFFFFB(
			Match match) {
		EObject _localVariable_0 = match.getObject("packageDeclaration");
		EObject _localVariable_1 = match.getObject("actor");
		EObject _localVariable_2 = match.getObject("sysActor");
		EObject _localVariable_3 = match.getObject("flow");
		EObject _localVariable_4 = match.getObject("useCase");
		EObject _localVariable_5 = match.getObject("step");
		EObject _localVariable_6 = match.getObject("alt");
		EObject _localVariable_7 = match.getObject("altFlow");
		EObject tmpPackageDeclaration = _localVariable_0;
		EObject tmpActor = _localVariable_1;
		EObject tmpSysActor = _localVariable_2;
		EObject tmpFlow = _localVariable_3;
		EObject tmpUseCase = _localVariable_4;
		EObject tmpStep = _localVariable_5;
		EObject tmpAlt = _localVariable_6;
		EObject tmpAltFlow = _localVariable_7;
		if (tmpPackageDeclaration instanceof PackageDeclaration) {
			PackageDeclaration packageDeclaration = (PackageDeclaration) tmpPackageDeclaration;
			if (tmpActor instanceof Actor) {
				Actor actor = (Actor) tmpActor;
				if (tmpSysActor instanceof Actor) {
					Actor sysActor = (Actor) tmpSysActor;
					if (tmpFlow instanceof NamedFlow) {
						NamedFlow flow = (NamedFlow) tmpFlow;
						if (tmpUseCase instanceof UseCase) {
							UseCase useCase = (UseCase) tmpUseCase;
							if (tmpStep instanceof NormalStep) {
								NormalStep step = (NormalStep) tmpStep;
								if (tmpAlt instanceof AlternativeFlowAlternative) {
									AlternativeFlowAlternative alt = (AlternativeFlowAlternative) tmpAlt;
									if (tmpAltFlow instanceof AlternativeFlow) {
										AlternativeFlow altFlow = (AlternativeFlow) tmpAltFlow;
										return new Object[] {
												packageDeclaration, actor,
												sysActor, flow, useCase, step,
												alt, altFlow, match };
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_2_2_blackBBBFFFBFFFBFFBBBB(
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, UseCase useCase, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow, Match match) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		if (!actor.equals(sysActor)) {
			if (!altFlow.equals(flow)) {
				for (ActorToLifeline sysActorToSysLine : org.moflon.util.eMoflonEMFUtil
						.getOppositeReferenceTyped(sysActor,
								ActorToLifeline.class, "source")) {
					Lifeline sysLine = sysActorToSysLine.getTarget();
					if (sysLine != null) {
						for (FlowToInteractionFragment flowToParentOperand : org.moflon.util.eMoflonEMFUtil
								.getOppositeReferenceTyped(flow,
										FlowToInteractionFragment.class,
										"source")) {
							InteractionFragment tmpParentOperand = flowToParentOperand
									.getTarget();
							if (tmpParentOperand instanceof InteractionOperand) {
								InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
								for (UseCaseToInteraction useCaseToInteraction : org.moflon.util.eMoflonEMFUtil
										.getOppositeReferenceTyped(useCase,
												UseCaseToInteraction.class,
												"source")) {
									Interaction interaction = useCaseToInteraction
											.getTarget();
									if (interaction != null) {
										for (ActorToLifeline actorToLine : org.moflon.util.eMoflonEMFUtil
												.getOppositeReferenceTyped(
														actor,
														ActorToLifeline.class,
														"source")) {
											if (!actorToLine
													.equals(sysActorToSysLine)) {
												Lifeline line = actorToLine
														.getTarget();
												if (line != null) {
													if (!line.equals(sysLine)) {
														_result.add(new Object[] {
																packageDeclaration,
																actor,
																sysActor,
																sysLine,
																sysActorToSysLine,
																parentOperand,
																flow,
																flowToParentOperand,
																line,
																interaction,
																useCase,
																useCaseToInteraction,
																actorToLine,
																step, alt,
																altFlow, match });
													}
												}

											}
										}
									}

								}
							}

						}
					}

				}
			}
		}
		return _result;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_2_3_blackBBBBBBFBBBBBBBBBB(
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			InteractionOperand parentOperand, NamedFlow flow,
			FlowToInteractionFragment flowToParentOperand, Lifeline line,
			Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		if (!actor.equals(sysActor)) {
			if (!line.equals(sysLine)) {
				if (!actorToLine.equals(sysActorToSysLine)) {
					if (!altFlow.equals(flow)) {
						if (packageDeclaration.getActors().contains(actor)) {
							if (packageDeclaration.getActors().contains(
									sysActor)) {
								if (sysActor.equals(sysActorToSysLine
										.getSource())) {
									if (sysLine.equals(sysActorToSysLine
											.getTarget())) {
										if (flow.equals(flowToParentOperand
												.getSource())) {
											if (parentOperand
													.equals(flowToParentOperand
															.getTarget())) {
												if (interaction.equals(line
														.getInteraction())) {
													if (useCase.getFlows()
															.contains(flow)) {
														if (useCase
																.equals(useCaseToInteraction
																		.getSource())) {
															if (interaction
																	.equals(useCaseToInteraction
																			.getTarget())) {
																if (flow.getSteps()
																		.contains(
																				step)) {
																	if (packageDeclaration
																			.getUseCases()
																			.contains(
																					useCase)) {
																		if (actor
																				.equals(actorToLine
																						.getSource())) {
																			if (line.equals(actorToLine
																					.getTarget())) {
																				if (step.getStepAlternative()
																						.contains(
																								alt)) {
																					if (actor
																							.equals(step
																									.getActor())) {
																						if (altFlow
																								.equals(alt
																										.getRef())) {
																							for (CombinedFragment parentCombo : org.moflon.util.eMoflonEMFUtil
																									.getOppositeReferenceTyped(
																											parentOperand,
																											CombinedFragment.class,
																											"operand")) {
																								_result.add(new Object[] {
																										packageDeclaration,
																										actor,
																										sysActor,
																										sysLine,
																										sysActorToSysLine,
																										parentOperand,
																										parentCombo,
																										flow,
																										flowToParentOperand,
																										line,
																										interaction,
																										useCase,
																										useCaseToInteraction,
																										actorToLine,
																										step,
																										alt,
																										altFlow });
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_2_3_greenBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFF(
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			InteractionOperand parentOperand, CombinedFragment parentCombo,
			NamedFlow flow, FlowToInteractionFragment flowToParentOperand,
			Lifeline line, Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		IsApplicableMatch isApplicableMatch = TGGRuntimeFactory.eINSTANCE
				.createIsApplicableMatch();
		EMoflonEdge packageDeclaration__actor____actors = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge packageDeclaration__sysActor____actors = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysActorToSysLine__sysActor____source = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysActorToSysLine__sysLine____target = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentCombo__parentOperand____operand = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge flowToParentOperand__flow____source = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge flowToParentOperand__parentOperand____target = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge line__interaction____interaction = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge interaction__line____lifeline = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge useCase__flow____flows = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge useCaseToInteraction__useCase____source = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge useCaseToInteraction__interaction____target = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge flow__step____steps = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge packageDeclaration__useCase____useCases = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge actorToLine__actor____source = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge actorToLine__line____target = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge step__alt____stepAlternative = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge step__actor____actor = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge alt__altFlow____ref = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		String packageDeclaration__actor____actors_name_prime = "actors";
		String packageDeclaration__sysActor____actors_name_prime = "actors";
		String sysActorToSysLine__sysActor____source_name_prime = "source";
		String sysActorToSysLine__sysLine____target_name_prime = "target";
		String parentCombo__parentOperand____operand_name_prime = "operand";
		String flowToParentOperand__flow____source_name_prime = "source";
		String flowToParentOperand__parentOperand____target_name_prime = "target";
		String line__interaction____interaction_name_prime = "interaction";
		String interaction__line____lifeline_name_prime = "lifeline";
		String useCase__flow____flows_name_prime = "flows";
		String useCaseToInteraction__useCase____source_name_prime = "source";
		String useCaseToInteraction__interaction____target_name_prime = "target";
		String flow__step____steps_name_prime = "steps";
		String packageDeclaration__useCase____useCases_name_prime = "useCases";
		String actorToLine__actor____source_name_prime = "source";
		String actorToLine__line____target_name_prime = "target";
		String step__alt____stepAlternative_name_prime = "stepAlternative";
		String step__actor____actor_name_prime = "actor";
		String alt__altFlow____ref_name_prime = "ref";
		isApplicableMatch.getAllContextElements().add(packageDeclaration);
		isApplicableMatch.getAllContextElements().add(actor);
		isApplicableMatch.getAllContextElements().add(sysActor);
		isApplicableMatch.getAllContextElements().add(sysLine);
		isApplicableMatch.getAllContextElements().add(sysActorToSysLine);
		isApplicableMatch.getAllContextElements().add(parentOperand);
		isApplicableMatch.getAllContextElements().add(parentCombo);
		isApplicableMatch.getAllContextElements().add(flow);
		isApplicableMatch.getAllContextElements().add(flowToParentOperand);
		isApplicableMatch.getAllContextElements().add(line);
		isApplicableMatch.getAllContextElements().add(interaction);
		isApplicableMatch.getAllContextElements().add(useCase);
		isApplicableMatch.getAllContextElements().add(useCaseToInteraction);
		isApplicableMatch.getAllContextElements().add(actorToLine);
		isApplicableMatch.getAllContextElements().add(step);
		isApplicableMatch.getAllContextElements().add(alt);
		isApplicableMatch.getAllContextElements().add(altFlow);
		packageDeclaration__actor____actors.setSrc(packageDeclaration);
		packageDeclaration__actor____actors.setTrg(actor);
		isApplicableMatch.getAllContextElements().add(
				packageDeclaration__actor____actors);
		packageDeclaration__sysActor____actors.setSrc(packageDeclaration);
		packageDeclaration__sysActor____actors.setTrg(sysActor);
		isApplicableMatch.getAllContextElements().add(
				packageDeclaration__sysActor____actors);
		sysActorToSysLine__sysActor____source.setSrc(sysActorToSysLine);
		sysActorToSysLine__sysActor____source.setTrg(sysActor);
		isApplicableMatch.getAllContextElements().add(
				sysActorToSysLine__sysActor____source);
		sysActorToSysLine__sysLine____target.setSrc(sysActorToSysLine);
		sysActorToSysLine__sysLine____target.setTrg(sysLine);
		isApplicableMatch.getAllContextElements().add(
				sysActorToSysLine__sysLine____target);
		parentCombo__parentOperand____operand.setSrc(parentCombo);
		parentCombo__parentOperand____operand.setTrg(parentOperand);
		isApplicableMatch.getAllContextElements().add(
				parentCombo__parentOperand____operand);
		flowToParentOperand__flow____source.setSrc(flowToParentOperand);
		flowToParentOperand__flow____source.setTrg(flow);
		isApplicableMatch.getAllContextElements().add(
				flowToParentOperand__flow____source);
		flowToParentOperand__parentOperand____target
				.setSrc(flowToParentOperand);
		flowToParentOperand__parentOperand____target.setTrg(parentOperand);
		isApplicableMatch.getAllContextElements().add(
				flowToParentOperand__parentOperand____target);
		line__interaction____interaction.setSrc(line);
		line__interaction____interaction.setTrg(interaction);
		isApplicableMatch.getAllContextElements().add(
				line__interaction____interaction);
		interaction__line____lifeline.setSrc(interaction);
		interaction__line____lifeline.setTrg(line);
		isApplicableMatch.getAllContextElements().add(
				interaction__line____lifeline);
		useCase__flow____flows.setSrc(useCase);
		useCase__flow____flows.setTrg(flow);
		isApplicableMatch.getAllContextElements().add(useCase__flow____flows);
		useCaseToInteraction__useCase____source.setSrc(useCaseToInteraction);
		useCaseToInteraction__useCase____source.setTrg(useCase);
		isApplicableMatch.getAllContextElements().add(
				useCaseToInteraction__useCase____source);
		useCaseToInteraction__interaction____target
				.setSrc(useCaseToInteraction);
		useCaseToInteraction__interaction____target.setTrg(interaction);
		isApplicableMatch.getAllContextElements().add(
				useCaseToInteraction__interaction____target);
		flow__step____steps.setSrc(flow);
		flow__step____steps.setTrg(step);
		isApplicableMatch.getAllContextElements().add(flow__step____steps);
		packageDeclaration__useCase____useCases.setSrc(packageDeclaration);
		packageDeclaration__useCase____useCases.setTrg(useCase);
		isApplicableMatch.getAllContextElements().add(
				packageDeclaration__useCase____useCases);
		actorToLine__actor____source.setSrc(actorToLine);
		actorToLine__actor____source.setTrg(actor);
		isApplicableMatch.getAllContextElements().add(
				actorToLine__actor____source);
		actorToLine__line____target.setSrc(actorToLine);
		actorToLine__line____target.setTrg(line);
		isApplicableMatch.getAllContextElements().add(
				actorToLine__line____target);
		step__alt____stepAlternative.setSrc(step);
		step__alt____stepAlternative.setTrg(alt);
		isApplicableMatch.getAllContextElements().add(
				step__alt____stepAlternative);
		step__actor____actor.setSrc(step);
		step__actor____actor.setTrg(actor);
		isApplicableMatch.getAllContextElements().add(step__actor____actor);
		alt__altFlow____ref.setSrc(alt);
		alt__altFlow____ref.setTrg(altFlow);
		isApplicableMatch.getAllContextElements().add(alt__altFlow____ref);
		packageDeclaration__actor____actors
				.setName(packageDeclaration__actor____actors_name_prime);
		packageDeclaration__sysActor____actors
				.setName(packageDeclaration__sysActor____actors_name_prime);
		sysActorToSysLine__sysActor____source
				.setName(sysActorToSysLine__sysActor____source_name_prime);
		sysActorToSysLine__sysLine____target
				.setName(sysActorToSysLine__sysLine____target_name_prime);
		parentCombo__parentOperand____operand
				.setName(parentCombo__parentOperand____operand_name_prime);
		flowToParentOperand__flow____source
				.setName(flowToParentOperand__flow____source_name_prime);
		flowToParentOperand__parentOperand____target
				.setName(flowToParentOperand__parentOperand____target_name_prime);
		line__interaction____interaction
				.setName(line__interaction____interaction_name_prime);
		interaction__line____lifeline
				.setName(interaction__line____lifeline_name_prime);
		useCase__flow____flows.setName(useCase__flow____flows_name_prime);
		useCaseToInteraction__useCase____source
				.setName(useCaseToInteraction__useCase____source_name_prime);
		useCaseToInteraction__interaction____target
				.setName(useCaseToInteraction__interaction____target_name_prime);
		flow__step____steps.setName(flow__step____steps_name_prime);
		packageDeclaration__useCase____useCases
				.setName(packageDeclaration__useCase____useCases_name_prime);
		actorToLine__actor____source
				.setName(actorToLine__actor____source_name_prime);
		actorToLine__line____target
				.setName(actorToLine__line____target_name_prime);
		step__alt____stepAlternative
				.setName(step__alt____stepAlternative_name_prime);
		step__actor____actor.setName(step__actor____actor_name_prime);
		alt__altFlow____ref.setName(alt__altFlow____ref_name_prime);
		return new Object[] { packageDeclaration, actor, sysActor, sysLine,
				sysActorToSysLine, parentOperand, parentCombo, flow,
				flowToParentOperand, line, interaction, useCase,
				useCaseToInteraction, actorToLine, step, alt, altFlow,
				isApplicableMatch, packageDeclaration__actor____actors,
				packageDeclaration__sysActor____actors,
				sysActorToSysLine__sysActor____source,
				sysActorToSysLine__sysLine____target,
				parentCombo__parentOperand____operand,
				flowToParentOperand__flow____source,
				flowToParentOperand__parentOperand____target,
				line__interaction____interaction,
				interaction__line____lifeline, useCase__flow____flows,
				useCaseToInteraction__useCase____source,
				useCaseToInteraction__interaction____target,
				flow__step____steps, packageDeclaration__useCase____useCases,
				actorToLine__actor____source, actorToLine__line____target,
				step__alt____stepAlternative, step__actor____actor,
				alt__altFlow____ref };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_2_4_bindingFBBBBBBBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this,
			IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			InteractionOperand parentOperand, CombinedFragment parentCombo,
			NamedFlow flow, FlowToInteractionFragment flowToParentOperand,
			Lifeline line, Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		CSP _localVariable_0 = _this.isApplicable_solveCsp_FWD(
				isApplicableMatch, packageDeclaration, actor, sysActor,
				sysLine, sysActorToSysLine, parentOperand, parentCombo, flow,
				flowToParentOperand, line, interaction, useCase,
				useCaseToInteraction, actorToLine, step, alt, altFlow);
		CSP csp = _localVariable_0;
		if (csp != null) {
			return new Object[] { csp, _this, isApplicableMatch,
					packageDeclaration, actor, sysActor, sysLine,
					sysActorToSysLine, parentOperand, parentCombo, flow,
					flowToParentOperand, line, interaction, useCase,
					useCaseToInteraction, actorToLine, step, alt, altFlow };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_2_4_blackB(
			CSP csp) {
		return new Object[] { csp };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_2_4_bindingAndBlackFBBBBBBBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this,
			IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			InteractionOperand parentOperand, CombinedFragment parentCombo,
			NamedFlow flow, FlowToInteractionFragment flowToParentOperand,
			Lifeline line, Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		Object[] result_pattern_AltUserStepNFToComboRule_2_4_binding = pattern_AltUserStepNFToComboRule_2_4_bindingFBBBBBBBBBBBBBBBBBBB(
				_this, isApplicableMatch, packageDeclaration, actor, sysActor,
				sysLine, sysActorToSysLine, parentOperand, parentCombo, flow,
				flowToParentOperand, line, interaction, useCase,
				useCaseToInteraction, actorToLine, step, alt, altFlow);
		if (result_pattern_AltUserStepNFToComboRule_2_4_binding != null) {
			CSP csp = (CSP) result_pattern_AltUserStepNFToComboRule_2_4_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_2_4_black = pattern_AltUserStepNFToComboRule_2_4_blackB(csp);
			if (result_pattern_AltUserStepNFToComboRule_2_4_black != null) {

				return new Object[] { csp, _this, isApplicableMatch,
						packageDeclaration, actor, sysActor, sysLine,
						sysActorToSysLine, parentOperand, parentCombo, flow,
						flowToParentOperand, line, interaction, useCase,
						useCaseToInteraction, actorToLine, step, alt, altFlow };
			}
		}
		return null;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_2_5_expressionFBB(
			AltUserStepNFToComboRule _this, CSP csp) {
		boolean _localVariable_0 = _this.isApplicable_checkCsp_FWD(csp);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_2_6_blackBB(
			IsApplicableRuleResult ruleresult,
			IsApplicableMatch isApplicableMatch) {
		return new Object[] { ruleresult, isApplicableMatch };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_2_6_greenBB(
			IsApplicableRuleResult ruleresult,
			IsApplicableMatch isApplicableMatch) {
		ruleresult.getIsApplicableMatch().add(isApplicableMatch);
		boolean ruleresult_success_prime = Boolean.valueOf(true);
		String isApplicableMatch_ruleName_prime = "AltUserStepNFToComboRule";
		ruleresult.setSuccess(Boolean.valueOf(ruleresult_success_prime));
		isApplicableMatch.setRuleName(isApplicableMatch_ruleName_prime);
		return new Object[] { ruleresult, isApplicableMatch };
	}

	public static final IsApplicableRuleResult pattern_AltUserStepNFToComboRule_2_7_expressionFB(
			IsApplicableRuleResult ruleresult) {
		IsApplicableRuleResult _result = ruleresult;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_10_1_blackBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		if (!combo.equals(parentCombo)) {
			if (!operand.equals(parentOperand)) {
				if (!messageReceive.equals(messageSend)) {
					if (!line.equals(sysLine)) {
						return new Object[] { _this, match, sysLine,
								messageSend, combo, operand, parentOperand,
								parentCombo, messageReceive, line, interaction,
								guard, spec };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_10_2_bindingFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		CSP _localVariable_0 = _this.isAppropriate_solveCsp_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		CSP csp = _localVariable_0;
		if (csp != null) {
			return new Object[] { csp, _this, match, sysLine, messageSend,
					combo, operand, parentOperand, parentCombo, messageReceive,
					line, interaction, guard, spec };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_10_2_blackB(
			CSP csp) {
		return new Object[] { csp };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_10_2_bindingAndBlackFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		Object[] result_pattern_AltUserStepNFToComboRule_10_2_binding = pattern_AltUserStepNFToComboRule_10_2_bindingFBBBBBBBBBBBBB(
				_this, match, sysLine, messageSend, combo, operand,
				parentOperand, parentCombo, messageReceive, line, interaction,
				guard, spec);
		if (result_pattern_AltUserStepNFToComboRule_10_2_binding != null) {
			CSP csp = (CSP) result_pattern_AltUserStepNFToComboRule_10_2_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_10_2_black = pattern_AltUserStepNFToComboRule_10_2_blackB(csp);
			if (result_pattern_AltUserStepNFToComboRule_10_2_black != null) {

				return new Object[] { csp, _this, match, sysLine, messageSend,
						combo, operand, parentOperand, parentCombo,
						messageReceive, line, interaction, guard, spec };
			}
		}
		return null;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_10_3_expressionFBB(
			AltUserStepNFToComboRule _this, CSP csp) {
		boolean _localVariable_0 = _this.isAppropriate_checkCsp_BWD(csp);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_10_4_blackBBBBBBBBBBBB(
			Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		if (!combo.equals(parentCombo)) {
			if (!operand.equals(parentOperand)) {
				if (!messageReceive.equals(messageSend)) {
					if (!line.equals(sysLine)) {
						return new Object[] { match, sysLine, messageSend,
								combo, operand, parentOperand, parentCombo,
								messageReceive, line, interaction, guard, spec };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_10_4_greenBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFF(
			Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		EMoflonEdge sysLine__messageSend____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge messageSend__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysLine__combo____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge combo__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysLine__operand____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge operand__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysLine__parentOperand____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentOperand__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysLine__parentCombo____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentCombo__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentOperand__messageReceive____fragment = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge messageReceive__parentOperand____enclosingOperand = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge line__parentOperand____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentOperand__line____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge line__parentCombo____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentCombo__line____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge combo__interaction____enclosingInteraction = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge interaction__combo____fragment = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge line__operand____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge operand__line____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge operand__guard____guard = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge guard__spec____specification = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		match.getToBeTranslatedNodes().add(messageSend);
		match.getToBeTranslatedNodes().add(combo);
		match.getToBeTranslatedNodes().add(operand);
		match.getToBeTranslatedNodes().add(messageReceive);
		match.getToBeTranslatedNodes().add(guard);
		match.getToBeTranslatedNodes().add(spec);
		String sysLine__messageSend____coveredBy_name_prime = "coveredBy";
		String messageSend__sysLine____covered_name_prime = "covered";
		String sysLine__combo____coveredBy_name_prime = "coveredBy";
		String combo__sysLine____covered_name_prime = "covered";
		String sysLine__operand____coveredBy_name_prime = "coveredBy";
		String operand__sysLine____covered_name_prime = "covered";
		String sysLine__parentOperand____coveredBy_name_prime = "coveredBy";
		String parentOperand__sysLine____covered_name_prime = "covered";
		String sysLine__parentCombo____coveredBy_name_prime = "coveredBy";
		String parentCombo__sysLine____covered_name_prime = "covered";
		String parentOperand__messageReceive____fragment_name_prime = "fragment";
		String messageReceive__parentOperand____enclosingOperand_name_prime = "enclosingOperand";
		String line__parentOperand____coveredBy_name_prime = "coveredBy";
		String parentOperand__line____covered_name_prime = "covered";
		String line__parentCombo____coveredBy_name_prime = "coveredBy";
		String parentCombo__line____covered_name_prime = "covered";
		String combo__interaction____enclosingInteraction_name_prime = "enclosingInteraction";
		String interaction__combo____fragment_name_prime = "fragment";
		String line__operand____coveredBy_name_prime = "coveredBy";
		String operand__line____covered_name_prime = "covered";
		String operand__guard____guard_name_prime = "guard";
		String guard__spec____specification_name_prime = "specification";
		sysLine__messageSend____coveredBy.setSrc(sysLine);
		sysLine__messageSend____coveredBy.setTrg(messageSend);
		match.getToBeTranslatedEdges().add(sysLine__messageSend____coveredBy);
		messageSend__sysLine____covered.setSrc(messageSend);
		messageSend__sysLine____covered.setTrg(sysLine);
		match.getToBeTranslatedEdges().add(messageSend__sysLine____covered);
		sysLine__combo____coveredBy.setSrc(sysLine);
		sysLine__combo____coveredBy.setTrg(combo);
		match.getToBeTranslatedEdges().add(sysLine__combo____coveredBy);
		combo__sysLine____covered.setSrc(combo);
		combo__sysLine____covered.setTrg(sysLine);
		match.getToBeTranslatedEdges().add(combo__sysLine____covered);
		sysLine__operand____coveredBy.setSrc(sysLine);
		sysLine__operand____coveredBy.setTrg(operand);
		match.getToBeTranslatedEdges().add(sysLine__operand____coveredBy);
		operand__sysLine____covered.setSrc(operand);
		operand__sysLine____covered.setTrg(sysLine);
		match.getToBeTranslatedEdges().add(operand__sysLine____covered);
		sysLine__parentOperand____coveredBy.setSrc(sysLine);
		sysLine__parentOperand____coveredBy.setTrg(parentOperand);
		match.getToBeTranslatedEdges().add(sysLine__parentOperand____coveredBy);
		parentOperand__sysLine____covered.setSrc(parentOperand);
		parentOperand__sysLine____covered.setTrg(sysLine);
		match.getToBeTranslatedEdges().add(parentOperand__sysLine____covered);
		sysLine__parentCombo____coveredBy.setSrc(sysLine);
		sysLine__parentCombo____coveredBy.setTrg(parentCombo);
		match.getToBeTranslatedEdges().add(sysLine__parentCombo____coveredBy);
		parentCombo__sysLine____covered.setSrc(parentCombo);
		parentCombo__sysLine____covered.setTrg(sysLine);
		match.getToBeTranslatedEdges().add(parentCombo__sysLine____covered);
		parentOperand__messageReceive____fragment.setSrc(parentOperand);
		parentOperand__messageReceive____fragment.setTrg(messageReceive);
		match.getToBeTranslatedEdges().add(
				parentOperand__messageReceive____fragment);
		messageReceive__parentOperand____enclosingOperand
				.setSrc(messageReceive);
		messageReceive__parentOperand____enclosingOperand.setTrg(parentOperand);
		match.getToBeTranslatedEdges().add(
				messageReceive__parentOperand____enclosingOperand);
		line__parentOperand____coveredBy.setSrc(line);
		line__parentOperand____coveredBy.setTrg(parentOperand);
		match.getToBeTranslatedEdges().add(line__parentOperand____coveredBy);
		parentOperand__line____covered.setSrc(parentOperand);
		parentOperand__line____covered.setTrg(line);
		match.getToBeTranslatedEdges().add(parentOperand__line____covered);
		line__parentCombo____coveredBy.setSrc(line);
		line__parentCombo____coveredBy.setTrg(parentCombo);
		match.getToBeTranslatedEdges().add(line__parentCombo____coveredBy);
		parentCombo__line____covered.setSrc(parentCombo);
		parentCombo__line____covered.setTrg(line);
		match.getToBeTranslatedEdges().add(parentCombo__line____covered);
		combo__interaction____enclosingInteraction.setSrc(combo);
		combo__interaction____enclosingInteraction.setTrg(interaction);
		match.getToBeTranslatedEdges().add(
				combo__interaction____enclosingInteraction);
		interaction__combo____fragment.setSrc(interaction);
		interaction__combo____fragment.setTrg(combo);
		match.getToBeTranslatedEdges().add(interaction__combo____fragment);
		line__operand____coveredBy.setSrc(line);
		line__operand____coveredBy.setTrg(operand);
		match.getToBeTranslatedEdges().add(line__operand____coveredBy);
		operand__line____covered.setSrc(operand);
		operand__line____covered.setTrg(line);
		match.getToBeTranslatedEdges().add(operand__line____covered);
		operand__guard____guard.setSrc(operand);
		operand__guard____guard.setTrg(guard);
		match.getToBeTranslatedEdges().add(operand__guard____guard);
		guard__spec____specification.setSrc(guard);
		guard__spec____specification.setTrg(spec);
		match.getToBeTranslatedEdges().add(guard__spec____specification);
		sysLine__messageSend____coveredBy
				.setName(sysLine__messageSend____coveredBy_name_prime);
		messageSend__sysLine____covered
				.setName(messageSend__sysLine____covered_name_prime);
		sysLine__combo____coveredBy
				.setName(sysLine__combo____coveredBy_name_prime);
		combo__sysLine____covered.setName(combo__sysLine____covered_name_prime);
		sysLine__operand____coveredBy
				.setName(sysLine__operand____coveredBy_name_prime);
		operand__sysLine____covered
				.setName(operand__sysLine____covered_name_prime);
		sysLine__parentOperand____coveredBy
				.setName(sysLine__parentOperand____coveredBy_name_prime);
		parentOperand__sysLine____covered
				.setName(parentOperand__sysLine____covered_name_prime);
		sysLine__parentCombo____coveredBy
				.setName(sysLine__parentCombo____coveredBy_name_prime);
		parentCombo__sysLine____covered
				.setName(parentCombo__sysLine____covered_name_prime);
		parentOperand__messageReceive____fragment
				.setName(parentOperand__messageReceive____fragment_name_prime);
		messageReceive__parentOperand____enclosingOperand
				.setName(messageReceive__parentOperand____enclosingOperand_name_prime);
		line__parentOperand____coveredBy
				.setName(line__parentOperand____coveredBy_name_prime);
		parentOperand__line____covered
				.setName(parentOperand__line____covered_name_prime);
		line__parentCombo____coveredBy
				.setName(line__parentCombo____coveredBy_name_prime);
		parentCombo__line____covered
				.setName(parentCombo__line____covered_name_prime);
		combo__interaction____enclosingInteraction
				.setName(combo__interaction____enclosingInteraction_name_prime);
		interaction__combo____fragment
				.setName(interaction__combo____fragment_name_prime);
		line__operand____coveredBy
				.setName(line__operand____coveredBy_name_prime);
		operand__line____covered.setName(operand__line____covered_name_prime);
		operand__guard____guard.setName(operand__guard____guard_name_prime);
		guard__spec____specification
				.setName(guard__spec____specification_name_prime);
		return new Object[] { match, sysLine, messageSend, combo, operand,
				parentOperand, parentCombo, messageReceive, line, interaction,
				guard, spec, sysLine__messageSend____coveredBy,
				messageSend__sysLine____covered, sysLine__combo____coveredBy,
				combo__sysLine____covered, sysLine__operand____coveredBy,
				operand__sysLine____covered,
				sysLine__parentOperand____coveredBy,
				parentOperand__sysLine____covered,
				sysLine__parentCombo____coveredBy,
				parentCombo__sysLine____covered,
				parentOperand__messageReceive____fragment,
				messageReceive__parentOperand____enclosingOperand,
				line__parentOperand____coveredBy,
				parentOperand__line____covered, line__parentCombo____coveredBy,
				parentCombo__line____covered,
				combo__interaction____enclosingInteraction,
				interaction__combo____fragment, line__operand____coveredBy,
				operand__line____covered, operand__guard____guard,
				guard__spec____specification };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_10_5_blackBBBBBBBBBBBB(
			Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		if (!combo.equals(parentCombo)) {
			if (!operand.equals(parentOperand)) {
				if (!messageReceive.equals(messageSend)) {
					if (!line.equals(sysLine)) {
						return new Object[] { match, sysLine, messageSend,
								combo, operand, parentOperand, parentCombo,
								messageReceive, line, interaction, guard, spec };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_10_5_greenBBBBBBFFF(
			Match match, Lifeline sysLine, InteractionOperand parentOperand,
			CombinedFragment parentCombo, Lifeline line, Interaction interaction) {
		EMoflonEdge parentCombo__parentOperand____operand = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge line__interaction____interaction = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge interaction__line____lifeline = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		match.getContextNodes().add(sysLine);
		match.getContextNodes().add(parentOperand);
		match.getContextNodes().add(parentCombo);
		match.getContextNodes().add(line);
		match.getContextNodes().add(interaction);
		String parentCombo__parentOperand____operand_name_prime = "operand";
		String line__interaction____interaction_name_prime = "interaction";
		String interaction__line____lifeline_name_prime = "lifeline";
		parentCombo__parentOperand____operand.setSrc(parentCombo);
		parentCombo__parentOperand____operand.setTrg(parentOperand);
		match.getContextEdges().add(parentCombo__parentOperand____operand);
		line__interaction____interaction.setSrc(line);
		line__interaction____interaction.setTrg(interaction);
		match.getContextEdges().add(line__interaction____interaction);
		interaction__line____lifeline.setSrc(interaction);
		interaction__line____lifeline.setTrg(line);
		match.getContextEdges().add(interaction__line____lifeline);
		parentCombo__parentOperand____operand
				.setName(parentCombo__parentOperand____operand_name_prime);
		line__interaction____interaction
				.setName(line__interaction____interaction_name_prime);
		interaction__line____lifeline
				.setName(interaction__line____lifeline_name_prime);
		return new Object[] { match, sysLine, parentOperand, parentCombo, line,
				interaction, parentCombo__parentOperand____operand,
				line__interaction____interaction, interaction__line____lifeline };
	}

	public static final void pattern_AltUserStepNFToComboRule_10_6_expressionBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		_this.registerObjectsToMatch_BWD(match, sysLine, messageSend, combo,
				operand, parentOperand, parentCombo, messageReceive, line,
				interaction, guard, spec);

	}

	public static final boolean pattern_AltUserStepNFToComboRule_10_7_expressionF() {
		boolean _result = Boolean.valueOf(true);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_10_8_expressionF() {
		boolean _result = false;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_11_1_bindingFFFFFFFFFFFFFFFFFFFFB(
			IsApplicableMatch isApplicableMatch) {
		EObject _localVariable_0 = isApplicableMatch
				.getObject("packageDeclaration");
		EObject _localVariable_1 = isApplicableMatch.getObject("actor");
		EObject _localVariable_2 = isApplicableMatch.getObject("sysActor");
		EObject _localVariable_3 = isApplicableMatch.getObject("sysLine");
		EObject _localVariable_4 = isApplicableMatch
				.getObject("sysActorToSysLine");
		EObject _localVariable_5 = isApplicableMatch.getObject("messageSend");
		EObject _localVariable_6 = isApplicableMatch.getObject("combo");
		EObject _localVariable_7 = isApplicableMatch.getObject("operand");
		EObject _localVariable_8 = isApplicableMatch.getObject("parentOperand");
		EObject _localVariable_9 = isApplicableMatch.getObject("parentCombo");
		EObject _localVariable_10 = isApplicableMatch.getObject("flow");
		EObject _localVariable_11 = isApplicableMatch
				.getObject("flowToParentOperand");
		EObject _localVariable_12 = isApplicableMatch
				.getObject("messageReceive");
		EObject _localVariable_13 = isApplicableMatch.getObject("line");
		EObject _localVariable_14 = isApplicableMatch.getObject("interaction");
		EObject _localVariable_15 = isApplicableMatch.getObject("useCase");
		EObject _localVariable_16 = isApplicableMatch
				.getObject("useCaseToInteraction");
		EObject _localVariable_17 = isApplicableMatch.getObject("actorToLine");
		EObject _localVariable_18 = isApplicableMatch.getObject("guard");
		EObject _localVariable_19 = isApplicableMatch.getObject("spec");
		EObject tmpPackageDeclaration = _localVariable_0;
		EObject tmpActor = _localVariable_1;
		EObject tmpSysActor = _localVariable_2;
		EObject tmpSysLine = _localVariable_3;
		EObject tmpSysActorToSysLine = _localVariable_4;
		EObject tmpMessageSend = _localVariable_5;
		EObject tmpCombo = _localVariable_6;
		EObject tmpOperand = _localVariable_7;
		EObject tmpParentOperand = _localVariable_8;
		EObject tmpParentCombo = _localVariable_9;
		EObject tmpFlow = _localVariable_10;
		EObject tmpFlowToParentOperand = _localVariable_11;
		EObject tmpMessageReceive = _localVariable_12;
		EObject tmpLine = _localVariable_13;
		EObject tmpInteraction = _localVariable_14;
		EObject tmpUseCase = _localVariable_15;
		EObject tmpUseCaseToInteraction = _localVariable_16;
		EObject tmpActorToLine = _localVariable_17;
		EObject tmpGuard = _localVariable_18;
		EObject tmpSpec = _localVariable_19;
		if (tmpPackageDeclaration instanceof PackageDeclaration) {
			PackageDeclaration packageDeclaration = (PackageDeclaration) tmpPackageDeclaration;
			if (tmpActor instanceof Actor) {
				Actor actor = (Actor) tmpActor;
				if (tmpSysActor instanceof Actor) {
					Actor sysActor = (Actor) tmpSysActor;
					if (tmpSysLine instanceof Lifeline) {
						Lifeline sysLine = (Lifeline) tmpSysLine;
						if (tmpSysActorToSysLine instanceof ActorToLifeline) {
							ActorToLifeline sysActorToSysLine = (ActorToLifeline) tmpSysActorToSysLine;
							if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
								MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
								if (tmpCombo instanceof CombinedFragment) {
									CombinedFragment combo = (CombinedFragment) tmpCombo;
									if (tmpOperand instanceof InteractionOperand) {
										InteractionOperand operand = (InteractionOperand) tmpOperand;
										if (tmpParentOperand instanceof InteractionOperand) {
											InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
											if (tmpParentCombo instanceof CombinedFragment) {
												CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
												if (tmpFlow instanceof NamedFlow) {
													NamedFlow flow = (NamedFlow) tmpFlow;
													if (tmpFlowToParentOperand instanceof FlowToInteractionFragment) {
														FlowToInteractionFragment flowToParentOperand = (FlowToInteractionFragment) tmpFlowToParentOperand;
														if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
															MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
															if (tmpLine instanceof Lifeline) {
																Lifeline line = (Lifeline) tmpLine;
																if (tmpInteraction instanceof Interaction) {
																	Interaction interaction = (Interaction) tmpInteraction;
																	if (tmpUseCase instanceof UseCase) {
																		UseCase useCase = (UseCase) tmpUseCase;
																		if (tmpUseCaseToInteraction instanceof UseCaseToInteraction) {
																			UseCaseToInteraction useCaseToInteraction = (UseCaseToInteraction) tmpUseCaseToInteraction;
																			if (tmpActorToLine instanceof ActorToLifeline) {
																				ActorToLifeline actorToLine = (ActorToLifeline) tmpActorToLine;
																				if (tmpGuard instanceof InteractionConstraint) {
																					InteractionConstraint guard = (InteractionConstraint) tmpGuard;
																					if (tmpSpec instanceof LiteralString) {
																						LiteralString spec = (LiteralString) tmpSpec;
																						return new Object[] {
																								packageDeclaration,
																								actor,
																								sysActor,
																								sysLine,
																								sysActorToSysLine,
																								messageSend,
																								combo,
																								operand,
																								parentOperand,
																								parentCombo,
																								flow,
																								flowToParentOperand,
																								messageReceive,
																								line,
																								interaction,
																								useCase,
																								useCaseToInteraction,
																								actorToLine,
																								guard,
																								spec,
																								isApplicableMatch };
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_11_1_blackBBBBBBBBBBBBBBBBBBBBFBB(
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo, NamedFlow flow,
			FlowToInteractionFragment flowToParentOperand,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, InteractionConstraint guard,
			LiteralString spec, AltUserStepNFToComboRule _this,
			IsApplicableMatch isApplicableMatch) {
		if (!actor.equals(sysActor)) {
			if (!combo.equals(parentCombo)) {
				if (!operand.equals(parentOperand)) {
					if (!messageReceive.equals(messageSend)) {
						if (!line.equals(sysLine)) {
							if (!actorToLine.equals(sysActorToSysLine)) {
								for (EObject tmpCsp : isApplicableMatch
										.getAttributeInfo()) {
									if (tmpCsp instanceof CSP) {
										CSP csp = (CSP) tmpCsp;
										return new Object[] {
												packageDeclaration, actor,
												sysActor, sysLine,
												sysActorToSysLine, messageSend,
												combo, operand, parentOperand,
												parentCombo, flow,
												flowToParentOperand,
												messageReceive, line,
												interaction, useCase,
												useCaseToInteraction,
												actorToLine, guard, spec, csp,
												_this, isApplicableMatch };
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_11_1_bindingAndBlackFFFFFFFFFFFFFFFFFFFFFBB(
			AltUserStepNFToComboRule _this, IsApplicableMatch isApplicableMatch) {
		Object[] result_pattern_AltUserStepNFToComboRule_11_1_binding = pattern_AltUserStepNFToComboRule_11_1_bindingFFFFFFFFFFFFFFFFFFFFB(isApplicableMatch);
		if (result_pattern_AltUserStepNFToComboRule_11_1_binding != null) {
			PackageDeclaration packageDeclaration = (PackageDeclaration) result_pattern_AltUserStepNFToComboRule_11_1_binding[0];
			Actor actor = (Actor) result_pattern_AltUserStepNFToComboRule_11_1_binding[1];
			Actor sysActor = (Actor) result_pattern_AltUserStepNFToComboRule_11_1_binding[2];
			Lifeline sysLine = (Lifeline) result_pattern_AltUserStepNFToComboRule_11_1_binding[3];
			ActorToLifeline sysActorToSysLine = (ActorToLifeline) result_pattern_AltUserStepNFToComboRule_11_1_binding[4];
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) result_pattern_AltUserStepNFToComboRule_11_1_binding[5];
			CombinedFragment combo = (CombinedFragment) result_pattern_AltUserStepNFToComboRule_11_1_binding[6];
			InteractionOperand operand = (InteractionOperand) result_pattern_AltUserStepNFToComboRule_11_1_binding[7];
			InteractionOperand parentOperand = (InteractionOperand) result_pattern_AltUserStepNFToComboRule_11_1_binding[8];
			CombinedFragment parentCombo = (CombinedFragment) result_pattern_AltUserStepNFToComboRule_11_1_binding[9];
			NamedFlow flow = (NamedFlow) result_pattern_AltUserStepNFToComboRule_11_1_binding[10];
			FlowToInteractionFragment flowToParentOperand = (FlowToInteractionFragment) result_pattern_AltUserStepNFToComboRule_11_1_binding[11];
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) result_pattern_AltUserStepNFToComboRule_11_1_binding[12];
			Lifeline line = (Lifeline) result_pattern_AltUserStepNFToComboRule_11_1_binding[13];
			Interaction interaction = (Interaction) result_pattern_AltUserStepNFToComboRule_11_1_binding[14];
			UseCase useCase = (UseCase) result_pattern_AltUserStepNFToComboRule_11_1_binding[15];
			UseCaseToInteraction useCaseToInteraction = (UseCaseToInteraction) result_pattern_AltUserStepNFToComboRule_11_1_binding[16];
			ActorToLifeline actorToLine = (ActorToLifeline) result_pattern_AltUserStepNFToComboRule_11_1_binding[17];
			InteractionConstraint guard = (InteractionConstraint) result_pattern_AltUserStepNFToComboRule_11_1_binding[18];
			LiteralString spec = (LiteralString) result_pattern_AltUserStepNFToComboRule_11_1_binding[19];

			Object[] result_pattern_AltUserStepNFToComboRule_11_1_black = pattern_AltUserStepNFToComboRule_11_1_blackBBBBBBBBBBBBBBBBBBBBFBB(
					packageDeclaration, actor, sysActor, sysLine,
					sysActorToSysLine, messageSend, combo, operand,
					parentOperand, parentCombo, flow, flowToParentOperand,
					messageReceive, line, interaction, useCase,
					useCaseToInteraction, actorToLine, guard, spec, _this,
					isApplicableMatch);
			if (result_pattern_AltUserStepNFToComboRule_11_1_black != null) {
				CSP csp = (CSP) result_pattern_AltUserStepNFToComboRule_11_1_black[20];

				return new Object[] { packageDeclaration, actor, sysActor,
						sysLine, sysActorToSysLine, messageSend, combo,
						operand, parentOperand, parentCombo, flow,
						flowToParentOperand, messageReceive, line, interaction,
						useCase, useCaseToInteraction, actorToLine, guard,
						spec, csp, _this, isApplicableMatch };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_11_1_greenBBBBFFFFFFB(
			Actor actor, CombinedFragment combo, InteractionOperand operand,
			NamedFlow flow, CSP csp) {
		NormalStep step = UseCaseDSLFactory.eINSTANCE.createNormalStep();
		AlternativeFlowAlternative alt = UseCaseDSLFactory.eINSTANCE
				.createAlternativeFlowAlternative();
		NormalStepToCombinedFragment stepToCombo = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
				.createNormalStepToCombinedFragment();
		StepAlternativeToInteractionOperand alternative1ToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
				.createStepAlternativeToInteractionOperand();
		AlternativeFlow altFlow = UseCaseDSLFactory.eINSTANCE
				.createAlternativeFlow();
		FlowToInteractionFragment altFlowToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
				.createFlowToInteractionFragment();
		Object _localVariable_0 = csp.getValue("step", "type");
		Object _localVariable_1 = csp.getValue("alt", "condition");
		Object _localVariable_2 = csp.getValue("altFlow", "name");
		flow.getSteps().add(step);
		step.setActor(actor);
		step.getStepAlternative().add(alt);
		stepToCombo.setSource(step);
		stepToCombo.setTarget(combo);
		alternative1ToOperand.setSource(alt);
		alternative1ToOperand.setTarget(operand);
		alt.setRef(altFlow);
		altFlowToOperand.setSource(altFlow);
		altFlowToOperand.setTarget(operand);
		StepType step_type_prime = (StepType) _localVariable_0;
		String alt_condition_prime = (String) _localVariable_1;
		String altFlow_name_prime = (String) _localVariable_2;
		step.setType(step_type_prime);
		alt.setCondition(alt_condition_prime);
		altFlow.setName(altFlow_name_prime);
		return new Object[] { actor, combo, operand, flow, step, alt,
				stepToCombo, alternative1ToOperand, altFlow, altFlowToOperand,
				csp };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_11_2_blackBBBBBBBBBBBB(
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive, NormalStep step,
			AlternativeFlowAlternative alt,
			NormalStepToCombinedFragment stepToCombo,
			StepAlternativeToInteractionOperand alternative1ToOperand,
			InteractionConstraint guard, LiteralString spec,
			AlternativeFlow altFlow, FlowToInteractionFragment altFlowToOperand) {
		if (!messageReceive.equals(messageSend)) {
			return new Object[] { messageSend, combo, operand, messageReceive,
					step, alt, stepToCombo, alternative1ToOperand, guard, spec,
					altFlow, altFlowToOperand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_11_2_greenFBBBBBBBBBBBB(
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive, NormalStep step,
			AlternativeFlowAlternative alt,
			NormalStepToCombinedFragment stepToCombo,
			StepAlternativeToInteractionOperand alternative1ToOperand,
			InteractionConstraint guard, LiteralString spec,
			AlternativeFlow altFlow, FlowToInteractionFragment altFlowToOperand) {
		PerformRuleResult ruleresult = TGGRuntimeFactory.eINSTANCE
				.createPerformRuleResult();
		ruleresult.getTranslatedElements().add(messageSend);
		ruleresult.getTranslatedElements().add(combo);
		ruleresult.getTranslatedElements().add(operand);
		ruleresult.getTranslatedElements().add(messageReceive);
		ruleresult.getCreatedElements().add(step);
		ruleresult.getCreatedElements().add(alt);
		ruleresult.getCreatedLinkElements().add(stepToCombo);
		ruleresult.getCreatedLinkElements().add(alternative1ToOperand);
		ruleresult.getTranslatedElements().add(guard);
		ruleresult.getTranslatedElements().add(spec);
		ruleresult.getCreatedElements().add(altFlow);
		ruleresult.getCreatedLinkElements().add(altFlowToOperand);
		return new Object[] { ruleresult, messageSend, combo, operand,
				messageReceive, step, alt, stepToCombo, alternative1ToOperand,
				guard, spec, altFlow, altFlowToOperand };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_11_3_blackBBBBBBBBBBBBBBBBBBBBBBBBBBB(
			PerformRuleResult ruleresult, EObject packageDeclaration,
			EObject actor, EObject sysActor, EObject sysLine,
			EObject sysActorToSysLine, EObject messageSend, EObject combo,
			EObject operand, EObject parentOperand, EObject parentCombo,
			EObject flow, EObject flowToParentOperand, EObject messageReceive,
			EObject line, EObject interaction, EObject useCase,
			EObject useCaseToInteraction, EObject actorToLine, EObject step,
			EObject alt, EObject stepToCombo, EObject alternative1ToOperand,
			EObject guard, EObject spec, EObject altFlow,
			EObject altFlowToOperand) {
		if (!packageDeclaration.equals(sysActor)) {
			if (!packageDeclaration.equals(sysLine)) {
				if (!packageDeclaration.equals(sysActorToSysLine)) {
					if (!packageDeclaration.equals(parentOperand)) {
						if (!packageDeclaration.equals(parentCombo)) {
							if (!packageDeclaration.equals(useCase)) {
								if (!packageDeclaration
										.equals(useCaseToInteraction)) {
									if (!packageDeclaration.equals(step)) {
										if (!packageDeclaration
												.equals(stepToCombo)) {
											if (!packageDeclaration
													.equals(spec)) {
												if (!actor
														.equals(packageDeclaration)) {
													if (!actor.equals(sysActor)) {
														if (!actor
																.equals(sysLine)) {
															if (!actor
																	.equals(sysActorToSysLine)) {
																if (!actor
																		.equals(messageSend)) {
																	if (!actor
																			.equals(combo)) {
																		if (!actor
																				.equals(operand)) {
																			if (!actor
																					.equals(parentOperand)) {
																				if (!actor
																						.equals(parentCombo)) {
																					if (!actor
																							.equals(flow)) {
																						if (!actor
																								.equals(flowToParentOperand)) {
																							if (!actor
																									.equals(messageReceive)) {
																								if (!actor
																										.equals(line)) {
																									if (!actor
																											.equals(interaction)) {
																										if (!actor
																												.equals(useCase)) {
																											if (!actor
																													.equals(useCaseToInteraction)) {
																												if (!actor
																														.equals(actorToLine)) {
																													if (!actor
																															.equals(step)) {
																														if (!actor
																																.equals(alt)) {
																															if (!actor
																																	.equals(stepToCombo)) {
																																if (!actor
																																		.equals(alternative1ToOperand)) {
																																	if (!actor
																																			.equals(guard)) {
																																		if (!actor
																																				.equals(spec)) {
																																			if (!actor
																																					.equals(altFlow)) {
																																				if (!actor
																																						.equals(altFlowToOperand)) {
																																					if (!sysActor
																																							.equals(sysLine)) {
																																						if (!sysActor
																																								.equals(sysActorToSysLine)) {
																																							if (!sysActor
																																									.equals(useCase)) {
																																								if (!sysActor
																																										.equals(useCaseToInteraction)) {
																																									if (!sysLine
																																											.equals(useCase)) {
																																										if (!sysLine
																																												.equals(useCaseToInteraction)) {
																																											if (!sysActorToSysLine
																																													.equals(sysLine)) {
																																												if (!sysActorToSysLine
																																														.equals(useCase)) {
																																													if (!sysActorToSysLine
																																															.equals(useCaseToInteraction)) {
																																														if (!messageSend
																																																.equals(packageDeclaration)) {
																																															if (!messageSend
																																																	.equals(sysActor)) {
																																																if (!messageSend
																																																		.equals(sysLine)) {
																																																	if (!messageSend
																																																			.equals(sysActorToSysLine)) {
																																																		if (!messageSend
																																																				.equals(operand)) {
																																																			if (!messageSend
																																																					.equals(parentOperand)) {
																																																				if (!messageSend
																																																						.equals(parentCombo)) {
																																																					if (!messageSend
																																																							.equals(useCase)) {
																																																						if (!messageSend
																																																								.equals(useCaseToInteraction)) {
																																																							if (!messageSend
																																																									.equals(step)) {
																																																								if (!messageSend
																																																										.equals(stepToCombo)) {
																																																									if (!messageSend
																																																											.equals(spec)) {
																																																										if (!combo
																																																												.equals(packageDeclaration)) {
																																																											if (!combo
																																																													.equals(sysActor)) {
																																																												if (!combo
																																																														.equals(sysLine)) {
																																																													if (!combo
																																																															.equals(sysActorToSysLine)) {
																																																														if (!combo
																																																																.equals(messageSend)) {
																																																															if (!combo
																																																																	.equals(operand)) {
																																																																if (!combo
																																																																		.equals(parentOperand)) {
																																																																	if (!combo
																																																																			.equals(parentCombo)) {
																																																																		if (!combo
																																																																				.equals(flow)) {
																																																																			if (!combo
																																																																					.equals(flowToParentOperand)) {
																																																																				if (!combo
																																																																						.equals(messageReceive)) {
																																																																					if (!combo
																																																																							.equals(line)) {
																																																																						if (!combo
																																																																								.equals(interaction)) {
																																																																							if (!combo
																																																																									.equals(useCase)) {
																																																																								if (!combo
																																																																										.equals(useCaseToInteraction)) {
																																																																									if (!combo
																																																																											.equals(step)) {
																																																																										if (!combo
																																																																												.equals(stepToCombo)) {
																																																																											if (!combo
																																																																													.equals(guard)) {
																																																																												if (!combo
																																																																														.equals(spec)) {
																																																																													if (!operand
																																																																															.equals(packageDeclaration)) {
																																																																														if (!operand
																																																																																.equals(sysActor)) {
																																																																															if (!operand
																																																																																	.equals(sysLine)) {
																																																																																if (!operand
																																																																																		.equals(sysActorToSysLine)) {
																																																																																	if (!operand
																																																																																			.equals(parentOperand)) {
																																																																																		if (!operand
																																																																																				.equals(parentCombo)) {
																																																																																			if (!operand
																																																																																					.equals(useCase)) {
																																																																																				if (!operand
																																																																																						.equals(useCaseToInteraction)) {
																																																																																					if (!operand
																																																																																							.equals(step)) {
																																																																																						if (!operand
																																																																																								.equals(stepToCombo)) {
																																																																																							if (!operand
																																																																																									.equals(spec)) {
																																																																																								if (!parentOperand
																																																																																										.equals(sysActor)) {
																																																																																									if (!parentOperand
																																																																																											.equals(sysLine)) {
																																																																																										if (!parentOperand
																																																																																												.equals(sysActorToSysLine)) {
																																																																																											if (!parentOperand
																																																																																													.equals(useCase)) {
																																																																																												if (!parentOperand
																																																																																														.equals(useCaseToInteraction)) {
																																																																																													if (!parentOperand
																																																																																															.equals(step)) {
																																																																																														if (!parentOperand
																																																																																																.equals(stepToCombo)) {
																																																																																															if (!parentOperand
																																																																																																	.equals(spec)) {
																																																																																																if (!parentCombo
																																																																																																		.equals(sysActor)) {
																																																																																																	if (!parentCombo
																																																																																																			.equals(sysLine)) {
																																																																																																		if (!parentCombo
																																																																																																				.equals(sysActorToSysLine)) {
																																																																																																			if (!parentCombo
																																																																																																					.equals(parentOperand)) {
																																																																																																				if (!parentCombo
																																																																																																						.equals(useCase)) {
																																																																																																					if (!parentCombo
																																																																																																							.equals(useCaseToInteraction)) {
																																																																																																						if (!parentCombo
																																																																																																								.equals(step)) {
																																																																																																							if (!parentCombo
																																																																																																									.equals(stepToCombo)) {
																																																																																																								if (!parentCombo
																																																																																																										.equals(spec)) {
																																																																																																									if (!flow
																																																																																																											.equals(packageDeclaration)) {
																																																																																																										if (!flow
																																																																																																												.equals(sysActor)) {
																																																																																																											if (!flow
																																																																																																													.equals(sysLine)) {
																																																																																																												if (!flow
																																																																																																														.equals(sysActorToSysLine)) {
																																																																																																													if (!flow
																																																																																																															.equals(messageSend)) {
																																																																																																														if (!flow
																																																																																																																.equals(operand)) {
																																																																																																															if (!flow
																																																																																																																	.equals(parentOperand)) {
																																																																																																																if (!flow
																																																																																																																		.equals(parentCombo)) {
																																																																																																																	if (!flow
																																																																																																																			.equals(flowToParentOperand)) {
																																																																																																																		if (!flow
																																																																																																																				.equals(messageReceive)) {
																																																																																																																			if (!flow
																																																																																																																					.equals(line)) {
																																																																																																																				if (!flow
																																																																																																																						.equals(interaction)) {
																																																																																																																					if (!flow
																																																																																																																							.equals(useCase)) {
																																																																																																																						if (!flow
																																																																																																																								.equals(useCaseToInteraction)) {
																																																																																																																							if (!flow
																																																																																																																									.equals(step)) {
																																																																																																																								if (!flow
																																																																																																																										.equals(stepToCombo)) {
																																																																																																																									if (!flow
																																																																																																																											.equals(guard)) {
																																																																																																																										if (!flow
																																																																																																																												.equals(spec)) {
																																																																																																																											if (!flowToParentOperand
																																																																																																																													.equals(packageDeclaration)) {
																																																																																																																												if (!flowToParentOperand
																																																																																																																														.equals(sysActor)) {
																																																																																																																													if (!flowToParentOperand
																																																																																																																															.equals(sysLine)) {
																																																																																																																														if (!flowToParentOperand
																																																																																																																																.equals(sysActorToSysLine)) {
																																																																																																																															if (!flowToParentOperand
																																																																																																																																	.equals(messageSend)) {
																																																																																																																																if (!flowToParentOperand
																																																																																																																																		.equals(operand)) {
																																																																																																																																	if (!flowToParentOperand
																																																																																																																																			.equals(parentOperand)) {
																																																																																																																																		if (!flowToParentOperand
																																																																																																																																				.equals(parentCombo)) {
																																																																																																																																			if (!flowToParentOperand
																																																																																																																																					.equals(messageReceive)) {
																																																																																																																																				if (!flowToParentOperand
																																																																																																																																						.equals(line)) {
																																																																																																																																					if (!flowToParentOperand
																																																																																																																																							.equals(interaction)) {
																																																																																																																																						if (!flowToParentOperand
																																																																																																																																								.equals(useCase)) {
																																																																																																																																							if (!flowToParentOperand
																																																																																																																																									.equals(useCaseToInteraction)) {
																																																																																																																																								if (!flowToParentOperand
																																																																																																																																										.equals(step)) {
																																																																																																																																									if (!flowToParentOperand
																																																																																																																																											.equals(stepToCombo)) {
																																																																																																																																										if (!flowToParentOperand
																																																																																																																																												.equals(guard)) {
																																																																																																																																											if (!flowToParentOperand
																																																																																																																																													.equals(spec)) {
																																																																																																																																												if (!messageReceive
																																																																																																																																														.equals(packageDeclaration)) {
																																																																																																																																													if (!messageReceive
																																																																																																																																															.equals(sysActor)) {
																																																																																																																																														if (!messageReceive
																																																																																																																																																.equals(sysLine)) {
																																																																																																																																															if (!messageReceive
																																																																																																																																																	.equals(sysActorToSysLine)) {
																																																																																																																																																if (!messageReceive
																																																																																																																																																		.equals(messageSend)) {
																																																																																																																																																	if (!messageReceive
																																																																																																																																																			.equals(operand)) {
																																																																																																																																																		if (!messageReceive
																																																																																																																																																				.equals(parentOperand)) {
																																																																																																																																																			if (!messageReceive
																																																																																																																																																					.equals(parentCombo)) {
																																																																																																																																																				if (!messageReceive
																																																																																																																																																						.equals(useCase)) {
																																																																																																																																																					if (!messageReceive
																																																																																																																																																							.equals(useCaseToInteraction)) {
																																																																																																																																																						if (!messageReceive
																																																																																																																																																								.equals(step)) {
																																																																																																																																																							if (!messageReceive
																																																																																																																																																									.equals(stepToCombo)) {
																																																																																																																																																								if (!messageReceive
																																																																																																																																																										.equals(spec)) {
																																																																																																																																																									if (!line
																																																																																																																																																											.equals(packageDeclaration)) {
																																																																																																																																																										if (!line
																																																																																																																																																												.equals(sysActor)) {
																																																																																																																																																											if (!line
																																																																																																																																																													.equals(sysLine)) {
																																																																																																																																																												if (!line
																																																																																																																																																														.equals(sysActorToSysLine)) {
																																																																																																																																																													if (!line
																																																																																																																																																															.equals(messageSend)) {
																																																																																																																																																														if (!line
																																																																																																																																																																.equals(operand)) {
																																																																																																																																																															if (!line
																																																																																																																																																																	.equals(parentOperand)) {
																																																																																																																																																																if (!line
																																																																																																																																																																		.equals(parentCombo)) {
																																																																																																																																																																	if (!line
																																																																																																																																																																			.equals(messageReceive)) {
																																																																																																																																																																		if (!line
																																																																																																																																																																				.equals(useCase)) {
																																																																																																																																																																			if (!line
																																																																																																																																																																					.equals(useCaseToInteraction)) {
																																																																																																																																																																				if (!line
																																																																																																																																																																						.equals(step)) {
																																																																																																																																																																					if (!line
																																																																																																																																																																							.equals(stepToCombo)) {
																																																																																																																																																																						if (!line
																																																																																																																																																																								.equals(spec)) {
																																																																																																																																																																							if (!interaction
																																																																																																																																																																									.equals(packageDeclaration)) {
																																																																																																																																																																								if (!interaction
																																																																																																																																																																										.equals(sysActor)) {
																																																																																																																																																																									if (!interaction
																																																																																																																																																																											.equals(sysLine)) {
																																																																																																																																																																										if (!interaction
																																																																																																																																																																												.equals(sysActorToSysLine)) {
																																																																																																																																																																											if (!interaction
																																																																																																																																																																													.equals(messageSend)) {
																																																																																																																																																																												if (!interaction
																																																																																																																																																																														.equals(operand)) {
																																																																																																																																																																													if (!interaction
																																																																																																																																																																															.equals(parentOperand)) {
																																																																																																																																																																														if (!interaction
																																																																																																																																																																																.equals(parentCombo)) {
																																																																																																																																																																															if (!interaction
																																																																																																																																																																																	.equals(messageReceive)) {
																																																																																																																																																																																if (!interaction
																																																																																																																																																																																		.equals(line)) {
																																																																																																																																																																																	if (!interaction
																																																																																																																																																																																			.equals(useCase)) {
																																																																																																																																																																																		if (!interaction
																																																																																																																																																																																				.equals(useCaseToInteraction)) {
																																																																																																																																																																																			if (!interaction
																																																																																																																																																																																					.equals(step)) {
																																																																																																																																																																																				if (!interaction
																																																																																																																																																																																						.equals(stepToCombo)) {
																																																																																																																																																																																					if (!interaction
																																																																																																																																																																																							.equals(spec)) {
																																																																																																																																																																																						if (!useCase
																																																																																																																																																																																								.equals(useCaseToInteraction)) {
																																																																																																																																																																																							if (!actorToLine
																																																																																																																																																																																									.equals(packageDeclaration)) {
																																																																																																																																																																																								if (!actorToLine
																																																																																																																																																																																										.equals(sysActor)) {
																																																																																																																																																																																									if (!actorToLine
																																																																																																																																																																																											.equals(sysLine)) {
																																																																																																																																																																																										if (!actorToLine
																																																																																																																																																																																												.equals(sysActorToSysLine)) {
																																																																																																																																																																																											if (!actorToLine
																																																																																																																																																																																													.equals(messageSend)) {
																																																																																																																																																																																												if (!actorToLine
																																																																																																																																																																																														.equals(combo)) {
																																																																																																																																																																																													if (!actorToLine
																																																																																																																																																																																															.equals(operand)) {
																																																																																																																																																																																														if (!actorToLine
																																																																																																																																																																																																.equals(parentOperand)) {
																																																																																																																																																																																															if (!actorToLine
																																																																																																																																																																																																	.equals(parentCombo)) {
																																																																																																																																																																																																if (!actorToLine
																																																																																																																																																																																																		.equals(flow)) {
																																																																																																																																																																																																	if (!actorToLine
																																																																																																																																																																																																			.equals(flowToParentOperand)) {
																																																																																																																																																																																																		if (!actorToLine
																																																																																																																																																																																																				.equals(messageReceive)) {
																																																																																																																																																																																																			if (!actorToLine
																																																																																																																																																																																																					.equals(line)) {
																																																																																																																																																																																																				if (!actorToLine
																																																																																																																																																																																																						.equals(interaction)) {
																																																																																																																																																																																																					if (!actorToLine
																																																																																																																																																																																																							.equals(useCase)) {
																																																																																																																																																																																																						if (!actorToLine
																																																																																																																																																																																																								.equals(useCaseToInteraction)) {
																																																																																																																																																																																																							if (!actorToLine
																																																																																																																																																																																																									.equals(step)) {
																																																																																																																																																																																																								if (!actorToLine
																																																																																																																																																																																																										.equals(alt)) {
																																																																																																																																																																																																									if (!actorToLine
																																																																																																																																																																																																											.equals(stepToCombo)) {
																																																																																																																																																																																																										if (!actorToLine
																																																																																																																																																																																																												.equals(alternative1ToOperand)) {
																																																																																																																																																																																																											if (!actorToLine
																																																																																																																																																																																																													.equals(guard)) {
																																																																																																																																																																																																												if (!actorToLine
																																																																																																																																																																																																														.equals(spec)) {
																																																																																																																																																																																																													if (!actorToLine
																																																																																																																																																																																																															.equals(altFlow)) {
																																																																																																																																																																																																														if (!actorToLine
																																																																																																																																																																																																																.equals(altFlowToOperand)) {
																																																																																																																																																																																																															if (!step
																																																																																																																																																																																																																	.equals(sysActor)) {
																																																																																																																																																																																																																if (!step
																																																																																																																																																																																																																		.equals(sysLine)) {
																																																																																																																																																																																																																	if (!step
																																																																																																																																																																																																																			.equals(sysActorToSysLine)) {
																																																																																																																																																																																																																		if (!step
																																																																																																																																																																																																																				.equals(useCase)) {
																																																																																																																																																																																																																			if (!step
																																																																																																																																																																																																																					.equals(useCaseToInteraction)) {
																																																																																																																																																																																																																				if (!step
																																																																																																																																																																																																																						.equals(stepToCombo)) {
																																																																																																																																																																																																																					if (!alt.equals(packageDeclaration)) {
																																																																																																																																																																																																																						if (!alt.equals(sysActor)) {
																																																																																																																																																																																																																							if (!alt.equals(sysLine)) {
																																																																																																																																																																																																																								if (!alt.equals(sysActorToSysLine)) {
																																																																																																																																																																																																																									if (!alt.equals(messageSend)) {
																																																																																																																																																																																																																										if (!alt.equals(combo)) {
																																																																																																																																																																																																																											if (!alt.equals(operand)) {
																																																																																																																																																																																																																												if (!alt.equals(parentOperand)) {
																																																																																																																																																																																																																													if (!alt.equals(parentCombo)) {
																																																																																																																																																																																																																														if (!alt.equals(flow)) {
																																																																																																																																																																																																																															if (!alt.equals(flowToParentOperand)) {
																																																																																																																																																																																																																																if (!alt.equals(messageReceive)) {
																																																																																																																																																																																																																																	if (!alt.equals(line)) {
																																																																																																																																																																																																																																		if (!alt.equals(interaction)) {
																																																																																																																																																																																																																																			if (!alt.equals(useCase)) {
																																																																																																																																																																																																																																				if (!alt.equals(useCaseToInteraction)) {
																																																																																																																																																																																																																																					if (!alt.equals(step)) {
																																																																																																																																																																																																																																						if (!alt.equals(stepToCombo)) {
																																																																																																																																																																																																																																							if (!alt.equals(alternative1ToOperand)) {
																																																																																																																																																																																																																																								if (!alt.equals(guard)) {
																																																																																																																																																																																																																																									if (!alt.equals(spec)) {
																																																																																																																																																																																																																																										if (!alt.equals(altFlow)) {
																																																																																																																																																																																																																																											if (!alt.equals(altFlowToOperand)) {
																																																																																																																																																																																																																																												if (!stepToCombo
																																																																																																																																																																																																																																														.equals(sysActor)) {
																																																																																																																																																																																																																																													if (!stepToCombo
																																																																																																																																																																																																																																															.equals(sysLine)) {
																																																																																																																																																																																																																																														if (!stepToCombo
																																																																																																																																																																																																																																																.equals(sysActorToSysLine)) {
																																																																																																																																																																																																																																															if (!stepToCombo
																																																																																																																																																																																																																																																	.equals(useCase)) {
																																																																																																																																																																																																																																																if (!stepToCombo
																																																																																																																																																																																																																																																		.equals(useCaseToInteraction)) {
																																																																																																																																																																																																																																																	if (!alternative1ToOperand
																																																																																																																																																																																																																																																			.equals(packageDeclaration)) {
																																																																																																																																																																																																																																																		if (!alternative1ToOperand
																																																																																																																																																																																																																																																				.equals(sysActor)) {
																																																																																																																																																																																																																																																			if (!alternative1ToOperand
																																																																																																																																																																																																																																																					.equals(sysLine)) {
																																																																																																																																																																																																																																																				if (!alternative1ToOperand
																																																																																																																																																																																																																																																						.equals(sysActorToSysLine)) {
																																																																																																																																																																																																																																																					if (!alternative1ToOperand
																																																																																																																																																																																																																																																							.equals(messageSend)) {
																																																																																																																																																																																																																																																						if (!alternative1ToOperand
																																																																																																																																																																																																																																																								.equals(combo)) {
																																																																																																																																																																																																																																																							if (!alternative1ToOperand
																																																																																																																																																																																																																																																									.equals(operand)) {
																																																																																																																																																																																																																																																								if (!alternative1ToOperand
																																																																																																																																																																																																																																																										.equals(parentOperand)) {
																																																																																																																																																																																																																																																									if (!alternative1ToOperand
																																																																																																																																																																																																																																																											.equals(parentCombo)) {
																																																																																																																																																																																																																																																										if (!alternative1ToOperand
																																																																																																																																																																																																																																																												.equals(flow)) {
																																																																																																																																																																																																																																																											if (!alternative1ToOperand
																																																																																																																																																																																																																																																													.equals(flowToParentOperand)) {
																																																																																																																																																																																																																																																												if (!alternative1ToOperand
																																																																																																																																																																																																																																																														.equals(messageReceive)) {
																																																																																																																																																																																																																																																													if (!alternative1ToOperand
																																																																																																																																																																																																																																																															.equals(line)) {
																																																																																																																																																																																																																																																														if (!alternative1ToOperand
																																																																																																																																																																																																																																																																.equals(interaction)) {
																																																																																																																																																																																																																																																															if (!alternative1ToOperand
																																																																																																																																																																																																																																																																	.equals(useCase)) {
																																																																																																																																																																																																																																																																if (!alternative1ToOperand
																																																																																																																																																																																																																																																																		.equals(useCaseToInteraction)) {
																																																																																																																																																																																																																																																																	if (!alternative1ToOperand
																																																																																																																																																																																																																																																																			.equals(step)) {
																																																																																																																																																																																																																																																																		if (!alternative1ToOperand
																																																																																																																																																																																																																																																																				.equals(stepToCombo)) {
																																																																																																																																																																																																																																																																			if (!alternative1ToOperand
																																																																																																																																																																																																																																																																					.equals(guard)) {
																																																																																																																																																																																																																																																																				if (!alternative1ToOperand
																																																																																																																																																																																																																																																																						.equals(spec)) {
																																																																																																																																																																																																																																																																					if (!guard
																																																																																																																																																																																																																																																																							.equals(packageDeclaration)) {
																																																																																																																																																																																																																																																																						if (!guard
																																																																																																																																																																																																																																																																								.equals(sysActor)) {
																																																																																																																																																																																																																																																																							if (!guard
																																																																																																																																																																																																																																																																									.equals(sysLine)) {
																																																																																																																																																																																																																																																																								if (!guard
																																																																																																																																																																																																																																																																										.equals(sysActorToSysLine)) {
																																																																																																																																																																																																																																																																									if (!guard
																																																																																																																																																																																																																																																																											.equals(messageSend)) {
																																																																																																																																																																																																																																																																										if (!guard
																																																																																																																																																																																																																																																																												.equals(operand)) {
																																																																																																																																																																																																																																																																											if (!guard
																																																																																																																																																																																																																																																																													.equals(parentOperand)) {
																																																																																																																																																																																																																																																																												if (!guard
																																																																																																																																																																																																																																																																														.equals(parentCombo)) {
																																																																																																																																																																																																																																																																													if (!guard
																																																																																																																																																																																																																																																																															.equals(messageReceive)) {
																																																																																																																																																																																																																																																																														if (!guard
																																																																																																																																																																																																																																																																																.equals(line)) {
																																																																																																																																																																																																																																																																															if (!guard
																																																																																																																																																																																																																																																																																	.equals(interaction)) {
																																																																																																																																																																																																																																																																																if (!guard
																																																																																																																																																																																																																																																																																		.equals(useCase)) {
																																																																																																																																																																																																																																																																																	if (!guard
																																																																																																																																																																																																																																																																																			.equals(useCaseToInteraction)) {
																																																																																																																																																																																																																																																																																		if (!guard
																																																																																																																																																																																																																																																																																				.equals(step)) {
																																																																																																																																																																																																																																																																																			if (!guard
																																																																																																																																																																																																																																																																																					.equals(stepToCombo)) {
																																																																																																																																																																																																																																																																																				if (!guard
																																																																																																																																																																																																																																																																																						.equals(spec)) {
																																																																																																																																																																																																																																																																																					if (!spec
																																																																																																																																																																																																																																																																																							.equals(sysActor)) {
																																																																																																																																																																																																																																																																																						if (!spec
																																																																																																																																																																																																																																																																																								.equals(sysLine)) {
																																																																																																																																																																																																																																																																																							if (!spec
																																																																																																																																																																																																																																																																																									.equals(sysActorToSysLine)) {
																																																																																																																																																																																																																																																																																								if (!spec
																																																																																																																																																																																																																																																																																										.equals(useCase)) {
																																																																																																																																																																																																																																																																																									if (!spec
																																																																																																																																																																																																																																																																																											.equals(useCaseToInteraction)) {
																																																																																																																																																																																																																																																																																										if (!spec
																																																																																																																																																																																																																																																																																												.equals(step)) {
																																																																																																																																																																																																																																																																																											if (!spec
																																																																																																																																																																																																																																																																																													.equals(stepToCombo)) {
																																																																																																																																																																																																																																																																																												if (!altFlow
																																																																																																																																																																																																																																																																																														.equals(packageDeclaration)) {
																																																																																																																																																																																																																																																																																													if (!altFlow
																																																																																																																																																																																																																																																																																															.equals(sysActor)) {
																																																																																																																																																																																																																																																																																														if (!altFlow
																																																																																																																																																																																																																																																																																																.equals(sysLine)) {
																																																																																																																																																																																																																																																																																															if (!altFlow
																																																																																																																																																																																																																																																																																																	.equals(sysActorToSysLine)) {
																																																																																																																																																																																																																																																																																																if (!altFlow
																																																																																																																																																																																																																																																																																																		.equals(messageSend)) {
																																																																																																																																																																																																																																																																																																	if (!altFlow
																																																																																																																																																																																																																																																																																																			.equals(combo)) {
																																																																																																																																																																																																																																																																																																		if (!altFlow
																																																																																																																																																																																																																																																																																																				.equals(operand)) {
																																																																																																																																																																																																																																																																																																			if (!altFlow
																																																																																																																																																																																																																																																																																																					.equals(parentOperand)) {
																																																																																																																																																																																																																																																																																																				if (!altFlow
																																																																																																																																																																																																																																																																																																						.equals(parentCombo)) {
																																																																																																																																																																																																																																																																																																					if (!altFlow
																																																																																																																																																																																																																																																																																																							.equals(flow)) {
																																																																																																																																																																																																																																																																																																						if (!altFlow
																																																																																																																																																																																																																																																																																																								.equals(flowToParentOperand)) {
																																																																																																																																																																																																																																																																																																							if (!altFlow
																																																																																																																																																																																																																																																																																																									.equals(messageReceive)) {
																																																																																																																																																																																																																																																																																																								if (!altFlow
																																																																																																																																																																																																																																																																																																										.equals(line)) {
																																																																																																																																																																																																																																																																																																									if (!altFlow
																																																																																																																																																																																																																																																																																																											.equals(interaction)) {
																																																																																																																																																																																																																																																																																																										if (!altFlow
																																																																																																																																																																																																																																																																																																												.equals(useCase)) {
																																																																																																																																																																																																																																																																																																											if (!altFlow
																																																																																																																																																																																																																																																																																																													.equals(useCaseToInteraction)) {
																																																																																																																																																																																																																																																																																																												if (!altFlow
																																																																																																																																																																																																																																																																																																														.equals(step)) {
																																																																																																																																																																																																																																																																																																													if (!altFlow
																																																																																																																																																																																																																																																																																																															.equals(stepToCombo)) {
																																																																																																																																																																																																																																																																																																														if (!altFlow
																																																																																																																																																																																																																																																																																																																.equals(alternative1ToOperand)) {
																																																																																																																																																																																																																																																																																																															if (!altFlow
																																																																																																																																																																																																																																																																																																																	.equals(guard)) {
																																																																																																																																																																																																																																																																																																																if (!altFlow
																																																																																																																																																																																																																																																																																																																		.equals(spec)) {
																																																																																																																																																																																																																																																																																																																	if (!altFlow
																																																																																																																																																																																																																																																																																																																			.equals(altFlowToOperand)) {
																																																																																																																																																																																																																																																																																																																		if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																				.equals(packageDeclaration)) {
																																																																																																																																																																																																																																																																																																																			if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																					.equals(sysActor)) {
																																																																																																																																																																																																																																																																																																																				if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																						.equals(sysLine)) {
																																																																																																																																																																																																																																																																																																																					if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																							.equals(sysActorToSysLine)) {
																																																																																																																																																																																																																																																																																																																						if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																								.equals(messageSend)) {
																																																																																																																																																																																																																																																																																																																							if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																									.equals(combo)) {
																																																																																																																																																																																																																																																																																																																								if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																										.equals(operand)) {
																																																																																																																																																																																																																																																																																																																									if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																											.equals(parentOperand)) {
																																																																																																																																																																																																																																																																																																																										if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																												.equals(parentCombo)) {
																																																																																																																																																																																																																																																																																																																											if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																													.equals(flow)) {
																																																																																																																																																																																																																																																																																																																												if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																														.equals(flowToParentOperand)) {
																																																																																																																																																																																																																																																																																																																													if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																															.equals(messageReceive)) {
																																																																																																																																																																																																																																																																																																																														if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																.equals(line)) {
																																																																																																																																																																																																																																																																																																																															if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																	.equals(interaction)) {
																																																																																																																																																																																																																																																																																																																																if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																		.equals(useCase)) {
																																																																																																																																																																																																																																																																																																																																	if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																			.equals(useCaseToInteraction)) {
																																																																																																																																																																																																																																																																																																																																		if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																				.equals(step)) {
																																																																																																																																																																																																																																																																																																																																			if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																					.equals(stepToCombo)) {
																																																																																																																																																																																																																																																																																																																																				if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																						.equals(alternative1ToOperand)) {
																																																																																																																																																																																																																																																																																																																																					if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																							.equals(guard)) {
																																																																																																																																																																																																																																																																																																																																						if (!altFlowToOperand
																																																																																																																																																																																																																																																																																																																																								.equals(spec)) {
																																																																																																																																																																																																																																																																																																																																							return new Object[] {
																																																																																																																																																																																																																																																																																																																																									ruleresult,
																																																																																																																																																																																																																																																																																																																																									packageDeclaration,
																																																																																																																																																																																																																																																																																																																																									actor,
																																																																																																																																																																																																																																																																																																																																									sysActor,
																																																																																																																																																																																																																																																																																																																																									sysLine,
																																																																																																																																																																																																																																																																																																																																									sysActorToSysLine,
																																																																																																																																																																																																																																																																																																																																									messageSend,
																																																																																																																																																																																																																																																																																																																																									combo,
																																																																																																																																																																																																																																																																																																																																									operand,
																																																																																																																																																																																																																																																																																																																																									parentOperand,
																																																																																																																																																																																																																																																																																																																																									parentCombo,
																																																																																																																																																																																																																																																																																																																																									flow,
																																																																																																																																																																																																																																																																																																																																									flowToParentOperand,
																																																																																																																																																																																																																																																																																																																																									messageReceive,
																																																																																																																																																																																																																																																																																																																																									line,
																																																																																																																																																																																																																																																																																																																																									interaction,
																																																																																																																																																																																																																																																																																																																																									useCase,
																																																																																																																																																																																																																																																																																																																																									useCaseToInteraction,
																																																																																																																																																																																																																																																																																																																																									actorToLine,
																																																																																																																																																																																																																																																																																																																																									step,
																																																																																																																																																																																																																																																																																																																																									alt,
																																																																																																																																																																																																																																																																																																																																									stepToCombo,
																																																																																																																																																																																																																																																																																																																																									alternative1ToOperand,
																																																																																																																																																																																																																																																																																																																																									guard,
																																																																																																																																																																																																																																																																																																																																									spec,
																																																																																																																																																																																																																																																																																																																																									altFlow,
																																																																																																																																																																																																																																																																																																																																									altFlowToOperand };
																																																																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																}
																																																																																																																																																																																																																															}
																																																																																																																																																																																																																														}
																																																																																																																																																																																																																													}
																																																																																																																																																																																																																												}
																																																																																																																																																																																																																											}
																																																																																																																																																																																																																										}
																																																																																																																																																																																																																									}
																																																																																																																																																																																																																								}
																																																																																																																																																																																																																							}
																																																																																																																																																																																																																						}
																																																																																																																																																																																																																					}
																																																																																																																																																																																																																				}
																																																																																																																																																																																																																			}
																																																																																																																																																																																																																		}
																																																																																																																																																																																																																	}
																																																																																																																																																																																																																}
																																																																																																																																																																																																															}
																																																																																																																																																																																																														}
																																																																																																																																																																																																													}
																																																																																																																																																																																																												}
																																																																																																																																																																																																											}
																																																																																																																																																																																																										}
																																																																																																																																																																																																									}
																																																																																																																																																																																																								}
																																																																																																																																																																																																							}
																																																																																																																																																																																																						}
																																																																																																																																																																																																					}
																																																																																																																																																																																																				}
																																																																																																																																																																																																			}
																																																																																																																																																																																																		}
																																																																																																																																																																																																	}
																																																																																																																																																																																																}
																																																																																																																																																																																															}
																																																																																																																																																																																														}
																																																																																																																																																																																													}
																																																																																																																																																																																												}
																																																																																																																																																																																											}
																																																																																																																																																																																										}
																																																																																																																																																																																									}
																																																																																																																																																																																								}
																																																																																																																																																																																							}
																																																																																																																																																																																						}
																																																																																																																																																																																					}
																																																																																																																																																																																				}
																																																																																																																																																																																			}
																																																																																																																																																																																		}
																																																																																																																																																																																	}
																																																																																																																																																																																}
																																																																																																																																																																															}
																																																																																																																																																																														}
																																																																																																																																																																													}
																																																																																																																																																																												}
																																																																																																																																																																											}
																																																																																																																																																																										}
																																																																																																																																																																									}
																																																																																																																																																																								}
																																																																																																																																																																							}
																																																																																																																																																																						}
																																																																																																																																																																					}
																																																																																																																																																																				}
																																																																																																																																																																			}
																																																																																																																																																																		}
																																																																																																																																																																	}
																																																																																																																																																																}
																																																																																																																																																															}
																																																																																																																																																														}
																																																																																																																																																													}
																																																																																																																																																												}
																																																																																																																																																											}
																																																																																																																																																										}
																																																																																																																																																									}
																																																																																																																																																								}
																																																																																																																																																							}
																																																																																																																																																						}
																																																																																																																																																					}
																																																																																																																																																				}
																																																																																																																																																			}
																																																																																																																																																		}
																																																																																																																																																	}
																																																																																																																																																}
																																																																																																																																															}
																																																																																																																																														}
																																																																																																																																													}
																																																																																																																																												}
																																																																																																																																											}
																																																																																																																																										}
																																																																																																																																									}
																																																																																																																																								}
																																																																																																																																							}
																																																																																																																																						}
																																																																																																																																					}
																																																																																																																																				}
																																																																																																																																			}
																																																																																																																																		}
																																																																																																																																	}
																																																																																																																																}
																																																																																																																															}
																																																																																																																														}
																																																																																																																													}
																																																																																																																												}
																																																																																																																											}
																																																																																																																										}
																																																																																																																									}
																																																																																																																								}
																																																																																																																							}
																																																																																																																						}
																																																																																																																					}
																																																																																																																				}
																																																																																																																			}
																																																																																																																		}
																																																																																																																	}
																																																																																																																}
																																																																																																															}
																																																																																																														}
																																																																																																													}
																																																																																																												}
																																																																																																											}
																																																																																																										}
																																																																																																									}
																																																																																																								}
																																																																																																							}
																																																																																																						}
																																																																																																					}
																																																																																																				}
																																																																																																			}
																																																																																																		}
																																																																																																	}
																																																																																																}
																																																																																															}
																																																																																														}
																																																																																													}
																																																																																												}
																																																																																											}
																																																																																										}
																																																																																									}
																																																																																								}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_11_3_greenBBBBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF(
			PerformRuleResult ruleresult, EObject actor, EObject sysLine,
			EObject messageSend, EObject combo, EObject operand,
			EObject parentOperand, EObject parentCombo, EObject flow,
			EObject messageReceive, EObject line, EObject interaction,
			EObject step, EObject alt, EObject stepToCombo,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand) {
		EMoflonEdge sysLine__messageSend____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge messageSend__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysLine__combo____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge combo__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysLine__operand____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge operand__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysLine__parentOperand____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentOperand__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysLine__parentCombo____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentCombo__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentOperand__messageReceive____fragment = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge messageReceive__parentOperand____enclosingOperand = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge line__parentOperand____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentOperand__line____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge line__parentCombo____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentCombo__line____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge combo__interaction____enclosingInteraction = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge interaction__combo____fragment = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge flow__step____steps = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge step__alt____stepAlternative = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge step__actor____actor = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge alt__altFlow____ref = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge line__operand____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge operand__line____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge stepToCombo__step____source = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge stepToCombo__combo____target = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge operand__guard____guard = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge alternative1ToOperand__alt____source = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge alternative1ToOperand__operand____target = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge guard__spec____specification = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge altFlowToOperand__altFlow____source = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge altFlowToOperand__operand____target = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		String ruleresult_ruleName_prime = "AltUserStepNFToComboRule";
		String sysLine__messageSend____coveredBy_name_prime = "coveredBy";
		String messageSend__sysLine____covered_name_prime = "covered";
		String sysLine__combo____coveredBy_name_prime = "coveredBy";
		String combo__sysLine____covered_name_prime = "covered";
		String sysLine__operand____coveredBy_name_prime = "coveredBy";
		String operand__sysLine____covered_name_prime = "covered";
		String sysLine__parentOperand____coveredBy_name_prime = "coveredBy";
		String parentOperand__sysLine____covered_name_prime = "covered";
		String sysLine__parentCombo____coveredBy_name_prime = "coveredBy";
		String parentCombo__sysLine____covered_name_prime = "covered";
		String parentOperand__messageReceive____fragment_name_prime = "fragment";
		String messageReceive__parentOperand____enclosingOperand_name_prime = "enclosingOperand";
		String line__parentOperand____coveredBy_name_prime = "coveredBy";
		String parentOperand__line____covered_name_prime = "covered";
		String line__parentCombo____coveredBy_name_prime = "coveredBy";
		String parentCombo__line____covered_name_prime = "covered";
		String combo__interaction____enclosingInteraction_name_prime = "enclosingInteraction";
		String interaction__combo____fragment_name_prime = "fragment";
		String flow__step____steps_name_prime = "steps";
		String step__alt____stepAlternative_name_prime = "stepAlternative";
		String step__actor____actor_name_prime = "actor";
		String alt__altFlow____ref_name_prime = "ref";
		String line__operand____coveredBy_name_prime = "coveredBy";
		String operand__line____covered_name_prime = "covered";
		String stepToCombo__step____source_name_prime = "source";
		String stepToCombo__combo____target_name_prime = "target";
		String operand__guard____guard_name_prime = "guard";
		String alternative1ToOperand__alt____source_name_prime = "source";
		String alternative1ToOperand__operand____target_name_prime = "target";
		String guard__spec____specification_name_prime = "specification";
		String altFlowToOperand__altFlow____source_name_prime = "source";
		String altFlowToOperand__operand____target_name_prime = "target";
		sysLine__messageSend____coveredBy.setSrc(sysLine);
		sysLine__messageSend____coveredBy.setTrg(messageSend);
		ruleresult.getTranslatedEdges().add(sysLine__messageSend____coveredBy);
		messageSend__sysLine____covered.setSrc(messageSend);
		messageSend__sysLine____covered.setTrg(sysLine);
		ruleresult.getTranslatedEdges().add(messageSend__sysLine____covered);
		sysLine__combo____coveredBy.setSrc(sysLine);
		sysLine__combo____coveredBy.setTrg(combo);
		ruleresult.getTranslatedEdges().add(sysLine__combo____coveredBy);
		combo__sysLine____covered.setSrc(combo);
		combo__sysLine____covered.setTrg(sysLine);
		ruleresult.getTranslatedEdges().add(combo__sysLine____covered);
		sysLine__operand____coveredBy.setSrc(sysLine);
		sysLine__operand____coveredBy.setTrg(operand);
		ruleresult.getTranslatedEdges().add(sysLine__operand____coveredBy);
		operand__sysLine____covered.setSrc(operand);
		operand__sysLine____covered.setTrg(sysLine);
		ruleresult.getTranslatedEdges().add(operand__sysLine____covered);
		sysLine__parentOperand____coveredBy.setSrc(sysLine);
		sysLine__parentOperand____coveredBy.setTrg(parentOperand);
		ruleresult.getTranslatedEdges()
				.add(sysLine__parentOperand____coveredBy);
		parentOperand__sysLine____covered.setSrc(parentOperand);
		parentOperand__sysLine____covered.setTrg(sysLine);
		ruleresult.getTranslatedEdges().add(parentOperand__sysLine____covered);
		sysLine__parentCombo____coveredBy.setSrc(sysLine);
		sysLine__parentCombo____coveredBy.setTrg(parentCombo);
		ruleresult.getTranslatedEdges().add(sysLine__parentCombo____coveredBy);
		parentCombo__sysLine____covered.setSrc(parentCombo);
		parentCombo__sysLine____covered.setTrg(sysLine);
		ruleresult.getTranslatedEdges().add(parentCombo__sysLine____covered);
		parentOperand__messageReceive____fragment.setSrc(parentOperand);
		parentOperand__messageReceive____fragment.setTrg(messageReceive);
		ruleresult.getTranslatedEdges().add(
				parentOperand__messageReceive____fragment);
		messageReceive__parentOperand____enclosingOperand
				.setSrc(messageReceive);
		messageReceive__parentOperand____enclosingOperand.setTrg(parentOperand);
		ruleresult.getTranslatedEdges().add(
				messageReceive__parentOperand____enclosingOperand);
		line__parentOperand____coveredBy.setSrc(line);
		line__parentOperand____coveredBy.setTrg(parentOperand);
		ruleresult.getTranslatedEdges().add(line__parentOperand____coveredBy);
		parentOperand__line____covered.setSrc(parentOperand);
		parentOperand__line____covered.setTrg(line);
		ruleresult.getTranslatedEdges().add(parentOperand__line____covered);
		line__parentCombo____coveredBy.setSrc(line);
		line__parentCombo____coveredBy.setTrg(parentCombo);
		ruleresult.getTranslatedEdges().add(line__parentCombo____coveredBy);
		parentCombo__line____covered.setSrc(parentCombo);
		parentCombo__line____covered.setTrg(line);
		ruleresult.getTranslatedEdges().add(parentCombo__line____covered);
		combo__interaction____enclosingInteraction.setSrc(combo);
		combo__interaction____enclosingInteraction.setTrg(interaction);
		ruleresult.getTranslatedEdges().add(
				combo__interaction____enclosingInteraction);
		interaction__combo____fragment.setSrc(interaction);
		interaction__combo____fragment.setTrg(combo);
		ruleresult.getTranslatedEdges().add(interaction__combo____fragment);
		flow__step____steps.setSrc(flow);
		flow__step____steps.setTrg(step);
		ruleresult.getCreatedEdges().add(flow__step____steps);
		step__alt____stepAlternative.setSrc(step);
		step__alt____stepAlternative.setTrg(alt);
		ruleresult.getCreatedEdges().add(step__alt____stepAlternative);
		step__actor____actor.setSrc(step);
		step__actor____actor.setTrg(actor);
		ruleresult.getCreatedEdges().add(step__actor____actor);
		alt__altFlow____ref.setSrc(alt);
		alt__altFlow____ref.setTrg(altFlow);
		ruleresult.getCreatedEdges().add(alt__altFlow____ref);
		line__operand____coveredBy.setSrc(line);
		line__operand____coveredBy.setTrg(operand);
		ruleresult.getTranslatedEdges().add(line__operand____coveredBy);
		operand__line____covered.setSrc(operand);
		operand__line____covered.setTrg(line);
		ruleresult.getTranslatedEdges().add(operand__line____covered);
		stepToCombo__step____source.setSrc(stepToCombo);
		stepToCombo__step____source.setTrg(step);
		ruleresult.getCreatedEdges().add(stepToCombo__step____source);
		stepToCombo__combo____target.setSrc(stepToCombo);
		stepToCombo__combo____target.setTrg(combo);
		ruleresult.getCreatedEdges().add(stepToCombo__combo____target);
		operand__guard____guard.setSrc(operand);
		operand__guard____guard.setTrg(guard);
		ruleresult.getTranslatedEdges().add(operand__guard____guard);
		alternative1ToOperand__alt____source.setSrc(alternative1ToOperand);
		alternative1ToOperand__alt____source.setTrg(alt);
		ruleresult.getCreatedEdges().add(alternative1ToOperand__alt____source);
		alternative1ToOperand__operand____target.setSrc(alternative1ToOperand);
		alternative1ToOperand__operand____target.setTrg(operand);
		ruleresult.getCreatedEdges().add(
				alternative1ToOperand__operand____target);
		guard__spec____specification.setSrc(guard);
		guard__spec____specification.setTrg(spec);
		ruleresult.getTranslatedEdges().add(guard__spec____specification);
		altFlowToOperand__altFlow____source.setSrc(altFlowToOperand);
		altFlowToOperand__altFlow____source.setTrg(altFlow);
		ruleresult.getCreatedEdges().add(altFlowToOperand__altFlow____source);
		altFlowToOperand__operand____target.setSrc(altFlowToOperand);
		altFlowToOperand__operand____target.setTrg(operand);
		ruleresult.getCreatedEdges().add(altFlowToOperand__operand____target);
		ruleresult.setRuleName(ruleresult_ruleName_prime);
		sysLine__messageSend____coveredBy
				.setName(sysLine__messageSend____coveredBy_name_prime);
		messageSend__sysLine____covered
				.setName(messageSend__sysLine____covered_name_prime);
		sysLine__combo____coveredBy
				.setName(sysLine__combo____coveredBy_name_prime);
		combo__sysLine____covered.setName(combo__sysLine____covered_name_prime);
		sysLine__operand____coveredBy
				.setName(sysLine__operand____coveredBy_name_prime);
		operand__sysLine____covered
				.setName(operand__sysLine____covered_name_prime);
		sysLine__parentOperand____coveredBy
				.setName(sysLine__parentOperand____coveredBy_name_prime);
		parentOperand__sysLine____covered
				.setName(parentOperand__sysLine____covered_name_prime);
		sysLine__parentCombo____coveredBy
				.setName(sysLine__parentCombo____coveredBy_name_prime);
		parentCombo__sysLine____covered
				.setName(parentCombo__sysLine____covered_name_prime);
		parentOperand__messageReceive____fragment
				.setName(parentOperand__messageReceive____fragment_name_prime);
		messageReceive__parentOperand____enclosingOperand
				.setName(messageReceive__parentOperand____enclosingOperand_name_prime);
		line__parentOperand____coveredBy
				.setName(line__parentOperand____coveredBy_name_prime);
		parentOperand__line____covered
				.setName(parentOperand__line____covered_name_prime);
		line__parentCombo____coveredBy
				.setName(line__parentCombo____coveredBy_name_prime);
		parentCombo__line____covered
				.setName(parentCombo__line____covered_name_prime);
		combo__interaction____enclosingInteraction
				.setName(combo__interaction____enclosingInteraction_name_prime);
		interaction__combo____fragment
				.setName(interaction__combo____fragment_name_prime);
		flow__step____steps.setName(flow__step____steps_name_prime);
		step__alt____stepAlternative
				.setName(step__alt____stepAlternative_name_prime);
		step__actor____actor.setName(step__actor____actor_name_prime);
		alt__altFlow____ref.setName(alt__altFlow____ref_name_prime);
		line__operand____coveredBy
				.setName(line__operand____coveredBy_name_prime);
		operand__line____covered.setName(operand__line____covered_name_prime);
		stepToCombo__step____source
				.setName(stepToCombo__step____source_name_prime);
		stepToCombo__combo____target
				.setName(stepToCombo__combo____target_name_prime);
		operand__guard____guard.setName(operand__guard____guard_name_prime);
		alternative1ToOperand__alt____source
				.setName(alternative1ToOperand__alt____source_name_prime);
		alternative1ToOperand__operand____target
				.setName(alternative1ToOperand__operand____target_name_prime);
		guard__spec____specification
				.setName(guard__spec____specification_name_prime);
		altFlowToOperand__altFlow____source
				.setName(altFlowToOperand__altFlow____source_name_prime);
		altFlowToOperand__operand____target
				.setName(altFlowToOperand__operand____target_name_prime);
		return new Object[] { ruleresult, actor, sysLine, messageSend, combo,
				operand, parentOperand, parentCombo, flow, messageReceive,
				line, interaction, step, alt, stepToCombo,
				alternative1ToOperand, guard, spec, altFlow, altFlowToOperand,
				sysLine__messageSend____coveredBy,
				messageSend__sysLine____covered, sysLine__combo____coveredBy,
				combo__sysLine____covered, sysLine__operand____coveredBy,
				operand__sysLine____covered,
				sysLine__parentOperand____coveredBy,
				parentOperand__sysLine____covered,
				sysLine__parentCombo____coveredBy,
				parentCombo__sysLine____covered,
				parentOperand__messageReceive____fragment,
				messageReceive__parentOperand____enclosingOperand,
				line__parentOperand____coveredBy,
				parentOperand__line____covered, line__parentCombo____coveredBy,
				parentCombo__line____covered,
				combo__interaction____enclosingInteraction,
				interaction__combo____fragment, flow__step____steps,
				step__alt____stepAlternative, step__actor____actor,
				alt__altFlow____ref, line__operand____coveredBy,
				operand__line____covered, stepToCombo__step____source,
				stepToCombo__combo____target, operand__guard____guard,
				alternative1ToOperand__alt____source,
				alternative1ToOperand__operand____target,
				guard__spec____specification,
				altFlowToOperand__altFlow____source,
				altFlowToOperand__operand____target };
	}

	public static final void pattern_AltUserStepNFToComboRule_11_5_expressionBBBBBBBBBBBBBBBBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, PerformRuleResult ruleresult,
			EObject packageDeclaration, EObject actor, EObject sysActor,
			EObject sysLine, EObject sysActorToSysLine, EObject messageSend,
			EObject combo, EObject operand, EObject parentOperand,
			EObject parentCombo, EObject flow, EObject flowToParentOperand,
			EObject messageReceive, EObject line, EObject interaction,
			EObject useCase, EObject useCaseToInteraction, EObject actorToLine,
			EObject step, EObject alt, EObject stepToCombo,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand) {
		_this.registerObjects_BWD(ruleresult, packageDeclaration, actor,
				sysActor, sysLine, sysActorToSysLine, messageSend, combo,
				operand, parentOperand, parentCombo, flow, flowToParentOperand,
				messageReceive, line, interaction, useCase,
				useCaseToInteraction, actorToLine, step, alt, stepToCombo,
				alternative1ToOperand, guard, spec, altFlow, altFlowToOperand);

	}

	public static final PerformRuleResult pattern_AltUserStepNFToComboRule_11_6_expressionFB(
			PerformRuleResult ruleresult) {
		PerformRuleResult _result = ruleresult;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_12_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass eClass = _localVariable_0;
		if (eClass != null) {
			return new Object[] { eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_12_1_blackFBB(
			EClass eClass, AltUserStepNFToComboRule _this) {
		for (EOperation performOperation : eClass.getEOperations()) {
			String performOperationname = performOperation.getName();
			if (performOperationname.equals("perform_BWD")) {
				return new Object[] { performOperation, eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_12_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_12_1_binding = pattern_AltUserStepNFToComboRule_12_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_12_1_binding != null) {
			EClass eClass = (EClass) result_pattern_AltUserStepNFToComboRule_12_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_12_1_black = pattern_AltUserStepNFToComboRule_12_1_blackFBB(
					eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_12_1_black != null) {
				EOperation performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_12_1_black[0];

				return new Object[] { performOperation, eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_12_1_greenBF(
			EOperation performOperation) {
		IsApplicableRuleResult ruleresult = TGGRuntimeFactory.eINSTANCE
				.createIsApplicableRuleResult();
		boolean ruleresult_success_prime = false;
		String ruleresult_rule_prime = "AltUserStepNFToComboRule";
		ruleresult.setPerformOperation(performOperation);
		ruleresult.setSuccess(Boolean.valueOf(ruleresult_success_prime));
		ruleresult.setRule(ruleresult_rule_prime);
		return new Object[] { performOperation, ruleresult };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_12_2_bindingFFFFFFFFFFFB(
			Match match) {
		EObject _localVariable_0 = match.getObject("sysLine");
		EObject _localVariable_1 = match.getObject("messageSend");
		EObject _localVariable_2 = match.getObject("combo");
		EObject _localVariable_3 = match.getObject("operand");
		EObject _localVariable_4 = match.getObject("parentOperand");
		EObject _localVariable_5 = match.getObject("parentCombo");
		EObject _localVariable_6 = match.getObject("messageReceive");
		EObject _localVariable_7 = match.getObject("line");
		EObject _localVariable_8 = match.getObject("interaction");
		EObject _localVariable_9 = match.getObject("guard");
		EObject _localVariable_10 = match.getObject("spec");
		EObject tmpSysLine = _localVariable_0;
		EObject tmpMessageSend = _localVariable_1;
		EObject tmpCombo = _localVariable_2;
		EObject tmpOperand = _localVariable_3;
		EObject tmpParentOperand = _localVariable_4;
		EObject tmpParentCombo = _localVariable_5;
		EObject tmpMessageReceive = _localVariable_6;
		EObject tmpLine = _localVariable_7;
		EObject tmpInteraction = _localVariable_8;
		EObject tmpGuard = _localVariable_9;
		EObject tmpSpec = _localVariable_10;
		if (tmpSysLine instanceof Lifeline) {
			Lifeline sysLine = (Lifeline) tmpSysLine;
			if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
				MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
				if (tmpCombo instanceof CombinedFragment) {
					CombinedFragment combo = (CombinedFragment) tmpCombo;
					if (tmpOperand instanceof InteractionOperand) {
						InteractionOperand operand = (InteractionOperand) tmpOperand;
						if (tmpParentOperand instanceof InteractionOperand) {
							InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
							if (tmpParentCombo instanceof CombinedFragment) {
								CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
								if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
									MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
									if (tmpLine instanceof Lifeline) {
										Lifeline line = (Lifeline) tmpLine;
										if (tmpInteraction instanceof Interaction) {
											Interaction interaction = (Interaction) tmpInteraction;
											if (tmpGuard instanceof InteractionConstraint) {
												InteractionConstraint guard = (InteractionConstraint) tmpGuard;
												if (tmpSpec instanceof LiteralString) {
													LiteralString spec = (LiteralString) tmpSpec;
													return new Object[] {
															sysLine,
															messageSend, combo,
															operand,
															parentOperand,
															parentCombo,
															messageReceive,
															line, interaction,
															guard, spec, match };
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_12_2_blackFFBFBBBBBFFBBBFFFBBB(
			Lifeline sysLine, MessageOccurrenceSpecification messageSend,
			CombinedFragment combo, InteractionOperand operand,
			InteractionOperand parentOperand, CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec, Match match) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		if (!combo.equals(parentCombo)) {
			if (!operand.equals(parentOperand)) {
				if (!messageReceive.equals(messageSend)) {
					if (!line.equals(sysLine)) {
						for (ActorToLifeline sysActorToSysLine : org.moflon.util.eMoflonEMFUtil
								.getOppositeReferenceTyped(sysLine,
										ActorToLifeline.class, "target")) {
							Actor sysActor = sysActorToSysLine.getSource();
							if (sysActor != null) {
								for (FlowToInteractionFragment flowToParentOperand : org.moflon.util.eMoflonEMFUtil
										.getOppositeReferenceTyped(
												parentOperand,
												FlowToInteractionFragment.class,
												"target")) {
									Flow tmpFlow = flowToParentOperand
											.getSource();
									if (tmpFlow instanceof NamedFlow) {
										NamedFlow flow = (NamedFlow) tmpFlow;
										for (UseCaseToInteraction useCaseToInteraction : org.moflon.util.eMoflonEMFUtil
												.getOppositeReferenceTyped(
														interaction,
														UseCaseToInteraction.class,
														"target")) {
											UseCase useCase = useCaseToInteraction
													.getSource();
											if (useCase != null) {
												for (ActorToLifeline actorToLine : org.moflon.util.eMoflonEMFUtil
														.getOppositeReferenceTyped(
																line,
																ActorToLifeline.class,
																"target")) {
													if (!actorToLine
															.equals(sysActorToSysLine)) {
														Actor actor = actorToLine
																.getSource();
														if (actor != null) {
															if (!actor
																	.equals(sysActor)) {
																_result.add(new Object[] {
																		actor,
																		sysActor,
																		sysLine,
																		sysActorToSysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		flow,
																		flowToParentOperand,
																		messageReceive,
																		line,
																		interaction,
																		useCase,
																		useCaseToInteraction,
																		actorToLine,
																		guard,
																		spec,
																		match });
															}
														}

													}
												}
											}

										}
									}

								}
							}

						}
					}
				}
			}
		}
		return _result;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_12_3_blackFBBBBBBBBBBBBBBBBBBB(
			Actor actor, Actor sysActor, Lifeline sysLine,
			ActorToLifeline sysActorToSysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo, NamedFlow flow,
			FlowToInteractionFragment flowToParentOperand,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, InteractionConstraint guard,
			LiteralString spec) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		if (!actor.equals(sysActor)) {
			if (!combo.equals(parentCombo)) {
				if (!operand.equals(parentOperand)) {
					if (!messageReceive.equals(messageSend)) {
						if (!line.equals(sysLine)) {
							if (!actorToLine.equals(sysActorToSysLine)) {
								if (sysLine.getCoveredBy()
										.contains(messageSend)) {
									if (sysLine.getCoveredBy().contains(combo)) {
										if (sysLine.getCoveredBy().contains(
												operand)) {
											if (sysLine.getCoveredBy()
													.contains(parentOperand)) {
												if (sysLine.getCoveredBy()
														.contains(parentCombo)) {
													if (sysActor
															.equals(sysActorToSysLine
																	.getSource())) {
														if (sysLine
																.equals(sysActorToSysLine
																		.getTarget())) {
															if (parentCombo
																	.getOperand()
																	.contains(
																			parentOperand)) {
																if (parentOperand
																		.getFragment()
																		.contains(
																				messageReceive)) {
																	if (flow.equals(flowToParentOperand
																			.getSource())) {
																		if (parentOperand
																				.equals(flowToParentOperand
																						.getTarget())) {
																			if (line.getCoveredBy()
																					.contains(
																							parentOperand)) {
																				if (line.getCoveredBy()
																						.contains(
																								parentCombo)) {
																					if (interaction
																							.equals(combo
																									.getEnclosingInteraction())) {
																						if (interaction
																								.equals(line
																										.getInteraction())) {
																							if (useCase
																									.getFlows()
																									.contains(
																											flow)) {
																								if (useCase
																										.equals(useCaseToInteraction
																												.getSource())) {
																									if (interaction
																											.equals(useCaseToInteraction
																													.getTarget())) {
																										if (actor
																												.equals(actorToLine
																														.getSource())) {
																											if (line.equals(actorToLine
																													.getTarget())) {
																												if (line.getCoveredBy()
																														.contains(
																																operand)) {
																													if (guard
																															.equals(operand
																																	.getGuard())) {
																														if (spec.equals(guard
																																.getSpecification())) {
																															for (PackageDeclaration packageDeclaration : org.moflon.util.eMoflonEMFUtil
																																	.getOppositeReferenceTyped(
																																			actor,
																																			PackageDeclaration.class,
																																			"actors")) {
																																if (packageDeclaration
																																		.getActors()
																																		.contains(
																																				sysActor)) {
																																	if (packageDeclaration
																																			.getUseCases()
																																			.contains(
																																					useCase)) {
																																		_result.add(new Object[] {
																																				packageDeclaration,
																																				actor,
																																				sysActor,
																																				sysLine,
																																				sysActorToSysLine,
																																				messageSend,
																																				combo,
																																				operand,
																																				parentOperand,
																																				parentCombo,
																																				flow,
																																				flowToParentOperand,
																																				messageReceive,
																																				line,
																																				interaction,
																																				useCase,
																																				useCaseToInteraction,
																																				actorToLine,
																																				guard,
																																				spec });
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_12_3_greenBBBBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF(
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo, NamedFlow flow,
			FlowToInteractionFragment flowToParentOperand,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, InteractionConstraint guard,
			LiteralString spec) {
		IsApplicableMatch isApplicableMatch = TGGRuntimeFactory.eINSTANCE
				.createIsApplicableMatch();
		EMoflonEdge packageDeclaration__actor____actors = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge packageDeclaration__sysActor____actors = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysLine__messageSend____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge messageSend__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysLine__combo____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge combo__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysLine__operand____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge operand__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysLine__parentOperand____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentOperand__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysLine__parentCombo____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentCombo__sysLine____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysActorToSysLine__sysActor____source = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sysActorToSysLine__sysLine____target = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentCombo__parentOperand____operand = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentOperand__messageReceive____fragment = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge messageReceive__parentOperand____enclosingOperand = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge flowToParentOperand__flow____source = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge flowToParentOperand__parentOperand____target = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge line__parentOperand____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentOperand__line____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge line__parentCombo____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge parentCombo__line____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge combo__interaction____enclosingInteraction = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge interaction__combo____fragment = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge line__interaction____interaction = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge interaction__line____lifeline = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge useCase__flow____flows = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge useCaseToInteraction__useCase____source = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge useCaseToInteraction__interaction____target = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge packageDeclaration__useCase____useCases = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge actorToLine__actor____source = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge actorToLine__line____target = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge line__operand____coveredBy = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge operand__line____covered = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge operand__guard____guard = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge guard__spec____specification = TGGRuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		String packageDeclaration__actor____actors_name_prime = "actors";
		String packageDeclaration__sysActor____actors_name_prime = "actors";
		String sysLine__messageSend____coveredBy_name_prime = "coveredBy";
		String messageSend__sysLine____covered_name_prime = "covered";
		String sysLine__combo____coveredBy_name_prime = "coveredBy";
		String combo__sysLine____covered_name_prime = "covered";
		String sysLine__operand____coveredBy_name_prime = "coveredBy";
		String operand__sysLine____covered_name_prime = "covered";
		String sysLine__parentOperand____coveredBy_name_prime = "coveredBy";
		String parentOperand__sysLine____covered_name_prime = "covered";
		String sysLine__parentCombo____coveredBy_name_prime = "coveredBy";
		String parentCombo__sysLine____covered_name_prime = "covered";
		String sysActorToSysLine__sysActor____source_name_prime = "source";
		String sysActorToSysLine__sysLine____target_name_prime = "target";
		String parentCombo__parentOperand____operand_name_prime = "operand";
		String parentOperand__messageReceive____fragment_name_prime = "fragment";
		String messageReceive__parentOperand____enclosingOperand_name_prime = "enclosingOperand";
		String flowToParentOperand__flow____source_name_prime = "source";
		String flowToParentOperand__parentOperand____target_name_prime = "target";
		String line__parentOperand____coveredBy_name_prime = "coveredBy";
		String parentOperand__line____covered_name_prime = "covered";
		String line__parentCombo____coveredBy_name_prime = "coveredBy";
		String parentCombo__line____covered_name_prime = "covered";
		String combo__interaction____enclosingInteraction_name_prime = "enclosingInteraction";
		String interaction__combo____fragment_name_prime = "fragment";
		String line__interaction____interaction_name_prime = "interaction";
		String interaction__line____lifeline_name_prime = "lifeline";
		String useCase__flow____flows_name_prime = "flows";
		String useCaseToInteraction__useCase____source_name_prime = "source";
		String useCaseToInteraction__interaction____target_name_prime = "target";
		String packageDeclaration__useCase____useCases_name_prime = "useCases";
		String actorToLine__actor____source_name_prime = "source";
		String actorToLine__line____target_name_prime = "target";
		String line__operand____coveredBy_name_prime = "coveredBy";
		String operand__line____covered_name_prime = "covered";
		String operand__guard____guard_name_prime = "guard";
		String guard__spec____specification_name_prime = "specification";
		isApplicableMatch.getAllContextElements().add(packageDeclaration);
		isApplicableMatch.getAllContextElements().add(actor);
		isApplicableMatch.getAllContextElements().add(sysActor);
		isApplicableMatch.getAllContextElements().add(sysLine);
		isApplicableMatch.getAllContextElements().add(sysActorToSysLine);
		isApplicableMatch.getAllContextElements().add(messageSend);
		isApplicableMatch.getAllContextElements().add(combo);
		isApplicableMatch.getAllContextElements().add(operand);
		isApplicableMatch.getAllContextElements().add(parentOperand);
		isApplicableMatch.getAllContextElements().add(parentCombo);
		isApplicableMatch.getAllContextElements().add(flow);
		isApplicableMatch.getAllContextElements().add(flowToParentOperand);
		isApplicableMatch.getAllContextElements().add(messageReceive);
		isApplicableMatch.getAllContextElements().add(line);
		isApplicableMatch.getAllContextElements().add(interaction);
		isApplicableMatch.getAllContextElements().add(useCase);
		isApplicableMatch.getAllContextElements().add(useCaseToInteraction);
		isApplicableMatch.getAllContextElements().add(actorToLine);
		isApplicableMatch.getAllContextElements().add(guard);
		isApplicableMatch.getAllContextElements().add(spec);
		packageDeclaration__actor____actors.setSrc(packageDeclaration);
		packageDeclaration__actor____actors.setTrg(actor);
		isApplicableMatch.getAllContextElements().add(
				packageDeclaration__actor____actors);
		packageDeclaration__sysActor____actors.setSrc(packageDeclaration);
		packageDeclaration__sysActor____actors.setTrg(sysActor);
		isApplicableMatch.getAllContextElements().add(
				packageDeclaration__sysActor____actors);
		sysLine__messageSend____coveredBy.setSrc(sysLine);
		sysLine__messageSend____coveredBy.setTrg(messageSend);
		isApplicableMatch.getAllContextElements().add(
				sysLine__messageSend____coveredBy);
		messageSend__sysLine____covered.setSrc(messageSend);
		messageSend__sysLine____covered.setTrg(sysLine);
		isApplicableMatch.getAllContextElements().add(
				messageSend__sysLine____covered);
		sysLine__combo____coveredBy.setSrc(sysLine);
		sysLine__combo____coveredBy.setTrg(combo);
		isApplicableMatch.getAllContextElements().add(
				sysLine__combo____coveredBy);
		combo__sysLine____covered.setSrc(combo);
		combo__sysLine____covered.setTrg(sysLine);
		isApplicableMatch.getAllContextElements()
				.add(combo__sysLine____covered);
		sysLine__operand____coveredBy.setSrc(sysLine);
		sysLine__operand____coveredBy.setTrg(operand);
		isApplicableMatch.getAllContextElements().add(
				sysLine__operand____coveredBy);
		operand__sysLine____covered.setSrc(operand);
		operand__sysLine____covered.setTrg(sysLine);
		isApplicableMatch.getAllContextElements().add(
				operand__sysLine____covered);
		sysLine__parentOperand____coveredBy.setSrc(sysLine);
		sysLine__parentOperand____coveredBy.setTrg(parentOperand);
		isApplicableMatch.getAllContextElements().add(
				sysLine__parentOperand____coveredBy);
		parentOperand__sysLine____covered.setSrc(parentOperand);
		parentOperand__sysLine____covered.setTrg(sysLine);
		isApplicableMatch.getAllContextElements().add(
				parentOperand__sysLine____covered);
		sysLine__parentCombo____coveredBy.setSrc(sysLine);
		sysLine__parentCombo____coveredBy.setTrg(parentCombo);
		isApplicableMatch.getAllContextElements().add(
				sysLine__parentCombo____coveredBy);
		parentCombo__sysLine____covered.setSrc(parentCombo);
		parentCombo__sysLine____covered.setTrg(sysLine);
		isApplicableMatch.getAllContextElements().add(
				parentCombo__sysLine____covered);
		sysActorToSysLine__sysActor____source.setSrc(sysActorToSysLine);
		sysActorToSysLine__sysActor____source.setTrg(sysActor);
		isApplicableMatch.getAllContextElements().add(
				sysActorToSysLine__sysActor____source);
		sysActorToSysLine__sysLine____target.setSrc(sysActorToSysLine);
		sysActorToSysLine__sysLine____target.setTrg(sysLine);
		isApplicableMatch.getAllContextElements().add(
				sysActorToSysLine__sysLine____target);
		parentCombo__parentOperand____operand.setSrc(parentCombo);
		parentCombo__parentOperand____operand.setTrg(parentOperand);
		isApplicableMatch.getAllContextElements().add(
				parentCombo__parentOperand____operand);
		parentOperand__messageReceive____fragment.setSrc(parentOperand);
		parentOperand__messageReceive____fragment.setTrg(messageReceive);
		isApplicableMatch.getAllContextElements().add(
				parentOperand__messageReceive____fragment);
		messageReceive__parentOperand____enclosingOperand
				.setSrc(messageReceive);
		messageReceive__parentOperand____enclosingOperand.setTrg(parentOperand);
		isApplicableMatch.getAllContextElements().add(
				messageReceive__parentOperand____enclosingOperand);
		flowToParentOperand__flow____source.setSrc(flowToParentOperand);
		flowToParentOperand__flow____source.setTrg(flow);
		isApplicableMatch.getAllContextElements().add(
				flowToParentOperand__flow____source);
		flowToParentOperand__parentOperand____target
				.setSrc(flowToParentOperand);
		flowToParentOperand__parentOperand____target.setTrg(parentOperand);
		isApplicableMatch.getAllContextElements().add(
				flowToParentOperand__parentOperand____target);
		line__parentOperand____coveredBy.setSrc(line);
		line__parentOperand____coveredBy.setTrg(parentOperand);
		isApplicableMatch.getAllContextElements().add(
				line__parentOperand____coveredBy);
		parentOperand__line____covered.setSrc(parentOperand);
		parentOperand__line____covered.setTrg(line);
		isApplicableMatch.getAllContextElements().add(
				parentOperand__line____covered);
		line__parentCombo____coveredBy.setSrc(line);
		line__parentCombo____coveredBy.setTrg(parentCombo);
		isApplicableMatch.getAllContextElements().add(
				line__parentCombo____coveredBy);
		parentCombo__line____covered.setSrc(parentCombo);
		parentCombo__line____covered.setTrg(line);
		isApplicableMatch.getAllContextElements().add(
				parentCombo__line____covered);
		combo__interaction____enclosingInteraction.setSrc(combo);
		combo__interaction____enclosingInteraction.setTrg(interaction);
		isApplicableMatch.getAllContextElements().add(
				combo__interaction____enclosingInteraction);
		interaction__combo____fragment.setSrc(interaction);
		interaction__combo____fragment.setTrg(combo);
		isApplicableMatch.getAllContextElements().add(
				interaction__combo____fragment);
		line__interaction____interaction.setSrc(line);
		line__interaction____interaction.setTrg(interaction);
		isApplicableMatch.getAllContextElements().add(
				line__interaction____interaction);
		interaction__line____lifeline.setSrc(interaction);
		interaction__line____lifeline.setTrg(line);
		isApplicableMatch.getAllContextElements().add(
				interaction__line____lifeline);
		useCase__flow____flows.setSrc(useCase);
		useCase__flow____flows.setTrg(flow);
		isApplicableMatch.getAllContextElements().add(useCase__flow____flows);
		useCaseToInteraction__useCase____source.setSrc(useCaseToInteraction);
		useCaseToInteraction__useCase____source.setTrg(useCase);
		isApplicableMatch.getAllContextElements().add(
				useCaseToInteraction__useCase____source);
		useCaseToInteraction__interaction____target
				.setSrc(useCaseToInteraction);
		useCaseToInteraction__interaction____target.setTrg(interaction);
		isApplicableMatch.getAllContextElements().add(
				useCaseToInteraction__interaction____target);
		packageDeclaration__useCase____useCases.setSrc(packageDeclaration);
		packageDeclaration__useCase____useCases.setTrg(useCase);
		isApplicableMatch.getAllContextElements().add(
				packageDeclaration__useCase____useCases);
		actorToLine__actor____source.setSrc(actorToLine);
		actorToLine__actor____source.setTrg(actor);
		isApplicableMatch.getAllContextElements().add(
				actorToLine__actor____source);
		actorToLine__line____target.setSrc(actorToLine);
		actorToLine__line____target.setTrg(line);
		isApplicableMatch.getAllContextElements().add(
				actorToLine__line____target);
		line__operand____coveredBy.setSrc(line);
		line__operand____coveredBy.setTrg(operand);
		isApplicableMatch.getAllContextElements().add(
				line__operand____coveredBy);
		operand__line____covered.setSrc(operand);
		operand__line____covered.setTrg(line);
		isApplicableMatch.getAllContextElements().add(operand__line____covered);
		operand__guard____guard.setSrc(operand);
		operand__guard____guard.setTrg(guard);
		isApplicableMatch.getAllContextElements().add(operand__guard____guard);
		guard__spec____specification.setSrc(guard);
		guard__spec____specification.setTrg(spec);
		isApplicableMatch.getAllContextElements().add(
				guard__spec____specification);
		packageDeclaration__actor____actors
				.setName(packageDeclaration__actor____actors_name_prime);
		packageDeclaration__sysActor____actors
				.setName(packageDeclaration__sysActor____actors_name_prime);
		sysLine__messageSend____coveredBy
				.setName(sysLine__messageSend____coveredBy_name_prime);
		messageSend__sysLine____covered
				.setName(messageSend__sysLine____covered_name_prime);
		sysLine__combo____coveredBy
				.setName(sysLine__combo____coveredBy_name_prime);
		combo__sysLine____covered.setName(combo__sysLine____covered_name_prime);
		sysLine__operand____coveredBy
				.setName(sysLine__operand____coveredBy_name_prime);
		operand__sysLine____covered
				.setName(operand__sysLine____covered_name_prime);
		sysLine__parentOperand____coveredBy
				.setName(sysLine__parentOperand____coveredBy_name_prime);
		parentOperand__sysLine____covered
				.setName(parentOperand__sysLine____covered_name_prime);
		sysLine__parentCombo____coveredBy
				.setName(sysLine__parentCombo____coveredBy_name_prime);
		parentCombo__sysLine____covered
				.setName(parentCombo__sysLine____covered_name_prime);
		sysActorToSysLine__sysActor____source
				.setName(sysActorToSysLine__sysActor____source_name_prime);
		sysActorToSysLine__sysLine____target
				.setName(sysActorToSysLine__sysLine____target_name_prime);
		parentCombo__parentOperand____operand
				.setName(parentCombo__parentOperand____operand_name_prime);
		parentOperand__messageReceive____fragment
				.setName(parentOperand__messageReceive____fragment_name_prime);
		messageReceive__parentOperand____enclosingOperand
				.setName(messageReceive__parentOperand____enclosingOperand_name_prime);
		flowToParentOperand__flow____source
				.setName(flowToParentOperand__flow____source_name_prime);
		flowToParentOperand__parentOperand____target
				.setName(flowToParentOperand__parentOperand____target_name_prime);
		line__parentOperand____coveredBy
				.setName(line__parentOperand____coveredBy_name_prime);
		parentOperand__line____covered
				.setName(parentOperand__line____covered_name_prime);
		line__parentCombo____coveredBy
				.setName(line__parentCombo____coveredBy_name_prime);
		parentCombo__line____covered
				.setName(parentCombo__line____covered_name_prime);
		combo__interaction____enclosingInteraction
				.setName(combo__interaction____enclosingInteraction_name_prime);
		interaction__combo____fragment
				.setName(interaction__combo____fragment_name_prime);
		line__interaction____interaction
				.setName(line__interaction____interaction_name_prime);
		interaction__line____lifeline
				.setName(interaction__line____lifeline_name_prime);
		useCase__flow____flows.setName(useCase__flow____flows_name_prime);
		useCaseToInteraction__useCase____source
				.setName(useCaseToInteraction__useCase____source_name_prime);
		useCaseToInteraction__interaction____target
				.setName(useCaseToInteraction__interaction____target_name_prime);
		packageDeclaration__useCase____useCases
				.setName(packageDeclaration__useCase____useCases_name_prime);
		actorToLine__actor____source
				.setName(actorToLine__actor____source_name_prime);
		actorToLine__line____target
				.setName(actorToLine__line____target_name_prime);
		line__operand____coveredBy
				.setName(line__operand____coveredBy_name_prime);
		operand__line____covered.setName(operand__line____covered_name_prime);
		operand__guard____guard.setName(operand__guard____guard_name_prime);
		guard__spec____specification
				.setName(guard__spec____specification_name_prime);
		return new Object[] { packageDeclaration, actor, sysActor, sysLine,
				sysActorToSysLine, messageSend, combo, operand, parentOperand,
				parentCombo, flow, flowToParentOperand, messageReceive, line,
				interaction, useCase, useCaseToInteraction, actorToLine, guard,
				spec, isApplicableMatch, packageDeclaration__actor____actors,
				packageDeclaration__sysActor____actors,
				sysLine__messageSend____coveredBy,
				messageSend__sysLine____covered, sysLine__combo____coveredBy,
				combo__sysLine____covered, sysLine__operand____coveredBy,
				operand__sysLine____covered,
				sysLine__parentOperand____coveredBy,
				parentOperand__sysLine____covered,
				sysLine__parentCombo____coveredBy,
				parentCombo__sysLine____covered,
				sysActorToSysLine__sysActor____source,
				sysActorToSysLine__sysLine____target,
				parentCombo__parentOperand____operand,
				parentOperand__messageReceive____fragment,
				messageReceive__parentOperand____enclosingOperand,
				flowToParentOperand__flow____source,
				flowToParentOperand__parentOperand____target,
				line__parentOperand____coveredBy,
				parentOperand__line____covered, line__parentCombo____coveredBy,
				parentCombo__line____covered,
				combo__interaction____enclosingInteraction,
				interaction__combo____fragment,
				line__interaction____interaction,
				interaction__line____lifeline, useCase__flow____flows,
				useCaseToInteraction__useCase____source,
				useCaseToInteraction__interaction____target,
				packageDeclaration__useCase____useCases,
				actorToLine__actor____source, actorToLine__line____target,
				line__operand____coveredBy, operand__line____covered,
				operand__guard____guard, guard__spec____specification };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_12_4_bindingFBBBBBBBBBBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this,
			IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo, NamedFlow flow,
			FlowToInteractionFragment flowToParentOperand,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, InteractionConstraint guard,
			LiteralString spec) {
		CSP _localVariable_0 = _this.isApplicable_solveCsp_BWD(
				isApplicableMatch, packageDeclaration, actor, sysActor,
				sysLine, sysActorToSysLine, messageSend, combo, operand,
				parentOperand, parentCombo, flow, flowToParentOperand,
				messageReceive, line, interaction, useCase,
				useCaseToInteraction, actorToLine, guard, spec);
		CSP csp = _localVariable_0;
		if (csp != null) {
			return new Object[] { csp, _this, isApplicableMatch,
					packageDeclaration, actor, sysActor, sysLine,
					sysActorToSysLine, messageSend, combo, operand,
					parentOperand, parentCombo, flow, flowToParentOperand,
					messageReceive, line, interaction, useCase,
					useCaseToInteraction, actorToLine, guard, spec };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_12_4_blackB(
			CSP csp) {
		return new Object[] { csp };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_12_4_bindingAndBlackFBBBBBBBBBBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this,
			IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo, NamedFlow flow,
			FlowToInteractionFragment flowToParentOperand,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, InteractionConstraint guard,
			LiteralString spec) {
		Object[] result_pattern_AltUserStepNFToComboRule_12_4_binding = pattern_AltUserStepNFToComboRule_12_4_bindingFBBBBBBBBBBBBBBBBBBBBBB(
				_this, isApplicableMatch, packageDeclaration, actor, sysActor,
				sysLine, sysActorToSysLine, messageSend, combo, operand,
				parentOperand, parentCombo, flow, flowToParentOperand,
				messageReceive, line, interaction, useCase,
				useCaseToInteraction, actorToLine, guard, spec);
		if (result_pattern_AltUserStepNFToComboRule_12_4_binding != null) {
			CSP csp = (CSP) result_pattern_AltUserStepNFToComboRule_12_4_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_12_4_black = pattern_AltUserStepNFToComboRule_12_4_blackB(csp);
			if (result_pattern_AltUserStepNFToComboRule_12_4_black != null) {

				return new Object[] { csp, _this, isApplicableMatch,
						packageDeclaration, actor, sysActor, sysLine,
						sysActorToSysLine, messageSend, combo, operand,
						parentOperand, parentCombo, flow, flowToParentOperand,
						messageReceive, line, interaction, useCase,
						useCaseToInteraction, actorToLine, guard, spec };
			}
		}
		return null;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_12_5_expressionFBB(
			AltUserStepNFToComboRule _this, CSP csp) {
		boolean _localVariable_0 = _this.isApplicable_checkCsp_BWD(csp);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_12_6_blackBB(
			IsApplicableRuleResult ruleresult,
			IsApplicableMatch isApplicableMatch) {
		return new Object[] { ruleresult, isApplicableMatch };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_12_6_greenBB(
			IsApplicableRuleResult ruleresult,
			IsApplicableMatch isApplicableMatch) {
		ruleresult.getIsApplicableMatch().add(isApplicableMatch);
		boolean ruleresult_success_prime = Boolean.valueOf(true);
		String isApplicableMatch_ruleName_prime = "AltUserStepNFToComboRule";
		ruleresult.setSuccess(Boolean.valueOf(ruleresult_success_prime));
		isApplicableMatch.setRuleName(isApplicableMatch_ruleName_prime);
		return new Object[] { ruleresult, isApplicableMatch };
	}

	public static final IsApplicableRuleResult pattern_AltUserStepNFToComboRule_12_7_expressionFB(
			IsApplicableRuleResult ruleresult) {
		IsApplicableRuleResult _result = ruleresult;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_20_1_binding = pattern_AltUserStepNFToComboRule_20_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_20_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_20_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_20_1_black = pattern_AltUserStepNFToComboRule_20_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_20_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_20_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_400931 = messageSend.getMessage();
		if (__DEC_messageSend_message_400931 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_291463 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_291463 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_291463)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_442179 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_442179 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_442179)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_246060 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_246060)) {
					if (!parentCombo.equals(__DEC_operand_operand_246060)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_728846 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_728846 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_319835 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_319835 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_319835)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_124456 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_124456)) {
					if (!parentOperand.equals(__DEC_guard_guard_124456)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_20_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_coveredBy) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpSysLine = _edge_coveredBy.getSrc();
		if (tmpSysLine instanceof Lifeline) {
			Lifeline sysLine = (Lifeline) tmpSysLine;
			EObject tmpMessageSend = _edge_coveredBy.getTrg();
			if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
				MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
				if (sysLine.getCoveredBy().contains(messageSend)) {
					if (pattern_AltUserStepNFToComboRule_20_2_black_nac_0B(messageSend) == null) {
						for (InteractionFragment tmpCombo : sysLine
								.getCoveredBy()) {
							if (tmpCombo instanceof CombinedFragment) {
								CombinedFragment combo = (CombinedFragment) tmpCombo;
								Interaction interaction = combo
										.getEnclosingInteraction();
								if (interaction != null) {
									if (pattern_AltUserStepNFToComboRule_20_2_black_nac_1BB(
											messageSend, interaction) == null) {
										if (pattern_AltUserStepNFToComboRule_20_2_black_nac_7BB(
												messageSend, interaction) == null) {
											for (InteractionFragment tmpOperand : sysLine
													.getCoveredBy()) {
												if (tmpOperand instanceof InteractionOperand) {
													InteractionOperand operand = (InteractionOperand) tmpOperand;
													InteractionConstraint guard = operand
															.getGuard();
													if (guard != null) {
														ValueSpecification tmpSpec = guard
																.getSpecification();
														if (tmpSpec instanceof LiteralString) {
															LiteralString spec = (LiteralString) tmpSpec;
															if (pattern_AltUserStepNFToComboRule_20_2_black_nac_2BB(
																	operand,
																	interaction) == null) {
																if (pattern_AltUserStepNFToComboRule_20_2_black_nac_8BB(
																		operand,
																		messageSend) == null) {
																	if (pattern_AltUserStepNFToComboRule_20_2_black_nac_10BB(
																			operand,
																			combo) == null) {
																		if (pattern_AltUserStepNFToComboRule_20_2_black_nac_12BB(
																				operand,
																				interaction) == null) {
																			if (pattern_AltUserStepNFToComboRule_20_2_black_nac_13BB(
																					combo,
																					operand) == null) {
																				for (InteractionFragment tmpParentOperand : sysLine
																						.getCoveredBy()) {
																					if (tmpParentOperand instanceof InteractionOperand) {
																						InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
																						if (!operand
																								.equals(parentOperand)) {
																							if (pattern_AltUserStepNFToComboRule_20_2_black_nac_6BBB(
																									guard,
																									operand,
																									parentOperand) == null) {
																								if (pattern_AltUserStepNFToComboRule_20_2_black_nac_9BB(
																										parentOperand,
																										messageSend) == null) {
																									if (pattern_AltUserStepNFToComboRule_20_2_black_nac_11BB(
																											parentOperand,
																											combo) == null) {
																										if (pattern_AltUserStepNFToComboRule_20_2_black_nac_17BB(
																												parentOperand,
																												guard) == null) {
																											for (InteractionFragment tmpParentCombo : sysLine
																													.getCoveredBy()) {
																												if (tmpParentCombo instanceof CombinedFragment) {
																													CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
																													if (!combo
																															.equals(parentCombo)) {
																														if (parentCombo
																																.getOperand()
																																.contains(
																																		parentOperand)) {
																															if (pattern_AltUserStepNFToComboRule_20_2_black_nac_3BBB(
																																	operand,
																																	combo,
																																	parentCombo) == null) {
																																if (pattern_AltUserStepNFToComboRule_20_2_black_nac_14BB(
																																		parentCombo,
																																		operand) == null) {
																																	for (Lifeline line : interaction
																																			.getLifeline()) {
																																		if (!line
																																				.equals(sysLine)) {
																																			if (line.getCoveredBy()
																																					.contains(
																																							parentOperand)) {
																																				if (line.getCoveredBy()
																																						.contains(
																																								parentCombo)) {
																																					if (line.getCoveredBy()
																																							.contains(
																																									operand)) {
																																						for (InteractionFragment tmpMessageReceive : parentOperand
																																								.getFragment()) {
																																							if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																																								MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																																								if (!messageReceive
																																										.equals(messageSend)) {
																																									if (pattern_AltUserStepNFToComboRule_20_2_black_nac_4B(messageReceive) == null) {
																																										if (pattern_AltUserStepNFToComboRule_20_2_black_nac_5BB(
																																												messageReceive,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_20_2_black_nac_15BB(
																																													messageReceive,
																																													interaction) == null) {
																																												if (pattern_AltUserStepNFToComboRule_20_2_black_nac_16BB(
																																														operand,
																																														messageReceive) == null) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_coveredBy });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}

													}

												}
											}
										}
									}
								}

							}
						}
					}
				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_20_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_20_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_20_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_20_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_21_1_binding = pattern_AltUserStepNFToComboRule_21_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_21_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_21_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_21_1_black = pattern_AltUserStepNFToComboRule_21_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_21_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_21_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_315881 = messageSend.getMessage();
		if (__DEC_messageSend_message_315881 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_759966 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_759966 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_759966)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_107580 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_107580 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_107580)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_953476 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_953476)) {
					if (!parentCombo.equals(__DEC_operand_operand_953476)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_132104 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_132104 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_934630 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_934630 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_934630)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_365961 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_365961)) {
					if (!parentOperand.equals(__DEC_guard_guard_365961)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_21_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_covered) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpMessageSend = _edge_covered.getSrc();
		if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
			MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
			EObject tmpSysLine = _edge_covered.getTrg();
			if (tmpSysLine instanceof Lifeline) {
				Lifeline sysLine = (Lifeline) tmpSysLine;
				if (sysLine.getCoveredBy().contains(messageSend)) {
					if (pattern_AltUserStepNFToComboRule_21_2_black_nac_0B(messageSend) == null) {
						for (InteractionFragment tmpCombo : sysLine
								.getCoveredBy()) {
							if (tmpCombo instanceof CombinedFragment) {
								CombinedFragment combo = (CombinedFragment) tmpCombo;
								Interaction interaction = combo
										.getEnclosingInteraction();
								if (interaction != null) {
									if (pattern_AltUserStepNFToComboRule_21_2_black_nac_1BB(
											messageSend, interaction) == null) {
										if (pattern_AltUserStepNFToComboRule_21_2_black_nac_7BB(
												messageSend, interaction) == null) {
											for (InteractionFragment tmpOperand : sysLine
													.getCoveredBy()) {
												if (tmpOperand instanceof InteractionOperand) {
													InteractionOperand operand = (InteractionOperand) tmpOperand;
													InteractionConstraint guard = operand
															.getGuard();
													if (guard != null) {
														ValueSpecification tmpSpec = guard
																.getSpecification();
														if (tmpSpec instanceof LiteralString) {
															LiteralString spec = (LiteralString) tmpSpec;
															if (pattern_AltUserStepNFToComboRule_21_2_black_nac_2BB(
																	operand,
																	interaction) == null) {
																if (pattern_AltUserStepNFToComboRule_21_2_black_nac_8BB(
																		operand,
																		messageSend) == null) {
																	if (pattern_AltUserStepNFToComboRule_21_2_black_nac_10BB(
																			operand,
																			combo) == null) {
																		if (pattern_AltUserStepNFToComboRule_21_2_black_nac_12BB(
																				operand,
																				interaction) == null) {
																			if (pattern_AltUserStepNFToComboRule_21_2_black_nac_13BB(
																					combo,
																					operand) == null) {
																				for (InteractionFragment tmpParentOperand : sysLine
																						.getCoveredBy()) {
																					if (tmpParentOperand instanceof InteractionOperand) {
																						InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
																						if (!operand
																								.equals(parentOperand)) {
																							if (pattern_AltUserStepNFToComboRule_21_2_black_nac_6BBB(
																									guard,
																									operand,
																									parentOperand) == null) {
																								if (pattern_AltUserStepNFToComboRule_21_2_black_nac_9BB(
																										parentOperand,
																										messageSend) == null) {
																									if (pattern_AltUserStepNFToComboRule_21_2_black_nac_11BB(
																											parentOperand,
																											combo) == null) {
																										if (pattern_AltUserStepNFToComboRule_21_2_black_nac_17BB(
																												parentOperand,
																												guard) == null) {
																											for (InteractionFragment tmpParentCombo : sysLine
																													.getCoveredBy()) {
																												if (tmpParentCombo instanceof CombinedFragment) {
																													CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
																													if (!combo
																															.equals(parentCombo)) {
																														if (parentCombo
																																.getOperand()
																																.contains(
																																		parentOperand)) {
																															if (pattern_AltUserStepNFToComboRule_21_2_black_nac_3BBB(
																																	operand,
																																	combo,
																																	parentCombo) == null) {
																																if (pattern_AltUserStepNFToComboRule_21_2_black_nac_14BB(
																																		parentCombo,
																																		operand) == null) {
																																	for (Lifeline line : interaction
																																			.getLifeline()) {
																																		if (!line
																																				.equals(sysLine)) {
																																			if (line.getCoveredBy()
																																					.contains(
																																							parentOperand)) {
																																				if (line.getCoveredBy()
																																						.contains(
																																								parentCombo)) {
																																					if (line.getCoveredBy()
																																							.contains(
																																									operand)) {
																																						for (InteractionFragment tmpMessageReceive : parentOperand
																																								.getFragment()) {
																																							if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																																								MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																																								if (!messageReceive
																																										.equals(messageSend)) {
																																									if (pattern_AltUserStepNFToComboRule_21_2_black_nac_4B(messageReceive) == null) {
																																										if (pattern_AltUserStepNFToComboRule_21_2_black_nac_5BB(
																																												messageReceive,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_21_2_black_nac_15BB(
																																													messageReceive,
																																													interaction) == null) {
																																												if (pattern_AltUserStepNFToComboRule_21_2_black_nac_16BB(
																																														operand,
																																														messageReceive) == null) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_covered });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}

													}

												}
											}
										}
									}
								}

							}
						}
					}
				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_21_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_21_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_21_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_21_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_22_1_binding = pattern_AltUserStepNFToComboRule_22_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_22_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_22_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_22_1_black = pattern_AltUserStepNFToComboRule_22_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_22_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_22_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_590580 = messageSend.getMessage();
		if (__DEC_messageSend_message_590580 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_820539 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_820539 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_820539)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_387299 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_387299 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_387299)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_230565 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_230565)) {
					if (!parentCombo.equals(__DEC_operand_operand_230565)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_163480 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_163480 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_302991 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_302991 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_302991)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_96688 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_96688)) {
					if (!parentOperand.equals(__DEC_guard_guard_96688)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_22_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_coveredBy) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpSysLine = _edge_coveredBy.getSrc();
		if (tmpSysLine instanceof Lifeline) {
			Lifeline sysLine = (Lifeline) tmpSysLine;
			EObject tmpCombo = _edge_coveredBy.getTrg();
			if (tmpCombo instanceof CombinedFragment) {
				CombinedFragment combo = (CombinedFragment) tmpCombo;
				if (sysLine.getCoveredBy().contains(combo)) {
					Interaction interaction = combo.getEnclosingInteraction();
					if (interaction != null) {
						for (InteractionFragment tmpMessageSend : sysLine
								.getCoveredBy()) {
							if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
								MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
								if (pattern_AltUserStepNFToComboRule_22_2_black_nac_0B(messageSend) == null) {
									if (pattern_AltUserStepNFToComboRule_22_2_black_nac_1BB(
											messageSend, interaction) == null) {
										if (pattern_AltUserStepNFToComboRule_22_2_black_nac_7BB(
												messageSend, interaction) == null) {
											for (InteractionFragment tmpOperand : sysLine
													.getCoveredBy()) {
												if (tmpOperand instanceof InteractionOperand) {
													InteractionOperand operand = (InteractionOperand) tmpOperand;
													InteractionConstraint guard = operand
															.getGuard();
													if (guard != null) {
														ValueSpecification tmpSpec = guard
																.getSpecification();
														if (tmpSpec instanceof LiteralString) {
															LiteralString spec = (LiteralString) tmpSpec;
															if (pattern_AltUserStepNFToComboRule_22_2_black_nac_2BB(
																	operand,
																	interaction) == null) {
																if (pattern_AltUserStepNFToComboRule_22_2_black_nac_8BB(
																		operand,
																		messageSend) == null) {
																	if (pattern_AltUserStepNFToComboRule_22_2_black_nac_10BB(
																			operand,
																			combo) == null) {
																		if (pattern_AltUserStepNFToComboRule_22_2_black_nac_12BB(
																				operand,
																				interaction) == null) {
																			if (pattern_AltUserStepNFToComboRule_22_2_black_nac_13BB(
																					combo,
																					operand) == null) {
																				for (InteractionFragment tmpParentOperand : sysLine
																						.getCoveredBy()) {
																					if (tmpParentOperand instanceof InteractionOperand) {
																						InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
																						if (!operand
																								.equals(parentOperand)) {
																							if (pattern_AltUserStepNFToComboRule_22_2_black_nac_6BBB(
																									guard,
																									operand,
																									parentOperand) == null) {
																								if (pattern_AltUserStepNFToComboRule_22_2_black_nac_9BB(
																										parentOperand,
																										messageSend) == null) {
																									if (pattern_AltUserStepNFToComboRule_22_2_black_nac_11BB(
																											parentOperand,
																											combo) == null) {
																										if (pattern_AltUserStepNFToComboRule_22_2_black_nac_17BB(
																												parentOperand,
																												guard) == null) {
																											for (InteractionFragment tmpParentCombo : sysLine
																													.getCoveredBy()) {
																												if (tmpParentCombo instanceof CombinedFragment) {
																													CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
																													if (!combo
																															.equals(parentCombo)) {
																														if (parentCombo
																																.getOperand()
																																.contains(
																																		parentOperand)) {
																															if (pattern_AltUserStepNFToComboRule_22_2_black_nac_3BBB(
																																	operand,
																																	combo,
																																	parentCombo) == null) {
																																if (pattern_AltUserStepNFToComboRule_22_2_black_nac_14BB(
																																		parentCombo,
																																		operand) == null) {
																																	for (Lifeline line : interaction
																																			.getLifeline()) {
																																		if (!line
																																				.equals(sysLine)) {
																																			if (line.getCoveredBy()
																																					.contains(
																																							parentOperand)) {
																																				if (line.getCoveredBy()
																																						.contains(
																																								parentCombo)) {
																																					if (line.getCoveredBy()
																																							.contains(
																																									operand)) {
																																						for (InteractionFragment tmpMessageReceive : parentOperand
																																								.getFragment()) {
																																							if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																																								MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																																								if (!messageReceive
																																										.equals(messageSend)) {
																																									if (pattern_AltUserStepNFToComboRule_22_2_black_nac_4B(messageReceive) == null) {
																																										if (pattern_AltUserStepNFToComboRule_22_2_black_nac_5BB(
																																												messageReceive,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_22_2_black_nac_15BB(
																																													messageReceive,
																																													interaction) == null) {
																																												if (pattern_AltUserStepNFToComboRule_22_2_black_nac_16BB(
																																														operand,
																																														messageReceive) == null) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_coveredBy });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}

													}

												}
											}
										}
									}
								}
							}
						}
					}

				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_22_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_22_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_22_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_22_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_23_1_binding = pattern_AltUserStepNFToComboRule_23_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_23_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_23_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_23_1_black = pattern_AltUserStepNFToComboRule_23_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_23_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_23_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_4907 = messageSend.getMessage();
		if (__DEC_messageSend_message_4907 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_24328 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_24328 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_24328)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_303760 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_303760 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_303760)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_672844 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_672844)) {
					if (!parentCombo.equals(__DEC_operand_operand_672844)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_608229 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_608229 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_202844 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_202844 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_202844)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_792537 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_792537)) {
					if (!parentOperand.equals(__DEC_guard_guard_792537)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_23_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_covered) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpCombo = _edge_covered.getSrc();
		if (tmpCombo instanceof CombinedFragment) {
			CombinedFragment combo = (CombinedFragment) tmpCombo;
			EObject tmpSysLine = _edge_covered.getTrg();
			if (tmpSysLine instanceof Lifeline) {
				Lifeline sysLine = (Lifeline) tmpSysLine;
				if (sysLine.getCoveredBy().contains(combo)) {
					Interaction interaction = combo.getEnclosingInteraction();
					if (interaction != null) {
						for (InteractionFragment tmpMessageSend : sysLine
								.getCoveredBy()) {
							if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
								MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
								if (pattern_AltUserStepNFToComboRule_23_2_black_nac_0B(messageSend) == null) {
									if (pattern_AltUserStepNFToComboRule_23_2_black_nac_1BB(
											messageSend, interaction) == null) {
										if (pattern_AltUserStepNFToComboRule_23_2_black_nac_7BB(
												messageSend, interaction) == null) {
											for (InteractionFragment tmpOperand : sysLine
													.getCoveredBy()) {
												if (tmpOperand instanceof InteractionOperand) {
													InteractionOperand operand = (InteractionOperand) tmpOperand;
													InteractionConstraint guard = operand
															.getGuard();
													if (guard != null) {
														ValueSpecification tmpSpec = guard
																.getSpecification();
														if (tmpSpec instanceof LiteralString) {
															LiteralString spec = (LiteralString) tmpSpec;
															if (pattern_AltUserStepNFToComboRule_23_2_black_nac_2BB(
																	operand,
																	interaction) == null) {
																if (pattern_AltUserStepNFToComboRule_23_2_black_nac_8BB(
																		operand,
																		messageSend) == null) {
																	if (pattern_AltUserStepNFToComboRule_23_2_black_nac_10BB(
																			operand,
																			combo) == null) {
																		if (pattern_AltUserStepNFToComboRule_23_2_black_nac_12BB(
																				operand,
																				interaction) == null) {
																			if (pattern_AltUserStepNFToComboRule_23_2_black_nac_13BB(
																					combo,
																					operand) == null) {
																				for (InteractionFragment tmpParentOperand : sysLine
																						.getCoveredBy()) {
																					if (tmpParentOperand instanceof InteractionOperand) {
																						InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
																						if (!operand
																								.equals(parentOperand)) {
																							if (pattern_AltUserStepNFToComboRule_23_2_black_nac_6BBB(
																									guard,
																									operand,
																									parentOperand) == null) {
																								if (pattern_AltUserStepNFToComboRule_23_2_black_nac_9BB(
																										parentOperand,
																										messageSend) == null) {
																									if (pattern_AltUserStepNFToComboRule_23_2_black_nac_11BB(
																											parentOperand,
																											combo) == null) {
																										if (pattern_AltUserStepNFToComboRule_23_2_black_nac_17BB(
																												parentOperand,
																												guard) == null) {
																											for (InteractionFragment tmpParentCombo : sysLine
																													.getCoveredBy()) {
																												if (tmpParentCombo instanceof CombinedFragment) {
																													CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
																													if (!combo
																															.equals(parentCombo)) {
																														if (parentCombo
																																.getOperand()
																																.contains(
																																		parentOperand)) {
																															if (pattern_AltUserStepNFToComboRule_23_2_black_nac_3BBB(
																																	operand,
																																	combo,
																																	parentCombo) == null) {
																																if (pattern_AltUserStepNFToComboRule_23_2_black_nac_14BB(
																																		parentCombo,
																																		operand) == null) {
																																	for (Lifeline line : interaction
																																			.getLifeline()) {
																																		if (!line
																																				.equals(sysLine)) {
																																			if (line.getCoveredBy()
																																					.contains(
																																							parentOperand)) {
																																				if (line.getCoveredBy()
																																						.contains(
																																								parentCombo)) {
																																					if (line.getCoveredBy()
																																							.contains(
																																									operand)) {
																																						for (InteractionFragment tmpMessageReceive : parentOperand
																																								.getFragment()) {
																																							if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																																								MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																																								if (!messageReceive
																																										.equals(messageSend)) {
																																									if (pattern_AltUserStepNFToComboRule_23_2_black_nac_4B(messageReceive) == null) {
																																										if (pattern_AltUserStepNFToComboRule_23_2_black_nac_5BB(
																																												messageReceive,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_23_2_black_nac_15BB(
																																													messageReceive,
																																													interaction) == null) {
																																												if (pattern_AltUserStepNFToComboRule_23_2_black_nac_16BB(
																																														operand,
																																														messageReceive) == null) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_covered });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}

													}

												}
											}
										}
									}
								}
							}
						}
					}

				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_23_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_23_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_23_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_23_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_24_1_binding = pattern_AltUserStepNFToComboRule_24_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_24_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_24_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_24_1_black = pattern_AltUserStepNFToComboRule_24_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_24_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_24_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_79861 = messageSend.getMessage();
		if (__DEC_messageSend_message_79861 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_789986 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_789986 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_789986)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_43674 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_43674 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_43674)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_98495 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_98495)) {
					if (!parentCombo.equals(__DEC_operand_operand_98495)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_21389 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_21389 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_849912 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_849912 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_849912)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_981062 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_981062)) {
					if (!parentOperand.equals(__DEC_guard_guard_981062)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_24_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_coveredBy) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpSysLine = _edge_coveredBy.getSrc();
		if (tmpSysLine instanceof Lifeline) {
			Lifeline sysLine = (Lifeline) tmpSysLine;
			EObject tmpOperand = _edge_coveredBy.getTrg();
			if (tmpOperand instanceof InteractionOperand) {
				InteractionOperand operand = (InteractionOperand) tmpOperand;
				if (sysLine.getCoveredBy().contains(operand)) {
					InteractionConstraint guard = operand.getGuard();
					if (guard != null) {
						ValueSpecification tmpSpec = guard.getSpecification();
						if (tmpSpec instanceof LiteralString) {
							LiteralString spec = (LiteralString) tmpSpec;
							for (InteractionFragment tmpMessageSend : sysLine
									.getCoveredBy()) {
								if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
									MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
									if (pattern_AltUserStepNFToComboRule_24_2_black_nac_0B(messageSend) == null) {
										if (pattern_AltUserStepNFToComboRule_24_2_black_nac_8BB(
												operand, messageSend) == null) {
											for (InteractionFragment tmpCombo : sysLine
													.getCoveredBy()) {
												if (tmpCombo instanceof CombinedFragment) {
													CombinedFragment combo = (CombinedFragment) tmpCombo;
													Interaction interaction = combo
															.getEnclosingInteraction();
													if (interaction != null) {
														if (pattern_AltUserStepNFToComboRule_24_2_black_nac_10BB(
																operand, combo) == null) {
															if (pattern_AltUserStepNFToComboRule_24_2_black_nac_13BB(
																	combo,
																	operand) == null) {
																if (pattern_AltUserStepNFToComboRule_24_2_black_nac_1BB(
																		messageSend,
																		interaction) == null) {
																	if (pattern_AltUserStepNFToComboRule_24_2_black_nac_2BB(
																			operand,
																			interaction) == null) {
																		if (pattern_AltUserStepNFToComboRule_24_2_black_nac_7BB(
																				messageSend,
																				interaction) == null) {
																			if (pattern_AltUserStepNFToComboRule_24_2_black_nac_12BB(
																					operand,
																					interaction) == null) {
																				for (InteractionFragment tmpParentOperand : sysLine
																						.getCoveredBy()) {
																					if (tmpParentOperand instanceof InteractionOperand) {
																						InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
																						if (!operand
																								.equals(parentOperand)) {
																							if (pattern_AltUserStepNFToComboRule_24_2_black_nac_6BBB(
																									guard,
																									operand,
																									parentOperand) == null) {
																								if (pattern_AltUserStepNFToComboRule_24_2_black_nac_9BB(
																										parentOperand,
																										messageSend) == null) {
																									if (pattern_AltUserStepNFToComboRule_24_2_black_nac_11BB(
																											parentOperand,
																											combo) == null) {
																										if (pattern_AltUserStepNFToComboRule_24_2_black_nac_17BB(
																												parentOperand,
																												guard) == null) {
																											for (InteractionFragment tmpParentCombo : sysLine
																													.getCoveredBy()) {
																												if (tmpParentCombo instanceof CombinedFragment) {
																													CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
																													if (!combo
																															.equals(parentCombo)) {
																														if (parentCombo
																																.getOperand()
																																.contains(
																																		parentOperand)) {
																															if (pattern_AltUserStepNFToComboRule_24_2_black_nac_3BBB(
																																	operand,
																																	combo,
																																	parentCombo) == null) {
																																if (pattern_AltUserStepNFToComboRule_24_2_black_nac_14BB(
																																		parentCombo,
																																		operand) == null) {
																																	for (Lifeline line : operand
																																			.getCovered()) {
																																		if (!line
																																				.equals(sysLine)) {
																																			if (line.getCoveredBy()
																																					.contains(
																																							parentOperand)) {
																																				if (line.getCoveredBy()
																																						.contains(
																																								parentCombo)) {
																																					if (interaction
																																							.equals(line
																																									.getInteraction())) {
																																						for (InteractionFragment tmpMessageReceive : parentOperand
																																								.getFragment()) {
																																							if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																																								MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																																								if (!messageReceive
																																										.equals(messageSend)) {
																																									if (pattern_AltUserStepNFToComboRule_24_2_black_nac_4B(messageReceive) == null) {
																																										if (pattern_AltUserStepNFToComboRule_24_2_black_nac_5BB(
																																												messageReceive,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_24_2_black_nac_15BB(
																																													messageReceive,
																																													interaction) == null) {
																																												if (pattern_AltUserStepNFToComboRule_24_2_black_nac_16BB(
																																														operand,
																																														messageReceive) == null) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_coveredBy });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}

												}
											}
										}
									}
								}
							}
						}

					}

				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_24_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_24_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_24_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_24_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_25_1_binding = pattern_AltUserStepNFToComboRule_25_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_25_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_25_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_25_1_black = pattern_AltUserStepNFToComboRule_25_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_25_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_25_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_45371 = messageSend.getMessage();
		if (__DEC_messageSend_message_45371 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_857896 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_857896 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_857896)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_101385 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_101385 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_101385)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_187875 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_187875)) {
					if (!parentCombo.equals(__DEC_operand_operand_187875)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_764142 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_764142 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_439056 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_439056 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_439056)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_170968 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_170968)) {
					if (!parentOperand.equals(__DEC_guard_guard_170968)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_25_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_covered) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpOperand = _edge_covered.getSrc();
		if (tmpOperand instanceof InteractionOperand) {
			InteractionOperand operand = (InteractionOperand) tmpOperand;
			EObject tmpSysLine = _edge_covered.getTrg();
			if (tmpSysLine instanceof Lifeline) {
				Lifeline sysLine = (Lifeline) tmpSysLine;
				if (sysLine.getCoveredBy().contains(operand)) {
					InteractionConstraint guard = operand.getGuard();
					if (guard != null) {
						ValueSpecification tmpSpec = guard.getSpecification();
						if (tmpSpec instanceof LiteralString) {
							LiteralString spec = (LiteralString) tmpSpec;
							for (Lifeline line : operand.getCovered()) {
								if (!line.equals(sysLine)) {
									Interaction interaction = line
											.getInteraction();
									if (interaction != null) {
										if (pattern_AltUserStepNFToComboRule_25_2_black_nac_2BB(
												operand, interaction) == null) {
											if (pattern_AltUserStepNFToComboRule_25_2_black_nac_12BB(
													operand, interaction) == null) {
												for (InteractionFragment tmpMessageSend : sysLine
														.getCoveredBy()) {
													if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
														MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
														if (pattern_AltUserStepNFToComboRule_25_2_black_nac_0B(messageSend) == null) {
															if (pattern_AltUserStepNFToComboRule_25_2_black_nac_1BB(
																	messageSend,
																	interaction) == null) {
																if (pattern_AltUserStepNFToComboRule_25_2_black_nac_7BB(
																		messageSend,
																		interaction) == null) {
																	if (pattern_AltUserStepNFToComboRule_25_2_black_nac_8BB(
																			operand,
																			messageSend) == null) {
																		for (InteractionFragment tmpCombo : sysLine
																				.getCoveredBy()) {
																			if (tmpCombo instanceof CombinedFragment) {
																				CombinedFragment combo = (CombinedFragment) tmpCombo;
																				if (interaction
																						.equals(combo
																								.getEnclosingInteraction())) {
																					if (pattern_AltUserStepNFToComboRule_25_2_black_nac_10BB(
																							operand,
																							combo) == null) {
																						if (pattern_AltUserStepNFToComboRule_25_2_black_nac_13BB(
																								combo,
																								operand) == null) {
																							for (InteractionFragment tmpParentOperand : sysLine
																									.getCoveredBy()) {
																								if (tmpParentOperand instanceof InteractionOperand) {
																									InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
																									if (!operand
																											.equals(parentOperand)) {
																										if (line.getCoveredBy()
																												.contains(
																														parentOperand)) {
																											if (pattern_AltUserStepNFToComboRule_25_2_black_nac_6BBB(
																													guard,
																													operand,
																													parentOperand) == null) {
																												if (pattern_AltUserStepNFToComboRule_25_2_black_nac_9BB(
																														parentOperand,
																														messageSend) == null) {
																													if (pattern_AltUserStepNFToComboRule_25_2_black_nac_11BB(
																															parentOperand,
																															combo) == null) {
																														if (pattern_AltUserStepNFToComboRule_25_2_black_nac_17BB(
																																parentOperand,
																																guard) == null) {
																															for (InteractionFragment tmpParentCombo : sysLine
																																	.getCoveredBy()) {
																																if (tmpParentCombo instanceof CombinedFragment) {
																																	CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
																																	if (!combo
																																			.equals(parentCombo)) {
																																		if (parentCombo
																																				.getOperand()
																																				.contains(
																																						parentOperand)) {
																																			if (line.getCoveredBy()
																																					.contains(
																																							parentCombo)) {
																																				if (pattern_AltUserStepNFToComboRule_25_2_black_nac_3BBB(
																																						operand,
																																						combo,
																																						parentCombo) == null) {
																																					if (pattern_AltUserStepNFToComboRule_25_2_black_nac_14BB(
																																							parentCombo,
																																							operand) == null) {
																																						for (InteractionFragment tmpMessageReceive : parentOperand
																																								.getFragment()) {
																																							if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																																								MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																																								if (!messageReceive
																																										.equals(messageSend)) {
																																									if (pattern_AltUserStepNFToComboRule_25_2_black_nac_4B(messageReceive) == null) {
																																										if (pattern_AltUserStepNFToComboRule_25_2_black_nac_5BB(
																																												messageReceive,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_25_2_black_nac_15BB(
																																													messageReceive,
																																													interaction) == null) {
																																												if (pattern_AltUserStepNFToComboRule_25_2_black_nac_16BB(
																																														operand,
																																														messageReceive) == null) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_covered });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}

								}
							}
						}

					}

				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_25_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_25_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_25_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_25_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_26_1_binding = pattern_AltUserStepNFToComboRule_26_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_26_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_26_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_26_1_black = pattern_AltUserStepNFToComboRule_26_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_26_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_26_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_362856 = messageSend.getMessage();
		if (__DEC_messageSend_message_362856 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_820850 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_820850 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_820850)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_998131 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_998131 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_998131)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_156657 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_156657)) {
					if (!parentCombo.equals(__DEC_operand_operand_156657)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_348150 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_348150 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_913817 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_913817 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_913817)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_307527 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_307527)) {
					if (!parentOperand.equals(__DEC_guard_guard_307527)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_26_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_coveredBy) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpSysLine = _edge_coveredBy.getSrc();
		if (tmpSysLine instanceof Lifeline) {
			Lifeline sysLine = (Lifeline) tmpSysLine;
			EObject tmpParentOperand = _edge_coveredBy.getTrg();
			if (tmpParentOperand instanceof InteractionOperand) {
				InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
				if (sysLine.getCoveredBy().contains(parentOperand)) {
					for (InteractionFragment tmpMessageSend : sysLine
							.getCoveredBy()) {
						if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
							MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
							if (pattern_AltUserStepNFToComboRule_26_2_black_nac_0B(messageSend) == null) {
								if (pattern_AltUserStepNFToComboRule_26_2_black_nac_9BB(
										parentOperand, messageSend) == null) {
									for (InteractionFragment tmpCombo : sysLine
											.getCoveredBy()) {
										if (tmpCombo instanceof CombinedFragment) {
											CombinedFragment combo = (CombinedFragment) tmpCombo;
											Interaction interaction = combo
													.getEnclosingInteraction();
											if (interaction != null) {
												if (pattern_AltUserStepNFToComboRule_26_2_black_nac_11BB(
														parentOperand, combo) == null) {
													if (pattern_AltUserStepNFToComboRule_26_2_black_nac_1BB(
															messageSend,
															interaction) == null) {
														if (pattern_AltUserStepNFToComboRule_26_2_black_nac_7BB(
																messageSend,
																interaction) == null) {
															for (InteractionFragment tmpOperand : sysLine
																	.getCoveredBy()) {
																if (tmpOperand instanceof InteractionOperand) {
																	InteractionOperand operand = (InteractionOperand) tmpOperand;
																	if (!operand
																			.equals(parentOperand)) {
																		InteractionConstraint guard = operand
																				.getGuard();
																		if (guard != null) {
																			ValueSpecification tmpSpec = guard
																					.getSpecification();
																			if (tmpSpec instanceof LiteralString) {
																				LiteralString spec = (LiteralString) tmpSpec;
																				if (pattern_AltUserStepNFToComboRule_26_2_black_nac_2BB(
																						operand,
																						interaction) == null) {
																					if (pattern_AltUserStepNFToComboRule_26_2_black_nac_8BB(
																							operand,
																							messageSend) == null) {
																						if (pattern_AltUserStepNFToComboRule_26_2_black_nac_10BB(
																								operand,
																								combo) == null) {
																							if (pattern_AltUserStepNFToComboRule_26_2_black_nac_12BB(
																									operand,
																									interaction) == null) {
																								if (pattern_AltUserStepNFToComboRule_26_2_black_nac_13BB(
																										combo,
																										operand) == null) {
																									if (pattern_AltUserStepNFToComboRule_26_2_black_nac_6BBB(
																											guard,
																											operand,
																											parentOperand) == null) {
																										if (pattern_AltUserStepNFToComboRule_26_2_black_nac_17BB(
																												parentOperand,
																												guard) == null) {
																											for (InteractionFragment tmpParentCombo : sysLine
																													.getCoveredBy()) {
																												if (tmpParentCombo instanceof CombinedFragment) {
																													CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
																													if (!combo
																															.equals(parentCombo)) {
																														if (parentCombo
																																.getOperand()
																																.contains(
																																		parentOperand)) {
																															if (pattern_AltUserStepNFToComboRule_26_2_black_nac_3BBB(
																																	operand,
																																	combo,
																																	parentCombo) == null) {
																																if (pattern_AltUserStepNFToComboRule_26_2_black_nac_14BB(
																																		parentCombo,
																																		operand) == null) {
																																	for (InteractionFragment tmpMessageReceive : parentOperand
																																			.getFragment()) {
																																		if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																																			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																																			if (!messageReceive
																																					.equals(messageSend)) {
																																				if (pattern_AltUserStepNFToComboRule_26_2_black_nac_4B(messageReceive) == null) {
																																					if (pattern_AltUserStepNFToComboRule_26_2_black_nac_5BB(
																																							messageReceive,
																																							interaction) == null) {
																																						if (pattern_AltUserStepNFToComboRule_26_2_black_nac_15BB(
																																								messageReceive,
																																								interaction) == null) {
																																							if (pattern_AltUserStepNFToComboRule_26_2_black_nac_16BB(
																																									operand,
																																									messageReceive) == null) {
																																								for (Lifeline line : parentOperand
																																										.getCovered()) {
																																									if (!line
																																											.equals(sysLine)) {
																																										if (line.getCoveredBy()
																																												.contains(
																																														parentCombo)) {
																																											if (interaction
																																													.equals(line
																																															.getInteraction())) {
																																												if (line.getCoveredBy()
																																														.contains(
																																																operand)) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_coveredBy });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}

																		}

																	}
																}
															}
														}
													}
												}
											}

										}
									}
								}
							}
						}
					}
				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_26_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_26_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_26_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_26_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_27_1_binding = pattern_AltUserStepNFToComboRule_27_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_27_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_27_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_27_1_black = pattern_AltUserStepNFToComboRule_27_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_27_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_27_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_258379 = messageSend.getMessage();
		if (__DEC_messageSend_message_258379 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_162625 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_162625 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_162625)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_213400 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_213400 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_213400)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_377659 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_377659)) {
					if (!parentCombo.equals(__DEC_operand_operand_377659)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_592145 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_592145 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_348332 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_348332 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_348332)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_891263 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_891263)) {
					if (!parentOperand.equals(__DEC_guard_guard_891263)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_27_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_covered) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpParentOperand = _edge_covered.getSrc();
		if (tmpParentOperand instanceof InteractionOperand) {
			InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
			EObject tmpSysLine = _edge_covered.getTrg();
			if (tmpSysLine instanceof Lifeline) {
				Lifeline sysLine = (Lifeline) tmpSysLine;
				if (sysLine.getCoveredBy().contains(parentOperand)) {
					for (InteractionFragment tmpMessageReceive : parentOperand
							.getFragment()) {
						if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
							MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
							if (pattern_AltUserStepNFToComboRule_27_2_black_nac_4B(messageReceive) == null) {
								for (Lifeline line : parentOperand.getCovered()) {
									if (!line.equals(sysLine)) {
										Interaction interaction = line
												.getInteraction();
										if (interaction != null) {
											if (pattern_AltUserStepNFToComboRule_27_2_black_nac_5BB(
													messageReceive, interaction) == null) {
												if (pattern_AltUserStepNFToComboRule_27_2_black_nac_15BB(
														messageReceive,
														interaction) == null) {
													for (InteractionFragment tmpMessageSend : sysLine
															.getCoveredBy()) {
														if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
															MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
															if (!messageReceive
																	.equals(messageSend)) {
																if (pattern_AltUserStepNFToComboRule_27_2_black_nac_0B(messageSend) == null) {
																	if (pattern_AltUserStepNFToComboRule_27_2_black_nac_1BB(
																			messageSend,
																			interaction) == null) {
																		if (pattern_AltUserStepNFToComboRule_27_2_black_nac_7BB(
																				messageSend,
																				interaction) == null) {
																			if (pattern_AltUserStepNFToComboRule_27_2_black_nac_9BB(
																					parentOperand,
																					messageSend) == null) {
																				for (InteractionFragment tmpCombo : sysLine
																						.getCoveredBy()) {
																					if (tmpCombo instanceof CombinedFragment) {
																						CombinedFragment combo = (CombinedFragment) tmpCombo;
																						if (interaction
																								.equals(combo
																										.getEnclosingInteraction())) {
																							if (pattern_AltUserStepNFToComboRule_27_2_black_nac_11BB(
																									parentOperand,
																									combo) == null) {
																								for (InteractionFragment tmpOperand : sysLine
																										.getCoveredBy()) {
																									if (tmpOperand instanceof InteractionOperand) {
																										InteractionOperand operand = (InteractionOperand) tmpOperand;
																										if (!operand
																												.equals(parentOperand)) {
																											if (line.getCoveredBy()
																													.contains(
																															operand)) {
																												InteractionConstraint guard = operand
																														.getGuard();
																												if (guard != null) {
																													ValueSpecification tmpSpec = guard
																															.getSpecification();
																													if (tmpSpec instanceof LiteralString) {
																														LiteralString spec = (LiteralString) tmpSpec;
																														if (pattern_AltUserStepNFToComboRule_27_2_black_nac_2BB(
																																operand,
																																interaction) == null) {
																															if (pattern_AltUserStepNFToComboRule_27_2_black_nac_8BB(
																																	operand,
																																	messageSend) == null) {
																																if (pattern_AltUserStepNFToComboRule_27_2_black_nac_10BB(
																																		operand,
																																		combo) == null) {
																																	if (pattern_AltUserStepNFToComboRule_27_2_black_nac_12BB(
																																			operand,
																																			interaction) == null) {
																																		if (pattern_AltUserStepNFToComboRule_27_2_black_nac_13BB(
																																				combo,
																																				operand) == null) {
																																			if (pattern_AltUserStepNFToComboRule_27_2_black_nac_16BB(
																																					operand,
																																					messageReceive) == null) {
																																				if (pattern_AltUserStepNFToComboRule_27_2_black_nac_6BBB(
																																						guard,
																																						operand,
																																						parentOperand) == null) {
																																					if (pattern_AltUserStepNFToComboRule_27_2_black_nac_17BB(
																																							parentOperand,
																																							guard) == null) {
																																						for (InteractionFragment tmpParentCombo : sysLine
																																								.getCoveredBy()) {
																																							if (tmpParentCombo instanceof CombinedFragment) {
																																								CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
																																								if (!combo
																																										.equals(parentCombo)) {
																																									if (parentCombo
																																											.getOperand()
																																											.contains(
																																													parentOperand)) {
																																										if (line.getCoveredBy()
																																												.contains(
																																														parentCombo)) {
																																											if (pattern_AltUserStepNFToComboRule_27_2_black_nac_3BBB(
																																													operand,
																																													combo,
																																													parentCombo) == null) {
																																												if (pattern_AltUserStepNFToComboRule_27_2_black_nac_14BB(
																																														parentCombo,
																																														operand) == null) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_covered });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}

																												}

																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}

									}
								}
							}
						}
					}
				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_27_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_27_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_27_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_27_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_28_1_binding = pattern_AltUserStepNFToComboRule_28_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_28_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_28_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_28_1_black = pattern_AltUserStepNFToComboRule_28_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_28_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_28_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_13630 = messageSend.getMessage();
		if (__DEC_messageSend_message_13630 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_575344 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_575344 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_575344)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_879339 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_879339 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_879339)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_764387 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_764387)) {
					if (!parentCombo.equals(__DEC_operand_operand_764387)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_949365 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_949365 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_110382 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_110382 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_110382)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_727336 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_727336)) {
					if (!parentOperand.equals(__DEC_guard_guard_727336)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_28_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_coveredBy) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpSysLine = _edge_coveredBy.getSrc();
		if (tmpSysLine instanceof Lifeline) {
			Lifeline sysLine = (Lifeline) tmpSysLine;
			EObject tmpParentCombo = _edge_coveredBy.getTrg();
			if (tmpParentCombo instanceof CombinedFragment) {
				CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
				if (sysLine.getCoveredBy().contains(parentCombo)) {
					for (InteractionFragment tmpMessageSend : sysLine
							.getCoveredBy()) {
						if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
							MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
							if (pattern_AltUserStepNFToComboRule_28_2_black_nac_0B(messageSend) == null) {
								for (InteractionFragment tmpCombo : sysLine
										.getCoveredBy()) {
									if (tmpCombo instanceof CombinedFragment) {
										CombinedFragment combo = (CombinedFragment) tmpCombo;
										if (!combo.equals(parentCombo)) {
											Interaction interaction = combo
													.getEnclosingInteraction();
											if (interaction != null) {
												if (pattern_AltUserStepNFToComboRule_28_2_black_nac_1BB(
														messageSend,
														interaction) == null) {
													if (pattern_AltUserStepNFToComboRule_28_2_black_nac_7BB(
															messageSend,
															interaction) == null) {
														for (InteractionFragment tmpOperand : sysLine
																.getCoveredBy()) {
															if (tmpOperand instanceof InteractionOperand) {
																InteractionOperand operand = (InteractionOperand) tmpOperand;
																InteractionConstraint guard = operand
																		.getGuard();
																if (guard != null) {
																	ValueSpecification tmpSpec = guard
																			.getSpecification();
																	if (tmpSpec instanceof LiteralString) {
																		LiteralString spec = (LiteralString) tmpSpec;
																		if (pattern_AltUserStepNFToComboRule_28_2_black_nac_2BB(
																				operand,
																				interaction) == null) {
																			if (pattern_AltUserStepNFToComboRule_28_2_black_nac_3BBB(
																					operand,
																					combo,
																					parentCombo) == null) {
																				if (pattern_AltUserStepNFToComboRule_28_2_black_nac_8BB(
																						operand,
																						messageSend) == null) {
																					if (pattern_AltUserStepNFToComboRule_28_2_black_nac_10BB(
																							operand,
																							combo) == null) {
																						if (pattern_AltUserStepNFToComboRule_28_2_black_nac_12BB(
																								operand,
																								interaction) == null) {
																							if (pattern_AltUserStepNFToComboRule_28_2_black_nac_13BB(
																									combo,
																									operand) == null) {
																								if (pattern_AltUserStepNFToComboRule_28_2_black_nac_14BB(
																										parentCombo,
																										operand) == null) {
																									for (InteractionFragment tmpParentOperand : sysLine
																											.getCoveredBy()) {
																										if (tmpParentOperand instanceof InteractionOperand) {
																											InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
																											if (!operand
																													.equals(parentOperand)) {
																												if (parentCombo
																														.getOperand()
																														.contains(
																																parentOperand)) {
																													if (pattern_AltUserStepNFToComboRule_28_2_black_nac_6BBB(
																															guard,
																															operand,
																															parentOperand) == null) {
																														if (pattern_AltUserStepNFToComboRule_28_2_black_nac_9BB(
																																parentOperand,
																																messageSend) == null) {
																															if (pattern_AltUserStepNFToComboRule_28_2_black_nac_11BB(
																																	parentOperand,
																																	combo) == null) {
																																if (pattern_AltUserStepNFToComboRule_28_2_black_nac_17BB(
																																		parentOperand,
																																		guard) == null) {
																																	for (Lifeline line : parentCombo
																																			.getCovered()) {
																																		if (!line
																																				.equals(sysLine)) {
																																			if (line.getCoveredBy()
																																					.contains(
																																							parentOperand)) {
																																				if (interaction
																																						.equals(line
																																								.getInteraction())) {
																																					if (line.getCoveredBy()
																																							.contains(
																																									operand)) {
																																						for (InteractionFragment tmpMessageReceive : parentOperand
																																								.getFragment()) {
																																							if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																																								MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																																								if (!messageReceive
																																										.equals(messageSend)) {
																																									if (pattern_AltUserStepNFToComboRule_28_2_black_nac_4B(messageReceive) == null) {
																																										if (pattern_AltUserStepNFToComboRule_28_2_black_nac_5BB(
																																												messageReceive,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_28_2_black_nac_15BB(
																																													messageReceive,
																																													interaction) == null) {
																																												if (pattern_AltUserStepNFToComboRule_28_2_black_nac_16BB(
																																														operand,
																																														messageReceive) == null) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_coveredBy });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}

																}

															}
														}
													}
												}
											}

										}
									}
								}
							}
						}
					}
				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_28_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_28_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_28_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_28_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_29_1_binding = pattern_AltUserStepNFToComboRule_29_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_29_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_29_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_29_1_black = pattern_AltUserStepNFToComboRule_29_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_29_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_29_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_438275 = messageSend.getMessage();
		if (__DEC_messageSend_message_438275 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_879597 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_879597 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_879597)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_822437 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_822437 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_822437)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_347783 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_347783)) {
					if (!parentCombo.equals(__DEC_operand_operand_347783)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_514483 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_514483 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_840194 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_840194 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_840194)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_459839 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_459839)) {
					if (!parentOperand.equals(__DEC_guard_guard_459839)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_29_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_covered) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpParentCombo = _edge_covered.getSrc();
		if (tmpParentCombo instanceof CombinedFragment) {
			CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
			EObject tmpSysLine = _edge_covered.getTrg();
			if (tmpSysLine instanceof Lifeline) {
				Lifeline sysLine = (Lifeline) tmpSysLine;
				if (sysLine.getCoveredBy().contains(parentCombo)) {
					for (InteractionOperand parentOperand : parentCombo
							.getOperand()) {
						if (sysLine.getCoveredBy().contains(parentOperand)) {
							for (Lifeline line : parentCombo.getCovered()) {
								if (!line.equals(sysLine)) {
									if (line.getCoveredBy().contains(
											parentOperand)) {
										Interaction interaction = line
												.getInteraction();
										if (interaction != null) {
											for (InteractionFragment tmpMessageSend : sysLine
													.getCoveredBy()) {
												if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
													MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
													if (pattern_AltUserStepNFToComboRule_29_2_black_nac_0B(messageSend) == null) {
														if (pattern_AltUserStepNFToComboRule_29_2_black_nac_1BB(
																messageSend,
																interaction) == null) {
															if (pattern_AltUserStepNFToComboRule_29_2_black_nac_7BB(
																	messageSend,
																	interaction) == null) {
																if (pattern_AltUserStepNFToComboRule_29_2_black_nac_9BB(
																		parentOperand,
																		messageSend) == null) {
																	for (InteractionFragment tmpCombo : sysLine
																			.getCoveredBy()) {
																		if (tmpCombo instanceof CombinedFragment) {
																			CombinedFragment combo = (CombinedFragment) tmpCombo;
																			if (!combo
																					.equals(parentCombo)) {
																				if (interaction
																						.equals(combo
																								.getEnclosingInteraction())) {
																					if (pattern_AltUserStepNFToComboRule_29_2_black_nac_11BB(
																							parentOperand,
																							combo) == null) {
																						for (InteractionFragment tmpOperand : sysLine
																								.getCoveredBy()) {
																							if (tmpOperand instanceof InteractionOperand) {
																								InteractionOperand operand = (InteractionOperand) tmpOperand;
																								if (!operand
																										.equals(parentOperand)) {
																									if (line.getCoveredBy()
																											.contains(
																													operand)) {
																										InteractionConstraint guard = operand
																												.getGuard();
																										if (guard != null) {
																											ValueSpecification tmpSpec = guard
																													.getSpecification();
																											if (tmpSpec instanceof LiteralString) {
																												LiteralString spec = (LiteralString) tmpSpec;
																												if (pattern_AltUserStepNFToComboRule_29_2_black_nac_2BB(
																														operand,
																														interaction) == null) {
																													if (pattern_AltUserStepNFToComboRule_29_2_black_nac_3BBB(
																															operand,
																															combo,
																															parentCombo) == null) {
																														if (pattern_AltUserStepNFToComboRule_29_2_black_nac_8BB(
																																operand,
																																messageSend) == null) {
																															if (pattern_AltUserStepNFToComboRule_29_2_black_nac_10BB(
																																	operand,
																																	combo) == null) {
																																if (pattern_AltUserStepNFToComboRule_29_2_black_nac_12BB(
																																		operand,
																																		interaction) == null) {
																																	if (pattern_AltUserStepNFToComboRule_29_2_black_nac_13BB(
																																			combo,
																																			operand) == null) {
																																		if (pattern_AltUserStepNFToComboRule_29_2_black_nac_14BB(
																																				parentCombo,
																																				operand) == null) {
																																			if (pattern_AltUserStepNFToComboRule_29_2_black_nac_6BBB(
																																					guard,
																																					operand,
																																					parentOperand) == null) {
																																				if (pattern_AltUserStepNFToComboRule_29_2_black_nac_17BB(
																																						parentOperand,
																																						guard) == null) {
																																					for (InteractionFragment tmpMessageReceive : parentOperand
																																							.getFragment()) {
																																						if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																																							MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																																							if (!messageReceive
																																									.equals(messageSend)) {
																																								if (pattern_AltUserStepNFToComboRule_29_2_black_nac_4B(messageReceive) == null) {
																																									if (pattern_AltUserStepNFToComboRule_29_2_black_nac_5BB(
																																											messageReceive,
																																											interaction) == null) {
																																										if (pattern_AltUserStepNFToComboRule_29_2_black_nac_15BB(
																																												messageReceive,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_29_2_black_nac_16BB(
																																													operand,
																																													messageReceive) == null) {
																																												_result.add(new Object[] {
																																														sysLine,
																																														messageSend,
																																														combo,
																																														operand,
																																														parentOperand,
																																														parentCombo,
																																														messageReceive,
																																														line,
																																														interaction,
																																														guard,
																																														spec,
																																														_edge_covered });
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}

																										}

																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}

									}
								}
							}
						}
					}
				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_29_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_29_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_29_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_29_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_30_1_binding = pattern_AltUserStepNFToComboRule_30_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_30_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_30_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_30_1_black = pattern_AltUserStepNFToComboRule_30_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_30_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_30_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_568293 = messageSend.getMessage();
		if (__DEC_messageSend_message_568293 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_893038 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_893038 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_893038)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_107353 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_107353 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_107353)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_305960 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_305960)) {
					if (!parentCombo.equals(__DEC_operand_operand_305960)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_731812 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_731812 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_802077 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_802077 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_802077)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_320285 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_320285)) {
					if (!parentOperand.equals(__DEC_guard_guard_320285)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_30_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_fragment) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpParentOperand = _edge_fragment.getSrc();
		if (tmpParentOperand instanceof InteractionOperand) {
			InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
			EObject tmpMessageReceive = _edge_fragment.getTrg();
			if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
				MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
				if (parentOperand.getFragment().contains(messageReceive)) {
					if (pattern_AltUserStepNFToComboRule_30_2_black_nac_4B(messageReceive) == null) {
						for (Lifeline sysLine : parentOperand.getCovered()) {
							for (Lifeline line : parentOperand.getCovered()) {
								if (!line.equals(sysLine)) {
									Interaction interaction = line
											.getInteraction();
									if (interaction != null) {
										if (pattern_AltUserStepNFToComboRule_30_2_black_nac_5BB(
												messageReceive, interaction) == null) {
											if (pattern_AltUserStepNFToComboRule_30_2_black_nac_15BB(
													messageReceive, interaction) == null) {
												for (InteractionFragment tmpMessageSend : sysLine
														.getCoveredBy()) {
													if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
														MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
														if (!messageReceive
																.equals(messageSend)) {
															if (pattern_AltUserStepNFToComboRule_30_2_black_nac_0B(messageSend) == null) {
																if (pattern_AltUserStepNFToComboRule_30_2_black_nac_1BB(
																		messageSend,
																		interaction) == null) {
																	if (pattern_AltUserStepNFToComboRule_30_2_black_nac_7BB(
																			messageSend,
																			interaction) == null) {
																		if (pattern_AltUserStepNFToComboRule_30_2_black_nac_9BB(
																				parentOperand,
																				messageSend) == null) {
																			for (InteractionFragment tmpCombo : sysLine
																					.getCoveredBy()) {
																				if (tmpCombo instanceof CombinedFragment) {
																					CombinedFragment combo = (CombinedFragment) tmpCombo;
																					if (interaction
																							.equals(combo
																									.getEnclosingInteraction())) {
																						if (pattern_AltUserStepNFToComboRule_30_2_black_nac_11BB(
																								parentOperand,
																								combo) == null) {
																							for (InteractionFragment tmpOperand : sysLine
																									.getCoveredBy()) {
																								if (tmpOperand instanceof InteractionOperand) {
																									InteractionOperand operand = (InteractionOperand) tmpOperand;
																									if (!operand
																											.equals(parentOperand)) {
																										if (line.getCoveredBy()
																												.contains(
																														operand)) {
																											InteractionConstraint guard = operand
																													.getGuard();
																											if (guard != null) {
																												ValueSpecification tmpSpec = guard
																														.getSpecification();
																												if (tmpSpec instanceof LiteralString) {
																													LiteralString spec = (LiteralString) tmpSpec;
																													if (pattern_AltUserStepNFToComboRule_30_2_black_nac_2BB(
																															operand,
																															interaction) == null) {
																														if (pattern_AltUserStepNFToComboRule_30_2_black_nac_8BB(
																																operand,
																																messageSend) == null) {
																															if (pattern_AltUserStepNFToComboRule_30_2_black_nac_10BB(
																																	operand,
																																	combo) == null) {
																																if (pattern_AltUserStepNFToComboRule_30_2_black_nac_12BB(
																																		operand,
																																		interaction) == null) {
																																	if (pattern_AltUserStepNFToComboRule_30_2_black_nac_13BB(
																																			combo,
																																			operand) == null) {
																																		if (pattern_AltUserStepNFToComboRule_30_2_black_nac_16BB(
																																				operand,
																																				messageReceive) == null) {
																																			if (pattern_AltUserStepNFToComboRule_30_2_black_nac_6BBB(
																																					guard,
																																					operand,
																																					parentOperand) == null) {
																																				if (pattern_AltUserStepNFToComboRule_30_2_black_nac_17BB(
																																						parentOperand,
																																						guard) == null) {
																																					for (InteractionFragment tmpParentCombo : sysLine
																																							.getCoveredBy()) {
																																						if (tmpParentCombo instanceof CombinedFragment) {
																																							CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
																																							if (!combo
																																									.equals(parentCombo)) {
																																								if (parentCombo
																																										.getOperand()
																																										.contains(
																																												parentOperand)) {
																																									if (line.getCoveredBy()
																																											.contains(
																																													parentCombo)) {
																																										if (pattern_AltUserStepNFToComboRule_30_2_black_nac_3BBB(
																																												operand,
																																												combo,
																																												parentCombo) == null) {
																																											if (pattern_AltUserStepNFToComboRule_30_2_black_nac_14BB(
																																													parentCombo,
																																													operand) == null) {
																																												_result.add(new Object[] {
																																														sysLine,
																																														messageSend,
																																														combo,
																																														operand,
																																														parentOperand,
																																														parentCombo,
																																														messageReceive,
																																														line,
																																														interaction,
																																														guard,
																																														spec,
																																														_edge_fragment });
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}

																											}

																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}

								}
							}
						}
					}
				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_30_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_30_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_30_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_30_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_31_1_binding = pattern_AltUserStepNFToComboRule_31_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_31_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_31_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_31_1_black = pattern_AltUserStepNFToComboRule_31_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_31_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_31_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_88238 = messageSend.getMessage();
		if (__DEC_messageSend_message_88238 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_791367 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_791367 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_791367)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_842940 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_842940 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_842940)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_437121 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_437121)) {
					if (!parentCombo.equals(__DEC_operand_operand_437121)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_223322 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_223322 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_498303 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_498303 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_498303)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_692293 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_692293)) {
					if (!parentOperand.equals(__DEC_guard_guard_692293)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_31_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_enclosingOperand) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpMessageReceive = _edge_enclosingOperand.getSrc();
		if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
			MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
			EObject tmpParentOperand = _edge_enclosingOperand.getTrg();
			if (tmpParentOperand instanceof InteractionOperand) {
				InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
				if (parentOperand.getFragment().contains(messageReceive)) {
					if (pattern_AltUserStepNFToComboRule_31_2_black_nac_4B(messageReceive) == null) {
						for (Lifeline sysLine : parentOperand.getCovered()) {
							for (Lifeline line : parentOperand.getCovered()) {
								if (!line.equals(sysLine)) {
									Interaction interaction = line
											.getInteraction();
									if (interaction != null) {
										if (pattern_AltUserStepNFToComboRule_31_2_black_nac_5BB(
												messageReceive, interaction) == null) {
											if (pattern_AltUserStepNFToComboRule_31_2_black_nac_15BB(
													messageReceive, interaction) == null) {
												for (InteractionFragment tmpMessageSend : sysLine
														.getCoveredBy()) {
													if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
														MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
														if (!messageReceive
																.equals(messageSend)) {
															if (pattern_AltUserStepNFToComboRule_31_2_black_nac_0B(messageSend) == null) {
																if (pattern_AltUserStepNFToComboRule_31_2_black_nac_1BB(
																		messageSend,
																		interaction) == null) {
																	if (pattern_AltUserStepNFToComboRule_31_2_black_nac_7BB(
																			messageSend,
																			interaction) == null) {
																		if (pattern_AltUserStepNFToComboRule_31_2_black_nac_9BB(
																				parentOperand,
																				messageSend) == null) {
																			for (InteractionFragment tmpCombo : sysLine
																					.getCoveredBy()) {
																				if (tmpCombo instanceof CombinedFragment) {
																					CombinedFragment combo = (CombinedFragment) tmpCombo;
																					if (interaction
																							.equals(combo
																									.getEnclosingInteraction())) {
																						if (pattern_AltUserStepNFToComboRule_31_2_black_nac_11BB(
																								parentOperand,
																								combo) == null) {
																							for (InteractionFragment tmpOperand : sysLine
																									.getCoveredBy()) {
																								if (tmpOperand instanceof InteractionOperand) {
																									InteractionOperand operand = (InteractionOperand) tmpOperand;
																									if (!operand
																											.equals(parentOperand)) {
																										if (line.getCoveredBy()
																												.contains(
																														operand)) {
																											InteractionConstraint guard = operand
																													.getGuard();
																											if (guard != null) {
																												ValueSpecification tmpSpec = guard
																														.getSpecification();
																												if (tmpSpec instanceof LiteralString) {
																													LiteralString spec = (LiteralString) tmpSpec;
																													if (pattern_AltUserStepNFToComboRule_31_2_black_nac_2BB(
																															operand,
																															interaction) == null) {
																														if (pattern_AltUserStepNFToComboRule_31_2_black_nac_8BB(
																																operand,
																																messageSend) == null) {
																															if (pattern_AltUserStepNFToComboRule_31_2_black_nac_10BB(
																																	operand,
																																	combo) == null) {
																																if (pattern_AltUserStepNFToComboRule_31_2_black_nac_12BB(
																																		operand,
																																		interaction) == null) {
																																	if (pattern_AltUserStepNFToComboRule_31_2_black_nac_13BB(
																																			combo,
																																			operand) == null) {
																																		if (pattern_AltUserStepNFToComboRule_31_2_black_nac_16BB(
																																				operand,
																																				messageReceive) == null) {
																																			if (pattern_AltUserStepNFToComboRule_31_2_black_nac_6BBB(
																																					guard,
																																					operand,
																																					parentOperand) == null) {
																																				if (pattern_AltUserStepNFToComboRule_31_2_black_nac_17BB(
																																						parentOperand,
																																						guard) == null) {
																																					for (InteractionFragment tmpParentCombo : sysLine
																																							.getCoveredBy()) {
																																						if (tmpParentCombo instanceof CombinedFragment) {
																																							CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
																																							if (!combo
																																									.equals(parentCombo)) {
																																								if (parentCombo
																																										.getOperand()
																																										.contains(
																																												parentOperand)) {
																																									if (line.getCoveredBy()
																																											.contains(
																																													parentCombo)) {
																																										if (pattern_AltUserStepNFToComboRule_31_2_black_nac_3BBB(
																																												operand,
																																												combo,
																																												parentCombo) == null) {
																																											if (pattern_AltUserStepNFToComboRule_31_2_black_nac_14BB(
																																													parentCombo,
																																													operand) == null) {
																																												_result.add(new Object[] {
																																														sysLine,
																																														messageSend,
																																														combo,
																																														operand,
																																														parentOperand,
																																														parentCombo,
																																														messageReceive,
																																														line,
																																														interaction,
																																														guard,
																																														spec,
																																														_edge_enclosingOperand });
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}

																											}

																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}

								}
							}
						}
					}
				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_31_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_31_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_31_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_31_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_32_1_binding = pattern_AltUserStepNFToComboRule_32_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_32_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_32_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_32_1_black = pattern_AltUserStepNFToComboRule_32_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_32_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_32_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_726900 = messageSend.getMessage();
		if (__DEC_messageSend_message_726900 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_291636 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_291636 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_291636)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_475308 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_475308 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_475308)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_843961 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_843961)) {
					if (!parentCombo.equals(__DEC_operand_operand_843961)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_658983 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_658983 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_558274 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_558274 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_558274)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_302754 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_302754)) {
					if (!parentOperand.equals(__DEC_guard_guard_302754)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_32_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_coveredBy) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpLine = _edge_coveredBy.getSrc();
		if (tmpLine instanceof Lifeline) {
			Lifeline line = (Lifeline) tmpLine;
			EObject tmpParentOperand = _edge_coveredBy.getTrg();
			if (tmpParentOperand instanceof InteractionOperand) {
				InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
				if (line.getCoveredBy().contains(parentOperand)) {
					Interaction interaction = line.getInteraction();
					if (interaction != null) {
						for (InteractionFragment tmpParentCombo : line
								.getCoveredBy()) {
							if (tmpParentCombo instanceof CombinedFragment) {
								CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
								if (parentCombo.getOperand().contains(
										parentOperand)) {
									for (InteractionFragment tmpOperand : line
											.getCoveredBy()) {
										if (tmpOperand instanceof InteractionOperand) {
											InteractionOperand operand = (InteractionOperand) tmpOperand;
											if (!operand.equals(parentOperand)) {
												InteractionConstraint guard = operand
														.getGuard();
												if (guard != null) {
													ValueSpecification tmpSpec = guard
															.getSpecification();
													if (tmpSpec instanceof LiteralString) {
														LiteralString spec = (LiteralString) tmpSpec;
														if (pattern_AltUserStepNFToComboRule_32_2_black_nac_2BB(
																operand,
																interaction) == null) {
															if (pattern_AltUserStepNFToComboRule_32_2_black_nac_12BB(
																	operand,
																	interaction) == null) {
																if (pattern_AltUserStepNFToComboRule_32_2_black_nac_14BB(
																		parentCombo,
																		operand) == null) {
																	if (pattern_AltUserStepNFToComboRule_32_2_black_nac_6BBB(
																			guard,
																			operand,
																			parentOperand) == null) {
																		if (pattern_AltUserStepNFToComboRule_32_2_black_nac_17BB(
																				parentOperand,
																				guard) == null) {
																			for (Lifeline sysLine : parentOperand
																					.getCovered()) {
																				if (!line
																						.equals(sysLine)) {
																					if (sysLine
																							.getCoveredBy()
																							.contains(
																									operand)) {
																						if (sysLine
																								.getCoveredBy()
																								.contains(
																										parentCombo)) {
																							for (InteractionFragment tmpMessageReceive : parentOperand
																									.getFragment()) {
																								if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																									MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																									if (pattern_AltUserStepNFToComboRule_32_2_black_nac_4B(messageReceive) == null) {
																										if (pattern_AltUserStepNFToComboRule_32_2_black_nac_5BB(
																												messageReceive,
																												interaction) == null) {
																											if (pattern_AltUserStepNFToComboRule_32_2_black_nac_15BB(
																													messageReceive,
																													interaction) == null) {
																												if (pattern_AltUserStepNFToComboRule_32_2_black_nac_16BB(
																														operand,
																														messageReceive) == null) {
																													for (InteractionFragment tmpCombo : interaction
																															.getFragment()) {
																														if (tmpCombo instanceof CombinedFragment) {
																															CombinedFragment combo = (CombinedFragment) tmpCombo;
																															if (!combo
																																	.equals(parentCombo)) {
																																if (sysLine
																																		.getCoveredBy()
																																		.contains(
																																				combo)) {
																																	if (pattern_AltUserStepNFToComboRule_32_2_black_nac_3BBB(
																																			operand,
																																			combo,
																																			parentCombo) == null) {
																																		if (pattern_AltUserStepNFToComboRule_32_2_black_nac_10BB(
																																				operand,
																																				combo) == null) {
																																			if (pattern_AltUserStepNFToComboRule_32_2_black_nac_11BB(
																																					parentOperand,
																																					combo) == null) {
																																				if (pattern_AltUserStepNFToComboRule_32_2_black_nac_13BB(
																																						combo,
																																						operand) == null) {
																																					for (InteractionFragment tmpMessageSend : sysLine
																																							.getCoveredBy()) {
																																						if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
																																							MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
																																							if (!messageReceive
																																									.equals(messageSend)) {
																																								if (pattern_AltUserStepNFToComboRule_32_2_black_nac_0B(messageSend) == null) {
																																									if (pattern_AltUserStepNFToComboRule_32_2_black_nac_1BB(
																																											messageSend,
																																											interaction) == null) {
																																										if (pattern_AltUserStepNFToComboRule_32_2_black_nac_7BB(
																																												messageSend,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_32_2_black_nac_8BB(
																																													operand,
																																													messageSend) == null) {
																																												if (pattern_AltUserStepNFToComboRule_32_2_black_nac_9BB(
																																														parentOperand,
																																														messageSend) == null) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_coveredBy });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}

												}

											}
										}
									}
								}
							}
						}
					}

				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_32_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_32_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_32_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_32_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_33_1_binding = pattern_AltUserStepNFToComboRule_33_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_33_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_33_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_33_1_black = pattern_AltUserStepNFToComboRule_33_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_33_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_33_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_219447 = messageSend.getMessage();
		if (__DEC_messageSend_message_219447 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_725719 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_725719 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_725719)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_520648 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_520648 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_520648)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_272233 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_272233)) {
					if (!parentCombo.equals(__DEC_operand_operand_272233)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_379945 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_379945 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_890578 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_890578 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_890578)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_809262 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_809262)) {
					if (!parentOperand.equals(__DEC_guard_guard_809262)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_33_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_covered) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpParentOperand = _edge_covered.getSrc();
		if (tmpParentOperand instanceof InteractionOperand) {
			InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
			EObject tmpLine = _edge_covered.getTrg();
			if (tmpLine instanceof Lifeline) {
				Lifeline line = (Lifeline) tmpLine;
				if (line.getCoveredBy().contains(parentOperand)) {
					Interaction interaction = line.getInteraction();
					if (interaction != null) {
						for (Lifeline sysLine : parentOperand.getCovered()) {
							if (!line.equals(sysLine)) {
								for (InteractionFragment tmpMessageReceive : parentOperand
										.getFragment()) {
									if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
										MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
										if (pattern_AltUserStepNFToComboRule_33_2_black_nac_4B(messageReceive) == null) {
											if (pattern_AltUserStepNFToComboRule_33_2_black_nac_5BB(
													messageReceive, interaction) == null) {
												if (pattern_AltUserStepNFToComboRule_33_2_black_nac_15BB(
														messageReceive,
														interaction) == null) {
													for (InteractionFragment tmpParentCombo : line
															.getCoveredBy()) {
														if (tmpParentCombo instanceof CombinedFragment) {
															CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
															if (sysLine
																	.getCoveredBy()
																	.contains(
																			parentCombo)) {
																if (parentCombo
																		.getOperand()
																		.contains(
																				parentOperand)) {
																	for (InteractionFragment tmpOperand : line
																			.getCoveredBy()) {
																		if (tmpOperand instanceof InteractionOperand) {
																			InteractionOperand operand = (InteractionOperand) tmpOperand;
																			if (!operand
																					.equals(parentOperand)) {
																				if (sysLine
																						.getCoveredBy()
																						.contains(
																								operand)) {
																					InteractionConstraint guard = operand
																							.getGuard();
																					if (guard != null) {
																						ValueSpecification tmpSpec = guard
																								.getSpecification();
																						if (tmpSpec instanceof LiteralString) {
																							LiteralString spec = (LiteralString) tmpSpec;
																							if (pattern_AltUserStepNFToComboRule_33_2_black_nac_2BB(
																									operand,
																									interaction) == null) {
																								if (pattern_AltUserStepNFToComboRule_33_2_black_nac_12BB(
																										operand,
																										interaction) == null) {
																									if (pattern_AltUserStepNFToComboRule_33_2_black_nac_14BB(
																											parentCombo,
																											operand) == null) {
																										if (pattern_AltUserStepNFToComboRule_33_2_black_nac_16BB(
																												operand,
																												messageReceive) == null) {
																											if (pattern_AltUserStepNFToComboRule_33_2_black_nac_6BBB(
																													guard,
																													operand,
																													parentOperand) == null) {
																												if (pattern_AltUserStepNFToComboRule_33_2_black_nac_17BB(
																														parentOperand,
																														guard) == null) {
																													for (InteractionFragment tmpCombo : interaction
																															.getFragment()) {
																														if (tmpCombo instanceof CombinedFragment) {
																															CombinedFragment combo = (CombinedFragment) tmpCombo;
																															if (!combo
																																	.equals(parentCombo)) {
																																if (sysLine
																																		.getCoveredBy()
																																		.contains(
																																				combo)) {
																																	if (pattern_AltUserStepNFToComboRule_33_2_black_nac_3BBB(
																																			operand,
																																			combo,
																																			parentCombo) == null) {
																																		if (pattern_AltUserStepNFToComboRule_33_2_black_nac_10BB(
																																				operand,
																																				combo) == null) {
																																			if (pattern_AltUserStepNFToComboRule_33_2_black_nac_11BB(
																																					parentOperand,
																																					combo) == null) {
																																				if (pattern_AltUserStepNFToComboRule_33_2_black_nac_13BB(
																																						combo,
																																						operand) == null) {
																																					for (InteractionFragment tmpMessageSend : sysLine
																																							.getCoveredBy()) {
																																						if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
																																							MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
																																							if (!messageReceive
																																									.equals(messageSend)) {
																																								if (pattern_AltUserStepNFToComboRule_33_2_black_nac_0B(messageSend) == null) {
																																									if (pattern_AltUserStepNFToComboRule_33_2_black_nac_1BB(
																																											messageSend,
																																											interaction) == null) {
																																										if (pattern_AltUserStepNFToComboRule_33_2_black_nac_7BB(
																																												messageSend,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_33_2_black_nac_8BB(
																																													operand,
																																													messageSend) == null) {
																																												if (pattern_AltUserStepNFToComboRule_33_2_black_nac_9BB(
																																														parentOperand,
																																														messageSend) == null) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_covered });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}

																					}

																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}

				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_33_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_33_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_33_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_33_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_34_1_binding = pattern_AltUserStepNFToComboRule_34_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_34_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_34_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_34_1_black = pattern_AltUserStepNFToComboRule_34_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_34_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_34_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_736915 = messageSend.getMessage();
		if (__DEC_messageSend_message_736915 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_329069 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_329069 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_329069)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_912780 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_912780 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_912780)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_918639 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_918639)) {
					if (!parentCombo.equals(__DEC_operand_operand_918639)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_936904 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_936904 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_298631 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_298631 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_298631)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_808355 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_808355)) {
					if (!parentOperand.equals(__DEC_guard_guard_808355)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_34_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_coveredBy) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpLine = _edge_coveredBy.getSrc();
		if (tmpLine instanceof Lifeline) {
			Lifeline line = (Lifeline) tmpLine;
			EObject tmpParentCombo = _edge_coveredBy.getTrg();
			if (tmpParentCombo instanceof CombinedFragment) {
				CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
				if (line.getCoveredBy().contains(parentCombo)) {
					Interaction interaction = line.getInteraction();
					if (interaction != null) {
						for (InteractionFragment tmpParentOperand : line
								.getCoveredBy()) {
							if (tmpParentOperand instanceof InteractionOperand) {
								InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
								if (parentCombo.getOperand().contains(
										parentOperand)) {
									for (InteractionFragment tmpOperand : line
											.getCoveredBy()) {
										if (tmpOperand instanceof InteractionOperand) {
											InteractionOperand operand = (InteractionOperand) tmpOperand;
											if (!operand.equals(parentOperand)) {
												InteractionConstraint guard = operand
														.getGuard();
												if (guard != null) {
													ValueSpecification tmpSpec = guard
															.getSpecification();
													if (tmpSpec instanceof LiteralString) {
														LiteralString spec = (LiteralString) tmpSpec;
														if (pattern_AltUserStepNFToComboRule_34_2_black_nac_2BB(
																operand,
																interaction) == null) {
															if (pattern_AltUserStepNFToComboRule_34_2_black_nac_12BB(
																	operand,
																	interaction) == null) {
																if (pattern_AltUserStepNFToComboRule_34_2_black_nac_14BB(
																		parentCombo,
																		operand) == null) {
																	if (pattern_AltUserStepNFToComboRule_34_2_black_nac_6BBB(
																			guard,
																			operand,
																			parentOperand) == null) {
																		if (pattern_AltUserStepNFToComboRule_34_2_black_nac_17BB(
																				parentOperand,
																				guard) == null) {
																			for (Lifeline sysLine : parentCombo
																					.getCovered()) {
																				if (!line
																						.equals(sysLine)) {
																					if (sysLine
																							.getCoveredBy()
																							.contains(
																									operand)) {
																						if (sysLine
																								.getCoveredBy()
																								.contains(
																										parentOperand)) {
																							for (InteractionFragment tmpCombo : interaction
																									.getFragment()) {
																								if (tmpCombo instanceof CombinedFragment) {
																									CombinedFragment combo = (CombinedFragment) tmpCombo;
																									if (!combo
																											.equals(parentCombo)) {
																										if (sysLine
																												.getCoveredBy()
																												.contains(
																														combo)) {
																											if (pattern_AltUserStepNFToComboRule_34_2_black_nac_3BBB(
																													operand,
																													combo,
																													parentCombo) == null) {
																												if (pattern_AltUserStepNFToComboRule_34_2_black_nac_10BB(
																														operand,
																														combo) == null) {
																													if (pattern_AltUserStepNFToComboRule_34_2_black_nac_11BB(
																															parentOperand,
																															combo) == null) {
																														if (pattern_AltUserStepNFToComboRule_34_2_black_nac_13BB(
																																combo,
																																operand) == null) {
																															for (InteractionFragment tmpMessageReceive : parentOperand
																																	.getFragment()) {
																																if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																																	MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																																	if (pattern_AltUserStepNFToComboRule_34_2_black_nac_4B(messageReceive) == null) {
																																		if (pattern_AltUserStepNFToComboRule_34_2_black_nac_5BB(
																																				messageReceive,
																																				interaction) == null) {
																																			if (pattern_AltUserStepNFToComboRule_34_2_black_nac_15BB(
																																					messageReceive,
																																					interaction) == null) {
																																				if (pattern_AltUserStepNFToComboRule_34_2_black_nac_16BB(
																																						operand,
																																						messageReceive) == null) {
																																					for (InteractionFragment tmpMessageSend : sysLine
																																							.getCoveredBy()) {
																																						if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
																																							MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
																																							if (!messageReceive
																																									.equals(messageSend)) {
																																								if (pattern_AltUserStepNFToComboRule_34_2_black_nac_0B(messageSend) == null) {
																																									if (pattern_AltUserStepNFToComboRule_34_2_black_nac_1BB(
																																											messageSend,
																																											interaction) == null) {
																																										if (pattern_AltUserStepNFToComboRule_34_2_black_nac_7BB(
																																												messageSend,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_34_2_black_nac_8BB(
																																													operand,
																																													messageSend) == null) {
																																												if (pattern_AltUserStepNFToComboRule_34_2_black_nac_9BB(
																																														parentOperand,
																																														messageSend) == null) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_coveredBy });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}

												}

											}
										}
									}
								}
							}
						}
					}

				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_34_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_34_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_34_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_34_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_35_1_binding = pattern_AltUserStepNFToComboRule_35_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_35_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_35_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_35_1_black = pattern_AltUserStepNFToComboRule_35_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_35_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_35_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_656093 = messageSend.getMessage();
		if (__DEC_messageSend_message_656093 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_867036 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_867036 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_867036)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_166701 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_166701 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_166701)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_598568 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_598568)) {
					if (!parentCombo.equals(__DEC_operand_operand_598568)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_654785 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_654785 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_178153 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_178153 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_178153)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_461156 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_461156)) {
					if (!parentOperand.equals(__DEC_guard_guard_461156)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_35_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_covered) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpParentCombo = _edge_covered.getSrc();
		if (tmpParentCombo instanceof CombinedFragment) {
			CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
			EObject tmpLine = _edge_covered.getTrg();
			if (tmpLine instanceof Lifeline) {
				Lifeline line = (Lifeline) tmpLine;
				if (line.getCoveredBy().contains(parentCombo)) {
					Interaction interaction = line.getInteraction();
					if (interaction != null) {
						for (Lifeline sysLine : parentCombo.getCovered()) {
							if (!line.equals(sysLine)) {
								for (InteractionOperand parentOperand : parentCombo
										.getOperand()) {
									if (sysLine.getCoveredBy().contains(
											parentOperand)) {
										if (line.getCoveredBy().contains(
												parentOperand)) {
											for (InteractionFragment tmpOperand : line
													.getCoveredBy()) {
												if (tmpOperand instanceof InteractionOperand) {
													InteractionOperand operand = (InteractionOperand) tmpOperand;
													if (!operand
															.equals(parentOperand)) {
														if (sysLine
																.getCoveredBy()
																.contains(
																		operand)) {
															InteractionConstraint guard = operand
																	.getGuard();
															if (guard != null) {
																ValueSpecification tmpSpec = guard
																		.getSpecification();
																if (tmpSpec instanceof LiteralString) {
																	LiteralString spec = (LiteralString) tmpSpec;
																	if (pattern_AltUserStepNFToComboRule_35_2_black_nac_2BB(
																			operand,
																			interaction) == null) {
																		if (pattern_AltUserStepNFToComboRule_35_2_black_nac_12BB(
																				operand,
																				interaction) == null) {
																			if (pattern_AltUserStepNFToComboRule_35_2_black_nac_14BB(
																					parentCombo,
																					operand) == null) {
																				if (pattern_AltUserStepNFToComboRule_35_2_black_nac_6BBB(
																						guard,
																						operand,
																						parentOperand) == null) {
																					if (pattern_AltUserStepNFToComboRule_35_2_black_nac_17BB(
																							parentOperand,
																							guard) == null) {
																						for (InteractionFragment tmpCombo : interaction
																								.getFragment()) {
																							if (tmpCombo instanceof CombinedFragment) {
																								CombinedFragment combo = (CombinedFragment) tmpCombo;
																								if (!combo
																										.equals(parentCombo)) {
																									if (sysLine
																											.getCoveredBy()
																											.contains(
																													combo)) {
																										if (pattern_AltUserStepNFToComboRule_35_2_black_nac_3BBB(
																												operand,
																												combo,
																												parentCombo) == null) {
																											if (pattern_AltUserStepNFToComboRule_35_2_black_nac_10BB(
																													operand,
																													combo) == null) {
																												if (pattern_AltUserStepNFToComboRule_35_2_black_nac_11BB(
																														parentOperand,
																														combo) == null) {
																													if (pattern_AltUserStepNFToComboRule_35_2_black_nac_13BB(
																															combo,
																															operand) == null) {
																														for (InteractionFragment tmpMessageSend : sysLine
																																.getCoveredBy()) {
																															if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
																																MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
																																if (pattern_AltUserStepNFToComboRule_35_2_black_nac_0B(messageSend) == null) {
																																	if (pattern_AltUserStepNFToComboRule_35_2_black_nac_1BB(
																																			messageSend,
																																			interaction) == null) {
																																		if (pattern_AltUserStepNFToComboRule_35_2_black_nac_7BB(
																																				messageSend,
																																				interaction) == null) {
																																			if (pattern_AltUserStepNFToComboRule_35_2_black_nac_8BB(
																																					operand,
																																					messageSend) == null) {
																																				if (pattern_AltUserStepNFToComboRule_35_2_black_nac_9BB(
																																						parentOperand,
																																						messageSend) == null) {
																																					for (InteractionFragment tmpMessageReceive : parentOperand
																																							.getFragment()) {
																																						if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																																							MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																																							if (!messageReceive
																																									.equals(messageSend)) {
																																								if (pattern_AltUserStepNFToComboRule_35_2_black_nac_4B(messageReceive) == null) {
																																									if (pattern_AltUserStepNFToComboRule_35_2_black_nac_5BB(
																																											messageReceive,
																																											interaction) == null) {
																																										if (pattern_AltUserStepNFToComboRule_35_2_black_nac_15BB(
																																												messageReceive,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_35_2_black_nac_16BB(
																																													operand,
																																													messageReceive) == null) {
																																												_result.add(new Object[] {
																																														sysLine,
																																														messageSend,
																																														combo,
																																														operand,
																																														parentOperand,
																																														parentCombo,
																																														messageReceive,
																																														line,
																																														interaction,
																																														guard,
																																														spec,
																																														_edge_covered });
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}

															}

														}
													}
												}
											}
										}
									}
								}
							}
						}
					}

				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_35_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_35_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_35_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_35_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_36_1_binding = pattern_AltUserStepNFToComboRule_36_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_36_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_36_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_36_1_black = pattern_AltUserStepNFToComboRule_36_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_36_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_36_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_457649 = messageSend.getMessage();
		if (__DEC_messageSend_message_457649 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_781647 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_781647 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_781647)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_27410 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_27410 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_27410)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_400604 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_400604)) {
					if (!parentCombo.equals(__DEC_operand_operand_400604)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_316611 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_316611 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_330610 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_330610 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_330610)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_972531 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_972531)) {
					if (!parentOperand.equals(__DEC_guard_guard_972531)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_36_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_enclosingInteraction) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpCombo = _edge_enclosingInteraction.getSrc();
		if (tmpCombo instanceof CombinedFragment) {
			CombinedFragment combo = (CombinedFragment) tmpCombo;
			EObject tmpInteraction = _edge_enclosingInteraction.getTrg();
			if (tmpInteraction instanceof Interaction) {
				Interaction interaction = (Interaction) tmpInteraction;
				if (interaction.equals(combo.getEnclosingInteraction())) {
					for (Lifeline sysLine : combo.getCovered()) {
						for (Lifeline line : interaction.getLifeline()) {
							if (!line.equals(sysLine)) {
								for (InteractionFragment tmpMessageSend : sysLine
										.getCoveredBy()) {
									if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
										MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
										if (pattern_AltUserStepNFToComboRule_36_2_black_nac_0B(messageSend) == null) {
											if (pattern_AltUserStepNFToComboRule_36_2_black_nac_1BB(
													messageSend, interaction) == null) {
												if (pattern_AltUserStepNFToComboRule_36_2_black_nac_7BB(
														messageSend,
														interaction) == null) {
													for (InteractionFragment tmpOperand : sysLine
															.getCoveredBy()) {
														if (tmpOperand instanceof InteractionOperand) {
															InteractionOperand operand = (InteractionOperand) tmpOperand;
															if (line.getCoveredBy()
																	.contains(
																			operand)) {
																InteractionConstraint guard = operand
																		.getGuard();
																if (guard != null) {
																	ValueSpecification tmpSpec = guard
																			.getSpecification();
																	if (tmpSpec instanceof LiteralString) {
																		LiteralString spec = (LiteralString) tmpSpec;
																		if (pattern_AltUserStepNFToComboRule_36_2_black_nac_2BB(
																				operand,
																				interaction) == null) {
																			if (pattern_AltUserStepNFToComboRule_36_2_black_nac_8BB(
																					operand,
																					messageSend) == null) {
																				if (pattern_AltUserStepNFToComboRule_36_2_black_nac_10BB(
																						operand,
																						combo) == null) {
																					if (pattern_AltUserStepNFToComboRule_36_2_black_nac_12BB(
																							operand,
																							interaction) == null) {
																						if (pattern_AltUserStepNFToComboRule_36_2_black_nac_13BB(
																								combo,
																								operand) == null) {
																							for (InteractionFragment tmpParentOperand : sysLine
																									.getCoveredBy()) {
																								if (tmpParentOperand instanceof InteractionOperand) {
																									InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
																									if (!operand
																											.equals(parentOperand)) {
																										if (line.getCoveredBy()
																												.contains(
																														parentOperand)) {
																											if (pattern_AltUserStepNFToComboRule_36_2_black_nac_6BBB(
																													guard,
																													operand,
																													parentOperand) == null) {
																												if (pattern_AltUserStepNFToComboRule_36_2_black_nac_9BB(
																														parentOperand,
																														messageSend) == null) {
																													if (pattern_AltUserStepNFToComboRule_36_2_black_nac_11BB(
																															parentOperand,
																															combo) == null) {
																														if (pattern_AltUserStepNFToComboRule_36_2_black_nac_17BB(
																																parentOperand,
																																guard) == null) {
																															for (InteractionFragment tmpParentCombo : sysLine
																																	.getCoveredBy()) {
																																if (tmpParentCombo instanceof CombinedFragment) {
																																	CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
																																	if (!combo
																																			.equals(parentCombo)) {
																																		if (parentCombo
																																				.getOperand()
																																				.contains(
																																						parentOperand)) {
																																			if (line.getCoveredBy()
																																					.contains(
																																							parentCombo)) {
																																				if (pattern_AltUserStepNFToComboRule_36_2_black_nac_3BBB(
																																						operand,
																																						combo,
																																						parentCombo) == null) {
																																					if (pattern_AltUserStepNFToComboRule_36_2_black_nac_14BB(
																																							parentCombo,
																																							operand) == null) {
																																						for (InteractionFragment tmpMessageReceive : parentOperand
																																								.getFragment()) {
																																							if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																																								MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																																								if (!messageReceive
																																										.equals(messageSend)) {
																																									if (pattern_AltUserStepNFToComboRule_36_2_black_nac_4B(messageReceive) == null) {
																																										if (pattern_AltUserStepNFToComboRule_36_2_black_nac_5BB(
																																												messageReceive,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_36_2_black_nac_15BB(
																																													messageReceive,
																																													interaction) == null) {
																																												if (pattern_AltUserStepNFToComboRule_36_2_black_nac_16BB(
																																														operand,
																																														messageReceive) == null) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_enclosingInteraction });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}

																}

															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_36_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_36_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_36_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_36_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_37_1_binding = pattern_AltUserStepNFToComboRule_37_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_37_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_37_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_37_1_black = pattern_AltUserStepNFToComboRule_37_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_37_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_37_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_504373 = messageSend.getMessage();
		if (__DEC_messageSend_message_504373 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_42604 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_42604 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_42604)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_398837 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_398837 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_398837)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_513095 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_513095)) {
					if (!parentCombo.equals(__DEC_operand_operand_513095)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_563501 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_563501 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_213027 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_213027 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_213027)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_595255 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_595255)) {
					if (!parentOperand.equals(__DEC_guard_guard_595255)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_37_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_fragment) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpInteraction = _edge_fragment.getSrc();
		if (tmpInteraction instanceof Interaction) {
			Interaction interaction = (Interaction) tmpInteraction;
			EObject tmpCombo = _edge_fragment.getTrg();
			if (tmpCombo instanceof CombinedFragment) {
				CombinedFragment combo = (CombinedFragment) tmpCombo;
				if (interaction.equals(combo.getEnclosingInteraction())) {
					for (Lifeline line : interaction.getLifeline()) {
						for (Lifeline sysLine : combo.getCovered()) {
							if (!line.equals(sysLine)) {
								for (InteractionFragment tmpParentOperand : line
										.getCoveredBy()) {
									if (tmpParentOperand instanceof InteractionOperand) {
										InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
										if (sysLine.getCoveredBy().contains(
												parentOperand)) {
											if (pattern_AltUserStepNFToComboRule_37_2_black_nac_11BB(
													parentOperand, combo) == null) {
												for (InteractionFragment tmpParentCombo : line
														.getCoveredBy()) {
													if (tmpParentCombo instanceof CombinedFragment) {
														CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
														if (!combo
																.equals(parentCombo)) {
															if (sysLine
																	.getCoveredBy()
																	.contains(
																			parentCombo)) {
																if (parentCombo
																		.getOperand()
																		.contains(
																				parentOperand)) {
																	for (InteractionFragment tmpOperand : line
																			.getCoveredBy()) {
																		if (tmpOperand instanceof InteractionOperand) {
																			InteractionOperand operand = (InteractionOperand) tmpOperand;
																			if (!operand
																					.equals(parentOperand)) {
																				if (sysLine
																						.getCoveredBy()
																						.contains(
																								operand)) {
																					InteractionConstraint guard = operand
																							.getGuard();
																					if (guard != null) {
																						ValueSpecification tmpSpec = guard
																								.getSpecification();
																						if (tmpSpec instanceof LiteralString) {
																							LiteralString spec = (LiteralString) tmpSpec;
																							if (pattern_AltUserStepNFToComboRule_37_2_black_nac_2BB(
																									operand,
																									interaction) == null) {
																								if (pattern_AltUserStepNFToComboRule_37_2_black_nac_3BBB(
																										operand,
																										combo,
																										parentCombo) == null) {
																									if (pattern_AltUserStepNFToComboRule_37_2_black_nac_10BB(
																											operand,
																											combo) == null) {
																										if (pattern_AltUserStepNFToComboRule_37_2_black_nac_12BB(
																												operand,
																												interaction) == null) {
																											if (pattern_AltUserStepNFToComboRule_37_2_black_nac_13BB(
																													combo,
																													operand) == null) {
																												if (pattern_AltUserStepNFToComboRule_37_2_black_nac_14BB(
																														parentCombo,
																														operand) == null) {
																													if (pattern_AltUserStepNFToComboRule_37_2_black_nac_6BBB(
																															guard,
																															operand,
																															parentOperand) == null) {
																														if (pattern_AltUserStepNFToComboRule_37_2_black_nac_17BB(
																																parentOperand,
																																guard) == null) {
																															for (InteractionFragment tmpMessageSend : sysLine
																																	.getCoveredBy()) {
																																if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
																																	MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
																																	if (pattern_AltUserStepNFToComboRule_37_2_black_nac_0B(messageSend) == null) {
																																		if (pattern_AltUserStepNFToComboRule_37_2_black_nac_1BB(
																																				messageSend,
																																				interaction) == null) {
																																			if (pattern_AltUserStepNFToComboRule_37_2_black_nac_7BB(
																																					messageSend,
																																					interaction) == null) {
																																				if (pattern_AltUserStepNFToComboRule_37_2_black_nac_8BB(
																																						operand,
																																						messageSend) == null) {
																																					if (pattern_AltUserStepNFToComboRule_37_2_black_nac_9BB(
																																							parentOperand,
																																							messageSend) == null) {
																																						for (InteractionFragment tmpMessageReceive : parentOperand
																																								.getFragment()) {
																																							if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																																								MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																																								if (!messageReceive
																																										.equals(messageSend)) {
																																									if (pattern_AltUserStepNFToComboRule_37_2_black_nac_4B(messageReceive) == null) {
																																										if (pattern_AltUserStepNFToComboRule_37_2_black_nac_5BB(
																																												messageReceive,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_37_2_black_nac_15BB(
																																													messageReceive,
																																													interaction) == null) {
																																												if (pattern_AltUserStepNFToComboRule_37_2_black_nac_16BB(
																																														operand,
																																														messageReceive) == null) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_fragment });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}

																					}

																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_37_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_37_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_37_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_37_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_38_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_38_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_FWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_38_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_38_1_binding = pattern_AltUserStepNFToComboRule_38_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_38_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_38_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_38_1_black = pattern_AltUserStepNFToComboRule_38_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_38_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_38_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_38_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_38_2_black_nac_0BB(
			AlternativeFlow altFlow, NormalStep step) {
		if (altFlow.getSteps().contains(step)) {
			return new Object[] { altFlow, step };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_38_2_black_nac_1BB(
			UseCase useCase, AlternativeFlow altFlow) {
		if (useCase.getFlows().contains(altFlow)) {
			return new Object[] { useCase, altFlow };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_38_2_blackFFFFFFFFB(
			EMoflonEdge _edge_steps) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpFlow = _edge_steps.getSrc();
		if (tmpFlow instanceof NamedFlow) {
			NamedFlow flow = (NamedFlow) tmpFlow;
			EObject tmpStep = _edge_steps.getTrg();
			if (tmpStep instanceof NormalStep) {
				NormalStep step = (NormalStep) tmpStep;
				if (flow.getSteps().contains(step)) {
					Actor actor = step.getActor();
					if (actor != null) {
						for (StepAlternative tmpAlt : step.getStepAlternative()) {
							if (tmpAlt instanceof AlternativeFlowAlternative) {
								AlternativeFlowAlternative alt = (AlternativeFlowAlternative) tmpAlt;
								NamedFlow tmpAltFlow = alt.getRef();
								if (tmpAltFlow instanceof AlternativeFlow) {
									AlternativeFlow altFlow = (AlternativeFlow) tmpAltFlow;
									if (!altFlow.equals(flow)) {
										if (pattern_AltUserStepNFToComboRule_38_2_black_nac_0BB(
												altFlow, step) == null) {
											for (UseCase useCase : org.moflon.util.eMoflonEMFUtil
													.getOppositeReferenceTyped(
															flow,
															UseCase.class,
															"flows")) {
												if (pattern_AltUserStepNFToComboRule_38_2_black_nac_1BB(
														useCase, altFlow) == null) {
													for (PackageDeclaration packageDeclaration : org.moflon.util.eMoflonEMFUtil
															.getOppositeReferenceTyped(
																	actor,
																	PackageDeclaration.class,
																	"actors")) {
														if (packageDeclaration
																.getUseCases()
																.contains(
																		useCase)) {
															for (Actor sysActor : packageDeclaration
																	.getActors()) {
																if (!actor
																		.equals(sysActor)) {
																	_result.add(new Object[] {
																			packageDeclaration,
																			actor,
																			sysActor,
																			flow,
																			useCase,
																			step,
																			alt,
																			altFlow,
																			_edge_steps });
																}
															}
														}
													}
												}
											}
										}
									}
								}

							}
						}
					}

				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_38_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_38_3_expressionFBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, UseCase useCase, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		boolean _localVariable_0 = _this.isAppropriate_FWD(match,
				packageDeclaration, actor, sysActor, flow, useCase, step, alt,
				altFlow);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_38_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_FWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_38_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_38_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_38_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_39_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_39_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_FWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_39_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_39_1_binding = pattern_AltUserStepNFToComboRule_39_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_39_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_39_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_39_1_black = pattern_AltUserStepNFToComboRule_39_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_39_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_39_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_39_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_39_2_black_nac_0BB(
			AlternativeFlow altFlow, NormalStep step) {
		if (altFlow.getSteps().contains(step)) {
			return new Object[] { altFlow, step };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_39_2_black_nac_1BB(
			UseCase useCase, AlternativeFlow altFlow) {
		if (useCase.getFlows().contains(altFlow)) {
			return new Object[] { useCase, altFlow };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_39_2_blackFFFFFFFFB(
			EMoflonEdge _edge_stepAlternative) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpStep = _edge_stepAlternative.getSrc();
		if (tmpStep instanceof NormalStep) {
			NormalStep step = (NormalStep) tmpStep;
			EObject tmpAlt = _edge_stepAlternative.getTrg();
			if (tmpAlt instanceof AlternativeFlowAlternative) {
				AlternativeFlowAlternative alt = (AlternativeFlowAlternative) tmpAlt;
				if (step.getStepAlternative().contains(alt)) {
					Actor actor = step.getActor();
					if (actor != null) {
						NamedFlow tmpAltFlow = alt.getRef();
						if (tmpAltFlow instanceof AlternativeFlow) {
							AlternativeFlow altFlow = (AlternativeFlow) tmpAltFlow;
							if (pattern_AltUserStepNFToComboRule_39_2_black_nac_0BB(
									altFlow, step) == null) {
								for (Flow tmpFlow : org.moflon.util.eMoflonEMFUtil
										.getOppositeReferenceTyped(step,
												Flow.class, "steps")) {
									if (tmpFlow instanceof NamedFlow) {
										NamedFlow flow = (NamedFlow) tmpFlow;
										if (!altFlow.equals(flow)) {
											for (PackageDeclaration packageDeclaration : org.moflon.util.eMoflonEMFUtil
													.getOppositeReferenceTyped(
															actor,
															PackageDeclaration.class,
															"actors")) {
												for (Actor sysActor : packageDeclaration
														.getActors()) {
													if (!actor.equals(sysActor)) {
														for (UseCase useCase : packageDeclaration
																.getUseCases()) {
															if (useCase
																	.getFlows()
																	.contains(
																			flow)) {
																if (pattern_AltUserStepNFToComboRule_39_2_black_nac_1BB(
																		useCase,
																		altFlow) == null) {
																	_result.add(new Object[] {
																			packageDeclaration,
																			actor,
																			sysActor,
																			flow,
																			useCase,
																			step,
																			alt,
																			altFlow,
																			_edge_stepAlternative });
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}

					}

				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_39_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_39_3_expressionFBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, UseCase useCase, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		boolean _localVariable_0 = _this.isAppropriate_FWD(match,
				packageDeclaration, actor, sysActor, flow, useCase, step, alt,
				altFlow);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_39_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_FWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_39_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_39_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_39_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_40_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_40_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_FWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_40_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_40_1_binding = pattern_AltUserStepNFToComboRule_40_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_40_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_40_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_40_1_black = pattern_AltUserStepNFToComboRule_40_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_40_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_40_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_40_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_40_2_black_nac_0BB(
			AlternativeFlow altFlow, NormalStep step) {
		if (altFlow.getSteps().contains(step)) {
			return new Object[] { altFlow, step };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_40_2_black_nac_1BB(
			UseCase useCase, AlternativeFlow altFlow) {
		if (useCase.getFlows().contains(altFlow)) {
			return new Object[] { useCase, altFlow };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_40_2_blackFFFFFFFFB(
			EMoflonEdge _edge_actor) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpStep = _edge_actor.getSrc();
		if (tmpStep instanceof NormalStep) {
			NormalStep step = (NormalStep) tmpStep;
			EObject tmpActor = _edge_actor.getTrg();
			if (tmpActor instanceof Actor) {
				Actor actor = (Actor) tmpActor;
				if (actor.equals(step.getActor())) {
					for (StepAlternative tmpAlt : step.getStepAlternative()) {
						if (tmpAlt instanceof AlternativeFlowAlternative) {
							AlternativeFlowAlternative alt = (AlternativeFlowAlternative) tmpAlt;
							NamedFlow tmpAltFlow = alt.getRef();
							if (tmpAltFlow instanceof AlternativeFlow) {
								AlternativeFlow altFlow = (AlternativeFlow) tmpAltFlow;
								if (pattern_AltUserStepNFToComboRule_40_2_black_nac_0BB(
										altFlow, step) == null) {
									for (Flow tmpFlow : org.moflon.util.eMoflonEMFUtil
											.getOppositeReferenceTyped(step,
													Flow.class, "steps")) {
										if (tmpFlow instanceof NamedFlow) {
											NamedFlow flow = (NamedFlow) tmpFlow;
											if (!altFlow.equals(flow)) {
												for (PackageDeclaration packageDeclaration : org.moflon.util.eMoflonEMFUtil
														.getOppositeReferenceTyped(
																actor,
																PackageDeclaration.class,
																"actors")) {
													for (Actor sysActor : packageDeclaration
															.getActors()) {
														if (!actor
																.equals(sysActor)) {
															for (UseCase useCase : packageDeclaration
																	.getUseCases()) {
																if (useCase
																		.getFlows()
																		.contains(
																				flow)) {
																	if (pattern_AltUserStepNFToComboRule_40_2_black_nac_1BB(
																			useCase,
																			altFlow) == null) {
																		_result.add(new Object[] {
																				packageDeclaration,
																				actor,
																				sysActor,
																				flow,
																				useCase,
																				step,
																				alt,
																				altFlow,
																				_edge_actor });
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}

						}
					}
				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_40_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_40_3_expressionFBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, UseCase useCase, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		boolean _localVariable_0 = _this.isAppropriate_FWD(match,
				packageDeclaration, actor, sysActor, flow, useCase, step, alt,
				altFlow);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_40_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_FWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_40_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_40_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_40_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_41_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_41_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_FWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_41_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_41_1_binding = pattern_AltUserStepNFToComboRule_41_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_41_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_41_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_41_1_black = pattern_AltUserStepNFToComboRule_41_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_41_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_41_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_41_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_41_2_black_nac_0BB(
			AlternativeFlow altFlow, NormalStep step) {
		if (altFlow.getSteps().contains(step)) {
			return new Object[] { altFlow, step };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_41_2_black_nac_1BB(
			UseCase useCase, AlternativeFlow altFlow) {
		if (useCase.getFlows().contains(altFlow)) {
			return new Object[] { useCase, altFlow };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_41_2_blackFFFFFFFFB(
			EMoflonEdge _edge_ref) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpAlt = _edge_ref.getSrc();
		if (tmpAlt instanceof AlternativeFlowAlternative) {
			AlternativeFlowAlternative alt = (AlternativeFlowAlternative) tmpAlt;
			EObject tmpAltFlow = _edge_ref.getTrg();
			if (tmpAltFlow instanceof AlternativeFlow) {
				AlternativeFlow altFlow = (AlternativeFlow) tmpAltFlow;
				if (altFlow.equals(alt.getRef())) {
					for (NormalStep step : org.moflon.util.eMoflonEMFUtil
							.getOppositeReferenceTyped(alt, NormalStep.class,
									"stepAlternative")) {
						Actor actor = step.getActor();
						if (actor != null) {
							if (pattern_AltUserStepNFToComboRule_41_2_black_nac_0BB(
									altFlow, step) == null) {
								for (Flow tmpFlow : org.moflon.util.eMoflonEMFUtil
										.getOppositeReferenceTyped(step,
												Flow.class, "steps")) {
									if (tmpFlow instanceof NamedFlow) {
										NamedFlow flow = (NamedFlow) tmpFlow;
										if (!altFlow.equals(flow)) {
											for (PackageDeclaration packageDeclaration : org.moflon.util.eMoflonEMFUtil
													.getOppositeReferenceTyped(
															actor,
															PackageDeclaration.class,
															"actors")) {
												for (Actor sysActor : packageDeclaration
														.getActors()) {
													if (!actor.equals(sysActor)) {
														for (UseCase useCase : packageDeclaration
																.getUseCases()) {
															if (useCase
																	.getFlows()
																	.contains(
																			flow)) {
																if (pattern_AltUserStepNFToComboRule_41_2_black_nac_1BB(
																		useCase,
																		altFlow) == null) {
																	_result.add(new Object[] {
																			packageDeclaration,
																			actor,
																			sysActor,
																			flow,
																			useCase,
																			step,
																			alt,
																			altFlow,
																			_edge_ref });
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}

					}
				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_41_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_41_3_expressionFBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, UseCase useCase, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		boolean _localVariable_0 = _this.isAppropriate_FWD(match,
				packageDeclaration, actor, sysActor, flow, useCase, step, alt,
				altFlow);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_41_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_FWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_41_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_41_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_41_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_42_1_binding = pattern_AltUserStepNFToComboRule_42_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_42_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_42_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_42_1_black = pattern_AltUserStepNFToComboRule_42_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_42_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_42_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_20872 = messageSend.getMessage();
		if (__DEC_messageSend_message_20872 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_781543 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_781543 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_781543)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_80254 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_80254 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_80254)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_217374 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_217374)) {
					if (!parentCombo.equals(__DEC_operand_operand_217374)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_274822 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_274822 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_813604 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_813604 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_813604)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_528655 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_528655)) {
					if (!parentOperand.equals(__DEC_guard_guard_528655)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_42_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_coveredBy) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpLine = _edge_coveredBy.getSrc();
		if (tmpLine instanceof Lifeline) {
			Lifeline line = (Lifeline) tmpLine;
			EObject tmpOperand = _edge_coveredBy.getTrg();
			if (tmpOperand instanceof InteractionOperand) {
				InteractionOperand operand = (InteractionOperand) tmpOperand;
				if (line.getCoveredBy().contains(operand)) {
					Interaction interaction = line.getInteraction();
					if (interaction != null) {
						InteractionConstraint guard = operand.getGuard();
						if (guard != null) {
							ValueSpecification tmpSpec = guard
									.getSpecification();
							if (tmpSpec instanceof LiteralString) {
								LiteralString spec = (LiteralString) tmpSpec;
								if (pattern_AltUserStepNFToComboRule_42_2_black_nac_2BB(
										operand, interaction) == null) {
									if (pattern_AltUserStepNFToComboRule_42_2_black_nac_12BB(
											operand, interaction) == null) {
										for (InteractionFragment tmpParentOperand : line
												.getCoveredBy()) {
											if (tmpParentOperand instanceof InteractionOperand) {
												InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
												if (!operand
														.equals(parentOperand)) {
													if (pattern_AltUserStepNFToComboRule_42_2_black_nac_6BBB(
															guard, operand,
															parentOperand) == null) {
														if (pattern_AltUserStepNFToComboRule_42_2_black_nac_17BB(
																parentOperand,
																guard) == null) {
															for (InteractionFragment tmpParentCombo : line
																	.getCoveredBy()) {
																if (tmpParentCombo instanceof CombinedFragment) {
																	CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
																	if (parentCombo
																			.getOperand()
																			.contains(
																					parentOperand)) {
																		if (pattern_AltUserStepNFToComboRule_42_2_black_nac_14BB(
																				parentCombo,
																				operand) == null) {
																			for (Lifeline sysLine : operand
																					.getCovered()) {
																				if (!line
																						.equals(sysLine)) {
																					if (sysLine
																							.getCoveredBy()
																							.contains(
																									parentOperand)) {
																						if (sysLine
																								.getCoveredBy()
																								.contains(
																										parentCombo)) {
																							for (InteractionFragment tmpCombo : interaction
																									.getFragment()) {
																								if (tmpCombo instanceof CombinedFragment) {
																									CombinedFragment combo = (CombinedFragment) tmpCombo;
																									if (!combo
																											.equals(parentCombo)) {
																										if (sysLine
																												.getCoveredBy()
																												.contains(
																														combo)) {
																											if (pattern_AltUserStepNFToComboRule_42_2_black_nac_3BBB(
																													operand,
																													combo,
																													parentCombo) == null) {
																												if (pattern_AltUserStepNFToComboRule_42_2_black_nac_10BB(
																														operand,
																														combo) == null) {
																													if (pattern_AltUserStepNFToComboRule_42_2_black_nac_11BB(
																															parentOperand,
																															combo) == null) {
																														if (pattern_AltUserStepNFToComboRule_42_2_black_nac_13BB(
																																combo,
																																operand) == null) {
																															for (InteractionFragment tmpMessageReceive : parentOperand
																																	.getFragment()) {
																																if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																																	MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																																	if (pattern_AltUserStepNFToComboRule_42_2_black_nac_4B(messageReceive) == null) {
																																		if (pattern_AltUserStepNFToComboRule_42_2_black_nac_5BB(
																																				messageReceive,
																																				interaction) == null) {
																																			if (pattern_AltUserStepNFToComboRule_42_2_black_nac_15BB(
																																					messageReceive,
																																					interaction) == null) {
																																				if (pattern_AltUserStepNFToComboRule_42_2_black_nac_16BB(
																																						operand,
																																						messageReceive) == null) {
																																					for (InteractionFragment tmpMessageSend : sysLine
																																							.getCoveredBy()) {
																																						if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
																																							MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
																																							if (!messageReceive
																																									.equals(messageSend)) {
																																								if (pattern_AltUserStepNFToComboRule_42_2_black_nac_0B(messageSend) == null) {
																																									if (pattern_AltUserStepNFToComboRule_42_2_black_nac_1BB(
																																											messageSend,
																																											interaction) == null) {
																																										if (pattern_AltUserStepNFToComboRule_42_2_black_nac_7BB(
																																												messageSend,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_42_2_black_nac_8BB(
																																													operand,
																																													messageSend) == null) {
																																												if (pattern_AltUserStepNFToComboRule_42_2_black_nac_9BB(
																																														parentOperand,
																																														messageSend) == null) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_coveredBy });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}

						}

					}

				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_42_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_42_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_42_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_42_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_43_1_binding = pattern_AltUserStepNFToComboRule_43_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_43_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_43_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_43_1_black = pattern_AltUserStepNFToComboRule_43_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_43_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_43_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_531905 = messageSend.getMessage();
		if (__DEC_messageSend_message_531905 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_344222 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_344222 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_344222)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_78740 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_78740 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_78740)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_522555 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_522555)) {
					if (!parentCombo.equals(__DEC_operand_operand_522555)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_13261 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_13261 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_997839 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_997839 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_997839)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_846751 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_846751)) {
					if (!parentOperand.equals(__DEC_guard_guard_846751)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_43_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_covered) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpOperand = _edge_covered.getSrc();
		if (tmpOperand instanceof InteractionOperand) {
			InteractionOperand operand = (InteractionOperand) tmpOperand;
			EObject tmpLine = _edge_covered.getTrg();
			if (tmpLine instanceof Lifeline) {
				Lifeline line = (Lifeline) tmpLine;
				if (line.getCoveredBy().contains(operand)) {
					InteractionConstraint guard = operand.getGuard();
					if (guard != null) {
						Interaction interaction = line.getInteraction();
						if (interaction != null) {
							ValueSpecification tmpSpec = guard
									.getSpecification();
							if (tmpSpec instanceof LiteralString) {
								LiteralString spec = (LiteralString) tmpSpec;
								if (pattern_AltUserStepNFToComboRule_43_2_black_nac_2BB(
										operand, interaction) == null) {
									if (pattern_AltUserStepNFToComboRule_43_2_black_nac_12BB(
											operand, interaction) == null) {
										for (Lifeline sysLine : operand
												.getCovered()) {
											if (!line.equals(sysLine)) {
												for (InteractionFragment tmpParentOperand : line
														.getCoveredBy()) {
													if (tmpParentOperand instanceof InteractionOperand) {
														InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
														if (!operand
																.equals(parentOperand)) {
															if (sysLine
																	.getCoveredBy()
																	.contains(
																			parentOperand)) {
																if (pattern_AltUserStepNFToComboRule_43_2_black_nac_6BBB(
																		guard,
																		operand,
																		parentOperand) == null) {
																	if (pattern_AltUserStepNFToComboRule_43_2_black_nac_17BB(
																			parentOperand,
																			guard) == null) {
																		for (InteractionFragment tmpParentCombo : line
																				.getCoveredBy()) {
																			if (tmpParentCombo instanceof CombinedFragment) {
																				CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
																				if (sysLine
																						.getCoveredBy()
																						.contains(
																								parentCombo)) {
																					if (parentCombo
																							.getOperand()
																							.contains(
																									parentOperand)) {
																						if (pattern_AltUserStepNFToComboRule_43_2_black_nac_14BB(
																								parentCombo,
																								operand) == null) {
																							for (InteractionFragment tmpCombo : interaction
																									.getFragment()) {
																								if (tmpCombo instanceof CombinedFragment) {
																									CombinedFragment combo = (CombinedFragment) tmpCombo;
																									if (!combo
																											.equals(parentCombo)) {
																										if (sysLine
																												.getCoveredBy()
																												.contains(
																														combo)) {
																											if (pattern_AltUserStepNFToComboRule_43_2_black_nac_3BBB(
																													operand,
																													combo,
																													parentCombo) == null) {
																												if (pattern_AltUserStepNFToComboRule_43_2_black_nac_10BB(
																														operand,
																														combo) == null) {
																													if (pattern_AltUserStepNFToComboRule_43_2_black_nac_11BB(
																															parentOperand,
																															combo) == null) {
																														if (pattern_AltUserStepNFToComboRule_43_2_black_nac_13BB(
																																combo,
																																operand) == null) {
																															for (InteractionFragment tmpMessageSend : sysLine
																																	.getCoveredBy()) {
																																if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
																																	MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
																																	if (pattern_AltUserStepNFToComboRule_43_2_black_nac_0B(messageSend) == null) {
																																		if (pattern_AltUserStepNFToComboRule_43_2_black_nac_1BB(
																																				messageSend,
																																				interaction) == null) {
																																			if (pattern_AltUserStepNFToComboRule_43_2_black_nac_7BB(
																																					messageSend,
																																					interaction) == null) {
																																				if (pattern_AltUserStepNFToComboRule_43_2_black_nac_8BB(
																																						operand,
																																						messageSend) == null) {
																																					if (pattern_AltUserStepNFToComboRule_43_2_black_nac_9BB(
																																							parentOperand,
																																							messageSend) == null) {
																																						for (InteractionFragment tmpMessageReceive : parentOperand
																																								.getFragment()) {
																																							if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																																								MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																																								if (!messageReceive
																																										.equals(messageSend)) {
																																									if (pattern_AltUserStepNFToComboRule_43_2_black_nac_4B(messageReceive) == null) {
																																										if (pattern_AltUserStepNFToComboRule_43_2_black_nac_5BB(
																																												messageReceive,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_43_2_black_nac_15BB(
																																													messageReceive,
																																													interaction) == null) {
																																												if (pattern_AltUserStepNFToComboRule_43_2_black_nac_16BB(
																																														operand,
																																														messageReceive) == null) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_covered });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}

						}

					}

				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_43_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_43_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_43_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_43_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_44_1_binding = pattern_AltUserStepNFToComboRule_44_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_44_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_44_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_44_1_black = pattern_AltUserStepNFToComboRule_44_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_44_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_44_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_484387 = messageSend.getMessage();
		if (__DEC_messageSend_message_484387 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_730402 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_730402 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_730402)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_182090 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_182090 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_182090)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_95825 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_95825)) {
					if (!parentCombo.equals(__DEC_operand_operand_95825)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_77602 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_77602 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_465122 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_465122 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_465122)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_548660 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_548660)) {
					if (!parentOperand.equals(__DEC_guard_guard_548660)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_44_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_guard) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpOperand = _edge_guard.getSrc();
		if (tmpOperand instanceof InteractionOperand) {
			InteractionOperand operand = (InteractionOperand) tmpOperand;
			EObject tmpGuard = _edge_guard.getTrg();
			if (tmpGuard instanceof InteractionConstraint) {
				InteractionConstraint guard = (InteractionConstraint) tmpGuard;
				if (guard.equals(operand.getGuard())) {
					ValueSpecification tmpSpec = guard.getSpecification();
					if (tmpSpec instanceof LiteralString) {
						LiteralString spec = (LiteralString) tmpSpec;
						for (Lifeline sysLine : operand.getCovered()) {
							for (Lifeline line : operand.getCovered()) {
								if (!line.equals(sysLine)) {
									Interaction interaction = line
											.getInteraction();
									if (interaction != null) {
										if (pattern_AltUserStepNFToComboRule_44_2_black_nac_2BB(
												operand, interaction) == null) {
											if (pattern_AltUserStepNFToComboRule_44_2_black_nac_12BB(
													operand, interaction) == null) {
												for (InteractionFragment tmpMessageSend : sysLine
														.getCoveredBy()) {
													if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
														MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
														if (pattern_AltUserStepNFToComboRule_44_2_black_nac_0B(messageSend) == null) {
															if (pattern_AltUserStepNFToComboRule_44_2_black_nac_1BB(
																	messageSend,
																	interaction) == null) {
																if (pattern_AltUserStepNFToComboRule_44_2_black_nac_7BB(
																		messageSend,
																		interaction) == null) {
																	if (pattern_AltUserStepNFToComboRule_44_2_black_nac_8BB(
																			operand,
																			messageSend) == null) {
																		for (InteractionFragment tmpCombo : sysLine
																				.getCoveredBy()) {
																			if (tmpCombo instanceof CombinedFragment) {
																				CombinedFragment combo = (CombinedFragment) tmpCombo;
																				if (interaction
																						.equals(combo
																								.getEnclosingInteraction())) {
																					if (pattern_AltUserStepNFToComboRule_44_2_black_nac_10BB(
																							operand,
																							combo) == null) {
																						if (pattern_AltUserStepNFToComboRule_44_2_black_nac_13BB(
																								combo,
																								operand) == null) {
																							for (InteractionFragment tmpParentOperand : sysLine
																									.getCoveredBy()) {
																								if (tmpParentOperand instanceof InteractionOperand) {
																									InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
																									if (!operand
																											.equals(parentOperand)) {
																										if (line.getCoveredBy()
																												.contains(
																														parentOperand)) {
																											if (pattern_AltUserStepNFToComboRule_44_2_black_nac_6BBB(
																													guard,
																													operand,
																													parentOperand) == null) {
																												if (pattern_AltUserStepNFToComboRule_44_2_black_nac_9BB(
																														parentOperand,
																														messageSend) == null) {
																													if (pattern_AltUserStepNFToComboRule_44_2_black_nac_11BB(
																															parentOperand,
																															combo) == null) {
																														if (pattern_AltUserStepNFToComboRule_44_2_black_nac_17BB(
																																parentOperand,
																																guard) == null) {
																															for (InteractionFragment tmpParentCombo : sysLine
																																	.getCoveredBy()) {
																																if (tmpParentCombo instanceof CombinedFragment) {
																																	CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
																																	if (!combo
																																			.equals(parentCombo)) {
																																		if (parentCombo
																																				.getOperand()
																																				.contains(
																																						parentOperand)) {
																																			if (line.getCoveredBy()
																																					.contains(
																																							parentCombo)) {
																																				if (pattern_AltUserStepNFToComboRule_44_2_black_nac_3BBB(
																																						operand,
																																						combo,
																																						parentCombo) == null) {
																																					if (pattern_AltUserStepNFToComboRule_44_2_black_nac_14BB(
																																							parentCombo,
																																							operand) == null) {
																																						for (InteractionFragment tmpMessageReceive : parentOperand
																																								.getFragment()) {
																																							if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																																								MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																																								if (!messageReceive
																																										.equals(messageSend)) {
																																									if (pattern_AltUserStepNFToComboRule_44_2_black_nac_4B(messageReceive) == null) {
																																										if (pattern_AltUserStepNFToComboRule_44_2_black_nac_5BB(
																																												messageReceive,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_44_2_black_nac_15BB(
																																													messageReceive,
																																													interaction) == null) {
																																												if (pattern_AltUserStepNFToComboRule_44_2_black_nac_16BB(
																																														operand,
																																														messageReceive) == null) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_guard });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}

								}
							}
						}
					}

				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_44_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_44_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_44_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_44_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_1_bindingFB(
			AltUserStepNFToComboRule _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_1_blackFBB(
			EClass __eClass, AltUserStepNFToComboRule _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperationname = __performOperation.getName();
			if (__performOperationname.equals("isApplicable_BWD")) {
				return new Object[] { __performOperation, __eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_1_bindingAndBlackFFB(
			AltUserStepNFToComboRule _this) {
		Object[] result_pattern_AltUserStepNFToComboRule_45_1_binding = pattern_AltUserStepNFToComboRule_45_1_bindingFB(_this);
		if (result_pattern_AltUserStepNFToComboRule_45_1_binding != null) {
			EClass __eClass = (EClass) result_pattern_AltUserStepNFToComboRule_45_1_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_45_1_black = pattern_AltUserStepNFToComboRule_45_1_blackFBB(
					__eClass, _this);
			if (result_pattern_AltUserStepNFToComboRule_45_1_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_AltUserStepNFToComboRule_45_1_black[0];

				return new Object[] { __performOperation, __eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_1_greenF() {
		EObjectContainer __result = TGGRuntimeFactory.eINSTANCE
				.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_0B(
			MessageOccurrenceSpecification messageSend) {
		Message __DEC_messageSend_message_434120 = messageSend.getMessage();
		if (__DEC_messageSend_message_434120 != null) {
			return new Object[] { messageSend };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_1BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		Interaction __DEC_messageSend_enclosingInteraction_989652 = messageSend
				.getEnclosingInteraction();
		if (__DEC_messageSend_enclosingInteraction_989652 != null) {
			if (!interaction
					.equals(__DEC_messageSend_enclosingInteraction_989652)) {
				return new Object[] { messageSend, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_2BB(
			InteractionOperand operand, Interaction interaction) {
		Interaction __DEC_operand_enclosingInteraction_880062 = operand
				.getEnclosingInteraction();
		if (__DEC_operand_enclosingInteraction_880062 != null) {
			if (!interaction.equals(__DEC_operand_enclosingInteraction_880062)) {
				return new Object[] { operand, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_3BBB(
			InteractionOperand operand, CombinedFragment combo,
			CombinedFragment parentCombo) {
		if (!combo.equals(parentCombo)) {
			for (CombinedFragment __DEC_operand_operand_751947 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(operand, CombinedFragment.class,
							"operand")) {
				if (!combo.equals(__DEC_operand_operand_751947)) {
					if (!parentCombo.equals(__DEC_operand_operand_751947)) {
						return new Object[] { operand, combo, parentCombo };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_4B(
			MessageOccurrenceSpecification messageReceive) {
		Message __DEC_messageReceive_message_518827 = messageReceive
				.getMessage();
		if (__DEC_messageReceive_message_518827 != null) {
			return new Object[] { messageReceive };
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_5BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		Interaction __DEC_messageReceive_enclosingInteraction_287147 = messageReceive
				.getEnclosingInteraction();
		if (__DEC_messageReceive_enclosingInteraction_287147 != null) {
			if (!interaction
					.equals(__DEC_messageReceive_enclosingInteraction_287147)) {
				return new Object[] { messageReceive, interaction };
			}
		}

		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_6BBB(
			InteractionConstraint guard, InteractionOperand operand,
			InteractionOperand parentOperand) {
		if (!operand.equals(parentOperand)) {
			for (InteractionOperand __DEC_guard_guard_462813 : org.moflon.util.eMoflonEMFUtil
					.getOppositeReferenceTyped(guard, InteractionOperand.class,
							"guard")) {
				if (!operand.equals(__DEC_guard_guard_462813)) {
					if (!parentOperand.equals(__DEC_guard_guard_462813)) {
						return new Object[] { guard, operand, parentOperand };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_7BB(
			MessageOccurrenceSpecification messageSend, Interaction interaction) {
		if (interaction.equals(messageSend.getEnclosingInteraction())) {
			return new Object[] { messageSend, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_8BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageSend) {
		if (operand.getFragment().contains(messageSend)) {
			return new Object[] { operand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_9BB(
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend) {
		if (parentOperand.getFragment().contains(messageSend)) {
			return new Object[] { parentOperand, messageSend };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_10BB(
			InteractionOperand operand, CombinedFragment combo) {
		if (operand.getFragment().contains(combo)) {
			return new Object[] { operand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_11BB(
			InteractionOperand parentOperand, CombinedFragment combo) {
		if (parentOperand.getFragment().contains(combo)) {
			return new Object[] { parentOperand, combo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_12BB(
			InteractionOperand operand, Interaction interaction) {
		if (interaction.equals(operand.getEnclosingInteraction())) {
			return new Object[] { operand, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_13BB(
			CombinedFragment combo, InteractionOperand operand) {
		if (combo.getOperand().contains(operand)) {
			return new Object[] { combo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_14BB(
			CombinedFragment parentCombo, InteractionOperand operand) {
		if (parentCombo.getOperand().contains(operand)) {
			return new Object[] { parentCombo, operand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_15BB(
			MessageOccurrenceSpecification messageReceive,
			Interaction interaction) {
		if (interaction.equals(messageReceive.getEnclosingInteraction())) {
			return new Object[] { messageReceive, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_16BB(
			InteractionOperand operand,
			MessageOccurrenceSpecification messageReceive) {
		if (operand.getFragment().contains(messageReceive)) {
			return new Object[] { operand, messageReceive };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_black_nac_17BB(
			InteractionOperand parentOperand, InteractionConstraint guard) {
		if (guard.equals(parentOperand.getGuard())) {
			return new Object[] { parentOperand, guard };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_45_2_blackFFFFFFFFFFFB(
			EMoflonEdge _edge_specification) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpGuard = _edge_specification.getSrc();
		if (tmpGuard instanceof InteractionConstraint) {
			InteractionConstraint guard = (InteractionConstraint) tmpGuard;
			EObject tmpSpec = _edge_specification.getTrg();
			if (tmpSpec instanceof LiteralString) {
				LiteralString spec = (LiteralString) tmpSpec;
				if (spec.equals(guard.getSpecification())) {
					for (InteractionOperand operand : org.moflon.util.eMoflonEMFUtil
							.getOppositeReferenceTyped(guard,
									InteractionOperand.class, "guard")) {
						for (Lifeline sysLine : operand.getCovered()) {
							for (Lifeline line : operand.getCovered()) {
								if (!line.equals(sysLine)) {
									Interaction interaction = line
											.getInteraction();
									if (interaction != null) {
										if (pattern_AltUserStepNFToComboRule_45_2_black_nac_2BB(
												operand, interaction) == null) {
											if (pattern_AltUserStepNFToComboRule_45_2_black_nac_12BB(
													operand, interaction) == null) {
												for (InteractionFragment tmpMessageSend : sysLine
														.getCoveredBy()) {
													if (tmpMessageSend instanceof MessageOccurrenceSpecification) {
														MessageOccurrenceSpecification messageSend = (MessageOccurrenceSpecification) tmpMessageSend;
														if (pattern_AltUserStepNFToComboRule_45_2_black_nac_0B(messageSend) == null) {
															if (pattern_AltUserStepNFToComboRule_45_2_black_nac_1BB(
																	messageSend,
																	interaction) == null) {
																if (pattern_AltUserStepNFToComboRule_45_2_black_nac_7BB(
																		messageSend,
																		interaction) == null) {
																	if (pattern_AltUserStepNFToComboRule_45_2_black_nac_8BB(
																			operand,
																			messageSend) == null) {
																		for (InteractionFragment tmpCombo : sysLine
																				.getCoveredBy()) {
																			if (tmpCombo instanceof CombinedFragment) {
																				CombinedFragment combo = (CombinedFragment) tmpCombo;
																				if (interaction
																						.equals(combo
																								.getEnclosingInteraction())) {
																					if (pattern_AltUserStepNFToComboRule_45_2_black_nac_10BB(
																							operand,
																							combo) == null) {
																						if (pattern_AltUserStepNFToComboRule_45_2_black_nac_13BB(
																								combo,
																								operand) == null) {
																							for (InteractionFragment tmpParentOperand : sysLine
																									.getCoveredBy()) {
																								if (tmpParentOperand instanceof InteractionOperand) {
																									InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
																									if (!operand
																											.equals(parentOperand)) {
																										if (line.getCoveredBy()
																												.contains(
																														parentOperand)) {
																											if (pattern_AltUserStepNFToComboRule_45_2_black_nac_6BBB(
																													guard,
																													operand,
																													parentOperand) == null) {
																												if (pattern_AltUserStepNFToComboRule_45_2_black_nac_9BB(
																														parentOperand,
																														messageSend) == null) {
																													if (pattern_AltUserStepNFToComboRule_45_2_black_nac_11BB(
																															parentOperand,
																															combo) == null) {
																														if (pattern_AltUserStepNFToComboRule_45_2_black_nac_17BB(
																																parentOperand,
																																guard) == null) {
																															for (InteractionFragment tmpParentCombo : sysLine
																																	.getCoveredBy()) {
																																if (tmpParentCombo instanceof CombinedFragment) {
																																	CombinedFragment parentCombo = (CombinedFragment) tmpParentCombo;
																																	if (!combo
																																			.equals(parentCombo)) {
																																		if (parentCombo
																																				.getOperand()
																																				.contains(
																																						parentOperand)) {
																																			if (line.getCoveredBy()
																																					.contains(
																																							parentCombo)) {
																																				if (pattern_AltUserStepNFToComboRule_45_2_black_nac_3BBB(
																																						operand,
																																						combo,
																																						parentCombo) == null) {
																																					if (pattern_AltUserStepNFToComboRule_45_2_black_nac_14BB(
																																							parentCombo,
																																							operand) == null) {
																																						for (InteractionFragment tmpMessageReceive : parentOperand
																																								.getFragment()) {
																																							if (tmpMessageReceive instanceof MessageOccurrenceSpecification) {
																																								MessageOccurrenceSpecification messageReceive = (MessageOccurrenceSpecification) tmpMessageReceive;
																																								if (!messageReceive
																																										.equals(messageSend)) {
																																									if (pattern_AltUserStepNFToComboRule_45_2_black_nac_4B(messageReceive) == null) {
																																										if (pattern_AltUserStepNFToComboRule_45_2_black_nac_5BB(
																																												messageReceive,
																																												interaction) == null) {
																																											if (pattern_AltUserStepNFToComboRule_45_2_black_nac_15BB(
																																													messageReceive,
																																													interaction) == null) {
																																												if (pattern_AltUserStepNFToComboRule_45_2_black_nac_16BB(
																																														operand,
																																														messageReceive) == null) {
																																													_result.add(new Object[] {
																																															sysLine,
																																															messageSend,
																																															combo,
																																															operand,
																																															parentOperand,
																																															parentCombo,
																																															messageReceive,
																																															line,
																																															interaction,
																																															guard,
																																															spec,
																																															_edge_specification });
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}

								}
							}
						}
					}
				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_2_greenFB(
			EClass __eClass) {
		Match match = TGGRuntimeFactory.eINSTANCE.createMatch();
		String __eClassname = __eClass.getName();
		String match_ruleName_prime = __eClassname;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_AltUserStepNFToComboRule_45_3_expressionFBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this, Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, sysLine,
				messageSend, combo, operand, parentOperand, parentCombo,
				messageReceive, line, interaction, guard, spec);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_45_4_expressionFBB(
			AltUserStepNFToComboRule _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_5_blackBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		return new Object[] { match, __performOperation, __result };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_45_5_greenBBB(
			Match match, EOperation __performOperation,
			EObjectContainer __result) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		return new Object[] { match, __performOperation, __result };
	}

	public static final EObjectContainer pattern_AltUserStepNFToComboRule_45_6_expressionFB(
			EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_1_blackB(
			AltUserStepNFToComboRule _this) {
		return new Object[] { _this };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_1_greenFF() {
		IsApplicableMatch isApplicableMatch = TGGRuntimeFactory.eINSTANCE
				.createIsApplicableMatch();
		ModelgeneratorRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE
				.createModelgeneratorRuleResult();
		boolean ruleResult_success_prime = false;
		ruleResult.setSuccess(Boolean.valueOf(ruleResult_success_prime));
		return new Object[] { isApplicableMatch, ruleResult };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_2_black_nac_0BB(
			ModelgeneratorRuleResult ruleResult,
			PackageDeclaration packageDeclaration) {
		if (ruleResult.getSourceObjects().contains(packageDeclaration)) {
			return new Object[] { ruleResult, packageDeclaration };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_2_black_nac_1BB(
			ModelgeneratorRuleResult ruleResult, Actor actor) {
		if (ruleResult.getSourceObjects().contains(actor)) {
			return new Object[] { ruleResult, actor };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_2_black_nac_2BB(
			ModelgeneratorRuleResult ruleResult, ActorToLifeline actorToLine) {
		if (ruleResult.getCorrObjects().contains(actorToLine)) {
			return new Object[] { ruleResult, actorToLine };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_2_black_nac_3BB(
			ModelgeneratorRuleResult ruleResult, Lifeline line) {
		if (ruleResult.getTargetObjects().contains(line)) {
			return new Object[] { ruleResult, line };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_2_black_nac_4BB(
			ModelgeneratorRuleResult ruleResult, Interaction interaction) {
		if (ruleResult.getTargetObjects().contains(interaction)) {
			return new Object[] { ruleResult, interaction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_2_black_nac_5BB(
			ModelgeneratorRuleResult ruleResult,
			UseCaseToInteraction useCaseToInteraction) {
		if (ruleResult.getCorrObjects().contains(useCaseToInteraction)) {
			return new Object[] { ruleResult, useCaseToInteraction };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_2_black_nac_6BB(
			ModelgeneratorRuleResult ruleResult, UseCase useCase) {
		if (ruleResult.getSourceObjects().contains(useCase)) {
			return new Object[] { ruleResult, useCase };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_2_black_nac_7BB(
			ModelgeneratorRuleResult ruleResult, NamedFlow flow) {
		if (ruleResult.getSourceObjects().contains(flow)) {
			return new Object[] { ruleResult, flow };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_2_black_nac_8BB(
			ModelgeneratorRuleResult ruleResult,
			FlowToInteractionFragment flowToParentOperand) {
		if (ruleResult.getCorrObjects().contains(flowToParentOperand)) {
			return new Object[] { ruleResult, flowToParentOperand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_2_black_nac_9BB(
			ModelgeneratorRuleResult ruleResult,
			InteractionOperand parentOperand) {
		if (ruleResult.getTargetObjects().contains(parentOperand)) {
			return new Object[] { ruleResult, parentOperand };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_2_black_nac_10BB(
			ModelgeneratorRuleResult ruleResult, CombinedFragment parentCombo) {
		if (ruleResult.getTargetObjects().contains(parentCombo)) {
			return new Object[] { ruleResult, parentCombo };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_2_black_nac_11BB(
			ModelgeneratorRuleResult ruleResult, Actor sysActor) {
		if (ruleResult.getSourceObjects().contains(sysActor)) {
			return new Object[] { ruleResult, sysActor };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_2_black_nac_12BB(
			ModelgeneratorRuleResult ruleResult,
			ActorToLifeline sysActorToSysLine) {
		if (ruleResult.getCorrObjects().contains(sysActorToSysLine)) {
			return new Object[] { ruleResult, sysActorToSysLine };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_2_black_nac_13BB(
			ModelgeneratorRuleResult ruleResult, Lifeline sysLine) {
		if (ruleResult.getTargetObjects().contains(sysLine)) {
			return new Object[] { ruleResult, sysLine };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_AltUserStepNFToComboRule_48_2_blackFFFFFFFFFFFFFFFBB(
			RuleEntryContainer ruleEntryContainer,
			ModelgeneratorRuleResult ruleResult) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		for (RuleEntryList actorToLineList : ruleEntryContainer
				.getRuleEntryList()) {
			for (EObject tmpActorToLine : actorToLineList.getEntryObjects()) {
				if (tmpActorToLine instanceof ActorToLifeline) {
					ActorToLifeline actorToLine = (ActorToLifeline) tmpActorToLine;
					Actor actor = actorToLine.getSource();
					if (actor != null) {
						Lifeline line = actorToLine.getTarget();
						if (line != null) {
							Interaction interaction = line.getInteraction();
							if (interaction != null) {
								if (pattern_AltUserStepNFToComboRule_48_2_black_nac_2BB(
										ruleResult, actorToLine) == null) {
									if (pattern_AltUserStepNFToComboRule_48_2_black_nac_1BB(
											ruleResult, actor) == null) {
										if (pattern_AltUserStepNFToComboRule_48_2_black_nac_3BB(
												ruleResult, line) == null) {
											if (pattern_AltUserStepNFToComboRule_48_2_black_nac_4BB(
													ruleResult, interaction) == null) {
												for (PackageDeclaration packageDeclaration : org.moflon.util.eMoflonEMFUtil
														.getOppositeReferenceTyped(
																actor,
																PackageDeclaration.class,
																"actors")) {
													if (pattern_AltUserStepNFToComboRule_48_2_black_nac_0BB(
															ruleResult,
															packageDeclaration) == null) {
														for (UseCase useCase : packageDeclaration
																.getUseCases()) {
															if (pattern_AltUserStepNFToComboRule_48_2_black_nac_6BB(
																	ruleResult,
																	useCase) == null) {
																for (Actor sysActor : packageDeclaration
																		.getActors()) {
																	if (!actor
																			.equals(sysActor)) {
																		if (pattern_AltUserStepNFToComboRule_48_2_black_nac_11BB(
																				ruleResult,
																				sysActor) == null) {
																			for (Flow tmpFlow : useCase
																					.getFlows()) {
																				if (tmpFlow instanceof NamedFlow) {
																					NamedFlow flow = (NamedFlow) tmpFlow;
																					if (pattern_AltUserStepNFToComboRule_48_2_black_nac_7BB(
																							ruleResult,
																							flow) == null) {
																						for (UseCaseToInteraction useCaseToInteraction : org.moflon.util.eMoflonEMFUtil
																								.getOppositeReferenceTyped(
																										interaction,
																										UseCaseToInteraction.class,
																										"target")) {
																							if (useCase
																									.equals(useCaseToInteraction
																											.getSource())) {
																								if (pattern_AltUserStepNFToComboRule_48_2_black_nac_5BB(
																										ruleResult,
																										useCaseToInteraction) == null) {
																									for (ActorToLifeline sysActorToSysLine : org.moflon.util.eMoflonEMFUtil
																											.getOppositeReferenceTyped(
																													sysActor,
																													ActorToLifeline.class,
																													"source")) {
																										if (!actorToLine
																												.equals(sysActorToSysLine)) {
																											Lifeline sysLine = sysActorToSysLine
																													.getTarget();
																											if (sysLine != null) {
																												if (!line
																														.equals(sysLine)) {
																													if (pattern_AltUserStepNFToComboRule_48_2_black_nac_12BB(
																															ruleResult,
																															sysActorToSysLine) == null) {
																														if (pattern_AltUserStepNFToComboRule_48_2_black_nac_13BB(
																																ruleResult,
																																sysLine) == null) {
																															for (FlowToInteractionFragment flowToParentOperand : org.moflon.util.eMoflonEMFUtil
																																	.getOppositeReferenceTyped(
																																			flow,
																																			FlowToInteractionFragment.class,
																																			"source")) {
																																InteractionFragment tmpParentOperand = flowToParentOperand
																																		.getTarget();
																																if (tmpParentOperand instanceof InteractionOperand) {
																																	InteractionOperand parentOperand = (InteractionOperand) tmpParentOperand;
																																	if (pattern_AltUserStepNFToComboRule_48_2_black_nac_8BB(
																																			ruleResult,
																																			flowToParentOperand) == null) {
																																		if (pattern_AltUserStepNFToComboRule_48_2_black_nac_9BB(
																																				ruleResult,
																																				parentOperand) == null) {
																																			for (CombinedFragment parentCombo : org.moflon.util.eMoflonEMFUtil
																																					.getOppositeReferenceTyped(
																																							parentOperand,
																																							CombinedFragment.class,
																																							"operand")) {
																																				if (pattern_AltUserStepNFToComboRule_48_2_black_nac_10BB(
																																						ruleResult,
																																						parentCombo) == null) {
																																					_result.add(new Object[] {
																																							actorToLineList,
																																							packageDeclaration,
																																							actor,
																																							actorToLine,
																																							line,
																																							interaction,
																																							useCaseToInteraction,
																																							useCase,
																																							flow,
																																							flowToParentOperand,
																																							parentOperand,
																																							parentCombo,
																																							sysActor,
																																							sysActorToSysLine,
																																							sysLine,
																																							ruleEntryContainer,
																																							ruleResult });
																																				}
																																			}
																																		}
																																	}
																																}

																															}
																														}
																													}
																												}
																											}

																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}

						}

					}

				}
			}
		}
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_3_bindingFBBBBBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this,
			IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			InteractionOperand parentOperand, CombinedFragment parentCombo,
			NamedFlow flow, FlowToInteractionFragment flowToParentOperand,
			Lifeline line, Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, ModelgeneratorRuleResult ruleResult) {
		CSP _localVariable_0 = _this.generateModel_solveCsp_BWD(
				isApplicableMatch, packageDeclaration, actor, sysActor,
				sysLine, sysActorToSysLine, parentOperand, parentCombo, flow,
				flowToParentOperand, line, interaction, useCase,
				useCaseToInteraction, actorToLine, ruleResult);
		CSP csp = _localVariable_0;
		if (csp != null) {
			return new Object[] { csp, _this, isApplicableMatch,
					packageDeclaration, actor, sysActor, sysLine,
					sysActorToSysLine, parentOperand, parentCombo, flow,
					flowToParentOperand, line, interaction, useCase,
					useCaseToInteraction, actorToLine, ruleResult };
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_3_blackB(
			CSP csp) {
		return new Object[] { csp };
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_3_bindingAndBlackFBBBBBBBBBBBBBBBBB(
			AltUserStepNFToComboRule _this,
			IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			InteractionOperand parentOperand, CombinedFragment parentCombo,
			NamedFlow flow, FlowToInteractionFragment flowToParentOperand,
			Lifeline line, Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, ModelgeneratorRuleResult ruleResult) {
		Object[] result_pattern_AltUserStepNFToComboRule_48_3_binding = pattern_AltUserStepNFToComboRule_48_3_bindingFBBBBBBBBBBBBBBBBB(
				_this, isApplicableMatch, packageDeclaration, actor, sysActor,
				sysLine, sysActorToSysLine, parentOperand, parentCombo, flow,
				flowToParentOperand, line, interaction, useCase,
				useCaseToInteraction, actorToLine, ruleResult);
		if (result_pattern_AltUserStepNFToComboRule_48_3_binding != null) {
			CSP csp = (CSP) result_pattern_AltUserStepNFToComboRule_48_3_binding[0];

			Object[] result_pattern_AltUserStepNFToComboRule_48_3_black = pattern_AltUserStepNFToComboRule_48_3_blackB(csp);
			if (result_pattern_AltUserStepNFToComboRule_48_3_black != null) {

				return new Object[] { csp, _this, isApplicableMatch,
						packageDeclaration, actor, sysActor, sysLine,
						sysActorToSysLine, parentOperand, parentCombo, flow,
						flowToParentOperand, line, interaction, useCase,
						useCaseToInteraction, actorToLine, ruleResult };
			}
		}
		return null;
	}

	public static final boolean pattern_AltUserStepNFToComboRule_48_4_expressionFBB(
			AltUserStepNFToComboRule _this, CSP csp) {
		boolean _localVariable_0 = _this.generateModel_checkCsp_BWD(csp);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_5_blackBBBBBBBBBBBBBB(
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			InteractionOperand parentOperand, CombinedFragment parentCombo,
			NamedFlow flow, FlowToInteractionFragment flowToParentOperand,
			Lifeline line, Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine) {
		if (!actor.equals(sysActor)) {
			if (!line.equals(sysLine)) {
				if (!actorToLine.equals(sysActorToSysLine)) {
					return new Object[] { packageDeclaration, actor, sysActor,
							sysLine, sysActorToSysLine, parentOperand,
							parentCombo, flow, flowToParentOperand, line,
							interaction, useCase, useCaseToInteraction,
							actorToLine };
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_6_blackBBBBBBBBBBBBBBB(
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			InteractionOperand parentOperand, CombinedFragment parentCombo,
			NamedFlow flow, FlowToInteractionFragment flowToParentOperand,
			Lifeline line, Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, ModelgeneratorRuleResult ruleResult) {
		if (!actor.equals(sysActor)) {
			if (!line.equals(sysLine)) {
				if (!actorToLine.equals(sysActorToSysLine)) {
					return new Object[] { packageDeclaration, actor, sysActor,
							sysLine, sysActorToSysLine, parentOperand,
							parentCombo, flow, flowToParentOperand, line,
							interaction, useCase, useCaseToInteraction,
							actorToLine, ruleResult };
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_AltUserStepNFToComboRule_48_6_greenBBFFFBBBFBBFFFFFFFFBB(
			Actor actor, Lifeline sysLine, InteractionOperand parentOperand,
			CombinedFragment parentCombo, NamedFlow flow, Lifeline line,
			Interaction interaction, ModelgeneratorRuleResult ruleResult,
			CSP csp) {
		MessageOccurrenceSpecification messageSend = ModalSequenceDiagramFactory.eINSTANCE
				.createMessageOccurrenceSpecification();
		CombinedFragment combo = ModalSequenceDiagramFactory.eINSTANCE
				.createCombinedFragment();
		InteractionOperand operand = ModalSequenceDiagramFactory.eINSTANCE
				.createInteractionOperand();
		MessageOccurrenceSpecification messageReceive = ModalSequenceDiagramFactory.eINSTANCE
				.createMessageOccurrenceSpecification();
		NormalStep step = UseCaseDSLFactory.eINSTANCE.createNormalStep();
		AlternativeFlowAlternative alt = UseCaseDSLFactory.eINSTANCE
				.createAlternativeFlowAlternative();
		NormalStepToCombinedFragment stepToCombo = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
				.createNormalStepToCombinedFragment();
		StepAlternativeToInteractionOperand alternative1ToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
				.createStepAlternativeToInteractionOperand();
		InteractionConstraint guard = ModalSequenceDiagramFactory.eINSTANCE
				.createInteractionConstraint();
		LiteralString spec = ModalSequenceDiagramFactory.eINSTANCE
				.createLiteralString();
		AlternativeFlow altFlow = UseCaseDSLFactory.eINSTANCE
				.createAlternativeFlow();
		FlowToInteractionFragment altFlowToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
				.createFlowToInteractionFragment();
		sysLine.getCoveredBy().add(parentOperand);
		sysLine.getCoveredBy().add(parentCombo);
		line.getCoveredBy().add(parentOperand);
		line.getCoveredBy().add(parentCombo);
		Object _localVariable_0 = csp.getValue("combo", "interactionOperator");
		Object _localVariable_1 = csp.getValue("step", "type");
		Object _localVariable_2 = csp.getValue("alt", "condition");
		Object _localVariable_3 = csp.getValue("guard", "name");
		Object _localVariable_4 = csp.getValue("spec", "value");
		Object _localVariable_5 = csp.getValue("altFlow", "name");
		boolean ruleResult_success_prime = Boolean.valueOf(true);
		int _localVariable_6 = ruleResult.getIncrementedPerformCount();
		sysLine.getCoveredBy().add(messageSend);
		ruleResult.getTargetObjects().add(messageSend);
		sysLine.getCoveredBy().add(combo);
		combo.setEnclosingInteraction(interaction);
		ruleResult.getTargetObjects().add(combo);
		sysLine.getCoveredBy().add(operand);
		line.getCoveredBy().add(operand);
		ruleResult.getTargetObjects().add(operand);
		parentOperand.getFragment().add(messageReceive);
		ruleResult.getTargetObjects().add(messageReceive);
		flow.getSteps().add(step);
		step.setActor(actor);
		ruleResult.getSourceObjects().add(step);
		step.getStepAlternative().add(alt);
		ruleResult.getSourceObjects().add(alt);
		stepToCombo.setSource(step);
		stepToCombo.setTarget(combo);
		ruleResult.getCorrObjects().add(stepToCombo);
		alternative1ToOperand.setSource(alt);
		alternative1ToOperand.setTarget(operand);
		ruleResult.getCorrObjects().add(alternative1ToOperand);
		operand.setGuard(guard);
		ruleResult.getTargetObjects().add(guard);
		guard.setSpecification(spec);
		ruleResult.getTargetObjects().add(spec);
		alt.setRef(altFlow);
		ruleResult.getSourceObjects().add(altFlow);
		altFlowToOperand.setSource(altFlow);
		altFlowToOperand.setTarget(operand);
		ruleResult.getCorrObjects().add(altFlowToOperand);
		InteractionOperatorKind combo_interactionOperator_prime = (InteractionOperatorKind) _localVariable_0;
		StepType step_type_prime = (StepType) _localVariable_1;
		String alt_condition_prime = (String) _localVariable_2;
		String guard_name_prime = (String) _localVariable_3;
		String spec_value_prime = (String) _localVariable_4;
		String altFlow_name_prime = (String) _localVariable_5;
		ruleResult.setSuccess(Boolean.valueOf(ruleResult_success_prime));
		int ruleResult_performCount_prime = Integer.valueOf(_localVariable_6);
		combo.setInteractionOperator(combo_interactionOperator_prime);
		step.setType(step_type_prime);
		alt.setCondition(alt_condition_prime);
		guard.setName(guard_name_prime);
		spec.setValue(spec_value_prime);
		altFlow.setName(altFlow_name_prime);
		ruleResult.setPerformCount(Integer
				.valueOf(ruleResult_performCount_prime));
		return new Object[] { actor, sysLine, messageSend, combo, operand,
				parentOperand, parentCombo, flow, messageReceive, line,
				interaction, step, alt, stepToCombo, alternative1ToOperand,
				guard, spec, altFlow, altFlowToOperand, ruleResult, csp };
	}

	public static final ModelgeneratorRuleResult pattern_AltUserStepNFToComboRule_48_7_expressionFB(
			ModelgeneratorRuleResult ruleResult) {
		ModelgeneratorRuleResult _result = ruleResult;
		return _result;
	}

	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} //AltUserStepNFToComboRuleImpl
