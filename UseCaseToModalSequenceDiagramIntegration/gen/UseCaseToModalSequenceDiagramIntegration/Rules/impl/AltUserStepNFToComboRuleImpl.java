/**
 */
package UseCaseToModalSequenceDiagramIntegration.Rules.impl;

import ModalSequenceDiagram.CombinedFragment;
import ModalSequenceDiagram.Constraint;
import ModalSequenceDiagram.Interaction;
import ModalSequenceDiagram.InteractionConstraint;
import ModalSequenceDiagram.InteractionOperand;
import ModalSequenceDiagram.Lifeline;
import ModalSequenceDiagram.LiteralString;
import ModalSequenceDiagram.Message;
import ModalSequenceDiagram.MessageEnd;
import ModalSequenceDiagram.MessageOccurrenceSpecification;
import ModalSequenceDiagram.ModalSequenceDiagramFactory;
import ModalSequenceDiagram.Model;

import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import TGGRuntime.impl.AbstractRuleImpl;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NamedFlow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import UseCaseToModalSequenceDiagramIntegration.ActorToLifeline;
import UseCaseToModalSequenceDiagramIntegration.FlowToInteractionFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToMessage;
import UseCaseToModalSequenceDiagramIntegration.PackageDeclarationToPackage;
import UseCaseToModalSequenceDiagramIntegration.ParallelStepToCombinedFragment;

import UseCaseToModalSequenceDiagramIntegration.Rules.AltStepNFToComboRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.AltStepToComboRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.AltUserStepNFToComboRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.NormalStepToMessageRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.RulesPackage;

import UseCaseToModalSequenceDiagramIntegration.StepAlternativeToInteractionOperand;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToInteraction;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToModalSequenceDiagramIntegrationFactory;
import UseCaseToModalSequenceDiagramIntegration.UseCasesModelToModel;

import de.upb.tools.sdm.*;

import java.lang.reflect.InvocationTargetException;

import java.util.*;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
import org.moflon.csp.*;
import csp.constraints.*;
import TGGLanguage.csp.*;

// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Alt User Step NF To Combo Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * </p>
 *
 * @generated
 */
public class AltUserStepNFToComboRuleImpl extends AbstractRuleImpl implements
		AltUserStepNFToComboRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AltUserStepNFToComboRuleImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return RulesPackage.eINSTANCE.getAltUserStepNFToComboRule();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __packageDeclaration_actors_actor = null;
		EMoflonEdge __packageDeclaration_actors_sysActor = null;
		EMoflonEdge __useCase_flows_flow = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object sysActor is really bound
			JavaSDM.ensure(sysActor != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_FWD(match,
					packageDeclaration, actor, sysActor, flow, step, alt,
					altFlow, useCase));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object sysActor is really bound
				JavaSDM.ensure(sysActor != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects sysActor and actor 
				JavaSDM.ensure(!sysActor.equals(actor));

				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __flow_steps_step
				__flow_steps_step = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __alt_ref_altFlow
				__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_stepAlternative_alt
				__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_actor_actor
				__step_actor_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __step_stepAlternative_alt
				__step_stepAlternative_alt.setName("stepAlternative");
				// assign attribute __alt_ref_altFlow
				__alt_ref_altFlow.setName("ref");
				// assign attribute __flow_steps_step
				__flow_steps_step.setName("steps");
				// assign attribute __step_actor_actor
				__step_actor_actor.setName("actor");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match, alt,
						"toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__flow_steps_step, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__alt_ref_altFlow, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_stepAlternative_alt, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						altFlow, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						step, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_actor_actor, "toBeTranslatedEdges");

				// create link
				__step_actor_actor.setTrg(actor);

				// create link
				__flow_steps_step.setSrc(flow);

				// create link
				__flow_steps_step.setTrg(step);

				// create link
				__step_stepAlternative_alt.setSrc(step);

				// create link
				__step_actor_actor.setSrc(step);

				// create link
				__step_stepAlternative_alt.setTrg(alt);

				// create link
				__alt_ref_altFlow.setSrc(alt);

				// create link
				__alt_ref_altFlow.setTrg(altFlow);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object sysActor is really bound
				JavaSDM.ensure(sysActor != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects sysActor and actor 
				JavaSDM.ensure(!sysActor.equals(actor));

				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __packageDeclaration_actors_actor
				__packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __packageDeclaration_actors_sysActor
				__packageDeclaration_actors_sysActor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __useCase_flows_flow
				__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __packageDeclaration_actors_actor
				__packageDeclaration_actors_actor.setName("actors");
				// assign attribute __packageDeclaration_actors_sysActor
				__packageDeclaration_actors_sysActor.setName("actors");
				// assign attribute __useCase_flows_flow
				__useCase_flows_flow.setName("flows");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						sysActor, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__packageDeclaration_actors_actor, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						packageDeclaration, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__packageDeclaration_actors_sysActor, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						useCase, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						flow, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__useCase_flows_flow, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						actor, "contextNodes");

				// create link
				__packageDeclaration_actors_actor.setSrc(packageDeclaration);

				// create link
				__packageDeclaration_actors_sysActor.setSrc(packageDeclaration);

				// create link
				__packageDeclaration_actors_actor.setTrg(actor);

				// create link
				__packageDeclaration_actors_sysActor.setTrg(sysActor);

				// create link
				__useCase_flows_flow.setTrg(flow);

				// create link
				__useCase_flows_flow.setSrc(useCase);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_FWD(match, packageDeclaration, actor,
					sysActor, flow, step, alt, altFlow, useCase);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		Actor actor = null;
		ActorToLifeline actorToLine = null;
		AlternativeFlowAlternative alt = null;
		AlternativeFlow altFlow = null;
		NamedFlow flow = null;
		FlowToInteractionFragment flowToParentOperand = null;
		Interaction interaction = null;
		Lifeline line = null;
		PackageDeclaration packageDeclaration = null;
		InteractionOperand parentCombo = null;
		InteractionOperand parentOperand = null;
		NormalStep step = null;
		Actor sysActor = null;
		ActorToLifeline sysActorToSysLine = null;
		Lifeline sysLine = null;
		UseCase useCase = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Iterator fujaba__IterIsApplicableMatchToCsp = null;
		CSP csp = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand operand = null;
		CombinedFragment combo = null;
		Message message = null;
		NormalStepToCombinedFragment stepToCombo = null;
		InteractionConstraint guard = null;
		FlowToInteractionFragment altFlowToOperand = null;
		StepAlternativeToInteractionOperand alternative1ToOperand = null;
		MessageOccurrenceSpecification messageReceive = null;
		NormalStepToMessage stepToMessage = null;
		LiteralString spec = null;
		PerformRuleResult ruleresult = null;
		EMoflonEdge messageSend__message__message = null;
		EMoflonEdge parentOperand__covered__sysLine = null;
		EMoflonEdge operand__covered__line = null;
		EMoflonEdge sysLine__coveredBy__parentOperand = null;
		EMoflonEdge stepToMessage__target__message = null;
		EMoflonEdge sysLine__coveredBy__combo = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge sysLine__coveredBy__parentCombo = null;
		EMoflonEdge messageReceive__enclosingOperand__parentOperand = null;
		EMoflonEdge line__coveredBy__parentOperand = null;
		EMoflonEdge sysLine__coveredBy__messageSend = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge operand__guard__guard = null;
		EMoflonEdge alternative1ToOperand__target__operand = null;
		EMoflonEdge parentCombo__covered__sysLine = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge messageReceive__message__message = null;
		EMoflonEdge parentOperand__fragment__messageReceive = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge parentOperand__covered__line = null;
		EMoflonEdge altFlowToOperand__target__operand = null;
		EMoflonEdge message__receiveEvent__messageReceive = null;
		EMoflonEdge operand__covered__sysLine = null;
		EMoflonEdge guard__specification__spec = null;
		EMoflonEdge message__sendEvent__messageSend = null;
		EMoflonEdge sysLine__coveredBy__operand = null;
		EMoflonEdge message__interaction__interaction = null;
		EMoflonEdge alternative1ToOperand__source__alt = null;
		EMoflonEdge parentCombo__covered__line = null;
		EMoflonEdge stepToCombo__target__combo = null;
		EMoflonEdge altFlowToOperand__source__altFlow = null;
		EMoflonEdge stepToMessage__source__step = null;
		EMoflonEdge messageSend__covered__sysLine = null;
		EMoflonEdge interaction__message__message = null;
		EMoflonEdge stepToCombo__source__step = null;
		EMoflonEdge line__coveredBy__parentCombo = null;
		EMoflonEdge combo__covered__sysLine = null;
		EMoflonEdge line__coveredBy__operand = null;

		// story node 'perform transformation'
		try {
			fujaba__Success = false;

			_TmpObject = (isApplicableMatch.getObject("actor"));

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("actorToLine"));

			// ensure correct type and really bound of object actorToLine
			JavaSDM.ensure(_TmpObject instanceof ActorToLifeline);
			actorToLine = (ActorToLifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("alt"));

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("altFlow"));

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flow"));

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flowToParentOperand"));

			// ensure correct type and really bound of object flowToParentOperand
			JavaSDM.ensure(_TmpObject instanceof FlowToInteractionFragment);
			flowToParentOperand = (FlowToInteractionFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("interaction"));

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("line"));

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("packageDeclaration"));

			// ensure correct type and really bound of object packageDeclaration
			JavaSDM.ensure(_TmpObject instanceof PackageDeclaration);
			packageDeclaration = (PackageDeclaration) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("parentCombo"));

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentCombo = (InteractionOperand) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("parentOperand"));

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("step"));

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysActor"));

			// ensure correct type and really bound of object sysActor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			sysActor = (Actor) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysActorToSysLine"));

			// ensure correct type and really bound of object sysActorToSysLine
			JavaSDM.ensure(_TmpObject instanceof ActorToLifeline);
			sysActorToSysLine = (ActorToLifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysLine"));

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCase"));

			// ensure correct type and really bound of object useCase
			JavaSDM.ensure(_TmpObject instanceof UseCase);
			useCase = (UseCase) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCaseToInteraction"));

			// ensure correct type and really bound of object useCaseToInteraction
			JavaSDM.ensure(_TmpObject instanceof UseCaseToInteraction);
			useCaseToInteraction = (UseCaseToInteraction) _TmpObject;
			// check object isApplicableMatch is really bound
			JavaSDM.ensure(isApplicableMatch != null);
			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects sysActorToSysLine and actorToLine 
			JavaSDM.ensure(!sysActorToSysLine.equals(actorToLine));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// check isomorphic binding between objects parentOperand and parentCombo 
			JavaSDM.ensure(!parentOperand.equals(parentCombo));

			// iterate to-many link attributeInfo from isApplicableMatch to csp
			fujaba__Success = false;

			fujaba__IterIsApplicableMatchToCsp = isApplicableMatch
					.getAttributeInfo().iterator();

			while (!(fujaba__Success)
					&& fujaba__IterIsApplicableMatchToCsp.hasNext()) {
				try {
					_TmpObject = fujaba__IterIsApplicableMatchToCsp.next();

					// ensure correct type and really bound of object csp
					JavaSDM.ensure(_TmpObject instanceof CSP);
					csp = (CSP) _TmpObject;

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object messageSend
			messageSend = ModalSequenceDiagramFactory.eINSTANCE
					.createMessageOccurrenceSpecification();

			// create object operand
			operand = ModalSequenceDiagramFactory.eINSTANCE
					.createInteractionOperand();

			// create object combo
			combo = ModalSequenceDiagramFactory.eINSTANCE
					.createCombinedFragment();

			// create object message
			message = ModalSequenceDiagramFactory.eINSTANCE.createMessage();

			// create object stepToCombo
			stepToCombo = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToCombinedFragment();

			// create object guard
			guard = ModalSequenceDiagramFactory.eINSTANCE
					.createInteractionConstraint();

			// create object altFlowToOperand
			altFlowToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createFlowToInteractionFragment();

			// create object alternative1ToOperand
			alternative1ToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createStepAlternativeToInteractionOperand();

			// create object messageReceive
			messageReceive = ModalSequenceDiagramFactory.eINSTANCE
					.createMessageOccurrenceSpecification();

			// create object stepToMessage
			stepToMessage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToMessage();

			// create object spec
			spec = ModalSequenceDiagramFactory.eINSTANCE.createLiteralString();

			// assign attribute combo
			combo.setInteractionOperator((ModalSequenceDiagram.InteractionOperatorKind) csp
					.getValue("combo", "interactionOperator"));
			// assign attribute guard
			guard.setName((java.lang.String) csp.getValue("guard", "name"));
			// assign attribute spec
			spec.setValue((java.lang.String) csp.getValue("spec", "value"));
			// assign attribute message
			message.setName((java.lang.String) csp.getValue("message", "name"));

			// create link
			messageSend.getCovered().add(sysLine);

			// create link
			parentCombo.getCovered().add(sysLine);

			// create link
			parentOperand.getCovered().add(sysLine);

			// create link
			operand.getCovered().add(sysLine);

			// create link
			combo.getCovered().add(sysLine);

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(messageSend,
					message, "message");

			// create link
			message.setSendEvent(messageSend);

			// create link
			stepToCombo.setTarget(combo);

			// create link
			operand.setGuard(guard); // add link to one

			// create link
			line.getCoveredBy().add(operand);

			// create link
			altFlowToOperand.setTarget(operand);

			// create link
			alternative1ToOperand.setTarget(operand);

			// create link
			messageReceive.setEnclosingOperand(parentOperand);

			// create link
			line.getCoveredBy().add(parentOperand);

			// create link
			line.getCoveredBy().add(parentCombo);

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(messageReceive,
					message, "message");

			// create link
			message.setReceiveEvent(messageReceive);

			// create link
			stepToMessage.setSource(step);

			// create link
			stepToCombo.setSource(step);

			// create link
			alternative1ToOperand.setSource(alt);

			// create link
			guard.setSpecification(spec); // add link to one

			// create link
			altFlowToOperand.setSource(altFlow);

			// create link
			stepToMessage.setTarget(message);

			// create link
			interaction.getMessage().add(message);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'collect translated elements'
		try {
			fujaba__Success = false;

			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object altFlowToOperand is really bound
			JavaSDM.ensure(altFlowToOperand != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object stepToMessage is really bound
			JavaSDM.ensure(stepToMessage != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					guard, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alt, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlow, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					spec, "createdElements");
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'bookkeeping for edges'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object actorToLine is really bound
			JavaSDM.ensure(actorToLine != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object altFlowToOperand is really bound
			JavaSDM.ensure(altFlowToOperand != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object flowToParentOperand is really bound
			JavaSDM.ensure(flowToParentOperand != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);
			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);
			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);
			// check object ruleresult is really bound
			JavaSDM.ensure(ruleresult != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object stepToMessage is really bound
			JavaSDM.ensure(stepToMessage != null);
			// check object sysActor is really bound
			JavaSDM.ensure(sysActor != null);
			// check object sysActorToSysLine is really bound
			JavaSDM.ensure(sysActorToSysLine != null);
			// check object sysLine is really bound
			JavaSDM.ensure(sysLine != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check object useCaseToInteraction is really bound
			JavaSDM.ensure(useCaseToInteraction != null);
			// check isomorphic binding between objects actorToLine and actor 
			JavaSDM.ensure(!actorToLine.equals(actor));

			// check isomorphic binding between objects alt and actor 
			JavaSDM.ensure(!alt.equals(actor));

			// check isomorphic binding between objects altFlow and actor 
			JavaSDM.ensure(!altFlow.equals(actor));

			// check isomorphic binding between objects altFlowToOperand and actor 
			JavaSDM.ensure(!altFlowToOperand.equals(actor));

			// check isomorphic binding between objects alternative1ToOperand and actor 
			JavaSDM.ensure(!alternative1ToOperand.equals(actor));

			// check isomorphic binding between objects combo and actor 
			JavaSDM.ensure(!combo.equals(actor));

			// check isomorphic binding between objects flow and actor 
			JavaSDM.ensure(!flow.equals(actor));

			// check isomorphic binding between objects flowToParentOperand and actor 
			JavaSDM.ensure(!flowToParentOperand.equals(actor));

			// check isomorphic binding between objects guard and actor 
			JavaSDM.ensure(!guard.equals(actor));

			// check isomorphic binding between objects interaction and actor 
			JavaSDM.ensure(!interaction.equals(actor));

			// check isomorphic binding between objects line and actor 
			JavaSDM.ensure(!line.equals(actor));

			// check isomorphic binding between objects message and actor 
			JavaSDM.ensure(!message.equals(actor));

			// check isomorphic binding between objects messageReceive and actor 
			JavaSDM.ensure(!messageReceive.equals(actor));

			// check isomorphic binding between objects messageSend and actor 
			JavaSDM.ensure(!messageSend.equals(actor));

			// check isomorphic binding between objects operand and actor 
			JavaSDM.ensure(!operand.equals(actor));

			// check isomorphic binding between objects packageDeclaration and actor 
			JavaSDM.ensure(!packageDeclaration.equals(actor));

			// check isomorphic binding between objects parentCombo and actor 
			JavaSDM.ensure(!parentCombo.equals(actor));

			// check isomorphic binding between objects parentOperand and actor 
			JavaSDM.ensure(!parentOperand.equals(actor));

			// check isomorphic binding between objects spec and actor 
			JavaSDM.ensure(!spec.equals(actor));

			// check isomorphic binding between objects step and actor 
			JavaSDM.ensure(!step.equals(actor));

			// check isomorphic binding between objects stepToCombo and actor 
			JavaSDM.ensure(!stepToCombo.equals(actor));

			// check isomorphic binding between objects stepToMessage and actor 
			JavaSDM.ensure(!stepToMessage.equals(actor));

			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects sysActorToSysLine and actor 
			JavaSDM.ensure(!sysActorToSysLine.equals(actor));

			// check isomorphic binding between objects sysLine and actor 
			JavaSDM.ensure(!sysLine.equals(actor));

			// check isomorphic binding between objects useCase and actor 
			JavaSDM.ensure(!useCase.equals(actor));

			// check isomorphic binding between objects useCaseToInteraction and actor 
			JavaSDM.ensure(!useCaseToInteraction.equals(actor));

			// check isomorphic binding between objects alt and actorToLine 
			JavaSDM.ensure(!alt.equals(actorToLine));

			// check isomorphic binding between objects altFlow and actorToLine 
			JavaSDM.ensure(!altFlow.equals(actorToLine));

			// check isomorphic binding between objects altFlowToOperand and actorToLine 
			JavaSDM.ensure(!altFlowToOperand.equals(actorToLine));

			// check isomorphic binding between objects alternative1ToOperand and actorToLine 
			JavaSDM.ensure(!alternative1ToOperand.equals(actorToLine));

			// check isomorphic binding between objects combo and actorToLine 
			JavaSDM.ensure(!combo.equals(actorToLine));

			// check isomorphic binding between objects flow and actorToLine 
			JavaSDM.ensure(!flow.equals(actorToLine));

			// check isomorphic binding between objects flowToParentOperand and actorToLine 
			JavaSDM.ensure(!flowToParentOperand.equals(actorToLine));

			// check isomorphic binding between objects guard and actorToLine 
			JavaSDM.ensure(!guard.equals(actorToLine));

			// check isomorphic binding between objects interaction and actorToLine 
			JavaSDM.ensure(!interaction.equals(actorToLine));

			// check isomorphic binding between objects line and actorToLine 
			JavaSDM.ensure(!line.equals(actorToLine));

			// check isomorphic binding between objects message and actorToLine 
			JavaSDM.ensure(!message.equals(actorToLine));

			// check isomorphic binding between objects messageReceive and actorToLine 
			JavaSDM.ensure(!messageReceive.equals(actorToLine));

			// check isomorphic binding between objects messageSend and actorToLine 
			JavaSDM.ensure(!messageSend.equals(actorToLine));

			// check isomorphic binding between objects operand and actorToLine 
			JavaSDM.ensure(!operand.equals(actorToLine));

			// check isomorphic binding between objects packageDeclaration and actorToLine 
			JavaSDM.ensure(!packageDeclaration.equals(actorToLine));

			// check isomorphic binding between objects parentCombo and actorToLine 
			JavaSDM.ensure(!parentCombo.equals(actorToLine));

			// check isomorphic binding between objects parentOperand and actorToLine 
			JavaSDM.ensure(!parentOperand.equals(actorToLine));

			// check isomorphic binding between objects spec and actorToLine 
			JavaSDM.ensure(!spec.equals(actorToLine));

			// check isomorphic binding between objects step and actorToLine 
			JavaSDM.ensure(!step.equals(actorToLine));

			// check isomorphic binding between objects stepToCombo and actorToLine 
			JavaSDM.ensure(!stepToCombo.equals(actorToLine));

			// check isomorphic binding between objects stepToMessage and actorToLine 
			JavaSDM.ensure(!stepToMessage.equals(actorToLine));

			// check isomorphic binding between objects sysActor and actorToLine 
			JavaSDM.ensure(!sysActor.equals(actorToLine));

			// check isomorphic binding between objects sysActorToSysLine and actorToLine 
			JavaSDM.ensure(!sysActorToSysLine.equals(actorToLine));

			// check isomorphic binding between objects sysLine and actorToLine 
			JavaSDM.ensure(!sysLine.equals(actorToLine));

			// check isomorphic binding between objects useCase and actorToLine 
			JavaSDM.ensure(!useCase.equals(actorToLine));

			// check isomorphic binding between objects useCaseToInteraction and actorToLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(actorToLine));

			// check isomorphic binding between objects altFlow and alt 
			JavaSDM.ensure(!altFlow.equals(alt));

			// check isomorphic binding between objects altFlowToOperand and alt 
			JavaSDM.ensure(!altFlowToOperand.equals(alt));

			// check isomorphic binding between objects alternative1ToOperand and alt 
			JavaSDM.ensure(!alternative1ToOperand.equals(alt));

			// check isomorphic binding between objects combo and alt 
			JavaSDM.ensure(!combo.equals(alt));

			// check isomorphic binding between objects flow and alt 
			JavaSDM.ensure(!flow.equals(alt));

			// check isomorphic binding between objects flowToParentOperand and alt 
			JavaSDM.ensure(!flowToParentOperand.equals(alt));

			// check isomorphic binding between objects guard and alt 
			JavaSDM.ensure(!guard.equals(alt));

			// check isomorphic binding between objects interaction and alt 
			JavaSDM.ensure(!interaction.equals(alt));

			// check isomorphic binding between objects line and alt 
			JavaSDM.ensure(!line.equals(alt));

			// check isomorphic binding between objects message and alt 
			JavaSDM.ensure(!message.equals(alt));

			// check isomorphic binding between objects messageReceive and alt 
			JavaSDM.ensure(!messageReceive.equals(alt));

			// check isomorphic binding between objects messageSend and alt 
			JavaSDM.ensure(!messageSend.equals(alt));

			// check isomorphic binding between objects operand and alt 
			JavaSDM.ensure(!operand.equals(alt));

			// check isomorphic binding between objects packageDeclaration and alt 
			JavaSDM.ensure(!packageDeclaration.equals(alt));

			// check isomorphic binding between objects parentCombo and alt 
			JavaSDM.ensure(!parentCombo.equals(alt));

			// check isomorphic binding between objects parentOperand and alt 
			JavaSDM.ensure(!parentOperand.equals(alt));

			// check isomorphic binding between objects spec and alt 
			JavaSDM.ensure(!spec.equals(alt));

			// check isomorphic binding between objects step and alt 
			JavaSDM.ensure(!step.equals(alt));

			// check isomorphic binding between objects stepToCombo and alt 
			JavaSDM.ensure(!stepToCombo.equals(alt));

			// check isomorphic binding between objects stepToMessage and alt 
			JavaSDM.ensure(!stepToMessage.equals(alt));

			// check isomorphic binding between objects sysActor and alt 
			JavaSDM.ensure(!sysActor.equals(alt));

			// check isomorphic binding between objects sysActorToSysLine and alt 
			JavaSDM.ensure(!sysActorToSysLine.equals(alt));

			// check isomorphic binding between objects sysLine and alt 
			JavaSDM.ensure(!sysLine.equals(alt));

			// check isomorphic binding between objects useCase and alt 
			JavaSDM.ensure(!useCase.equals(alt));

			// check isomorphic binding between objects useCaseToInteraction and alt 
			JavaSDM.ensure(!useCaseToInteraction.equals(alt));

			// check isomorphic binding between objects altFlowToOperand and altFlow 
			JavaSDM.ensure(!altFlowToOperand.equals(altFlow));

			// check isomorphic binding between objects alternative1ToOperand and altFlow 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlow));

			// check isomorphic binding between objects combo and altFlow 
			JavaSDM.ensure(!combo.equals(altFlow));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check isomorphic binding between objects flowToParentOperand and altFlow 
			JavaSDM.ensure(!flowToParentOperand.equals(altFlow));

			// check isomorphic binding between objects guard and altFlow 
			JavaSDM.ensure(!guard.equals(altFlow));

			// check isomorphic binding between objects interaction and altFlow 
			JavaSDM.ensure(!interaction.equals(altFlow));

			// check isomorphic binding between objects line and altFlow 
			JavaSDM.ensure(!line.equals(altFlow));

			// check isomorphic binding between objects message and altFlow 
			JavaSDM.ensure(!message.equals(altFlow));

			// check isomorphic binding between objects messageReceive and altFlow 
			JavaSDM.ensure(!messageReceive.equals(altFlow));

			// check isomorphic binding between objects messageSend and altFlow 
			JavaSDM.ensure(!messageSend.equals(altFlow));

			// check isomorphic binding between objects operand and altFlow 
			JavaSDM.ensure(!operand.equals(altFlow));

			// check isomorphic binding between objects packageDeclaration and altFlow 
			JavaSDM.ensure(!packageDeclaration.equals(altFlow));

			// check isomorphic binding between objects parentCombo and altFlow 
			JavaSDM.ensure(!parentCombo.equals(altFlow));

			// check isomorphic binding between objects parentOperand and altFlow 
			JavaSDM.ensure(!parentOperand.equals(altFlow));

			// check isomorphic binding between objects spec and altFlow 
			JavaSDM.ensure(!spec.equals(altFlow));

			// check isomorphic binding between objects step and altFlow 
			JavaSDM.ensure(!step.equals(altFlow));

			// check isomorphic binding between objects stepToCombo and altFlow 
			JavaSDM.ensure(!stepToCombo.equals(altFlow));

			// check isomorphic binding between objects stepToMessage and altFlow 
			JavaSDM.ensure(!stepToMessage.equals(altFlow));

			// check isomorphic binding between objects sysActor and altFlow 
			JavaSDM.ensure(!sysActor.equals(altFlow));

			// check isomorphic binding between objects sysActorToSysLine and altFlow 
			JavaSDM.ensure(!sysActorToSysLine.equals(altFlow));

			// check isomorphic binding between objects sysLine and altFlow 
			JavaSDM.ensure(!sysLine.equals(altFlow));

			// check isomorphic binding between objects useCase and altFlow 
			JavaSDM.ensure(!useCase.equals(altFlow));

			// check isomorphic binding between objects useCaseToInteraction and altFlow 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlow));

			// check isomorphic binding between objects alternative1ToOperand and altFlowToOperand 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects combo and altFlowToOperand 
			JavaSDM.ensure(!combo.equals(altFlowToOperand));

			// check isomorphic binding between objects flow and altFlowToOperand 
			JavaSDM.ensure(!flow.equals(altFlowToOperand));

			// check isomorphic binding between objects flowToParentOperand and altFlowToOperand 
			JavaSDM.ensure(!flowToParentOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects guard and altFlowToOperand 
			JavaSDM.ensure(!guard.equals(altFlowToOperand));

			// check isomorphic binding between objects interaction and altFlowToOperand 
			JavaSDM.ensure(!interaction.equals(altFlowToOperand));

			// check isomorphic binding between objects line and altFlowToOperand 
			JavaSDM.ensure(!line.equals(altFlowToOperand));

			// check isomorphic binding between objects message and altFlowToOperand 
			JavaSDM.ensure(!message.equals(altFlowToOperand));

			// check isomorphic binding between objects messageReceive and altFlowToOperand 
			JavaSDM.ensure(!messageReceive.equals(altFlowToOperand));

			// check isomorphic binding between objects messageSend and altFlowToOperand 
			JavaSDM.ensure(!messageSend.equals(altFlowToOperand));

			// check isomorphic binding between objects operand and altFlowToOperand 
			JavaSDM.ensure(!operand.equals(altFlowToOperand));

			// check isomorphic binding between objects packageDeclaration and altFlowToOperand 
			JavaSDM.ensure(!packageDeclaration.equals(altFlowToOperand));

			// check isomorphic binding between objects parentCombo and altFlowToOperand 
			JavaSDM.ensure(!parentCombo.equals(altFlowToOperand));

			// check isomorphic binding between objects parentOperand and altFlowToOperand 
			JavaSDM.ensure(!parentOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects spec and altFlowToOperand 
			JavaSDM.ensure(!spec.equals(altFlowToOperand));

			// check isomorphic binding between objects step and altFlowToOperand 
			JavaSDM.ensure(!step.equals(altFlowToOperand));

			// check isomorphic binding between objects stepToCombo and altFlowToOperand 
			JavaSDM.ensure(!stepToCombo.equals(altFlowToOperand));

			// check isomorphic binding between objects stepToMessage and altFlowToOperand 
			JavaSDM.ensure(!stepToMessage.equals(altFlowToOperand));

			// check isomorphic binding between objects sysActor and altFlowToOperand 
			JavaSDM.ensure(!sysActor.equals(altFlowToOperand));

			// check isomorphic binding between objects sysActorToSysLine and altFlowToOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(altFlowToOperand));

			// check isomorphic binding between objects sysLine and altFlowToOperand 
			JavaSDM.ensure(!sysLine.equals(altFlowToOperand));

			// check isomorphic binding between objects useCase and altFlowToOperand 
			JavaSDM.ensure(!useCase.equals(altFlowToOperand));

			// check isomorphic binding between objects useCaseToInteraction and altFlowToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlowToOperand));

			// check isomorphic binding between objects combo and alternative1ToOperand 
			JavaSDM.ensure(!combo.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and alternative1ToOperand 
			JavaSDM.ensure(!flow.equals(alternative1ToOperand));

			// check isomorphic binding between objects flowToParentOperand and alternative1ToOperand 
			JavaSDM.ensure(!flowToParentOperand.equals(alternative1ToOperand));

			// check isomorphic binding between objects guard and alternative1ToOperand 
			JavaSDM.ensure(!guard.equals(alternative1ToOperand));

			// check isomorphic binding between objects interaction and alternative1ToOperand 
			JavaSDM.ensure(!interaction.equals(alternative1ToOperand));

			// check isomorphic binding between objects line and alternative1ToOperand 
			JavaSDM.ensure(!line.equals(alternative1ToOperand));

			// check isomorphic binding between objects message and alternative1ToOperand 
			JavaSDM.ensure(!message.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageReceive and alternative1ToOperand 
			JavaSDM.ensure(!messageReceive.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageSend and alternative1ToOperand 
			JavaSDM.ensure(!messageSend.equals(alternative1ToOperand));

			// check isomorphic binding between objects operand and alternative1ToOperand 
			JavaSDM.ensure(!operand.equals(alternative1ToOperand));

			// check isomorphic binding between objects packageDeclaration and alternative1ToOperand 
			JavaSDM.ensure(!packageDeclaration.equals(alternative1ToOperand));

			// check isomorphic binding between objects parentCombo and alternative1ToOperand 
			JavaSDM.ensure(!parentCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects parentOperand and alternative1ToOperand 
			JavaSDM.ensure(!parentOperand.equals(alternative1ToOperand));

			// check isomorphic binding between objects spec and alternative1ToOperand 
			JavaSDM.ensure(!spec.equals(alternative1ToOperand));

			// check isomorphic binding between objects step and alternative1ToOperand 
			JavaSDM.ensure(!step.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToCombo and alternative1ToOperand 
			JavaSDM.ensure(!stepToCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToMessage and alternative1ToOperand 
			JavaSDM.ensure(!stepToMessage.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysActor and alternative1ToOperand 
			JavaSDM.ensure(!sysActor.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysActorToSysLine and alternative1ToOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysLine and alternative1ToOperand 
			JavaSDM.ensure(!sysLine.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCase and alternative1ToOperand 
			JavaSDM.ensure(!useCase.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCaseToInteraction and alternative1ToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and combo 
			JavaSDM.ensure(!flow.equals(combo));

			// check isomorphic binding between objects flowToParentOperand and combo 
			JavaSDM.ensure(!flowToParentOperand.equals(combo));

			// check isomorphic binding between objects guard and combo 
			JavaSDM.ensure(!guard.equals(combo));

			// check isomorphic binding between objects interaction and combo 
			JavaSDM.ensure(!interaction.equals(combo));

			// check isomorphic binding between objects line and combo 
			JavaSDM.ensure(!line.equals(combo));

			// check isomorphic binding between objects message and combo 
			JavaSDM.ensure(!message.equals(combo));

			// check isomorphic binding between objects messageReceive and combo 
			JavaSDM.ensure(!messageReceive.equals(combo));

			// check isomorphic binding between objects messageSend and combo 
			JavaSDM.ensure(!messageSend.equals(combo));

			// check isomorphic binding between objects operand and combo 
			JavaSDM.ensure(!operand.equals(combo));

			// check isomorphic binding between objects packageDeclaration and combo 
			JavaSDM.ensure(!packageDeclaration.equals(combo));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects parentOperand and combo 
			JavaSDM.ensure(!parentOperand.equals(combo));

			// check isomorphic binding between objects spec and combo 
			JavaSDM.ensure(!spec.equals(combo));

			// check isomorphic binding between objects step and combo 
			JavaSDM.ensure(!step.equals(combo));

			// check isomorphic binding between objects stepToCombo and combo 
			JavaSDM.ensure(!stepToCombo.equals(combo));

			// check isomorphic binding between objects stepToMessage and combo 
			JavaSDM.ensure(!stepToMessage.equals(combo));

			// check isomorphic binding between objects sysActor and combo 
			JavaSDM.ensure(!sysActor.equals(combo));

			// check isomorphic binding between objects sysActorToSysLine and combo 
			JavaSDM.ensure(!sysActorToSysLine.equals(combo));

			// check isomorphic binding between objects sysLine and combo 
			JavaSDM.ensure(!sysLine.equals(combo));

			// check isomorphic binding between objects useCase and combo 
			JavaSDM.ensure(!useCase.equals(combo));

			// check isomorphic binding between objects useCaseToInteraction and combo 
			JavaSDM.ensure(!useCaseToInteraction.equals(combo));

			// check isomorphic binding between objects flowToParentOperand and flow 
			JavaSDM.ensure(!flowToParentOperand.equals(flow));

			// check isomorphic binding between objects guard and flow 
			JavaSDM.ensure(!guard.equals(flow));

			// check isomorphic binding between objects interaction and flow 
			JavaSDM.ensure(!interaction.equals(flow));

			// check isomorphic binding between objects line and flow 
			JavaSDM.ensure(!line.equals(flow));

			// check isomorphic binding between objects message and flow 
			JavaSDM.ensure(!message.equals(flow));

			// check isomorphic binding between objects messageReceive and flow 
			JavaSDM.ensure(!messageReceive.equals(flow));

			// check isomorphic binding between objects messageSend and flow 
			JavaSDM.ensure(!messageSend.equals(flow));

			// check isomorphic binding between objects operand and flow 
			JavaSDM.ensure(!operand.equals(flow));

			// check isomorphic binding between objects packageDeclaration and flow 
			JavaSDM.ensure(!packageDeclaration.equals(flow));

			// check isomorphic binding between objects parentCombo and flow 
			JavaSDM.ensure(!parentCombo.equals(flow));

			// check isomorphic binding between objects parentOperand and flow 
			JavaSDM.ensure(!parentOperand.equals(flow));

			// check isomorphic binding between objects spec and flow 
			JavaSDM.ensure(!spec.equals(flow));

			// check isomorphic binding between objects step and flow 
			JavaSDM.ensure(!step.equals(flow));

			// check isomorphic binding between objects stepToCombo and flow 
			JavaSDM.ensure(!stepToCombo.equals(flow));

			// check isomorphic binding between objects stepToMessage and flow 
			JavaSDM.ensure(!stepToMessage.equals(flow));

			// check isomorphic binding between objects sysActor and flow 
			JavaSDM.ensure(!sysActor.equals(flow));

			// check isomorphic binding between objects sysActorToSysLine and flow 
			JavaSDM.ensure(!sysActorToSysLine.equals(flow));

			// check isomorphic binding between objects sysLine and flow 
			JavaSDM.ensure(!sysLine.equals(flow));

			// check isomorphic binding between objects useCase and flow 
			JavaSDM.ensure(!useCase.equals(flow));

			// check isomorphic binding between objects useCaseToInteraction and flow 
			JavaSDM.ensure(!useCaseToInteraction.equals(flow));

			// check isomorphic binding between objects guard and flowToParentOperand 
			JavaSDM.ensure(!guard.equals(flowToParentOperand));

			// check isomorphic binding between objects interaction and flowToParentOperand 
			JavaSDM.ensure(!interaction.equals(flowToParentOperand));

			// check isomorphic binding between objects line and flowToParentOperand 
			JavaSDM.ensure(!line.equals(flowToParentOperand));

			// check isomorphic binding between objects message and flowToParentOperand 
			JavaSDM.ensure(!message.equals(flowToParentOperand));

			// check isomorphic binding between objects messageReceive and flowToParentOperand 
			JavaSDM.ensure(!messageReceive.equals(flowToParentOperand));

			// check isomorphic binding between objects messageSend and flowToParentOperand 
			JavaSDM.ensure(!messageSend.equals(flowToParentOperand));

			// check isomorphic binding between objects operand and flowToParentOperand 
			JavaSDM.ensure(!operand.equals(flowToParentOperand));

			// check isomorphic binding between objects packageDeclaration and flowToParentOperand 
			JavaSDM.ensure(!packageDeclaration.equals(flowToParentOperand));

			// check isomorphic binding between objects parentCombo and flowToParentOperand 
			JavaSDM.ensure(!parentCombo.equals(flowToParentOperand));

			// check isomorphic binding between objects parentOperand and flowToParentOperand 
			JavaSDM.ensure(!parentOperand.equals(flowToParentOperand));

			// check isomorphic binding between objects spec and flowToParentOperand 
			JavaSDM.ensure(!spec.equals(flowToParentOperand));

			// check isomorphic binding between objects step and flowToParentOperand 
			JavaSDM.ensure(!step.equals(flowToParentOperand));

			// check isomorphic binding between objects stepToCombo and flowToParentOperand 
			JavaSDM.ensure(!stepToCombo.equals(flowToParentOperand));

			// check isomorphic binding between objects stepToMessage and flowToParentOperand 
			JavaSDM.ensure(!stepToMessage.equals(flowToParentOperand));

			// check isomorphic binding between objects sysActor and flowToParentOperand 
			JavaSDM.ensure(!sysActor.equals(flowToParentOperand));

			// check isomorphic binding between objects sysActorToSysLine and flowToParentOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(flowToParentOperand));

			// check isomorphic binding between objects sysLine and flowToParentOperand 
			JavaSDM.ensure(!sysLine.equals(flowToParentOperand));

			// check isomorphic binding between objects useCase and flowToParentOperand 
			JavaSDM.ensure(!useCase.equals(flowToParentOperand));

			// check isomorphic binding between objects useCaseToInteraction and flowToParentOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(flowToParentOperand));

			// check isomorphic binding between objects interaction and guard 
			JavaSDM.ensure(!interaction.equals(guard));

			// check isomorphic binding between objects line and guard 
			JavaSDM.ensure(!line.equals(guard));

			// check isomorphic binding between objects message and guard 
			JavaSDM.ensure(!message.equals(guard));

			// check isomorphic binding between objects messageReceive and guard 
			JavaSDM.ensure(!messageReceive.equals(guard));

			// check isomorphic binding between objects messageSend and guard 
			JavaSDM.ensure(!messageSend.equals(guard));

			// check isomorphic binding between objects operand and guard 
			JavaSDM.ensure(!operand.equals(guard));

			// check isomorphic binding between objects packageDeclaration and guard 
			JavaSDM.ensure(!packageDeclaration.equals(guard));

			// check isomorphic binding between objects parentCombo and guard 
			JavaSDM.ensure(!parentCombo.equals(guard));

			// check isomorphic binding between objects parentOperand and guard 
			JavaSDM.ensure(!parentOperand.equals(guard));

			// check isomorphic binding between objects spec and guard 
			JavaSDM.ensure(!spec.equals(guard));

			// check isomorphic binding between objects step and guard 
			JavaSDM.ensure(!step.equals(guard));

			// check isomorphic binding between objects stepToCombo and guard 
			JavaSDM.ensure(!stepToCombo.equals(guard));

			// check isomorphic binding between objects stepToMessage and guard 
			JavaSDM.ensure(!stepToMessage.equals(guard));

			// check isomorphic binding between objects sysActor and guard 
			JavaSDM.ensure(!sysActor.equals(guard));

			// check isomorphic binding between objects sysActorToSysLine and guard 
			JavaSDM.ensure(!sysActorToSysLine.equals(guard));

			// check isomorphic binding between objects sysLine and guard 
			JavaSDM.ensure(!sysLine.equals(guard));

			// check isomorphic binding between objects useCase and guard 
			JavaSDM.ensure(!useCase.equals(guard));

			// check isomorphic binding between objects useCaseToInteraction and guard 
			JavaSDM.ensure(!useCaseToInteraction.equals(guard));

			// check isomorphic binding between objects line and interaction 
			JavaSDM.ensure(!line.equals(interaction));

			// check isomorphic binding between objects message and interaction 
			JavaSDM.ensure(!message.equals(interaction));

			// check isomorphic binding between objects messageReceive and interaction 
			JavaSDM.ensure(!messageReceive.equals(interaction));

			// check isomorphic binding between objects messageSend and interaction 
			JavaSDM.ensure(!messageSend.equals(interaction));

			// check isomorphic binding between objects operand and interaction 
			JavaSDM.ensure(!operand.equals(interaction));

			// check isomorphic binding between objects packageDeclaration and interaction 
			JavaSDM.ensure(!packageDeclaration.equals(interaction));

			// check isomorphic binding between objects parentCombo and interaction 
			JavaSDM.ensure(!parentCombo.equals(interaction));

			// check isomorphic binding between objects parentOperand and interaction 
			JavaSDM.ensure(!parentOperand.equals(interaction));

			// check isomorphic binding between objects spec and interaction 
			JavaSDM.ensure(!spec.equals(interaction));

			// check isomorphic binding between objects step and interaction 
			JavaSDM.ensure(!step.equals(interaction));

			// check isomorphic binding between objects stepToCombo and interaction 
			JavaSDM.ensure(!stepToCombo.equals(interaction));

			// check isomorphic binding between objects stepToMessage and interaction 
			JavaSDM.ensure(!stepToMessage.equals(interaction));

			// check isomorphic binding between objects sysActor and interaction 
			JavaSDM.ensure(!sysActor.equals(interaction));

			// check isomorphic binding between objects sysActorToSysLine and interaction 
			JavaSDM.ensure(!sysActorToSysLine.equals(interaction));

			// check isomorphic binding between objects sysLine and interaction 
			JavaSDM.ensure(!sysLine.equals(interaction));

			// check isomorphic binding between objects useCase and interaction 
			JavaSDM.ensure(!useCase.equals(interaction));

			// check isomorphic binding between objects useCaseToInteraction and interaction 
			JavaSDM.ensure(!useCaseToInteraction.equals(interaction));

			// check isomorphic binding between objects message and line 
			JavaSDM.ensure(!message.equals(line));

			// check isomorphic binding between objects messageReceive and line 
			JavaSDM.ensure(!messageReceive.equals(line));

			// check isomorphic binding between objects messageSend and line 
			JavaSDM.ensure(!messageSend.equals(line));

			// check isomorphic binding between objects operand and line 
			JavaSDM.ensure(!operand.equals(line));

			// check isomorphic binding between objects packageDeclaration and line 
			JavaSDM.ensure(!packageDeclaration.equals(line));

			// check isomorphic binding between objects parentCombo and line 
			JavaSDM.ensure(!parentCombo.equals(line));

			// check isomorphic binding between objects parentOperand and line 
			JavaSDM.ensure(!parentOperand.equals(line));

			// check isomorphic binding between objects spec and line 
			JavaSDM.ensure(!spec.equals(line));

			// check isomorphic binding between objects step and line 
			JavaSDM.ensure(!step.equals(line));

			// check isomorphic binding between objects stepToCombo and line 
			JavaSDM.ensure(!stepToCombo.equals(line));

			// check isomorphic binding between objects stepToMessage and line 
			JavaSDM.ensure(!stepToMessage.equals(line));

			// check isomorphic binding between objects sysActor and line 
			JavaSDM.ensure(!sysActor.equals(line));

			// check isomorphic binding between objects sysActorToSysLine and line 
			JavaSDM.ensure(!sysActorToSysLine.equals(line));

			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// check isomorphic binding between objects useCase and line 
			JavaSDM.ensure(!useCase.equals(line));

			// check isomorphic binding between objects useCaseToInteraction and line 
			JavaSDM.ensure(!useCaseToInteraction.equals(line));

			// check isomorphic binding between objects messageReceive and message 
			JavaSDM.ensure(!messageReceive.equals(message));

			// check isomorphic binding between objects messageSend and message 
			JavaSDM.ensure(!messageSend.equals(message));

			// check isomorphic binding between objects operand and message 
			JavaSDM.ensure(!operand.equals(message));

			// check isomorphic binding between objects packageDeclaration and message 
			JavaSDM.ensure(!packageDeclaration.equals(message));

			// check isomorphic binding between objects parentCombo and message 
			JavaSDM.ensure(!parentCombo.equals(message));

			// check isomorphic binding between objects parentOperand and message 
			JavaSDM.ensure(!parentOperand.equals(message));

			// check isomorphic binding between objects spec and message 
			JavaSDM.ensure(!spec.equals(message));

			// check isomorphic binding between objects step and message 
			JavaSDM.ensure(!step.equals(message));

			// check isomorphic binding between objects stepToCombo and message 
			JavaSDM.ensure(!stepToCombo.equals(message));

			// check isomorphic binding between objects stepToMessage and message 
			JavaSDM.ensure(!stepToMessage.equals(message));

			// check isomorphic binding between objects sysActor and message 
			JavaSDM.ensure(!sysActor.equals(message));

			// check isomorphic binding between objects sysActorToSysLine and message 
			JavaSDM.ensure(!sysActorToSysLine.equals(message));

			// check isomorphic binding between objects sysLine and message 
			JavaSDM.ensure(!sysLine.equals(message));

			// check isomorphic binding between objects useCase and message 
			JavaSDM.ensure(!useCase.equals(message));

			// check isomorphic binding between objects useCaseToInteraction and message 
			JavaSDM.ensure(!useCaseToInteraction.equals(message));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects operand and messageReceive 
			JavaSDM.ensure(!operand.equals(messageReceive));

			// check isomorphic binding between objects packageDeclaration and messageReceive 
			JavaSDM.ensure(!packageDeclaration.equals(messageReceive));

			// check isomorphic binding between objects parentCombo and messageReceive 
			JavaSDM.ensure(!parentCombo.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and messageReceive 
			JavaSDM.ensure(!parentOperand.equals(messageReceive));

			// check isomorphic binding between objects spec and messageReceive 
			JavaSDM.ensure(!spec.equals(messageReceive));

			// check isomorphic binding between objects step and messageReceive 
			JavaSDM.ensure(!step.equals(messageReceive));

			// check isomorphic binding between objects stepToCombo and messageReceive 
			JavaSDM.ensure(!stepToCombo.equals(messageReceive));

			// check isomorphic binding between objects stepToMessage and messageReceive 
			JavaSDM.ensure(!stepToMessage.equals(messageReceive));

			// check isomorphic binding between objects sysActor and messageReceive 
			JavaSDM.ensure(!sysActor.equals(messageReceive));

			// check isomorphic binding between objects sysActorToSysLine and messageReceive 
			JavaSDM.ensure(!sysActorToSysLine.equals(messageReceive));

			// check isomorphic binding between objects sysLine and messageReceive 
			JavaSDM.ensure(!sysLine.equals(messageReceive));

			// check isomorphic binding between objects useCase and messageReceive 
			JavaSDM.ensure(!useCase.equals(messageReceive));

			// check isomorphic binding between objects useCaseToInteraction and messageReceive 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageReceive));

			// check isomorphic binding between objects operand and messageSend 
			JavaSDM.ensure(!operand.equals(messageSend));

			// check isomorphic binding between objects packageDeclaration and messageSend 
			JavaSDM.ensure(!packageDeclaration.equals(messageSend));

			// check isomorphic binding between objects parentCombo and messageSend 
			JavaSDM.ensure(!parentCombo.equals(messageSend));

			// check isomorphic binding between objects parentOperand and messageSend 
			JavaSDM.ensure(!parentOperand.equals(messageSend));

			// check isomorphic binding between objects spec and messageSend 
			JavaSDM.ensure(!spec.equals(messageSend));

			// check isomorphic binding between objects step and messageSend 
			JavaSDM.ensure(!step.equals(messageSend));

			// check isomorphic binding between objects stepToCombo and messageSend 
			JavaSDM.ensure(!stepToCombo.equals(messageSend));

			// check isomorphic binding between objects stepToMessage and messageSend 
			JavaSDM.ensure(!stepToMessage.equals(messageSend));

			// check isomorphic binding between objects sysActor and messageSend 
			JavaSDM.ensure(!sysActor.equals(messageSend));

			// check isomorphic binding between objects sysActorToSysLine and messageSend 
			JavaSDM.ensure(!sysActorToSysLine.equals(messageSend));

			// check isomorphic binding between objects sysLine and messageSend 
			JavaSDM.ensure(!sysLine.equals(messageSend));

			// check isomorphic binding between objects useCase and messageSend 
			JavaSDM.ensure(!useCase.equals(messageSend));

			// check isomorphic binding between objects useCaseToInteraction and messageSend 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageSend));

			// check isomorphic binding between objects packageDeclaration and operand 
			JavaSDM.ensure(!packageDeclaration.equals(operand));

			// check isomorphic binding between objects parentCombo and operand 
			JavaSDM.ensure(!parentCombo.equals(operand));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// check isomorphic binding between objects spec and operand 
			JavaSDM.ensure(!spec.equals(operand));

			// check isomorphic binding between objects step and operand 
			JavaSDM.ensure(!step.equals(operand));

			// check isomorphic binding between objects stepToCombo and operand 
			JavaSDM.ensure(!stepToCombo.equals(operand));

			// check isomorphic binding between objects stepToMessage and operand 
			JavaSDM.ensure(!stepToMessage.equals(operand));

			// check isomorphic binding between objects sysActor and operand 
			JavaSDM.ensure(!sysActor.equals(operand));

			// check isomorphic binding between objects sysActorToSysLine and operand 
			JavaSDM.ensure(!sysActorToSysLine.equals(operand));

			// check isomorphic binding between objects sysLine and operand 
			JavaSDM.ensure(!sysLine.equals(operand));

			// check isomorphic binding between objects useCase and operand 
			JavaSDM.ensure(!useCase.equals(operand));

			// check isomorphic binding between objects useCaseToInteraction and operand 
			JavaSDM.ensure(!useCaseToInteraction.equals(operand));

			// check isomorphic binding between objects parentCombo and packageDeclaration 
			JavaSDM.ensure(!parentCombo.equals(packageDeclaration));

			// check isomorphic binding between objects parentOperand and packageDeclaration 
			JavaSDM.ensure(!parentOperand.equals(packageDeclaration));

			// check isomorphic binding between objects spec and packageDeclaration 
			JavaSDM.ensure(!spec.equals(packageDeclaration));

			// check isomorphic binding between objects step and packageDeclaration 
			JavaSDM.ensure(!step.equals(packageDeclaration));

			// check isomorphic binding between objects stepToCombo and packageDeclaration 
			JavaSDM.ensure(!stepToCombo.equals(packageDeclaration));

			// check isomorphic binding between objects stepToMessage and packageDeclaration 
			JavaSDM.ensure(!stepToMessage.equals(packageDeclaration));

			// check isomorphic binding between objects sysActor and packageDeclaration 
			JavaSDM.ensure(!sysActor.equals(packageDeclaration));

			// check isomorphic binding between objects sysActorToSysLine and packageDeclaration 
			JavaSDM.ensure(!sysActorToSysLine.equals(packageDeclaration));

			// check isomorphic binding between objects sysLine and packageDeclaration 
			JavaSDM.ensure(!sysLine.equals(packageDeclaration));

			// check isomorphic binding between objects useCase and packageDeclaration 
			JavaSDM.ensure(!useCase.equals(packageDeclaration));

			// check isomorphic binding between objects useCaseToInteraction and packageDeclaration 
			JavaSDM.ensure(!useCaseToInteraction.equals(packageDeclaration));

			// check isomorphic binding between objects parentOperand and parentCombo 
			JavaSDM.ensure(!parentOperand.equals(parentCombo));

			// check isomorphic binding between objects spec and parentCombo 
			JavaSDM.ensure(!spec.equals(parentCombo));

			// check isomorphic binding between objects step and parentCombo 
			JavaSDM.ensure(!step.equals(parentCombo));

			// check isomorphic binding between objects stepToCombo and parentCombo 
			JavaSDM.ensure(!stepToCombo.equals(parentCombo));

			// check isomorphic binding between objects stepToMessage and parentCombo 
			JavaSDM.ensure(!stepToMessage.equals(parentCombo));

			// check isomorphic binding between objects sysActor and parentCombo 
			JavaSDM.ensure(!sysActor.equals(parentCombo));

			// check isomorphic binding between objects sysActorToSysLine and parentCombo 
			JavaSDM.ensure(!sysActorToSysLine.equals(parentCombo));

			// check isomorphic binding between objects sysLine and parentCombo 
			JavaSDM.ensure(!sysLine.equals(parentCombo));

			// check isomorphic binding between objects useCase and parentCombo 
			JavaSDM.ensure(!useCase.equals(parentCombo));

			// check isomorphic binding between objects useCaseToInteraction and parentCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(parentCombo));

			// check isomorphic binding between objects spec and parentOperand 
			JavaSDM.ensure(!spec.equals(parentOperand));

			// check isomorphic binding between objects step and parentOperand 
			JavaSDM.ensure(!step.equals(parentOperand));

			// check isomorphic binding between objects stepToCombo and parentOperand 
			JavaSDM.ensure(!stepToCombo.equals(parentOperand));

			// check isomorphic binding between objects stepToMessage and parentOperand 
			JavaSDM.ensure(!stepToMessage.equals(parentOperand));

			// check isomorphic binding between objects sysActor and parentOperand 
			JavaSDM.ensure(!sysActor.equals(parentOperand));

			// check isomorphic binding between objects sysActorToSysLine and parentOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(parentOperand));

			// check isomorphic binding between objects sysLine and parentOperand 
			JavaSDM.ensure(!sysLine.equals(parentOperand));

			// check isomorphic binding between objects useCase and parentOperand 
			JavaSDM.ensure(!useCase.equals(parentOperand));

			// check isomorphic binding between objects useCaseToInteraction and parentOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(parentOperand));

			// check isomorphic binding between objects step and spec 
			JavaSDM.ensure(!step.equals(spec));

			// check isomorphic binding between objects stepToCombo and spec 
			JavaSDM.ensure(!stepToCombo.equals(spec));

			// check isomorphic binding between objects stepToMessage and spec 
			JavaSDM.ensure(!stepToMessage.equals(spec));

			// check isomorphic binding between objects sysActor and spec 
			JavaSDM.ensure(!sysActor.equals(spec));

			// check isomorphic binding between objects sysActorToSysLine and spec 
			JavaSDM.ensure(!sysActorToSysLine.equals(spec));

			// check isomorphic binding between objects sysLine and spec 
			JavaSDM.ensure(!sysLine.equals(spec));

			// check isomorphic binding between objects useCase and spec 
			JavaSDM.ensure(!useCase.equals(spec));

			// check isomorphic binding between objects useCaseToInteraction and spec 
			JavaSDM.ensure(!useCaseToInteraction.equals(spec));

			// check isomorphic binding between objects stepToCombo and step 
			JavaSDM.ensure(!stepToCombo.equals(step));

			// check isomorphic binding between objects stepToMessage and step 
			JavaSDM.ensure(!stepToMessage.equals(step));

			// check isomorphic binding between objects sysActor and step 
			JavaSDM.ensure(!sysActor.equals(step));

			// check isomorphic binding between objects sysActorToSysLine and step 
			JavaSDM.ensure(!sysActorToSysLine.equals(step));

			// check isomorphic binding between objects sysLine and step 
			JavaSDM.ensure(!sysLine.equals(step));

			// check isomorphic binding between objects useCase and step 
			JavaSDM.ensure(!useCase.equals(step));

			// check isomorphic binding between objects useCaseToInteraction and step 
			JavaSDM.ensure(!useCaseToInteraction.equals(step));

			// check isomorphic binding between objects stepToMessage and stepToCombo 
			JavaSDM.ensure(!stepToMessage.equals(stepToCombo));

			// check isomorphic binding between objects sysActor and stepToCombo 
			JavaSDM.ensure(!sysActor.equals(stepToCombo));

			// check isomorphic binding between objects sysActorToSysLine and stepToCombo 
			JavaSDM.ensure(!sysActorToSysLine.equals(stepToCombo));

			// check isomorphic binding between objects sysLine and stepToCombo 
			JavaSDM.ensure(!sysLine.equals(stepToCombo));

			// check isomorphic binding between objects useCase and stepToCombo 
			JavaSDM.ensure(!useCase.equals(stepToCombo));

			// check isomorphic binding between objects useCaseToInteraction and stepToCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToCombo));

			// check isomorphic binding between objects sysActor and stepToMessage 
			JavaSDM.ensure(!sysActor.equals(stepToMessage));

			// check isomorphic binding between objects sysActorToSysLine and stepToMessage 
			JavaSDM.ensure(!sysActorToSysLine.equals(stepToMessage));

			// check isomorphic binding between objects sysLine and stepToMessage 
			JavaSDM.ensure(!sysLine.equals(stepToMessage));

			// check isomorphic binding between objects useCase and stepToMessage 
			JavaSDM.ensure(!useCase.equals(stepToMessage));

			// check isomorphic binding between objects useCaseToInteraction and stepToMessage 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToMessage));

			// check isomorphic binding between objects sysActorToSysLine and sysActor 
			JavaSDM.ensure(!sysActorToSysLine.equals(sysActor));

			// check isomorphic binding between objects sysLine and sysActor 
			JavaSDM.ensure(!sysLine.equals(sysActor));

			// check isomorphic binding between objects useCase and sysActor 
			JavaSDM.ensure(!useCase.equals(sysActor));

			// check isomorphic binding between objects useCaseToInteraction and sysActor 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysActor));

			// check isomorphic binding between objects sysLine and sysActorToSysLine 
			JavaSDM.ensure(!sysLine.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCase and sysActorToSysLine 
			JavaSDM.ensure(!useCase.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCaseToInteraction and sysActorToSysLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCase and sysLine 
			JavaSDM.ensure(!useCase.equals(sysLine));

			// check isomorphic binding between objects useCaseToInteraction and sysLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysLine));

			// check isomorphic binding between objects useCaseToInteraction and useCase 
			JavaSDM.ensure(!useCaseToInteraction.equals(useCase));

			// create object messageSend__message__message
			messageSend__message__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentOperand__covered__sysLine
			parentOperand__covered__sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object operand__covered__line
			operand__covered__line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object sysLine__coveredBy__parentOperand
			sysLine__coveredBy__parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToMessage__target__message
			stepToMessage__target__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object sysLine__coveredBy__combo
			sysLine__coveredBy__combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __flow_steps_step
			__flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object sysLine__coveredBy__parentCombo
			sysLine__coveredBy__parentCombo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object messageReceive__enclosingOperand__parentOperand
			messageReceive__enclosingOperand__parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object line__coveredBy__parentOperand
			line__coveredBy__parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object sysLine__coveredBy__messageSend
			sysLine__coveredBy__messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __alt_ref_altFlow
			__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object operand__guard__guard
			operand__guard__guard = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentCombo__covered__sysLine
			parentCombo__covered__sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __step_stepAlternative_alt
			__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object messageReceive__message__message
			messageReceive__message__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentOperand__fragment__messageReceive
			parentOperand__fragment__messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __step_actor_actor
			__step_actor_actor = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentOperand__covered__line
			parentOperand__covered__line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object altFlowToOperand__target__operand
			altFlowToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object message__receiveEvent__messageReceive
			message__receiveEvent__messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object operand__covered__sysLine
			operand__covered__sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object guard__specification__spec
			guard__specification__spec = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object message__sendEvent__messageSend
			message__sendEvent__messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object sysLine__coveredBy__operand
			sysLine__coveredBy__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object message__interaction__interaction
			message__interaction__interaction = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentCombo__covered__line
			parentCombo__covered__line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToCombo__target__combo
			stepToCombo__target__combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object altFlowToOperand__source__altFlow
			altFlowToOperand__source__altFlow = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToMessage__source__step
			stepToMessage__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object messageSend__covered__sysLine
			messageSend__covered__sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object interaction__message__message
			interaction__message__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToCombo__source__step
			stepToCombo__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object line__coveredBy__parentCombo
			line__coveredBy__parentCombo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object combo__covered__sysLine
			combo__covered__sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object line__coveredBy__operand
			line__coveredBy__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// assign attribute ruleresult
			ruleresult.setRuleName("AltUserStepNFToComboRule");
			// assign attribute sysLine__coveredBy__messageSend
			sysLine__coveredBy__messageSend.setName("coveredBy");
			// assign attribute messageSend__covered__sysLine
			messageSend__covered__sysLine.setName("covered");
			// assign attribute sysLine__coveredBy__combo
			sysLine__coveredBy__combo.setName("coveredBy");
			// assign attribute combo__covered__sysLine
			combo__covered__sysLine.setName("covered");
			// assign attribute sysLine__coveredBy__operand
			sysLine__coveredBy__operand.setName("coveredBy");
			// assign attribute operand__covered__sysLine
			operand__covered__sysLine.setName("covered");
			// assign attribute sysLine__coveredBy__parentOperand
			sysLine__coveredBy__parentOperand.setName("coveredBy");
			// assign attribute parentOperand__covered__sysLine
			parentOperand__covered__sysLine.setName("covered");
			// assign attribute sysLine__coveredBy__parentCombo
			sysLine__coveredBy__parentCombo.setName("coveredBy");
			// assign attribute parentCombo__covered__sysLine
			parentCombo__covered__sysLine.setName("covered");
			// assign attribute parentOperand__fragment__messageReceive
			parentOperand__fragment__messageReceive.setName("fragment");
			// assign attribute messageReceive__enclosingOperand__parentOperand
			messageReceive__enclosingOperand__parentOperand
					.setName("enclosingOperand");
			// assign attribute line__coveredBy__parentOperand
			line__coveredBy__parentOperand.setName("coveredBy");
			// assign attribute parentOperand__covered__line
			parentOperand__covered__line.setName("covered");
			// assign attribute line__coveredBy__parentCombo
			line__coveredBy__parentCombo.setName("coveredBy");
			// assign attribute parentCombo__covered__line
			parentCombo__covered__line.setName("covered");
			// assign attribute __step_stepAlternative_alt
			__step_stepAlternative_alt.setName("stepAlternative");
			// assign attribute __alt_ref_altFlow
			__alt_ref_altFlow.setName("ref");
			// assign attribute line__coveredBy__operand
			line__coveredBy__operand.setName("coveredBy");
			// assign attribute operand__covered__line
			operand__covered__line.setName("covered");
			// assign attribute stepToCombo__source__step
			stepToCombo__source__step.setName("source");
			// assign attribute stepToCombo__target__combo
			stepToCombo__target__combo.setName("target");
			// assign attribute operand__guard__guard
			operand__guard__guard.setName("guard");
			// assign attribute alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt.setName("source");
			// assign attribute alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand.setName("target");
			// assign attribute guard__specification__spec
			guard__specification__spec.setName("specification");
			// assign attribute altFlowToOperand__source__altFlow
			altFlowToOperand__source__altFlow.setName("source");
			// assign attribute altFlowToOperand__target__operand
			altFlowToOperand__target__operand.setName("target");
			// assign attribute __flow_steps_step
			__flow_steps_step.setName("steps");
			// assign attribute __step_actor_actor
			__step_actor_actor.setName("actor");
			// assign attribute message__sendEvent__messageSend
			message__sendEvent__messageSend.setName("sendEvent");
			// assign attribute message__receiveEvent__messageReceive
			message__receiveEvent__messageReceive.setName("receiveEvent");
			// assign attribute message__interaction__interaction
			message__interaction__interaction.setName("interaction");
			// assign attribute interaction__message__message
			interaction__message__message.setName("message");
			// assign attribute stepToMessage__source__step
			stepToMessage__source__step.setName("source");
			// assign attribute stepToMessage__target__message
			stepToMessage__target__message.setName("target");
			// assign attribute messageSend__message__message
			messageSend__message__message.setName("message");
			// assign attribute messageReceive__message__message
			messageReceive__message__message.setName("message");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend__message__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentOperand__covered__sysLine, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand__covered__line, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					sysLine__coveredBy__parentOperand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage__target__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					sysLine__coveredBy__combo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__flow_steps_step, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					sysLine__coveredBy__parentCombo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive__enclosingOperand__parentOperand,
					"createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					line__coveredBy__parentOperand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					sysLine__coveredBy__messageSend, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__alt_ref_altFlow, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand__guard__guard, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentCombo__covered__sysLine, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__step_stepAlternative_alt, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive__message__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentOperand__fragment__messageReceive, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__step_actor_actor, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentOperand__covered__line, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message__receiveEvent__messageReceive, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand__covered__sysLine, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					guard__specification__spec, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message__sendEvent__messageSend, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					sysLine__coveredBy__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message__interaction__interaction, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__source__alt, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentCombo__covered__line, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__target__combo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand__source__altFlow, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage__source__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend__covered__sysLine, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					interaction__message__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__source__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					line__coveredBy__parentCombo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo__covered__sysLine, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					line__coveredBy__operand, "createdEdges");

			// create link
			__step_actor_actor.setTrg(actor);

			// create link
			messageSend__covered__sysLine.setTrg(sysLine);

			// create link
			parentCombo__covered__sysLine.setTrg(sysLine);

			// create link
			combo__covered__sysLine.setTrg(sysLine);

			// create link
			sysLine__coveredBy__operand.setSrc(sysLine);

			// create link
			parentOperand__covered__sysLine.setTrg(sysLine);

			// create link
			sysLine__coveredBy__parentCombo.setSrc(sysLine);

			// create link
			sysLine__coveredBy__parentOperand.setSrc(sysLine);

			// create link
			operand__covered__sysLine.setTrg(sysLine);

			// create link
			sysLine__coveredBy__combo.setSrc(sysLine);

			// create link
			sysLine__coveredBy__messageSend.setSrc(sysLine);

			// create link
			message__sendEvent__messageSend.setTrg(messageSend);

			// create link
			sysLine__coveredBy__messageSend.setTrg(messageSend);

			// create link
			messageSend__message__message.setSrc(messageSend);

			// create link
			messageSend__covered__sysLine.setSrc(messageSend);

			// create link
			combo__covered__sysLine.setSrc(combo);

			// create link
			sysLine__coveredBy__combo.setTrg(combo);

			// create link
			stepToCombo__target__combo.setTrg(combo);

			// create link
			altFlowToOperand__target__operand.setTrg(operand);

			// create link
			alternative1ToOperand__target__operand.setTrg(operand);

			// create link
			operand__covered__line.setSrc(operand);

			// create link
			operand__covered__sysLine.setSrc(operand);

			// create link
			line__coveredBy__operand.setTrg(operand);

			// create link
			sysLine__coveredBy__operand.setTrg(operand);

			// create link
			operand__guard__guard.setSrc(operand);

			// create link
			line__coveredBy__parentOperand.setTrg(parentOperand);

			// create link
			parentOperand__covered__sysLine.setSrc(parentOperand);

			// create link
			messageReceive__enclosingOperand__parentOperand
					.setTrg(parentOperand);

			// create link
			parentOperand__covered__line.setSrc(parentOperand);

			// create link
			parentOperand__fragment__messageReceive.setSrc(parentOperand);

			// create link
			sysLine__coveredBy__parentOperand.setTrg(parentOperand);

			// create link
			line__coveredBy__parentCombo.setTrg(parentCombo);

			// create link
			parentCombo__covered__line.setSrc(parentCombo);

			// create link
			sysLine__coveredBy__parentCombo.setTrg(parentCombo);

			// create link
			parentCombo__covered__sysLine.setSrc(parentCombo);

			// create link
			__flow_steps_step.setSrc(flow);

			// create link
			messageReceive__enclosingOperand__parentOperand
					.setSrc(messageReceive);

			// create link
			messageReceive__message__message.setSrc(messageReceive);

			// create link
			message__receiveEvent__messageReceive.setTrg(messageReceive);

			// create link
			parentOperand__fragment__messageReceive.setTrg(messageReceive);

			// create link
			parentOperand__covered__line.setTrg(line);

			// create link
			line__coveredBy__parentOperand.setSrc(line);

			// create link
			line__coveredBy__operand.setSrc(line);

			// create link
			parentCombo__covered__line.setTrg(line);

			// create link
			line__coveredBy__parentCombo.setSrc(line);

			// create link
			operand__covered__line.setTrg(line);

			// create link
			__step_actor_actor.setSrc(step);

			// create link
			stepToCombo__source__step.setTrg(step);

			// create link
			stepToMessage__source__step.setTrg(step);

			// create link
			__flow_steps_step.setTrg(step);

			// create link
			__step_stepAlternative_alt.setSrc(step);

			// create link
			__alt_ref_altFlow.setSrc(alt);

			// create link
			alternative1ToOperand__source__alt.setTrg(alt);

			// create link
			__step_stepAlternative_alt.setTrg(alt);

			// create link
			stepToCombo__target__combo.setSrc(stepToCombo);

			// create link
			stepToCombo__source__step.setSrc(stepToCombo);

			// create link
			alternative1ToOperand__source__alt.setSrc(alternative1ToOperand);

			// create link
			alternative1ToOperand__target__operand
					.setSrc(alternative1ToOperand);

			// create link
			operand__guard__guard.setTrg(guard);

			// create link
			guard__specification__spec.setSrc(guard);

			// create link
			guard__specification__spec.setTrg(spec);

			// create link
			altFlowToOperand__source__altFlow.setTrg(altFlow);

			// create link
			__alt_ref_altFlow.setTrg(altFlow);

			// create link
			altFlowToOperand__target__operand.setSrc(altFlowToOperand);

			// create link
			altFlowToOperand__source__altFlow.setSrc(altFlowToOperand);

			// create link
			message__interaction__interaction.setSrc(message);

			// create link
			interaction__message__message.setTrg(message);

			// create link
			messageSend__message__message.setTrg(message);

			// create link
			message__sendEvent__messageSend.setSrc(message);

			// create link
			messageReceive__message__message.setTrg(message);

			// create link
			stepToMessage__target__message.setTrg(message);

			// create link
			message__receiveEvent__messageReceive.setSrc(message);

			// create link
			message__interaction__interaction.setTrg(interaction);

			// create link
			interaction__message__message.setSrc(interaction);

			// create link
			stepToMessage__source__step.setSrc(stepToMessage);

			// create link
			stepToMessage__target__message.setSrc(stepToMessage);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'perform postprocessing'
		// No post processing method found
		// statement node 'register objects'
		this.registerObjects_FWD(ruleresult, packageDeclaration, actor,
				sysActor, sysLine, sysActorToSysLine, messageSend, combo,
				operand, parentOperand, parentCombo, flow, flowToParentOperand,
				messageReceive, line, step, alt, stepToCombo,
				alternative1ToOperand, guard, spec, altFlow, altFlowToOperand,
				useCase, useCaseToInteraction, message, interaction,
				stepToMessage, actorToLine);
		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_FWD(Match match) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass eClass = null;
		Iterator fujaba__IterEClassToPerformOperation = null;
		EOperation performOperation = null;
		IsApplicableRuleResult ruleresult = null;
		Actor actor = null;
		AlternativeFlowAlternative alt = null;
		AlternativeFlow altFlow = null;
		NamedFlow flow = null;
		PackageDeclaration packageDeclaration = null;
		NormalStep step = null;
		Actor sysActor = null;
		UseCase useCase = null;
		IsApplicableMatch isApplicableMatch = null;
		EMoflonEdge __packageDeclaration_actors_actor = null;
		EMoflonEdge __packageDeclaration_actors_sysActor = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __actorToLine_source_actor = null;
		EMoflonEdge __sysActorToSysLine_source_sysActor = null;
		EMoflonEdge __sysActorToSysLine_target_sysLine = null;
		EMoflonEdge __flowToParentOperand_target_parentOperand = null;
		EMoflonEdge __useCase_flows_flow = null;
		EMoflonEdge __flowToParentOperand_source_flow = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __line_interaction_interaction = null;
		EMoflonEdge __actorToLine_target_line = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge __useCaseToInteraction_source_useCase = null;
		EMoflonEdge __useCaseToInteraction_target_interaction = null;
		CSP csp = null;
		Interaction interaction = null;
		Iterator fujaba__IterUseCaseToUseCaseToInteraction = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Lifeline sysLine = null;
		Iterator fujaba__IterSysActorToSysActorToSysLine = null;
		ActorToLifeline sysActorToSysLine = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterFlowToFlowToParentOperand = null;
		FlowToInteractionFragment flowToParentOperand = null;
		Lifeline line = null;
		Iterator fujaba__IterActorToActorToLine = null;
		ActorToLifeline actorToLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from eClass to performOperation
			fujaba__Success = false;

			fujaba__IterEClassToPerformOperation = eClass.getEOperations()
					.iterator();

			while (!(fujaba__Success)
					&& fujaba__IterEClassToPerformOperation.hasNext()) {
				try {
					performOperation = (EOperation) fujaba__IterEClassToPerformOperation
							.next();

					// check object performOperation is really bound
					JavaSDM.ensure(performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							performOperation.getName(), "perform_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE
					.createIsApplicableRuleResult();

			// assign attribute ruleresult
			ruleresult.setSuccess(false);
			// assign attribute ruleresult
			ruleresult.setRule("AltUserStepNFToComboRule");

			// create link
			ruleresult.setPerformOperation(performOperation);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'core match'
		try {
			fujaba__Success = false;

			_TmpObject = (match.getObject("actor"));

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;
			_TmpObject = (match.getObject("alt"));

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;
			_TmpObject = (match.getObject("altFlow"));

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;
			_TmpObject = (match.getObject("flow"));

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;
			_TmpObject = (match.getObject("packageDeclaration"));

			// ensure correct type and really bound of object packageDeclaration
			JavaSDM.ensure(_TmpObject instanceof PackageDeclaration);
			packageDeclaration = (PackageDeclaration) _TmpObject;
			_TmpObject = (match.getObject("step"));

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;
			_TmpObject = (match.getObject("sysActor"));

			// ensure correct type and really bound of object sysActor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			sysActor = (Actor) _TmpObject;
			_TmpObject = (match.getObject("useCase"));

			// ensure correct type and really bound of object useCase
			JavaSDM.ensure(_TmpObject instanceof UseCase);
			useCase = (UseCase) _TmpObject;
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// iterate to-many link source from actor to actorToLine
			fujaba__Success = false;

			fujaba__IterActorToActorToLine = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(actor,
							ActorToLifeline.class, "source")).iterator();

			while (fujaba__IterActorToActorToLine.hasNext()) {
				try {
					actorToLine = (ActorToLifeline) fujaba__IterActorToActorToLine
							.next();

					// check object actorToLine is really bound
					JavaSDM.ensure(actorToLine != null);
					// bind object
					line = actorToLine.getTarget();

					// check object line is really bound
					JavaSDM.ensure(line != null);

					// iterate to-many link source from flow to flowToParentOperand
					fujaba__Success = false;

					fujaba__IterFlowToFlowToParentOperand = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(flow,
											FlowToInteractionFragment.class,
											"source")).iterator();

					while (fujaba__IterFlowToFlowToParentOperand.hasNext()) {
						try {
							flowToParentOperand = (FlowToInteractionFragment) fujaba__IterFlowToFlowToParentOperand
									.next();

							// check object flowToParentOperand is really bound
							JavaSDM.ensure(flowToParentOperand != null);
							// bind object
							_TmpObject = flowToParentOperand.getTarget();

							// ensure correct type and really bound of object parentOperand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							parentOperand = (InteractionOperand) _TmpObject;

							// iterate to-many link source from sysActor to sysActorToSysLine
							fujaba__Success = false;

							fujaba__IterSysActorToSysActorToSysLine = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(sysActor,
													ActorToLifeline.class,
													"source")).iterator();

							while (fujaba__IterSysActorToSysActorToSysLine
									.hasNext()) {
								try {
									sysActorToSysLine = (ActorToLifeline) fujaba__IterSysActorToSysActorToSysLine
											.next();

									// check object sysActorToSysLine is really bound
									JavaSDM.ensure(sysActorToSysLine != null);
									// check isomorphic binding between objects sysActorToSysLine and actorToLine 
									JavaSDM.ensure(!sysActorToSysLine
											.equals(actorToLine));

									// bind object
									sysLine = sysActorToSysLine.getTarget();

									// check object sysLine is really bound
									JavaSDM.ensure(sysLine != null);

									// check isomorphic binding between objects sysLine and line 
									JavaSDM.ensure(!sysLine.equals(line));

									// iterate to-many link source from useCase to useCaseToInteraction
									fujaba__Success = false;

									fujaba__IterUseCaseToUseCaseToInteraction = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															useCase,
															UseCaseToInteraction.class,
															"source"))
											.iterator();

									while (fujaba__IterUseCaseToUseCaseToInteraction
											.hasNext()) {
										try {
											useCaseToInteraction = (UseCaseToInteraction) fujaba__IterUseCaseToUseCaseToInteraction
													.next();

											// check object useCaseToInteraction is really bound
											JavaSDM.ensure(useCaseToInteraction != null);
											// bind object
											interaction = useCaseToInteraction
													.getTarget();

											// check object interaction is really bound
											JavaSDM.ensure(interaction != null);

											// story node 'find context'
											try {
												fujaba__Success = false;

												// check object actor is really bound
												JavaSDM.ensure(actor != null);
												// check object actorToLine is really bound
												JavaSDM.ensure(actorToLine != null);
												// check object alt is really bound
												JavaSDM.ensure(alt != null);
												// check object altFlow is really bound
												JavaSDM.ensure(altFlow != null);
												// check object flow is really bound
												JavaSDM.ensure(flow != null);
												// check object flowToParentOperand is really bound
												JavaSDM.ensure(flowToParentOperand != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object packageDeclaration is really bound
												JavaSDM.ensure(packageDeclaration != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object step is really bound
												JavaSDM.ensure(step != null);
												// check object sysActor is really bound
												JavaSDM.ensure(sysActor != null);
												// check object sysActorToSysLine is really bound
												JavaSDM.ensure(sysActorToSysLine != null);
												// check object sysLine is really bound
												JavaSDM.ensure(sysLine != null);
												// check object useCase is really bound
												JavaSDM.ensure(useCase != null);
												// check object useCaseToInteraction is really bound
												JavaSDM.ensure(useCaseToInteraction != null);
												// check isomorphic binding between objects sysActor and actor 
												JavaSDM.ensure(!sysActor
														.equals(actor));

												// check isomorphic binding between objects sysActorToSysLine and actorToLine 
												JavaSDM.ensure(!sysActorToSysLine
														.equals(actorToLine));

												// check isomorphic binding between objects flow and altFlow 
												JavaSDM.ensure(!flow
														.equals(altFlow));

												// check isomorphic binding between objects sysLine and line 
												JavaSDM.ensure(!sysLine
														.equals(line));

												// check isomorphic binding between objects parentOperand and parentCombo 
												JavaSDM.ensure(!parentOperand
														.equals(parentCombo));

												// check link actor from step to actor
												JavaSDM.ensure(actor
														.equals(step.getActor()));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link ref from alt to altFlow
												JavaSDM.ensure(altFlow
														.equals(alt.getRef()));

												// check link actors from actor to packageDeclaration
												JavaSDM.ensure(packageDeclaration
														.equals(actor
																.eContainer()));

												// check link actors from sysActor to packageDeclaration
												JavaSDM.ensure(packageDeclaration
														.equals(sysActor
																.eContainer()));

												// check link flows from flow to useCase
												JavaSDM.ensure(useCase
														.equals(flow
																.eContainer()));

												// check link source from actorToLine to actor
												JavaSDM.ensure(actor
														.equals(actorToLine
																.getSource()));

												// check link source from flowToParentOperand to flow
												JavaSDM.ensure(flow
														.equals(flowToParentOperand
																.getSource()));

												// check link source from sysActorToSysLine to sysActor
												JavaSDM.ensure(sysActor
														.equals(sysActorToSysLine
																.getSource()));

												// check link source from useCaseToInteraction to useCase
												JavaSDM.ensure(useCase
														.equals(useCaseToInteraction
																.getSource()));

												// check link stepAlternative from alt to step
												JavaSDM.ensure(step.equals(alt
														.eContainer()));

												// check link steps from step to flow
												JavaSDM.ensure(flow.equals(step
														.eContainer()));

												// check link target from actorToLine to line
												JavaSDM.ensure(line
														.equals(actorToLine
																.getTarget()));

												// check link target from flowToParentOperand to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(flowToParentOperand
																.getTarget()));

												// check link target from sysActorToSysLine to sysLine
												JavaSDM.ensure(sysLine
														.equals(sysActorToSysLine
																.getTarget()));

												// check link target from useCaseToInteraction to interaction
												JavaSDM.ensure(interaction
														.equals(useCaseToInteraction
																.getTarget()));

												// create object isApplicableMatch
												isApplicableMatch = TGGRuntimeFactory.eINSTANCE
														.createIsApplicableMatch();

												// create object __packageDeclaration_actors_actor
												__packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __packageDeclaration_actors_sysActor
												__packageDeclaration_actors_sysActor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __step_actor_actor
												__step_actor_actor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __actorToLine_source_actor
												__actorToLine_source_actor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysActorToSysLine_source_sysActor
												__sysActorToSysLine_source_sysActor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysActorToSysLine_target_sysLine
												__sysActorToSysLine_target_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __flowToParentOperand_target_parentOperand
												__flowToParentOperand_target_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCase_flows_flow
												__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __flowToParentOperand_source_flow
												__flowToParentOperand_source_flow = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __flow_steps_step
												__flow_steps_step = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __interaction_lifeline_line
												__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __line_interaction_interaction
												__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __actorToLine_target_line
												__actorToLine_target_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __step_stepAlternative_alt
												__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __alt_ref_altFlow
												__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCaseToInteraction_source_useCase
												__useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCaseToInteraction_target_interaction
												__useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// assign attribute __packageDeclaration_actors_actor
												__packageDeclaration_actors_actor
														.setName("actors");
												// assign attribute __packageDeclaration_actors_sysActor
												__packageDeclaration_actors_sysActor
														.setName("actors");
												// assign attribute __sysActorToSysLine_source_sysActor
												__sysActorToSysLine_source_sysActor
														.setName("source");
												// assign attribute __sysActorToSysLine_target_sysLine
												__sysActorToSysLine_target_sysLine
														.setName("target");
												// assign attribute __flowToParentOperand_source_flow
												__flowToParentOperand_source_flow
														.setName("source");
												// assign attribute __flowToParentOperand_target_parentOperand
												__flowToParentOperand_target_parentOperand
														.setName("target");
												// assign attribute __step_stepAlternative_alt
												__step_stepAlternative_alt
														.setName("stepAlternative");
												// assign attribute __alt_ref_altFlow
												__alt_ref_altFlow
														.setName("ref");
												// assign attribute __useCase_flows_flow
												__useCase_flows_flow
														.setName("flows");
												// assign attribute __useCaseToInteraction_source_useCase
												__useCaseToInteraction_source_useCase
														.setName("source");
												// assign attribute __useCaseToInteraction_target_interaction
												__useCaseToInteraction_target_interaction
														.setName("target");
												// assign attribute __flow_steps_step
												__flow_steps_step
														.setName("steps");
												// assign attribute __step_actor_actor
												__step_actor_actor
														.setName("actor");
												// assign attribute __line_interaction_interaction
												__line_interaction_interaction
														.setName("interaction");
												// assign attribute __interaction_lifeline_line
												__interaction_lifeline_line
														.setName("lifeline");
												// assign attribute __actorToLine_source_actor
												__actorToLine_source_actor
														.setName("source");
												// assign attribute __actorToLine_target_line
												__actorToLine_target_line
														.setName("target");

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(packageDeclaration);

												// create link
												__packageDeclaration_actors_actor
														.setSrc(packageDeclaration);

												// create link
												__packageDeclaration_actors_sysActor
														.setSrc(packageDeclaration);

												// create link
												__step_actor_actor
														.setTrg(actor);

												// create link
												__actorToLine_source_actor
														.setTrg(actor);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(actor);

												// create link
												__packageDeclaration_actors_actor
														.setTrg(actor);

												// create link
												__sysActorToSysLine_source_sysActor
														.setTrg(sysActor);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysActor);

												// create link
												__packageDeclaration_actors_sysActor
														.setTrg(sysActor);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysLine);

												// create link
												__sysActorToSysLine_target_sysLine
														.setTrg(sysLine);

												// create link
												__sysActorToSysLine_source_sysActor
														.setSrc(sysActorToSysLine);

												// create link
												__sysActorToSysLine_target_sysLine
														.setSrc(sysActorToSysLine);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysActorToSysLine);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(parentOperand);

												// create link
												__flowToParentOperand_target_parentOperand
														.setTrg(parentOperand);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(parentCombo);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(flow);

												// create link
												__useCase_flows_flow
														.setTrg(flow);

												// create link
												__flowToParentOperand_source_flow
														.setTrg(flow);

												// create link
												__flow_steps_step.setSrc(flow);

												// create link
												__flowToParentOperand_target_parentOperand
														.setSrc(flowToParentOperand);

												// create link
												__flowToParentOperand_source_flow
														.setSrc(flowToParentOperand);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(flowToParentOperand);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(line);

												// create link
												__interaction_lifeline_line
														.setTrg(line);

												// create link
												__line_interaction_interaction
														.setSrc(line);

												// create link
												__actorToLine_target_line
														.setTrg(line);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(step);

												// create link
												__flow_steps_step.setTrg(step);

												// create link
												__step_stepAlternative_alt
														.setSrc(step);

												// create link
												__step_actor_actor.setSrc(step);

												// create link
												__alt_ref_altFlow.setSrc(alt);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(alt);

												// create link
												__step_stepAlternative_alt
														.setTrg(alt);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(altFlow);

												// create link
												__alt_ref_altFlow
														.setTrg(altFlow);

												// create link
												__useCase_flows_flow
														.setSrc(useCase);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(useCase);

												// create link
												__useCaseToInteraction_source_useCase
														.setTrg(useCase);

												// create link
												__useCaseToInteraction_source_useCase
														.setSrc(useCaseToInteraction);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(useCaseToInteraction);

												// create link
												__useCaseToInteraction_target_interaction
														.setSrc(useCaseToInteraction);

												// create link
												__line_interaction_interaction
														.setTrg(interaction);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(interaction);

												// create link
												__interaction_lifeline_line
														.setSrc(interaction);

												// create link
												__useCaseToInteraction_target_interaction
														.setTrg(interaction);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(actorToLine);

												// create link
												__actorToLine_target_line
														.setSrc(actorToLine);

												// create link
												__actorToLine_source_actor
														.setSrc(actorToLine);

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__flow_steps_step,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__flowToParentOperand_target_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__packageDeclaration_actors_sysActor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__packageDeclaration_actors_actor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__actorToLine_source_actor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysActorToSysLine_source_sysActor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCase_flows_flow,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysActorToSysLine_target_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__step_stepAlternative_alt,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__line_interaction_interaction,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__step_actor_actor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__flowToParentOperand_source_flow,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__actorToLine_target_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__alt_ref_altFlow,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCaseToInteraction_target_interaction,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCaseToInteraction_source_useCase,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__interaction_lifeline_line,
																"allContextElements");
												// story node 'solve CSP'
												try {
													fujaba__Success = false;

													_TmpObject = (this
															.isApplicable_solveCsp_FWD(
																	isApplicableMatch,
																	packageDeclaration,
																	actor,
																	sysActor,
																	sysLine,
																	sysActorToSysLine,
																	parentOperand,
																	parentCombo,
																	flow,
																	flowToParentOperand,
																	line,
																	step,
																	alt,
																	altFlow,
																	useCase,
																	useCaseToInteraction,
																	interaction,
																	actorToLine));

													// ensure correct type and really bound of object csp
													JavaSDM.ensure(_TmpObject instanceof CSP);
													csp = (CSP) _TmpObject;
													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												// statement node 'check CSP'
												fujaba__Success = this
														.isApplicable_checkCsp_FWD(csp);
												if (fujaba__Success) {
													// story node 'add match to rule result'
													try {
														fujaba__Success = false;

														// check object isApplicableMatch is really bound
														JavaSDM.ensure(isApplicableMatch != null);
														// check object ruleresult is really bound
														JavaSDM.ensure(ruleresult != null);
														// assign attribute isApplicableMatch
														isApplicableMatch
																.setRuleName("AltUserStepNFToComboRule");
														// assign attribute ruleresult
														ruleresult
																.setSuccess(true);

														// create link
														ruleresult
																.getIsApplicableMatch()
																.add(isApplicableMatch);

														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase) {
		match.registerObject("packageDeclaration", packageDeclaration);
		match.registerObject("actor", actor);
		match.registerObject("sysActor", sysActor);
		match.registerObject("flow", flow);
		match.registerObject("step", step);
		match.registerObject("alt", alt);
		match.registerObject("altFlow", altFlow);
		match.registerObject("useCase", useCase);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("person");
		literal0.setType("String");
		Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal1", true, csp);
		literal1.setValue("system");
		literal1.setType("String");

		// Create attribute variables
		Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"actor.type", true, csp);
		var_actor_type.setValue(actor.getType());
		var_actor_type.setType("EObject");
		Variable var_sysActor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"sysActor.type", true, csp);
		var_sysActor_type.setValue(sysActor.getType());
		var_sysActor_type.setType("EObject");

		// Create explicit parameters

		// Create unbound variables

		// Create constraints
		EqActorType eqActorType = new EqActorType();
		EqActorType eqActorType_0 = new EqActorType();

		csp.getConstraints().add(eqActorType);
		csp.getConstraints().add(eqActorType_0);

		// Solve CSP
		eqActorType.setRuleName("");
		eqActorType.solve(var_actor_type, literal0);
		eqActorType_0.setRuleName("");
		eqActorType_0.solve(var_sysActor_type, literal1);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_checkCsp_FWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			InteractionOperand parentOperand, InteractionOperand parentCombo,
			NamedFlow flow, FlowToInteractionFragment flowToParentOperand,
			Lifeline line, NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Interaction interaction,
			ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", true, csp);
		var_altFlow_name.setValue(altFlow.getName());
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", true, csp);
		var_alt_condition.setValue(alt.getCondition());
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", true, csp);
		var_step_name.setValue(step.getName());
		var_step_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", csp);
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", csp);
		var_spec_value.setType("");
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", csp);
		var_combo_interactionOperator.setType("EObject");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", csp);
		var_message_name.setType("");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		EqInterOperKind eqInterOperKind = new EqInterOperKind();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eqInterOperKind);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("packageDeclaration",
				packageDeclaration);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("sysActor", sysActor);
		isApplicableMatch.registerObject("sysLine", sysLine);
		isApplicableMatch
				.registerObject("sysActorToSysLine", sysActorToSysLine);
		isApplicableMatch.registerObject("parentOperand", parentOperand);
		isApplicableMatch.registerObject("parentCombo", parentCombo);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("flowToParentOperand",
				flowToParentOperand);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("step", step);
		isApplicableMatch.registerObject("alt", alt);
		isApplicableMatch.registerObject("altFlow", altFlow);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isApplicable_checkCsp_FWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_FWD(PerformRuleResult ruleresult,
			EObject packageDeclaration, EObject actor, EObject sysActor,
			EObject sysLine, EObject sysActorToSysLine, EObject messageSend,
			EObject combo, EObject operand, EObject parentOperand,
			EObject parentCombo, EObject flow, EObject flowToParentOperand,
			EObject messageReceive, EObject line, EObject step, EObject alt,
			EObject stepToCombo, EObject alternative1ToOperand, EObject guard,
			EObject spec, EObject altFlow, EObject altFlowToOperand,
			EObject useCase, EObject useCaseToInteraction, EObject message,
			EObject interaction, EObject stepToMessage, EObject actorToLine) {
		ruleresult.registerObject("packageDeclaration", packageDeclaration);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("sysActor", sysActor);
		ruleresult.registerObject("sysLine", sysLine);
		ruleresult.registerObject("sysActorToSysLine", sysActorToSysLine);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("parentOperand", parentOperand);
		ruleresult.registerObject("parentCombo", parentCombo);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("flowToParentOperand", flowToParentOperand);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkTypes_FWD(Match match) {
		return true
				&& match.getObject("step")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getNormalStep())
				&& match.getObject("alt")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getAlternativeFlowAlternative())
				&& match.getObject("altFlow")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getAlternativeFlow());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			InteractionOperand parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			InteractionConstraint guard, LiteralString spec, Message message,
			Interaction interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __messageSend_covered_sysLine = null;
		EMoflonEdge __sysLine_coveredBy_messageSend = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __parentCombo_covered_sysLine = null;
		EMoflonEdge __sysLine_coveredBy_parentCombo = null;
		EMoflonEdge __operand_covered_sysLine = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __messageReceive_enclosingOperand_parentOperand = null;
		EMoflonEdge __sysLine_coveredBy_combo = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __parentOperand_covered_sysLine = null;
		EMoflonEdge __parentOperand_covered_line = null;
		EMoflonEdge __parentOperand_fragment_messageReceive = null;
		EMoflonEdge __parentCombo_covered_line = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __combo_covered_sysLine = null;
		EMoflonEdge __line_coveredBy_parentCombo = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __sysLine_coveredBy_operand = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __sysLine_coveredBy_parentOperand = null;
		EMoflonEdge __line_coveredBy_parentOperand = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __line_interaction_interaction = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);
			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object sysLine is really bound
			JavaSDM.ensure(sysLine != null);
			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects parentCombo and operand 
			JavaSDM.ensure(!parentCombo.equals(operand));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// check isomorphic binding between objects parentOperand and parentCombo 
			JavaSDM.ensure(!parentOperand.equals(parentCombo));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_BWD(match, sysLine,
					messageSend, combo, operand, parentOperand, parentCombo,
					messageReceive, line, guard, spec, message, interaction));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object parentCombo is really bound
				JavaSDM.ensure(parentCombo != null);
				// check object parentOperand is really bound
				JavaSDM.ensure(parentOperand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check object sysLine is really bound
				JavaSDM.ensure(sysLine != null);
				// check isomorphic binding between objects sysLine and line 
				JavaSDM.ensure(!sysLine.equals(line));

				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check isomorphic binding between objects parentCombo and operand 
				JavaSDM.ensure(!parentCombo.equals(operand));

				// check isomorphic binding between objects parentOperand and operand 
				JavaSDM.ensure(!parentOperand.equals(operand));

				// check isomorphic binding between objects parentOperand and parentCombo 
				JavaSDM.ensure(!parentOperand.equals(parentCombo));

				// create object __messageSend_covered_sysLine
				__messageSend_covered_sysLine = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __sysLine_coveredBy_messageSend
				__sysLine_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_sendEvent_messageSend
				__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentCombo_covered_sysLine
				__parentCombo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __sysLine_coveredBy_parentCombo
				__sysLine_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_covered_sysLine
				__operand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_message_message
				__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_enclosingOperand_parentOperand
				__messageReceive_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __sysLine_coveredBy_combo
				__sysLine_coveredBy_combo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_operand
				__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_covered_sysLine
				__parentOperand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_covered_line
				__parentOperand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_fragment_messageReceive
				__parentOperand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentCombo_covered_line
				__parentCombo_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_interaction_interaction
				__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_message_message
				__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_covered_sysLine
				__combo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_parentCombo
				__line_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_covered_line
				__operand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __sysLine_coveredBy_operand
				__sysLine_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_message_message
				__interaction_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __guard_specification_spec
				__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_guard_guard
				__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __sysLine_coveredBy_parentOperand
				__sysLine_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_parentOperand
				__line_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __sysLine_coveredBy_messageSend
				__sysLine_coveredBy_messageSend.setName("coveredBy");
				// assign attribute __messageSend_covered_sysLine
				__messageSend_covered_sysLine.setName("covered");
				// assign attribute __sysLine_coveredBy_combo
				__sysLine_coveredBy_combo.setName("coveredBy");
				// assign attribute __combo_covered_sysLine
				__combo_covered_sysLine.setName("covered");
				// assign attribute __sysLine_coveredBy_operand
				__sysLine_coveredBy_operand.setName("coveredBy");
				// assign attribute __operand_covered_sysLine
				__operand_covered_sysLine.setName("covered");
				// assign attribute __sysLine_coveredBy_parentOperand
				__sysLine_coveredBy_parentOperand.setName("coveredBy");
				// assign attribute __parentOperand_covered_sysLine
				__parentOperand_covered_sysLine.setName("covered");
				// assign attribute __sysLine_coveredBy_parentCombo
				__sysLine_coveredBy_parentCombo.setName("coveredBy");
				// assign attribute __parentCombo_covered_sysLine
				__parentCombo_covered_sysLine.setName("covered");
				// assign attribute __parentOperand_fragment_messageReceive
				__parentOperand_fragment_messageReceive.setName("fragment");
				// assign attribute __messageReceive_enclosingOperand_parentOperand
				__messageReceive_enclosingOperand_parentOperand
						.setName("enclosingOperand");
				// assign attribute __line_coveredBy_parentOperand
				__line_coveredBy_parentOperand.setName("coveredBy");
				// assign attribute __parentOperand_covered_line
				__parentOperand_covered_line.setName("covered");
				// assign attribute __line_coveredBy_parentCombo
				__line_coveredBy_parentCombo.setName("coveredBy");
				// assign attribute __parentCombo_covered_line
				__parentCombo_covered_line.setName("covered");
				// assign attribute __line_coveredBy_operand
				__line_coveredBy_operand.setName("coveredBy");
				// assign attribute __operand_covered_line
				__operand_covered_line.setName("covered");
				// assign attribute __operand_guard_guard
				__operand_guard_guard.setName("guard");
				// assign attribute __guard_specification_spec
				__guard_specification_spec.setName("specification");
				// assign attribute __message_sendEvent_messageSend
				__message_sendEvent_messageSend.setName("sendEvent");
				// assign attribute __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive.setName("receiveEvent");
				// assign attribute __message_interaction_interaction
				__message_interaction_interaction.setName("interaction");
				// assign attribute __interaction_message_message
				__interaction_message_message.setName("message");
				// assign attribute __messageSend_message_message
				__messageSend_message_message.setName("message");
				// assign attribute __messageReceive_message_message
				__messageReceive_message_message.setName("message");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_covered_sysLine, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__sysLine_coveredBy_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_sendEvent_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentCombo_covered_sysLine, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						combo, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__sysLine_coveredBy_parentCombo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_covered_sysLine, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageReceive_enclosingOperand_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__sysLine_coveredBy_combo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageSend, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						operand, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						guard, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_receiveEvent_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_covered_sysLine, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_fragment_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentCombo_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_interaction_interaction,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						message, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil
						.addOppositeReference(match,
								__messageReceive_message_message,
								"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_covered_sysLine, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_parentCombo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__sysLine_coveredBy_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						spec, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__guard_specification_spec, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_guard_guard, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__sysLine_coveredBy_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageReceive, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_parentOperand, "toBeTranslatedEdges");

				// create link
				__sysLine_coveredBy_messageSend.setSrc(sysLine);

				// create link
				__sysLine_coveredBy_operand.setSrc(sysLine);

				// create link
				__sysLine_coveredBy_combo.setSrc(sysLine);

				// create link
				__sysLine_coveredBy_parentCombo.setSrc(sysLine);

				// create link
				__operand_covered_sysLine.setTrg(sysLine);

				// create link
				__sysLine_coveredBy_parentOperand.setSrc(sysLine);

				// create link
				__parentOperand_covered_sysLine.setTrg(sysLine);

				// create link
				__combo_covered_sysLine.setTrg(sysLine);

				// create link
				__parentCombo_covered_sysLine.setTrg(sysLine);

				// create link
				__messageSend_covered_sysLine.setTrg(sysLine);

				// create link
				__sysLine_coveredBy_messageSend.setTrg(messageSend);

				// create link
				__message_sendEvent_messageSend.setTrg(messageSend);

				// create link
				__messageSend_covered_sysLine.setSrc(messageSend);

				// create link
				__messageSend_message_message.setSrc(messageSend);

				// create link
				__sysLine_coveredBy_combo.setTrg(combo);

				// create link
				__combo_covered_sysLine.setSrc(combo);

				// create link
				__operand_covered_sysLine.setSrc(operand);

				// create link
				__operand_guard_guard.setSrc(operand);

				// create link
				__operand_covered_line.setSrc(operand);

				// create link
				__line_coveredBy_operand.setTrg(operand);

				// create link
				__sysLine_coveredBy_operand.setTrg(operand);

				// create link
				__sysLine_coveredBy_parentOperand.setTrg(parentOperand);

				// create link
				__parentOperand_covered_line.setSrc(parentOperand);

				// create link
				__parentOperand_fragment_messageReceive.setSrc(parentOperand);

				// create link
				__line_coveredBy_parentOperand.setTrg(parentOperand);

				// create link
				__parentOperand_covered_sysLine.setSrc(parentOperand);

				// create link
				__messageReceive_enclosingOperand_parentOperand
						.setTrg(parentOperand);

				// create link
				__line_coveredBy_parentCombo.setTrg(parentCombo);

				// create link
				__sysLine_coveredBy_parentCombo.setTrg(parentCombo);

				// create link
				__parentCombo_covered_sysLine.setSrc(parentCombo);

				// create link
				__parentCombo_covered_line.setSrc(parentCombo);

				// create link
				__parentOperand_fragment_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_enclosingOperand_parentOperand
						.setSrc(messageReceive);

				// create link
				__message_receiveEvent_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_message_message.setSrc(messageReceive);

				// create link
				__parentOperand_covered_line.setTrg(line);

				// create link
				__operand_covered_line.setTrg(line);

				// create link
				__line_coveredBy_parentCombo.setSrc(line);

				// create link
				__line_coveredBy_parentOperand.setSrc(line);

				// create link
				__parentCombo_covered_line.setTrg(line);

				// create link
				__line_coveredBy_operand.setSrc(line);

				// create link
				__operand_guard_guard.setTrg(guard);

				// create link
				__guard_specification_spec.setSrc(guard);

				// create link
				__guard_specification_spec.setTrg(spec);

				// create link
				__interaction_message_message.setTrg(message);

				// create link
				__message_sendEvent_messageSend.setSrc(message);

				// create link
				__messageSend_message_message.setTrg(message);

				// create link
				__message_receiveEvent_messageReceive.setSrc(message);

				// create link
				__messageReceive_message_message.setTrg(message);

				// create link
				__message_interaction_interaction.setSrc(message);

				// create link
				__interaction_message_message.setSrc(interaction);

				// create link
				__message_interaction_interaction.setTrg(interaction);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object parentCombo is really bound
				JavaSDM.ensure(parentCombo != null);
				// check object parentOperand is really bound
				JavaSDM.ensure(parentOperand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check object sysLine is really bound
				JavaSDM.ensure(sysLine != null);
				// check isomorphic binding between objects sysLine and line 
				JavaSDM.ensure(!sysLine.equals(line));

				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check isomorphic binding between objects parentCombo and operand 
				JavaSDM.ensure(!parentCombo.equals(operand));

				// check isomorphic binding between objects parentOperand and operand 
				JavaSDM.ensure(!parentOperand.equals(operand));

				// check isomorphic binding between objects parentOperand and parentCombo 
				JavaSDM.ensure(!parentOperand.equals(parentCombo));

				// create object __interaction_lifeline_line
				__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_interaction_interaction
				__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __line_interaction_interaction
				__line_interaction_interaction.setName("interaction");
				// assign attribute __interaction_lifeline_line
				__interaction_lifeline_line.setName("lifeline");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						line, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_lifeline_line, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						parentOperand, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_interaction_interaction, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						parentCombo, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						sysLine, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						interaction, "contextNodes");

				// create link
				__line_interaction_interaction.setSrc(line);

				// create link
				__interaction_lifeline_line.setTrg(line);

				// create link
				__interaction_lifeline_line.setSrc(interaction);

				// create link
				__line_interaction_interaction.setTrg(interaction);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_BWD(match, sysLine, messageSend, combo,
					operand, parentOperand, parentCombo, messageReceive, line,
					guard, spec, message, interaction);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		Actor actor = null;
		ActorToLifeline actorToLine = null;
		CombinedFragment combo = null;
		NamedFlow flow = null;
		FlowToInteractionFragment flowToParentOperand = null;
		InteractionConstraint guard = null;
		Interaction interaction = null;
		Lifeline line = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand operand = null;
		PackageDeclaration packageDeclaration = null;
		InteractionOperand parentCombo = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		Actor sysActor = null;
		ActorToLifeline sysActorToSysLine = null;
		Lifeline sysLine = null;
		UseCase useCase = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Iterator fujaba__IterIsApplicableMatchToCsp = null;
		CSP csp = null;
		NormalStep step = null;
		NormalStepToCombinedFragment stepToCombo = null;
		StepAlternativeToInteractionOperand alternative1ToOperand = null;
		FlowToInteractionFragment altFlowToOperand = null;
		AlternativeFlowAlternative alt = null;
		NormalStepToMessage stepToMessage = null;
		AlternativeFlow altFlow = null;
		PerformRuleResult ruleresult = null;
		EMoflonEdge alternative1ToOperand__target__operand = null;
		EMoflonEdge __operand_covered_sysLine = null;
		EMoflonEdge step__actor__actor = null;
		EMoflonEdge __parentCombo_covered_sysLine = null;
		EMoflonEdge altFlowToOperand__target__operand = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge stepToCombo__source__step = null;
		EMoflonEdge step__stepAlternative__alt = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __sysLine_coveredBy_messageSend = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge stepToCombo__target__combo = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __sysLine_coveredBy_parentOperand = null;
		EMoflonEdge flow__steps__step = null;
		EMoflonEdge __line_coveredBy_parentCombo = null;
		EMoflonEdge __parentOperand_fragment_messageReceive = null;
		EMoflonEdge stepToMessage__source__step = null;
		EMoflonEdge __sysLine_coveredBy_combo = null;
		EMoflonEdge altFlowToOperand__source__altFlow = null;
		EMoflonEdge __sysLine_coveredBy_operand = null;
		EMoflonEdge __parentOperand_covered_sysLine = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge alternative1ToOperand__source__alt = null;
		EMoflonEdge __sysLine_coveredBy_parentCombo = null;
		EMoflonEdge stepToMessage__target__message = null;
		EMoflonEdge alt__ref__altFlow = null;
		EMoflonEdge __line_coveredBy_parentOperand = null;
		EMoflonEdge __messageSend_covered_sysLine = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __combo_covered_sysLine = null;
		EMoflonEdge __parentCombo_covered_line = null;
		EMoflonEdge __messageReceive_enclosingOperand_parentOperand = null;
		EMoflonEdge __parentOperand_covered_line = null;
		EMoflonEdge __operand_covered_line = null;

		// story node 'perform transformation'
		try {
			fujaba__Success = false;

			_TmpObject = (isApplicableMatch.getObject("actor"));

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("actorToLine"));

			// ensure correct type and really bound of object actorToLine
			JavaSDM.ensure(_TmpObject instanceof ActorToLifeline);
			actorToLine = (ActorToLifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("combo"));

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flow"));

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flowToParentOperand"));

			// ensure correct type and really bound of object flowToParentOperand
			JavaSDM.ensure(_TmpObject instanceof FlowToInteractionFragment);
			flowToParentOperand = (FlowToInteractionFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("guard"));

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("interaction"));

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("line"));

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("message"));

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("messageReceive"));

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("messageSend"));

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("operand"));

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("packageDeclaration"));

			// ensure correct type and really bound of object packageDeclaration
			JavaSDM.ensure(_TmpObject instanceof PackageDeclaration);
			packageDeclaration = (PackageDeclaration) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("parentCombo"));

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentCombo = (InteractionOperand) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("parentOperand"));

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("spec"));

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysActor"));

			// ensure correct type and really bound of object sysActor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			sysActor = (Actor) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysActorToSysLine"));

			// ensure correct type and really bound of object sysActorToSysLine
			JavaSDM.ensure(_TmpObject instanceof ActorToLifeline);
			sysActorToSysLine = (ActorToLifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysLine"));

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCase"));

			// ensure correct type and really bound of object useCase
			JavaSDM.ensure(_TmpObject instanceof UseCase);
			useCase = (UseCase) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCaseToInteraction"));

			// ensure correct type and really bound of object useCaseToInteraction
			JavaSDM.ensure(_TmpObject instanceof UseCaseToInteraction);
			useCaseToInteraction = (UseCaseToInteraction) _TmpObject;
			// check object isApplicableMatch is really bound
			JavaSDM.ensure(isApplicableMatch != null);
			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects sysActorToSysLine and actorToLine 
			JavaSDM.ensure(!sysActorToSysLine.equals(actorToLine));

			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects parentCombo and operand 
			JavaSDM.ensure(!parentCombo.equals(operand));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// check isomorphic binding between objects parentOperand and parentCombo 
			JavaSDM.ensure(!parentOperand.equals(parentCombo));

			// iterate to-many link attributeInfo from isApplicableMatch to csp
			fujaba__Success = false;

			fujaba__IterIsApplicableMatchToCsp = isApplicableMatch
					.getAttributeInfo().iterator();

			while (!(fujaba__Success)
					&& fujaba__IterIsApplicableMatchToCsp.hasNext()) {
				try {
					_TmpObject = fujaba__IterIsApplicableMatchToCsp.next();

					// ensure correct type and really bound of object csp
					JavaSDM.ensure(_TmpObject instanceof CSP);
					csp = (CSP) _TmpObject;

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object step
			step = UseCaseDSLFactory.eINSTANCE.createNormalStep();

			// create object stepToCombo
			stepToCombo = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToCombinedFragment();

			// create object alternative1ToOperand
			alternative1ToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createStepAlternativeToInteractionOperand();

			// create object altFlowToOperand
			altFlowToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createFlowToInteractionFragment();

			// create object alt
			alt = UseCaseDSLFactory.eINSTANCE
					.createAlternativeFlowAlternative();

			// create object stepToMessage
			stepToMessage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToMessage();

			// create object altFlow
			altFlow = UseCaseDSLFactory.eINSTANCE.createAlternativeFlow();

			// assign attribute step
			step.setName((java.lang.String) csp.getValue("step", "name"));
			// assign attribute alt
			alt.setCondition((java.lang.String) csp
					.getValue("alt", "condition"));
			// assign attribute altFlow
			altFlow.setName((java.lang.String) csp.getValue("altFlow", "name"));

			// create link
			stepToMessage.setTarget(message);

			// create link
			step.setActor(actor);

			// create link
			stepToCombo.setTarget(combo);

			// create link
			alternative1ToOperand.setTarget(operand);

			// create link
			altFlowToOperand.setTarget(operand);

			// create link
			flow.getSteps().add(step); // add link

			// create link
			step.getStepAlternative().add(alt); // add link

			// create link
			stepToMessage.setSource(step);

			// create link
			stepToCombo.setSource(step);

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(alt, altFlow,
					"ref");

			// create link
			alternative1ToOperand.setSource(alt);

			// create link
			altFlowToOperand.setSource(altFlow);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'collect translated elements'
		try {
			fujaba__Success = false;

			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object altFlowToOperand is really bound
			JavaSDM.ensure(altFlowToOperand != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object stepToMessage is really bound
			JavaSDM.ensure(stepToMessage != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alt, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					guard, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					spec, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlow, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend, "translatedElements");
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'bookkeeping for edges'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object actorToLine is really bound
			JavaSDM.ensure(actorToLine != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object altFlowToOperand is really bound
			JavaSDM.ensure(altFlowToOperand != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object flowToParentOperand is really bound
			JavaSDM.ensure(flowToParentOperand != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);
			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);
			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);
			// check object ruleresult is really bound
			JavaSDM.ensure(ruleresult != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object stepToMessage is really bound
			JavaSDM.ensure(stepToMessage != null);
			// check object sysActor is really bound
			JavaSDM.ensure(sysActor != null);
			// check object sysActorToSysLine is really bound
			JavaSDM.ensure(sysActorToSysLine != null);
			// check object sysLine is really bound
			JavaSDM.ensure(sysLine != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check object useCaseToInteraction is really bound
			JavaSDM.ensure(useCaseToInteraction != null);
			// check isomorphic binding between objects actorToLine and actor 
			JavaSDM.ensure(!actorToLine.equals(actor));

			// check isomorphic binding between objects alt and actor 
			JavaSDM.ensure(!alt.equals(actor));

			// check isomorphic binding between objects altFlow and actor 
			JavaSDM.ensure(!altFlow.equals(actor));

			// check isomorphic binding between objects altFlowToOperand and actor 
			JavaSDM.ensure(!altFlowToOperand.equals(actor));

			// check isomorphic binding between objects alternative1ToOperand and actor 
			JavaSDM.ensure(!alternative1ToOperand.equals(actor));

			// check isomorphic binding between objects combo and actor 
			JavaSDM.ensure(!combo.equals(actor));

			// check isomorphic binding between objects flow and actor 
			JavaSDM.ensure(!flow.equals(actor));

			// check isomorphic binding between objects flowToParentOperand and actor 
			JavaSDM.ensure(!flowToParentOperand.equals(actor));

			// check isomorphic binding between objects guard and actor 
			JavaSDM.ensure(!guard.equals(actor));

			// check isomorphic binding between objects interaction and actor 
			JavaSDM.ensure(!interaction.equals(actor));

			// check isomorphic binding between objects line and actor 
			JavaSDM.ensure(!line.equals(actor));

			// check isomorphic binding between objects message and actor 
			JavaSDM.ensure(!message.equals(actor));

			// check isomorphic binding between objects messageReceive and actor 
			JavaSDM.ensure(!messageReceive.equals(actor));

			// check isomorphic binding between objects messageSend and actor 
			JavaSDM.ensure(!messageSend.equals(actor));

			// check isomorphic binding between objects operand and actor 
			JavaSDM.ensure(!operand.equals(actor));

			// check isomorphic binding between objects packageDeclaration and actor 
			JavaSDM.ensure(!packageDeclaration.equals(actor));

			// check isomorphic binding between objects parentCombo and actor 
			JavaSDM.ensure(!parentCombo.equals(actor));

			// check isomorphic binding between objects parentOperand and actor 
			JavaSDM.ensure(!parentOperand.equals(actor));

			// check isomorphic binding between objects spec and actor 
			JavaSDM.ensure(!spec.equals(actor));

			// check isomorphic binding between objects step and actor 
			JavaSDM.ensure(!step.equals(actor));

			// check isomorphic binding between objects stepToCombo and actor 
			JavaSDM.ensure(!stepToCombo.equals(actor));

			// check isomorphic binding between objects stepToMessage and actor 
			JavaSDM.ensure(!stepToMessage.equals(actor));

			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects sysActorToSysLine and actor 
			JavaSDM.ensure(!sysActorToSysLine.equals(actor));

			// check isomorphic binding between objects sysLine and actor 
			JavaSDM.ensure(!sysLine.equals(actor));

			// check isomorphic binding between objects useCase and actor 
			JavaSDM.ensure(!useCase.equals(actor));

			// check isomorphic binding between objects useCaseToInteraction and actor 
			JavaSDM.ensure(!useCaseToInteraction.equals(actor));

			// check isomorphic binding between objects alt and actorToLine 
			JavaSDM.ensure(!alt.equals(actorToLine));

			// check isomorphic binding between objects altFlow and actorToLine 
			JavaSDM.ensure(!altFlow.equals(actorToLine));

			// check isomorphic binding between objects altFlowToOperand and actorToLine 
			JavaSDM.ensure(!altFlowToOperand.equals(actorToLine));

			// check isomorphic binding between objects alternative1ToOperand and actorToLine 
			JavaSDM.ensure(!alternative1ToOperand.equals(actorToLine));

			// check isomorphic binding between objects combo and actorToLine 
			JavaSDM.ensure(!combo.equals(actorToLine));

			// check isomorphic binding between objects flow and actorToLine 
			JavaSDM.ensure(!flow.equals(actorToLine));

			// check isomorphic binding between objects flowToParentOperand and actorToLine 
			JavaSDM.ensure(!flowToParentOperand.equals(actorToLine));

			// check isomorphic binding between objects guard and actorToLine 
			JavaSDM.ensure(!guard.equals(actorToLine));

			// check isomorphic binding between objects interaction and actorToLine 
			JavaSDM.ensure(!interaction.equals(actorToLine));

			// check isomorphic binding between objects line and actorToLine 
			JavaSDM.ensure(!line.equals(actorToLine));

			// check isomorphic binding between objects message and actorToLine 
			JavaSDM.ensure(!message.equals(actorToLine));

			// check isomorphic binding between objects messageReceive and actorToLine 
			JavaSDM.ensure(!messageReceive.equals(actorToLine));

			// check isomorphic binding between objects messageSend and actorToLine 
			JavaSDM.ensure(!messageSend.equals(actorToLine));

			// check isomorphic binding between objects operand and actorToLine 
			JavaSDM.ensure(!operand.equals(actorToLine));

			// check isomorphic binding between objects packageDeclaration and actorToLine 
			JavaSDM.ensure(!packageDeclaration.equals(actorToLine));

			// check isomorphic binding between objects parentCombo and actorToLine 
			JavaSDM.ensure(!parentCombo.equals(actorToLine));

			// check isomorphic binding between objects parentOperand and actorToLine 
			JavaSDM.ensure(!parentOperand.equals(actorToLine));

			// check isomorphic binding between objects spec and actorToLine 
			JavaSDM.ensure(!spec.equals(actorToLine));

			// check isomorphic binding between objects step and actorToLine 
			JavaSDM.ensure(!step.equals(actorToLine));

			// check isomorphic binding between objects stepToCombo and actorToLine 
			JavaSDM.ensure(!stepToCombo.equals(actorToLine));

			// check isomorphic binding between objects stepToMessage and actorToLine 
			JavaSDM.ensure(!stepToMessage.equals(actorToLine));

			// check isomorphic binding between objects sysActor and actorToLine 
			JavaSDM.ensure(!sysActor.equals(actorToLine));

			// check isomorphic binding between objects sysActorToSysLine and actorToLine 
			JavaSDM.ensure(!sysActorToSysLine.equals(actorToLine));

			// check isomorphic binding between objects sysLine and actorToLine 
			JavaSDM.ensure(!sysLine.equals(actorToLine));

			// check isomorphic binding between objects useCase and actorToLine 
			JavaSDM.ensure(!useCase.equals(actorToLine));

			// check isomorphic binding between objects useCaseToInteraction and actorToLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(actorToLine));

			// check isomorphic binding between objects altFlow and alt 
			JavaSDM.ensure(!altFlow.equals(alt));

			// check isomorphic binding between objects altFlowToOperand and alt 
			JavaSDM.ensure(!altFlowToOperand.equals(alt));

			// check isomorphic binding between objects alternative1ToOperand and alt 
			JavaSDM.ensure(!alternative1ToOperand.equals(alt));

			// check isomorphic binding between objects combo and alt 
			JavaSDM.ensure(!combo.equals(alt));

			// check isomorphic binding between objects flow and alt 
			JavaSDM.ensure(!flow.equals(alt));

			// check isomorphic binding between objects flowToParentOperand and alt 
			JavaSDM.ensure(!flowToParentOperand.equals(alt));

			// check isomorphic binding between objects guard and alt 
			JavaSDM.ensure(!guard.equals(alt));

			// check isomorphic binding between objects interaction and alt 
			JavaSDM.ensure(!interaction.equals(alt));

			// check isomorphic binding between objects line and alt 
			JavaSDM.ensure(!line.equals(alt));

			// check isomorphic binding between objects message and alt 
			JavaSDM.ensure(!message.equals(alt));

			// check isomorphic binding between objects messageReceive and alt 
			JavaSDM.ensure(!messageReceive.equals(alt));

			// check isomorphic binding between objects messageSend and alt 
			JavaSDM.ensure(!messageSend.equals(alt));

			// check isomorphic binding between objects operand and alt 
			JavaSDM.ensure(!operand.equals(alt));

			// check isomorphic binding between objects packageDeclaration and alt 
			JavaSDM.ensure(!packageDeclaration.equals(alt));

			// check isomorphic binding between objects parentCombo and alt 
			JavaSDM.ensure(!parentCombo.equals(alt));

			// check isomorphic binding between objects parentOperand and alt 
			JavaSDM.ensure(!parentOperand.equals(alt));

			// check isomorphic binding between objects spec and alt 
			JavaSDM.ensure(!spec.equals(alt));

			// check isomorphic binding between objects step and alt 
			JavaSDM.ensure(!step.equals(alt));

			// check isomorphic binding between objects stepToCombo and alt 
			JavaSDM.ensure(!stepToCombo.equals(alt));

			// check isomorphic binding between objects stepToMessage and alt 
			JavaSDM.ensure(!stepToMessage.equals(alt));

			// check isomorphic binding between objects sysActor and alt 
			JavaSDM.ensure(!sysActor.equals(alt));

			// check isomorphic binding between objects sysActorToSysLine and alt 
			JavaSDM.ensure(!sysActorToSysLine.equals(alt));

			// check isomorphic binding between objects sysLine and alt 
			JavaSDM.ensure(!sysLine.equals(alt));

			// check isomorphic binding between objects useCase and alt 
			JavaSDM.ensure(!useCase.equals(alt));

			// check isomorphic binding between objects useCaseToInteraction and alt 
			JavaSDM.ensure(!useCaseToInteraction.equals(alt));

			// check isomorphic binding between objects altFlowToOperand and altFlow 
			JavaSDM.ensure(!altFlowToOperand.equals(altFlow));

			// check isomorphic binding between objects alternative1ToOperand and altFlow 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlow));

			// check isomorphic binding between objects combo and altFlow 
			JavaSDM.ensure(!combo.equals(altFlow));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check isomorphic binding between objects flowToParentOperand and altFlow 
			JavaSDM.ensure(!flowToParentOperand.equals(altFlow));

			// check isomorphic binding between objects guard and altFlow 
			JavaSDM.ensure(!guard.equals(altFlow));

			// check isomorphic binding between objects interaction and altFlow 
			JavaSDM.ensure(!interaction.equals(altFlow));

			// check isomorphic binding between objects line and altFlow 
			JavaSDM.ensure(!line.equals(altFlow));

			// check isomorphic binding between objects message and altFlow 
			JavaSDM.ensure(!message.equals(altFlow));

			// check isomorphic binding between objects messageReceive and altFlow 
			JavaSDM.ensure(!messageReceive.equals(altFlow));

			// check isomorphic binding between objects messageSend and altFlow 
			JavaSDM.ensure(!messageSend.equals(altFlow));

			// check isomorphic binding between objects operand and altFlow 
			JavaSDM.ensure(!operand.equals(altFlow));

			// check isomorphic binding between objects packageDeclaration and altFlow 
			JavaSDM.ensure(!packageDeclaration.equals(altFlow));

			// check isomorphic binding between objects parentCombo and altFlow 
			JavaSDM.ensure(!parentCombo.equals(altFlow));

			// check isomorphic binding between objects parentOperand and altFlow 
			JavaSDM.ensure(!parentOperand.equals(altFlow));

			// check isomorphic binding between objects spec and altFlow 
			JavaSDM.ensure(!spec.equals(altFlow));

			// check isomorphic binding between objects step and altFlow 
			JavaSDM.ensure(!step.equals(altFlow));

			// check isomorphic binding between objects stepToCombo and altFlow 
			JavaSDM.ensure(!stepToCombo.equals(altFlow));

			// check isomorphic binding between objects stepToMessage and altFlow 
			JavaSDM.ensure(!stepToMessage.equals(altFlow));

			// check isomorphic binding between objects sysActor and altFlow 
			JavaSDM.ensure(!sysActor.equals(altFlow));

			// check isomorphic binding between objects sysActorToSysLine and altFlow 
			JavaSDM.ensure(!sysActorToSysLine.equals(altFlow));

			// check isomorphic binding between objects sysLine and altFlow 
			JavaSDM.ensure(!sysLine.equals(altFlow));

			// check isomorphic binding between objects useCase and altFlow 
			JavaSDM.ensure(!useCase.equals(altFlow));

			// check isomorphic binding between objects useCaseToInteraction and altFlow 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlow));

			// check isomorphic binding between objects alternative1ToOperand and altFlowToOperand 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects combo and altFlowToOperand 
			JavaSDM.ensure(!combo.equals(altFlowToOperand));

			// check isomorphic binding between objects flow and altFlowToOperand 
			JavaSDM.ensure(!flow.equals(altFlowToOperand));

			// check isomorphic binding between objects flowToParentOperand and altFlowToOperand 
			JavaSDM.ensure(!flowToParentOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects guard and altFlowToOperand 
			JavaSDM.ensure(!guard.equals(altFlowToOperand));

			// check isomorphic binding between objects interaction and altFlowToOperand 
			JavaSDM.ensure(!interaction.equals(altFlowToOperand));

			// check isomorphic binding between objects line and altFlowToOperand 
			JavaSDM.ensure(!line.equals(altFlowToOperand));

			// check isomorphic binding between objects message and altFlowToOperand 
			JavaSDM.ensure(!message.equals(altFlowToOperand));

			// check isomorphic binding between objects messageReceive and altFlowToOperand 
			JavaSDM.ensure(!messageReceive.equals(altFlowToOperand));

			// check isomorphic binding between objects messageSend and altFlowToOperand 
			JavaSDM.ensure(!messageSend.equals(altFlowToOperand));

			// check isomorphic binding between objects operand and altFlowToOperand 
			JavaSDM.ensure(!operand.equals(altFlowToOperand));

			// check isomorphic binding between objects packageDeclaration and altFlowToOperand 
			JavaSDM.ensure(!packageDeclaration.equals(altFlowToOperand));

			// check isomorphic binding between objects parentCombo and altFlowToOperand 
			JavaSDM.ensure(!parentCombo.equals(altFlowToOperand));

			// check isomorphic binding between objects parentOperand and altFlowToOperand 
			JavaSDM.ensure(!parentOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects spec and altFlowToOperand 
			JavaSDM.ensure(!spec.equals(altFlowToOperand));

			// check isomorphic binding between objects step and altFlowToOperand 
			JavaSDM.ensure(!step.equals(altFlowToOperand));

			// check isomorphic binding between objects stepToCombo and altFlowToOperand 
			JavaSDM.ensure(!stepToCombo.equals(altFlowToOperand));

			// check isomorphic binding between objects stepToMessage and altFlowToOperand 
			JavaSDM.ensure(!stepToMessage.equals(altFlowToOperand));

			// check isomorphic binding between objects sysActor and altFlowToOperand 
			JavaSDM.ensure(!sysActor.equals(altFlowToOperand));

			// check isomorphic binding between objects sysActorToSysLine and altFlowToOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(altFlowToOperand));

			// check isomorphic binding between objects sysLine and altFlowToOperand 
			JavaSDM.ensure(!sysLine.equals(altFlowToOperand));

			// check isomorphic binding between objects useCase and altFlowToOperand 
			JavaSDM.ensure(!useCase.equals(altFlowToOperand));

			// check isomorphic binding between objects useCaseToInteraction and altFlowToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlowToOperand));

			// check isomorphic binding between objects combo and alternative1ToOperand 
			JavaSDM.ensure(!combo.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and alternative1ToOperand 
			JavaSDM.ensure(!flow.equals(alternative1ToOperand));

			// check isomorphic binding between objects flowToParentOperand and alternative1ToOperand 
			JavaSDM.ensure(!flowToParentOperand.equals(alternative1ToOperand));

			// check isomorphic binding between objects guard and alternative1ToOperand 
			JavaSDM.ensure(!guard.equals(alternative1ToOperand));

			// check isomorphic binding between objects interaction and alternative1ToOperand 
			JavaSDM.ensure(!interaction.equals(alternative1ToOperand));

			// check isomorphic binding between objects line and alternative1ToOperand 
			JavaSDM.ensure(!line.equals(alternative1ToOperand));

			// check isomorphic binding between objects message and alternative1ToOperand 
			JavaSDM.ensure(!message.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageReceive and alternative1ToOperand 
			JavaSDM.ensure(!messageReceive.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageSend and alternative1ToOperand 
			JavaSDM.ensure(!messageSend.equals(alternative1ToOperand));

			// check isomorphic binding between objects operand and alternative1ToOperand 
			JavaSDM.ensure(!operand.equals(alternative1ToOperand));

			// check isomorphic binding between objects packageDeclaration and alternative1ToOperand 
			JavaSDM.ensure(!packageDeclaration.equals(alternative1ToOperand));

			// check isomorphic binding between objects parentCombo and alternative1ToOperand 
			JavaSDM.ensure(!parentCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects parentOperand and alternative1ToOperand 
			JavaSDM.ensure(!parentOperand.equals(alternative1ToOperand));

			// check isomorphic binding between objects spec and alternative1ToOperand 
			JavaSDM.ensure(!spec.equals(alternative1ToOperand));

			// check isomorphic binding between objects step and alternative1ToOperand 
			JavaSDM.ensure(!step.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToCombo and alternative1ToOperand 
			JavaSDM.ensure(!stepToCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToMessage and alternative1ToOperand 
			JavaSDM.ensure(!stepToMessage.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysActor and alternative1ToOperand 
			JavaSDM.ensure(!sysActor.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysActorToSysLine and alternative1ToOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysLine and alternative1ToOperand 
			JavaSDM.ensure(!sysLine.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCase and alternative1ToOperand 
			JavaSDM.ensure(!useCase.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCaseToInteraction and alternative1ToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and combo 
			JavaSDM.ensure(!flow.equals(combo));

			// check isomorphic binding between objects flowToParentOperand and combo 
			JavaSDM.ensure(!flowToParentOperand.equals(combo));

			// check isomorphic binding between objects guard and combo 
			JavaSDM.ensure(!guard.equals(combo));

			// check isomorphic binding between objects interaction and combo 
			JavaSDM.ensure(!interaction.equals(combo));

			// check isomorphic binding between objects line and combo 
			JavaSDM.ensure(!line.equals(combo));

			// check isomorphic binding between objects message and combo 
			JavaSDM.ensure(!message.equals(combo));

			// check isomorphic binding between objects messageReceive and combo 
			JavaSDM.ensure(!messageReceive.equals(combo));

			// check isomorphic binding between objects messageSend and combo 
			JavaSDM.ensure(!messageSend.equals(combo));

			// check isomorphic binding between objects operand and combo 
			JavaSDM.ensure(!operand.equals(combo));

			// check isomorphic binding between objects packageDeclaration and combo 
			JavaSDM.ensure(!packageDeclaration.equals(combo));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects parentOperand and combo 
			JavaSDM.ensure(!parentOperand.equals(combo));

			// check isomorphic binding between objects spec and combo 
			JavaSDM.ensure(!spec.equals(combo));

			// check isomorphic binding between objects step and combo 
			JavaSDM.ensure(!step.equals(combo));

			// check isomorphic binding between objects stepToCombo and combo 
			JavaSDM.ensure(!stepToCombo.equals(combo));

			// check isomorphic binding between objects stepToMessage and combo 
			JavaSDM.ensure(!stepToMessage.equals(combo));

			// check isomorphic binding between objects sysActor and combo 
			JavaSDM.ensure(!sysActor.equals(combo));

			// check isomorphic binding between objects sysActorToSysLine and combo 
			JavaSDM.ensure(!sysActorToSysLine.equals(combo));

			// check isomorphic binding between objects sysLine and combo 
			JavaSDM.ensure(!sysLine.equals(combo));

			// check isomorphic binding between objects useCase and combo 
			JavaSDM.ensure(!useCase.equals(combo));

			// check isomorphic binding between objects useCaseToInteraction and combo 
			JavaSDM.ensure(!useCaseToInteraction.equals(combo));

			// check isomorphic binding between objects flowToParentOperand and flow 
			JavaSDM.ensure(!flowToParentOperand.equals(flow));

			// check isomorphic binding between objects guard and flow 
			JavaSDM.ensure(!guard.equals(flow));

			// check isomorphic binding between objects interaction and flow 
			JavaSDM.ensure(!interaction.equals(flow));

			// check isomorphic binding between objects line and flow 
			JavaSDM.ensure(!line.equals(flow));

			// check isomorphic binding between objects message and flow 
			JavaSDM.ensure(!message.equals(flow));

			// check isomorphic binding between objects messageReceive and flow 
			JavaSDM.ensure(!messageReceive.equals(flow));

			// check isomorphic binding between objects messageSend and flow 
			JavaSDM.ensure(!messageSend.equals(flow));

			// check isomorphic binding between objects operand and flow 
			JavaSDM.ensure(!operand.equals(flow));

			// check isomorphic binding between objects packageDeclaration and flow 
			JavaSDM.ensure(!packageDeclaration.equals(flow));

			// check isomorphic binding between objects parentCombo and flow 
			JavaSDM.ensure(!parentCombo.equals(flow));

			// check isomorphic binding between objects parentOperand and flow 
			JavaSDM.ensure(!parentOperand.equals(flow));

			// check isomorphic binding between objects spec and flow 
			JavaSDM.ensure(!spec.equals(flow));

			// check isomorphic binding between objects step and flow 
			JavaSDM.ensure(!step.equals(flow));

			// check isomorphic binding between objects stepToCombo and flow 
			JavaSDM.ensure(!stepToCombo.equals(flow));

			// check isomorphic binding between objects stepToMessage and flow 
			JavaSDM.ensure(!stepToMessage.equals(flow));

			// check isomorphic binding between objects sysActor and flow 
			JavaSDM.ensure(!sysActor.equals(flow));

			// check isomorphic binding between objects sysActorToSysLine and flow 
			JavaSDM.ensure(!sysActorToSysLine.equals(flow));

			// check isomorphic binding between objects sysLine and flow 
			JavaSDM.ensure(!sysLine.equals(flow));

			// check isomorphic binding between objects useCase and flow 
			JavaSDM.ensure(!useCase.equals(flow));

			// check isomorphic binding between objects useCaseToInteraction and flow 
			JavaSDM.ensure(!useCaseToInteraction.equals(flow));

			// check isomorphic binding between objects guard and flowToParentOperand 
			JavaSDM.ensure(!guard.equals(flowToParentOperand));

			// check isomorphic binding between objects interaction and flowToParentOperand 
			JavaSDM.ensure(!interaction.equals(flowToParentOperand));

			// check isomorphic binding between objects line and flowToParentOperand 
			JavaSDM.ensure(!line.equals(flowToParentOperand));

			// check isomorphic binding between objects message and flowToParentOperand 
			JavaSDM.ensure(!message.equals(flowToParentOperand));

			// check isomorphic binding between objects messageReceive and flowToParentOperand 
			JavaSDM.ensure(!messageReceive.equals(flowToParentOperand));

			// check isomorphic binding between objects messageSend and flowToParentOperand 
			JavaSDM.ensure(!messageSend.equals(flowToParentOperand));

			// check isomorphic binding between objects operand and flowToParentOperand 
			JavaSDM.ensure(!operand.equals(flowToParentOperand));

			// check isomorphic binding between objects packageDeclaration and flowToParentOperand 
			JavaSDM.ensure(!packageDeclaration.equals(flowToParentOperand));

			// check isomorphic binding between objects parentCombo and flowToParentOperand 
			JavaSDM.ensure(!parentCombo.equals(flowToParentOperand));

			// check isomorphic binding between objects parentOperand and flowToParentOperand 
			JavaSDM.ensure(!parentOperand.equals(flowToParentOperand));

			// check isomorphic binding between objects spec and flowToParentOperand 
			JavaSDM.ensure(!spec.equals(flowToParentOperand));

			// check isomorphic binding between objects step and flowToParentOperand 
			JavaSDM.ensure(!step.equals(flowToParentOperand));

			// check isomorphic binding between objects stepToCombo and flowToParentOperand 
			JavaSDM.ensure(!stepToCombo.equals(flowToParentOperand));

			// check isomorphic binding between objects stepToMessage and flowToParentOperand 
			JavaSDM.ensure(!stepToMessage.equals(flowToParentOperand));

			// check isomorphic binding between objects sysActor and flowToParentOperand 
			JavaSDM.ensure(!sysActor.equals(flowToParentOperand));

			// check isomorphic binding between objects sysActorToSysLine and flowToParentOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(flowToParentOperand));

			// check isomorphic binding between objects sysLine and flowToParentOperand 
			JavaSDM.ensure(!sysLine.equals(flowToParentOperand));

			// check isomorphic binding between objects useCase and flowToParentOperand 
			JavaSDM.ensure(!useCase.equals(flowToParentOperand));

			// check isomorphic binding between objects useCaseToInteraction and flowToParentOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(flowToParentOperand));

			// check isomorphic binding between objects interaction and guard 
			JavaSDM.ensure(!interaction.equals(guard));

			// check isomorphic binding between objects line and guard 
			JavaSDM.ensure(!line.equals(guard));

			// check isomorphic binding between objects message and guard 
			JavaSDM.ensure(!message.equals(guard));

			// check isomorphic binding between objects messageReceive and guard 
			JavaSDM.ensure(!messageReceive.equals(guard));

			// check isomorphic binding between objects messageSend and guard 
			JavaSDM.ensure(!messageSend.equals(guard));

			// check isomorphic binding between objects operand and guard 
			JavaSDM.ensure(!operand.equals(guard));

			// check isomorphic binding between objects packageDeclaration and guard 
			JavaSDM.ensure(!packageDeclaration.equals(guard));

			// check isomorphic binding between objects parentCombo and guard 
			JavaSDM.ensure(!parentCombo.equals(guard));

			// check isomorphic binding between objects parentOperand and guard 
			JavaSDM.ensure(!parentOperand.equals(guard));

			// check isomorphic binding between objects spec and guard 
			JavaSDM.ensure(!spec.equals(guard));

			// check isomorphic binding between objects step and guard 
			JavaSDM.ensure(!step.equals(guard));

			// check isomorphic binding between objects stepToCombo and guard 
			JavaSDM.ensure(!stepToCombo.equals(guard));

			// check isomorphic binding between objects stepToMessage and guard 
			JavaSDM.ensure(!stepToMessage.equals(guard));

			// check isomorphic binding between objects sysActor and guard 
			JavaSDM.ensure(!sysActor.equals(guard));

			// check isomorphic binding between objects sysActorToSysLine and guard 
			JavaSDM.ensure(!sysActorToSysLine.equals(guard));

			// check isomorphic binding between objects sysLine and guard 
			JavaSDM.ensure(!sysLine.equals(guard));

			// check isomorphic binding between objects useCase and guard 
			JavaSDM.ensure(!useCase.equals(guard));

			// check isomorphic binding between objects useCaseToInteraction and guard 
			JavaSDM.ensure(!useCaseToInteraction.equals(guard));

			// check isomorphic binding between objects line and interaction 
			JavaSDM.ensure(!line.equals(interaction));

			// check isomorphic binding between objects message and interaction 
			JavaSDM.ensure(!message.equals(interaction));

			// check isomorphic binding between objects messageReceive and interaction 
			JavaSDM.ensure(!messageReceive.equals(interaction));

			// check isomorphic binding between objects messageSend and interaction 
			JavaSDM.ensure(!messageSend.equals(interaction));

			// check isomorphic binding between objects operand and interaction 
			JavaSDM.ensure(!operand.equals(interaction));

			// check isomorphic binding between objects packageDeclaration and interaction 
			JavaSDM.ensure(!packageDeclaration.equals(interaction));

			// check isomorphic binding between objects parentCombo and interaction 
			JavaSDM.ensure(!parentCombo.equals(interaction));

			// check isomorphic binding between objects parentOperand and interaction 
			JavaSDM.ensure(!parentOperand.equals(interaction));

			// check isomorphic binding between objects spec and interaction 
			JavaSDM.ensure(!spec.equals(interaction));

			// check isomorphic binding between objects step and interaction 
			JavaSDM.ensure(!step.equals(interaction));

			// check isomorphic binding between objects stepToCombo and interaction 
			JavaSDM.ensure(!stepToCombo.equals(interaction));

			// check isomorphic binding between objects stepToMessage and interaction 
			JavaSDM.ensure(!stepToMessage.equals(interaction));

			// check isomorphic binding between objects sysActor and interaction 
			JavaSDM.ensure(!sysActor.equals(interaction));

			// check isomorphic binding between objects sysActorToSysLine and interaction 
			JavaSDM.ensure(!sysActorToSysLine.equals(interaction));

			// check isomorphic binding between objects sysLine and interaction 
			JavaSDM.ensure(!sysLine.equals(interaction));

			// check isomorphic binding between objects useCase and interaction 
			JavaSDM.ensure(!useCase.equals(interaction));

			// check isomorphic binding between objects useCaseToInteraction and interaction 
			JavaSDM.ensure(!useCaseToInteraction.equals(interaction));

			// check isomorphic binding between objects message and line 
			JavaSDM.ensure(!message.equals(line));

			// check isomorphic binding between objects messageReceive and line 
			JavaSDM.ensure(!messageReceive.equals(line));

			// check isomorphic binding between objects messageSend and line 
			JavaSDM.ensure(!messageSend.equals(line));

			// check isomorphic binding between objects operand and line 
			JavaSDM.ensure(!operand.equals(line));

			// check isomorphic binding between objects packageDeclaration and line 
			JavaSDM.ensure(!packageDeclaration.equals(line));

			// check isomorphic binding between objects parentCombo and line 
			JavaSDM.ensure(!parentCombo.equals(line));

			// check isomorphic binding between objects parentOperand and line 
			JavaSDM.ensure(!parentOperand.equals(line));

			// check isomorphic binding between objects spec and line 
			JavaSDM.ensure(!spec.equals(line));

			// check isomorphic binding between objects step and line 
			JavaSDM.ensure(!step.equals(line));

			// check isomorphic binding between objects stepToCombo and line 
			JavaSDM.ensure(!stepToCombo.equals(line));

			// check isomorphic binding between objects stepToMessage and line 
			JavaSDM.ensure(!stepToMessage.equals(line));

			// check isomorphic binding between objects sysActor and line 
			JavaSDM.ensure(!sysActor.equals(line));

			// check isomorphic binding between objects sysActorToSysLine and line 
			JavaSDM.ensure(!sysActorToSysLine.equals(line));

			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// check isomorphic binding between objects useCase and line 
			JavaSDM.ensure(!useCase.equals(line));

			// check isomorphic binding between objects useCaseToInteraction and line 
			JavaSDM.ensure(!useCaseToInteraction.equals(line));

			// check isomorphic binding between objects messageReceive and message 
			JavaSDM.ensure(!messageReceive.equals(message));

			// check isomorphic binding between objects messageSend and message 
			JavaSDM.ensure(!messageSend.equals(message));

			// check isomorphic binding between objects operand and message 
			JavaSDM.ensure(!operand.equals(message));

			// check isomorphic binding between objects packageDeclaration and message 
			JavaSDM.ensure(!packageDeclaration.equals(message));

			// check isomorphic binding between objects parentCombo and message 
			JavaSDM.ensure(!parentCombo.equals(message));

			// check isomorphic binding between objects parentOperand and message 
			JavaSDM.ensure(!parentOperand.equals(message));

			// check isomorphic binding between objects spec and message 
			JavaSDM.ensure(!spec.equals(message));

			// check isomorphic binding between objects step and message 
			JavaSDM.ensure(!step.equals(message));

			// check isomorphic binding between objects stepToCombo and message 
			JavaSDM.ensure(!stepToCombo.equals(message));

			// check isomorphic binding between objects stepToMessage and message 
			JavaSDM.ensure(!stepToMessage.equals(message));

			// check isomorphic binding between objects sysActor and message 
			JavaSDM.ensure(!sysActor.equals(message));

			// check isomorphic binding between objects sysActorToSysLine and message 
			JavaSDM.ensure(!sysActorToSysLine.equals(message));

			// check isomorphic binding between objects sysLine and message 
			JavaSDM.ensure(!sysLine.equals(message));

			// check isomorphic binding between objects useCase and message 
			JavaSDM.ensure(!useCase.equals(message));

			// check isomorphic binding between objects useCaseToInteraction and message 
			JavaSDM.ensure(!useCaseToInteraction.equals(message));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects operand and messageReceive 
			JavaSDM.ensure(!operand.equals(messageReceive));

			// check isomorphic binding between objects packageDeclaration and messageReceive 
			JavaSDM.ensure(!packageDeclaration.equals(messageReceive));

			// check isomorphic binding between objects parentCombo and messageReceive 
			JavaSDM.ensure(!parentCombo.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and messageReceive 
			JavaSDM.ensure(!parentOperand.equals(messageReceive));

			// check isomorphic binding between objects spec and messageReceive 
			JavaSDM.ensure(!spec.equals(messageReceive));

			// check isomorphic binding between objects step and messageReceive 
			JavaSDM.ensure(!step.equals(messageReceive));

			// check isomorphic binding between objects stepToCombo and messageReceive 
			JavaSDM.ensure(!stepToCombo.equals(messageReceive));

			// check isomorphic binding between objects stepToMessage and messageReceive 
			JavaSDM.ensure(!stepToMessage.equals(messageReceive));

			// check isomorphic binding between objects sysActor and messageReceive 
			JavaSDM.ensure(!sysActor.equals(messageReceive));

			// check isomorphic binding between objects sysActorToSysLine and messageReceive 
			JavaSDM.ensure(!sysActorToSysLine.equals(messageReceive));

			// check isomorphic binding between objects sysLine and messageReceive 
			JavaSDM.ensure(!sysLine.equals(messageReceive));

			// check isomorphic binding between objects useCase and messageReceive 
			JavaSDM.ensure(!useCase.equals(messageReceive));

			// check isomorphic binding between objects useCaseToInteraction and messageReceive 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageReceive));

			// check isomorphic binding between objects operand and messageSend 
			JavaSDM.ensure(!operand.equals(messageSend));

			// check isomorphic binding between objects packageDeclaration and messageSend 
			JavaSDM.ensure(!packageDeclaration.equals(messageSend));

			// check isomorphic binding between objects parentCombo and messageSend 
			JavaSDM.ensure(!parentCombo.equals(messageSend));

			// check isomorphic binding between objects parentOperand and messageSend 
			JavaSDM.ensure(!parentOperand.equals(messageSend));

			// check isomorphic binding between objects spec and messageSend 
			JavaSDM.ensure(!spec.equals(messageSend));

			// check isomorphic binding between objects step and messageSend 
			JavaSDM.ensure(!step.equals(messageSend));

			// check isomorphic binding between objects stepToCombo and messageSend 
			JavaSDM.ensure(!stepToCombo.equals(messageSend));

			// check isomorphic binding between objects stepToMessage and messageSend 
			JavaSDM.ensure(!stepToMessage.equals(messageSend));

			// check isomorphic binding between objects sysActor and messageSend 
			JavaSDM.ensure(!sysActor.equals(messageSend));

			// check isomorphic binding between objects sysActorToSysLine and messageSend 
			JavaSDM.ensure(!sysActorToSysLine.equals(messageSend));

			// check isomorphic binding between objects sysLine and messageSend 
			JavaSDM.ensure(!sysLine.equals(messageSend));

			// check isomorphic binding between objects useCase and messageSend 
			JavaSDM.ensure(!useCase.equals(messageSend));

			// check isomorphic binding between objects useCaseToInteraction and messageSend 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageSend));

			// check isomorphic binding between objects packageDeclaration and operand 
			JavaSDM.ensure(!packageDeclaration.equals(operand));

			// check isomorphic binding between objects parentCombo and operand 
			JavaSDM.ensure(!parentCombo.equals(operand));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// check isomorphic binding between objects spec and operand 
			JavaSDM.ensure(!spec.equals(operand));

			// check isomorphic binding between objects step and operand 
			JavaSDM.ensure(!step.equals(operand));

			// check isomorphic binding between objects stepToCombo and operand 
			JavaSDM.ensure(!stepToCombo.equals(operand));

			// check isomorphic binding between objects stepToMessage and operand 
			JavaSDM.ensure(!stepToMessage.equals(operand));

			// check isomorphic binding between objects sysActor and operand 
			JavaSDM.ensure(!sysActor.equals(operand));

			// check isomorphic binding between objects sysActorToSysLine and operand 
			JavaSDM.ensure(!sysActorToSysLine.equals(operand));

			// check isomorphic binding between objects sysLine and operand 
			JavaSDM.ensure(!sysLine.equals(operand));

			// check isomorphic binding between objects useCase and operand 
			JavaSDM.ensure(!useCase.equals(operand));

			// check isomorphic binding between objects useCaseToInteraction and operand 
			JavaSDM.ensure(!useCaseToInteraction.equals(operand));

			// check isomorphic binding between objects parentCombo and packageDeclaration 
			JavaSDM.ensure(!parentCombo.equals(packageDeclaration));

			// check isomorphic binding between objects parentOperand and packageDeclaration 
			JavaSDM.ensure(!parentOperand.equals(packageDeclaration));

			// check isomorphic binding between objects spec and packageDeclaration 
			JavaSDM.ensure(!spec.equals(packageDeclaration));

			// check isomorphic binding between objects step and packageDeclaration 
			JavaSDM.ensure(!step.equals(packageDeclaration));

			// check isomorphic binding between objects stepToCombo and packageDeclaration 
			JavaSDM.ensure(!stepToCombo.equals(packageDeclaration));

			// check isomorphic binding between objects stepToMessage and packageDeclaration 
			JavaSDM.ensure(!stepToMessage.equals(packageDeclaration));

			// check isomorphic binding between objects sysActor and packageDeclaration 
			JavaSDM.ensure(!sysActor.equals(packageDeclaration));

			// check isomorphic binding between objects sysActorToSysLine and packageDeclaration 
			JavaSDM.ensure(!sysActorToSysLine.equals(packageDeclaration));

			// check isomorphic binding between objects sysLine and packageDeclaration 
			JavaSDM.ensure(!sysLine.equals(packageDeclaration));

			// check isomorphic binding between objects useCase and packageDeclaration 
			JavaSDM.ensure(!useCase.equals(packageDeclaration));

			// check isomorphic binding between objects useCaseToInteraction and packageDeclaration 
			JavaSDM.ensure(!useCaseToInteraction.equals(packageDeclaration));

			// check isomorphic binding between objects parentOperand and parentCombo 
			JavaSDM.ensure(!parentOperand.equals(parentCombo));

			// check isomorphic binding between objects spec and parentCombo 
			JavaSDM.ensure(!spec.equals(parentCombo));

			// check isomorphic binding between objects step and parentCombo 
			JavaSDM.ensure(!step.equals(parentCombo));

			// check isomorphic binding between objects stepToCombo and parentCombo 
			JavaSDM.ensure(!stepToCombo.equals(parentCombo));

			// check isomorphic binding between objects stepToMessage and parentCombo 
			JavaSDM.ensure(!stepToMessage.equals(parentCombo));

			// check isomorphic binding between objects sysActor and parentCombo 
			JavaSDM.ensure(!sysActor.equals(parentCombo));

			// check isomorphic binding between objects sysActorToSysLine and parentCombo 
			JavaSDM.ensure(!sysActorToSysLine.equals(parentCombo));

			// check isomorphic binding between objects sysLine and parentCombo 
			JavaSDM.ensure(!sysLine.equals(parentCombo));

			// check isomorphic binding between objects useCase and parentCombo 
			JavaSDM.ensure(!useCase.equals(parentCombo));

			// check isomorphic binding between objects useCaseToInteraction and parentCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(parentCombo));

			// check isomorphic binding between objects spec and parentOperand 
			JavaSDM.ensure(!spec.equals(parentOperand));

			// check isomorphic binding between objects step and parentOperand 
			JavaSDM.ensure(!step.equals(parentOperand));

			// check isomorphic binding between objects stepToCombo and parentOperand 
			JavaSDM.ensure(!stepToCombo.equals(parentOperand));

			// check isomorphic binding between objects stepToMessage and parentOperand 
			JavaSDM.ensure(!stepToMessage.equals(parentOperand));

			// check isomorphic binding between objects sysActor and parentOperand 
			JavaSDM.ensure(!sysActor.equals(parentOperand));

			// check isomorphic binding between objects sysActorToSysLine and parentOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(parentOperand));

			// check isomorphic binding between objects sysLine and parentOperand 
			JavaSDM.ensure(!sysLine.equals(parentOperand));

			// check isomorphic binding between objects useCase and parentOperand 
			JavaSDM.ensure(!useCase.equals(parentOperand));

			// check isomorphic binding between objects useCaseToInteraction and parentOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(parentOperand));

			// check isomorphic binding between objects step and spec 
			JavaSDM.ensure(!step.equals(spec));

			// check isomorphic binding between objects stepToCombo and spec 
			JavaSDM.ensure(!stepToCombo.equals(spec));

			// check isomorphic binding between objects stepToMessage and spec 
			JavaSDM.ensure(!stepToMessage.equals(spec));

			// check isomorphic binding between objects sysActor and spec 
			JavaSDM.ensure(!sysActor.equals(spec));

			// check isomorphic binding between objects sysActorToSysLine and spec 
			JavaSDM.ensure(!sysActorToSysLine.equals(spec));

			// check isomorphic binding between objects sysLine and spec 
			JavaSDM.ensure(!sysLine.equals(spec));

			// check isomorphic binding between objects useCase and spec 
			JavaSDM.ensure(!useCase.equals(spec));

			// check isomorphic binding between objects useCaseToInteraction and spec 
			JavaSDM.ensure(!useCaseToInteraction.equals(spec));

			// check isomorphic binding between objects stepToCombo and step 
			JavaSDM.ensure(!stepToCombo.equals(step));

			// check isomorphic binding between objects stepToMessage and step 
			JavaSDM.ensure(!stepToMessage.equals(step));

			// check isomorphic binding between objects sysActor and step 
			JavaSDM.ensure(!sysActor.equals(step));

			// check isomorphic binding between objects sysActorToSysLine and step 
			JavaSDM.ensure(!sysActorToSysLine.equals(step));

			// check isomorphic binding between objects sysLine and step 
			JavaSDM.ensure(!sysLine.equals(step));

			// check isomorphic binding between objects useCase and step 
			JavaSDM.ensure(!useCase.equals(step));

			// check isomorphic binding between objects useCaseToInteraction and step 
			JavaSDM.ensure(!useCaseToInteraction.equals(step));

			// check isomorphic binding between objects stepToMessage and stepToCombo 
			JavaSDM.ensure(!stepToMessage.equals(stepToCombo));

			// check isomorphic binding between objects sysActor and stepToCombo 
			JavaSDM.ensure(!sysActor.equals(stepToCombo));

			// check isomorphic binding between objects sysActorToSysLine and stepToCombo 
			JavaSDM.ensure(!sysActorToSysLine.equals(stepToCombo));

			// check isomorphic binding between objects sysLine and stepToCombo 
			JavaSDM.ensure(!sysLine.equals(stepToCombo));

			// check isomorphic binding between objects useCase and stepToCombo 
			JavaSDM.ensure(!useCase.equals(stepToCombo));

			// check isomorphic binding between objects useCaseToInteraction and stepToCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToCombo));

			// check isomorphic binding between objects sysActor and stepToMessage 
			JavaSDM.ensure(!sysActor.equals(stepToMessage));

			// check isomorphic binding between objects sysActorToSysLine and stepToMessage 
			JavaSDM.ensure(!sysActorToSysLine.equals(stepToMessage));

			// check isomorphic binding between objects sysLine and stepToMessage 
			JavaSDM.ensure(!sysLine.equals(stepToMessage));

			// check isomorphic binding between objects useCase and stepToMessage 
			JavaSDM.ensure(!useCase.equals(stepToMessage));

			// check isomorphic binding between objects useCaseToInteraction and stepToMessage 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToMessage));

			// check isomorphic binding between objects sysActorToSysLine and sysActor 
			JavaSDM.ensure(!sysActorToSysLine.equals(sysActor));

			// check isomorphic binding between objects sysLine and sysActor 
			JavaSDM.ensure(!sysLine.equals(sysActor));

			// check isomorphic binding between objects useCase and sysActor 
			JavaSDM.ensure(!useCase.equals(sysActor));

			// check isomorphic binding between objects useCaseToInteraction and sysActor 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysActor));

			// check isomorphic binding between objects sysLine and sysActorToSysLine 
			JavaSDM.ensure(!sysLine.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCase and sysActorToSysLine 
			JavaSDM.ensure(!useCase.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCaseToInteraction and sysActorToSysLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCase and sysLine 
			JavaSDM.ensure(!useCase.equals(sysLine));

			// check isomorphic binding between objects useCaseToInteraction and sysLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysLine));

			// check isomorphic binding between objects useCaseToInteraction and useCase 
			JavaSDM.ensure(!useCaseToInteraction.equals(useCase));

			// create object alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __operand_covered_sysLine
			__operand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object step__actor__actor
			step__actor__actor = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentCombo_covered_sysLine
			__parentCombo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object altFlowToOperand__target__operand
			altFlowToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __messageReceive_message_message
			__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToCombo__source__step
			stepToCombo__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object step__stepAlternative__alt
			step__stepAlternative__alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __message_sendEvent_messageSend
			__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __sysLine_coveredBy_messageSend
			__sysLine_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __messageSend_message_message
			__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __message_receiveEvent_messageReceive
			__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __line_coveredBy_operand
			__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToCombo__target__combo
			stepToCombo__target__combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __guard_specification_spec
			__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __sysLine_coveredBy_parentOperand
			__sysLine_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object flow__steps__step
			flow__steps__step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object __line_coveredBy_parentCombo
			__line_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentOperand_fragment_messageReceive
			__parentOperand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToMessage__source__step
			stepToMessage__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __sysLine_coveredBy_combo
			__sysLine_coveredBy_combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object altFlowToOperand__source__altFlow
			altFlowToOperand__source__altFlow = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __sysLine_coveredBy_operand
			__sysLine_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentOperand_covered_sysLine
			__parentOperand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __operand_guard_guard
			__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __sysLine_coveredBy_parentCombo
			__sysLine_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToMessage__target__message
			stepToMessage__target__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alt__ref__altFlow
			alt__ref__altFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object __line_coveredBy_parentOperand
			__line_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __messageSend_covered_sysLine
			__messageSend_covered_sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __message_interaction_interaction
			__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __interaction_message_message
			__interaction_message_message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __combo_covered_sysLine
			__combo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentCombo_covered_line
			__parentCombo_covered_line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __messageReceive_enclosingOperand_parentOperand
			__messageReceive_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentOperand_covered_line
			__parentOperand_covered_line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __operand_covered_line
			__operand_covered_line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// assign attribute ruleresult
			ruleresult.setRuleName("AltUserStepNFToComboRule");
			// assign attribute __sysLine_coveredBy_messageSend
			__sysLine_coveredBy_messageSend.setName("coveredBy");
			// assign attribute __messageSend_covered_sysLine
			__messageSend_covered_sysLine.setName("covered");
			// assign attribute __sysLine_coveredBy_combo
			__sysLine_coveredBy_combo.setName("coveredBy");
			// assign attribute __combo_covered_sysLine
			__combo_covered_sysLine.setName("covered");
			// assign attribute __sysLine_coveredBy_operand
			__sysLine_coveredBy_operand.setName("coveredBy");
			// assign attribute __operand_covered_sysLine
			__operand_covered_sysLine.setName("covered");
			// assign attribute __sysLine_coveredBy_parentOperand
			__sysLine_coveredBy_parentOperand.setName("coveredBy");
			// assign attribute __parentOperand_covered_sysLine
			__parentOperand_covered_sysLine.setName("covered");
			// assign attribute __sysLine_coveredBy_parentCombo
			__sysLine_coveredBy_parentCombo.setName("coveredBy");
			// assign attribute __parentCombo_covered_sysLine
			__parentCombo_covered_sysLine.setName("covered");
			// assign attribute __parentOperand_fragment_messageReceive
			__parentOperand_fragment_messageReceive.setName("fragment");
			// assign attribute __messageReceive_enclosingOperand_parentOperand
			__messageReceive_enclosingOperand_parentOperand
					.setName("enclosingOperand");
			// assign attribute __line_coveredBy_parentOperand
			__line_coveredBy_parentOperand.setName("coveredBy");
			// assign attribute __parentOperand_covered_line
			__parentOperand_covered_line.setName("covered");
			// assign attribute __line_coveredBy_parentCombo
			__line_coveredBy_parentCombo.setName("coveredBy");
			// assign attribute __parentCombo_covered_line
			__parentCombo_covered_line.setName("covered");
			// assign attribute step__stepAlternative__alt
			step__stepAlternative__alt.setName("stepAlternative");
			// assign attribute alt__ref__altFlow
			alt__ref__altFlow.setName("ref");
			// assign attribute __line_coveredBy_operand
			__line_coveredBy_operand.setName("coveredBy");
			// assign attribute __operand_covered_line
			__operand_covered_line.setName("covered");
			// assign attribute stepToCombo__source__step
			stepToCombo__source__step.setName("source");
			// assign attribute stepToCombo__target__combo
			stepToCombo__target__combo.setName("target");
			// assign attribute __operand_guard_guard
			__operand_guard_guard.setName("guard");
			// assign attribute alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt.setName("source");
			// assign attribute alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand.setName("target");
			// assign attribute __guard_specification_spec
			__guard_specification_spec.setName("specification");
			// assign attribute altFlowToOperand__source__altFlow
			altFlowToOperand__source__altFlow.setName("source");
			// assign attribute altFlowToOperand__target__operand
			altFlowToOperand__target__operand.setName("target");
			// assign attribute flow__steps__step
			flow__steps__step.setName("steps");
			// assign attribute step__actor__actor
			step__actor__actor.setName("actor");
			// assign attribute __message_sendEvent_messageSend
			__message_sendEvent_messageSend.setName("sendEvent");
			// assign attribute __message_receiveEvent_messageReceive
			__message_receiveEvent_messageReceive.setName("receiveEvent");
			// assign attribute __message_interaction_interaction
			__message_interaction_interaction.setName("interaction");
			// assign attribute __interaction_message_message
			__interaction_message_message.setName("message");
			// assign attribute stepToMessage__source__step
			stepToMessage__source__step.setName("source");
			// assign attribute stepToMessage__target__message
			stepToMessage__target__message.setName("target");
			// assign attribute __messageSend_message_message
			__messageSend_message_message.setName("message");
			// assign attribute __messageReceive_message_message
			__messageReceive_message_message.setName("message");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__operand_covered_sysLine, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step__actor__actor, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentCombo_covered_sysLine, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageReceive_message_message, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__source__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step__stepAlternative__alt, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__message_sendEvent_messageSend, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__sysLine_coveredBy_messageSend, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageSend_message_message, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__message_receiveEvent_messageReceive, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__line_coveredBy_operand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__target__combo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__guard_specification_spec, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__sysLine_coveredBy_parentOperand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					flow__steps__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__line_coveredBy_parentCombo, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentOperand_fragment_messageReceive, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage__source__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__sysLine_coveredBy_combo, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand__source__altFlow, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__sysLine_coveredBy_operand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentOperand_covered_sysLine, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__operand_guard_guard, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__source__alt, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__sysLine_coveredBy_parentCombo, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage__target__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alt__ref__altFlow, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__line_coveredBy_parentOperand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageSend_covered_sysLine, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__message_interaction_interaction, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__interaction_message_message, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__combo_covered_sysLine, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentCombo_covered_line, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageReceive_enclosingOperand_parentOperand,
					"translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentOperand_covered_line, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__operand_covered_line, "translatedEdges");

			// create link
			step__actor__actor.setTrg(actor);

			// create link
			__sysLine_coveredBy_messageSend.setSrc(sysLine);

			// create link
			__combo_covered_sysLine.setTrg(sysLine);

			// create link
			__parentOperand_covered_sysLine.setTrg(sysLine);

			// create link
			__sysLine_coveredBy_operand.setSrc(sysLine);

			// create link
			__operand_covered_sysLine.setTrg(sysLine);

			// create link
			__sysLine_coveredBy_combo.setSrc(sysLine);

			// create link
			__parentCombo_covered_sysLine.setTrg(sysLine);

			// create link
			__sysLine_coveredBy_parentCombo.setSrc(sysLine);

			// create link
			__messageSend_covered_sysLine.setTrg(sysLine);

			// create link
			__sysLine_coveredBy_parentOperand.setSrc(sysLine);

			// create link
			__messageSend_covered_sysLine.setSrc(messageSend);

			// create link
			__messageSend_message_message.setSrc(messageSend);

			// create link
			__sysLine_coveredBy_messageSend.setTrg(messageSend);

			// create link
			__message_sendEvent_messageSend.setTrg(messageSend);

			// create link
			__combo_covered_sysLine.setSrc(combo);

			// create link
			__sysLine_coveredBy_combo.setTrg(combo);

			// create link
			stepToCombo__target__combo.setTrg(combo);

			// create link
			__operand_guard_guard.setSrc(operand);

			// create link
			__operand_covered_line.setSrc(operand);

			// create link
			__line_coveredBy_operand.setTrg(operand);

			// create link
			__sysLine_coveredBy_operand.setTrg(operand);

			// create link
			__operand_covered_sysLine.setSrc(operand);

			// create link
			altFlowToOperand__target__operand.setTrg(operand);

			// create link
			alternative1ToOperand__target__operand.setTrg(operand);

			// create link
			__sysLine_coveredBy_parentOperand.setTrg(parentOperand);

			// create link
			__line_coveredBy_parentOperand.setTrg(parentOperand);

			// create link
			__parentOperand_covered_sysLine.setSrc(parentOperand);

			// create link
			__parentOperand_fragment_messageReceive.setSrc(parentOperand);

			// create link
			__parentOperand_covered_line.setSrc(parentOperand);

			// create link
			__messageReceive_enclosingOperand_parentOperand
					.setTrg(parentOperand);

			// create link
			__line_coveredBy_parentCombo.setTrg(parentCombo);

			// create link
			__parentCombo_covered_sysLine.setSrc(parentCombo);

			// create link
			__parentCombo_covered_line.setSrc(parentCombo);

			// create link
			__sysLine_coveredBy_parentCombo.setTrg(parentCombo);

			// create link
			flow__steps__step.setSrc(flow);

			// create link
			__message_receiveEvent_messageReceive.setTrg(messageReceive);

			// create link
			__messageReceive_enclosingOperand_parentOperand
					.setSrc(messageReceive);

			// create link
			__messageReceive_message_message.setSrc(messageReceive);

			// create link
			__parentOperand_fragment_messageReceive.setTrg(messageReceive);

			// create link
			__parentOperand_covered_line.setTrg(line);

			// create link
			__line_coveredBy_operand.setSrc(line);

			// create link
			__line_coveredBy_parentCombo.setSrc(line);

			// create link
			__line_coveredBy_parentOperand.setSrc(line);

			// create link
			__operand_covered_line.setTrg(line);

			// create link
			__parentCombo_covered_line.setTrg(line);

			// create link
			stepToMessage__source__step.setTrg(step);

			// create link
			flow__steps__step.setTrg(step);

			// create link
			stepToCombo__source__step.setTrg(step);

			// create link
			step__stepAlternative__alt.setSrc(step);

			// create link
			step__actor__actor.setSrc(step);

			// create link
			step__stepAlternative__alt.setTrg(alt);

			// create link
			alt__ref__altFlow.setSrc(alt);

			// create link
			alternative1ToOperand__source__alt.setTrg(alt);

			// create link
			stepToCombo__source__step.setSrc(stepToCombo);

			// create link
			stepToCombo__target__combo.setSrc(stepToCombo);

			// create link
			alternative1ToOperand__source__alt.setSrc(alternative1ToOperand);

			// create link
			alternative1ToOperand__target__operand
					.setSrc(alternative1ToOperand);

			// create link
			__guard_specification_spec.setSrc(guard);

			// create link
			__operand_guard_guard.setTrg(guard);

			// create link
			__guard_specification_spec.setTrg(spec);

			// create link
			altFlowToOperand__source__altFlow.setTrg(altFlow);

			// create link
			alt__ref__altFlow.setTrg(altFlow);

			// create link
			altFlowToOperand__target__operand.setSrc(altFlowToOperand);

			// create link
			altFlowToOperand__source__altFlow.setSrc(altFlowToOperand);

			// create link
			__messageSend_message_message.setTrg(message);

			// create link
			__message_sendEvent_messageSend.setSrc(message);

			// create link
			__message_receiveEvent_messageReceive.setSrc(message);

			// create link
			stepToMessage__target__message.setTrg(message);

			// create link
			__message_interaction_interaction.setSrc(message);

			// create link
			__messageReceive_message_message.setTrg(message);

			// create link
			__interaction_message_message.setTrg(message);

			// create link
			__interaction_message_message.setSrc(interaction);

			// create link
			__message_interaction_interaction.setTrg(interaction);

			// create link
			stepToMessage__target__message.setSrc(stepToMessage);

			// create link
			stepToMessage__source__step.setSrc(stepToMessage);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'perform postprocessing'
		// No post processing method found
		// statement node 'register objects'
		this.registerObjects_BWD(ruleresult, packageDeclaration, actor,
				sysActor, sysLine, sysActorToSysLine, messageSend, combo,
				operand, parentOperand, parentCombo, flow, flowToParentOperand,
				messageReceive, line, step, alt, stepToCombo,
				alternative1ToOperand, guard, spec, altFlow, altFlowToOperand,
				useCase, useCaseToInteraction, message, interaction,
				stepToMessage, actorToLine);
		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_BWD(Match match) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass eClass = null;
		Iterator fujaba__IterEClassToPerformOperation = null;
		EOperation performOperation = null;
		IsApplicableRuleResult ruleresult = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Interaction interaction = null;
		Lifeline line = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand operand = null;
		InteractionOperand parentCombo = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		Lifeline sysLine = null;
		IsApplicableMatch isApplicableMatch = null;
		EMoflonEdge __packageDeclaration_actors_actor = null;
		EMoflonEdge __packageDeclaration_actors_sysActor = null;
		EMoflonEdge __actorToLine_source_actor = null;
		EMoflonEdge __sysActorToSysLine_source_sysActor = null;
		EMoflonEdge __messageSend_covered_sysLine = null;
		EMoflonEdge __sysActorToSysLine_target_sysLine = null;
		EMoflonEdge __combo_covered_sysLine = null;
		EMoflonEdge __parentOperand_covered_sysLine = null;
		EMoflonEdge __operand_covered_sysLine = null;
		EMoflonEdge __sysLine_coveredBy_combo = null;
		EMoflonEdge __parentCombo_covered_sysLine = null;
		EMoflonEdge __sysLine_coveredBy_parentCombo = null;
		EMoflonEdge __sysLine_coveredBy_parentOperand = null;
		EMoflonEdge __sysLine_coveredBy_messageSend = null;
		EMoflonEdge __sysLine_coveredBy_operand = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __parentOperand_covered_line = null;
		EMoflonEdge __messageReceive_enclosingOperand_parentOperand = null;
		EMoflonEdge __flowToParentOperand_target_parentOperand = null;
		EMoflonEdge __line_coveredBy_parentOperand = null;
		EMoflonEdge __parentOperand_fragment_messageReceive = null;
		EMoflonEdge __line_coveredBy_parentCombo = null;
		EMoflonEdge __parentCombo_covered_line = null;
		EMoflonEdge __flowToParentOperand_source_flow = null;
		EMoflonEdge __useCase_flows_flow = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __line_interaction_interaction = null;
		EMoflonEdge __actorToLine_target_line = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __useCaseToInteraction_source_useCase = null;
		EMoflonEdge __useCaseToInteraction_target_interaction = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __message_interaction_interaction = null;
		CSP csp = null;
		PackageDeclaration packageDeclaration = null;
		UseCase useCase = null;
		Iterator fujaba__IterInteractionToUseCaseToInteraction = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Actor actor = null;
		Iterator fujaba__IterLineToActorToLine = null;
		ActorToLifeline actorToLine = null;
		Actor sysActor = null;
		Iterator fujaba__IterSysLineToSysActorToSysLine = null;
		ActorToLifeline sysActorToSysLine = null;
		NamedFlow flow = null;
		Iterator fujaba__IterParentOperandToFlowToParentOperand = null;
		FlowToInteractionFragment flowToParentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from eClass to performOperation
			fujaba__Success = false;

			fujaba__IterEClassToPerformOperation = eClass.getEOperations()
					.iterator();

			while (!(fujaba__Success)
					&& fujaba__IterEClassToPerformOperation.hasNext()) {
				try {
					performOperation = (EOperation) fujaba__IterEClassToPerformOperation
							.next();

					// check object performOperation is really bound
					JavaSDM.ensure(performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							performOperation.getName(), "perform_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE
					.createIsApplicableRuleResult();

			// assign attribute ruleresult
			ruleresult.setSuccess(false);
			// assign attribute ruleresult
			ruleresult.setRule("AltUserStepNFToComboRule");

			// create link
			ruleresult.setPerformOperation(performOperation);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'core match'
		try {
			fujaba__Success = false;

			_TmpObject = (match.getObject("combo"));

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;
			_TmpObject = (match.getObject("guard"));

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;
			_TmpObject = (match.getObject("interaction"));

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;
			_TmpObject = (match.getObject("line"));

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;
			_TmpObject = (match.getObject("message"));

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;
			_TmpObject = (match.getObject("messageReceive"));

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (match.getObject("messageSend"));

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (match.getObject("operand"));

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;
			_TmpObject = (match.getObject("parentCombo"));

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentCombo = (InteractionOperand) _TmpObject;
			_TmpObject = (match.getObject("parentOperand"));

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;
			_TmpObject = (match.getObject("spec"));

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;
			_TmpObject = (match.getObject("sysLine"));

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects parentCombo and operand 
			JavaSDM.ensure(!parentCombo.equals(operand));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// check isomorphic binding between objects parentOperand and parentCombo 
			JavaSDM.ensure(!parentOperand.equals(parentCombo));

			// iterate to-many link target from parentOperand to flowToParentOperand
			fujaba__Success = false;

			fujaba__IterParentOperandToFlowToParentOperand = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(
							parentOperand, FlowToInteractionFragment.class,
							"target")).iterator();

			while (fujaba__IterParentOperandToFlowToParentOperand.hasNext()) {
				try {
					flowToParentOperand = (FlowToInteractionFragment) fujaba__IterParentOperandToFlowToParentOperand
							.next();

					// check object flowToParentOperand is really bound
					JavaSDM.ensure(flowToParentOperand != null);
					// bind object
					_TmpObject = flowToParentOperand.getSource();

					// ensure correct type and really bound of object flow
					JavaSDM.ensure(_TmpObject instanceof NamedFlow);
					flow = (NamedFlow) _TmpObject;

					// iterate to-many link target from sysLine to sysActorToSysLine
					fujaba__Success = false;

					fujaba__IterSysLineToSysActorToSysLine = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(sysLine,
											ActorToLifeline.class, "target"))
							.iterator();

					while (fujaba__IterSysLineToSysActorToSysLine.hasNext()) {
						try {
							sysActorToSysLine = (ActorToLifeline) fujaba__IterSysLineToSysActorToSysLine
									.next();

							// check object sysActorToSysLine is really bound
							JavaSDM.ensure(sysActorToSysLine != null);
							// bind object
							sysActor = sysActorToSysLine.getSource();

							// check object sysActor is really bound
							JavaSDM.ensure(sysActor != null);

							// iterate to-many link target from line to actorToLine
							fujaba__Success = false;

							fujaba__IterLineToActorToLine = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(line,
													ActorToLifeline.class,
													"target")).iterator();

							while (fujaba__IterLineToActorToLine.hasNext()) {
								try {
									actorToLine = (ActorToLifeline) fujaba__IterLineToActorToLine
											.next();

									// check object actorToLine is really bound
									JavaSDM.ensure(actorToLine != null);
									// check isomorphic binding between objects sysActorToSysLine and actorToLine 
									JavaSDM.ensure(!sysActorToSysLine
											.equals(actorToLine));

									// bind object
									actor = actorToLine.getSource();

									// check object actor is really bound
									JavaSDM.ensure(actor != null);

									// check isomorphic binding between objects sysActor and actor 
									JavaSDM.ensure(!sysActor.equals(actor));

									// iterate to-many link target from interaction to useCaseToInteraction
									fujaba__Success = false;

									fujaba__IterInteractionToUseCaseToInteraction = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															interaction,
															UseCaseToInteraction.class,
															"target"))
											.iterator();

									while (fujaba__IterInteractionToUseCaseToInteraction
											.hasNext()) {
										try {
											useCaseToInteraction = (UseCaseToInteraction) fujaba__IterInteractionToUseCaseToInteraction
													.next();

											// check object useCaseToInteraction is really bound
											JavaSDM.ensure(useCaseToInteraction != null);
											// bind object
											useCase = useCaseToInteraction
													.getSource();

											// check object useCase is really bound
											JavaSDM.ensure(useCase != null);

											// story node 'find context'
											try {
												fujaba__Success = false;

												// check object actor is really bound
												JavaSDM.ensure(actor != null);
												// check object actorToLine is really bound
												JavaSDM.ensure(actorToLine != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object flow is really bound
												JavaSDM.ensure(flow != null);
												// check object flowToParentOperand is really bound
												JavaSDM.ensure(flowToParentOperand != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check object sysActor is really bound
												JavaSDM.ensure(sysActor != null);
												// check object sysActorToSysLine is really bound
												JavaSDM.ensure(sysActorToSysLine != null);
												// check object sysLine is really bound
												JavaSDM.ensure(sysLine != null);
												// check object useCase is really bound
												JavaSDM.ensure(useCase != null);
												// check object useCaseToInteraction is really bound
												JavaSDM.ensure(useCaseToInteraction != null);
												// check isomorphic binding between objects sysActor and actor 
												JavaSDM.ensure(!sysActor
														.equals(actor));

												// check isomorphic binding between objects sysActorToSysLine and actorToLine 
												JavaSDM.ensure(!sysActorToSysLine
														.equals(actorToLine));

												// check isomorphic binding between objects sysLine and line 
												JavaSDM.ensure(!sysLine
														.equals(line));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentCombo and operand 
												JavaSDM.ensure(!parentCombo
														.equals(operand));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check isomorphic binding between objects parentOperand and parentCombo 
												JavaSDM.ensure(!parentOperand
														.equals(parentCombo));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// bind object
												packageDeclaration = actor
														.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
														.eContainer() : null;

												// check object packageDeclaration is really bound
												JavaSDM.ensure(packageDeclaration != null);

												// check if contained via correct reference
												JavaSDM.ensure(packageDeclaration
														.getActors().contains(
																actor));

												// check link actors from sysActor to packageDeclaration
												JavaSDM.ensure(packageDeclaration
														.equals(sysActor
																.eContainer()));

												// check link flows from flow to useCase
												JavaSDM.ensure(useCase
														.equals(flow
																.eContainer()));

												// check link source from actorToLine to actor
												JavaSDM.ensure(actor
														.equals(actorToLine
																.getSource()));

												// check link source from flowToParentOperand to flow
												JavaSDM.ensure(flow
														.equals(flowToParentOperand
																.getSource()));

												// check link source from sysActorToSysLine to sysActor
												JavaSDM.ensure(sysActor
														.equals(sysActorToSysLine
																.getSource()));

												// check link source from useCaseToInteraction to useCase
												JavaSDM.ensure(useCase
														.equals(useCaseToInteraction
																.getSource()));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link target from actorToLine to line
												JavaSDM.ensure(line
														.equals(actorToLine
																.getTarget()));

												// check link target from flowToParentOperand to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(flowToParentOperand
																.getTarget()));

												// check link target from sysActorToSysLine to sysLine
												JavaSDM.ensure(sysLine
														.equals(sysActorToSysLine
																.getTarget()));

												// check link target from useCaseToInteraction to interaction
												JavaSDM.ensure(interaction
														.equals(useCaseToInteraction
																.getTarget()));

												// check link covered from combo to sysLine
												JavaSDM.ensure(combo
														.getCovered().contains(
																sysLine));

												// check link covered from messageSend to sysLine
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																sysLine));

												// check link covered from line to operand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(operand));

												// check link covered from operand to sysLine
												JavaSDM.ensure(operand
														.getCovered().contains(
																sysLine));

												// check link covered from line to parentCombo
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentCombo));

												// check link covered from parentCombo to sysLine
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																sysLine));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// check link covered from parentOperand to sysLine
												JavaSDM.ensure(parentOperand
														.getCovered().contains(
																sysLine));

												// create object isApplicableMatch
												isApplicableMatch = TGGRuntimeFactory.eINSTANCE
														.createIsApplicableMatch();

												// create object __packageDeclaration_actors_actor
												__packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __packageDeclaration_actors_sysActor
												__packageDeclaration_actors_sysActor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __actorToLine_source_actor
												__actorToLine_source_actor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysActorToSysLine_source_sysActor
												__sysActorToSysLine_source_sysActor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __messageSend_covered_sysLine
												__messageSend_covered_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysActorToSysLine_target_sysLine
												__sysActorToSysLine_target_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __combo_covered_sysLine
												__combo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentOperand_covered_sysLine
												__parentOperand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __operand_covered_sysLine
												__operand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysLine_coveredBy_combo
												__sysLine_coveredBy_combo = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentCombo_covered_sysLine
												__parentCombo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysLine_coveredBy_parentCombo
												__sysLine_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysLine_coveredBy_parentOperand
												__sysLine_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysLine_coveredBy_messageSend
												__sysLine_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysLine_coveredBy_operand
												__sysLine_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __message_sendEvent_messageSend
												__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __messageSend_message_message
												__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __operand_guard_guard
												__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __line_coveredBy_operand
												__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __operand_covered_line
												__operand_covered_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentOperand_covered_line
												__parentOperand_covered_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __messageReceive_enclosingOperand_parentOperand
												__messageReceive_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __flowToParentOperand_target_parentOperand
												__flowToParentOperand_target_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __line_coveredBy_parentOperand
												__line_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentOperand_fragment_messageReceive
												__parentOperand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __line_coveredBy_parentCombo
												__line_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentCombo_covered_line
												__parentCombo_covered_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __flowToParentOperand_source_flow
												__flowToParentOperand_source_flow = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCase_flows_flow
												__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __message_receiveEvent_messageReceive
												__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __messageReceive_message_message
												__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __interaction_lifeline_line
												__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __line_interaction_interaction
												__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __actorToLine_target_line
												__actorToLine_target_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __guard_specification_spec
												__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCaseToInteraction_source_useCase
												__useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCaseToInteraction_target_interaction
												__useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __interaction_message_message
												__interaction_message_message = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __message_interaction_interaction
												__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// assign attribute __packageDeclaration_actors_actor
												__packageDeclaration_actors_actor
														.setName("actors");
												// assign attribute __packageDeclaration_actors_sysActor
												__packageDeclaration_actors_sysActor
														.setName("actors");
												// assign attribute __sysLine_coveredBy_messageSend
												__sysLine_coveredBy_messageSend
														.setName("coveredBy");
												// assign attribute __messageSend_covered_sysLine
												__messageSend_covered_sysLine
														.setName("covered");
												// assign attribute __sysLine_coveredBy_combo
												__sysLine_coveredBy_combo
														.setName("coveredBy");
												// assign attribute __combo_covered_sysLine
												__combo_covered_sysLine
														.setName("covered");
												// assign attribute __sysLine_coveredBy_operand
												__sysLine_coveredBy_operand
														.setName("coveredBy");
												// assign attribute __operand_covered_sysLine
												__operand_covered_sysLine
														.setName("covered");
												// assign attribute __sysLine_coveredBy_parentOperand
												__sysLine_coveredBy_parentOperand
														.setName("coveredBy");
												// assign attribute __parentOperand_covered_sysLine
												__parentOperand_covered_sysLine
														.setName("covered");
												// assign attribute __sysLine_coveredBy_parentCombo
												__sysLine_coveredBy_parentCombo
														.setName("coveredBy");
												// assign attribute __parentCombo_covered_sysLine
												__parentCombo_covered_sysLine
														.setName("covered");
												// assign attribute __sysActorToSysLine_source_sysActor
												__sysActorToSysLine_source_sysActor
														.setName("source");
												// assign attribute __sysActorToSysLine_target_sysLine
												__sysActorToSysLine_target_sysLine
														.setName("target");
												// assign attribute __parentOperand_fragment_messageReceive
												__parentOperand_fragment_messageReceive
														.setName("fragment");
												// assign attribute __messageReceive_enclosingOperand_parentOperand
												__messageReceive_enclosingOperand_parentOperand
														.setName("enclosingOperand");
												// assign attribute __flowToParentOperand_source_flow
												__flowToParentOperand_source_flow
														.setName("source");
												// assign attribute __flowToParentOperand_target_parentOperand
												__flowToParentOperand_target_parentOperand
														.setName("target");
												// assign attribute __line_coveredBy_parentOperand
												__line_coveredBy_parentOperand
														.setName("coveredBy");
												// assign attribute __parentOperand_covered_line
												__parentOperand_covered_line
														.setName("covered");
												// assign attribute __line_coveredBy_parentCombo
												__line_coveredBy_parentCombo
														.setName("coveredBy");
												// assign attribute __parentCombo_covered_line
												__parentCombo_covered_line
														.setName("covered");
												// assign attribute __line_coveredBy_operand
												__line_coveredBy_operand
														.setName("coveredBy");
												// assign attribute __operand_covered_line
												__operand_covered_line
														.setName("covered");
												// assign attribute __operand_guard_guard
												__operand_guard_guard
														.setName("guard");
												// assign attribute __guard_specification_spec
												__guard_specification_spec
														.setName("specification");
												// assign attribute __useCase_flows_flow
												__useCase_flows_flow
														.setName("flows");
												// assign attribute __useCaseToInteraction_source_useCase
												__useCaseToInteraction_source_useCase
														.setName("source");
												// assign attribute __useCaseToInteraction_target_interaction
												__useCaseToInteraction_target_interaction
														.setName("target");
												// assign attribute __message_sendEvent_messageSend
												__message_sendEvent_messageSend
														.setName("sendEvent");
												// assign attribute __message_receiveEvent_messageReceive
												__message_receiveEvent_messageReceive
														.setName("receiveEvent");
												// assign attribute __message_interaction_interaction
												__message_interaction_interaction
														.setName("interaction");
												// assign attribute __interaction_message_message
												__interaction_message_message
														.setName("message");
												// assign attribute __line_interaction_interaction
												__line_interaction_interaction
														.setName("interaction");
												// assign attribute __interaction_lifeline_line
												__interaction_lifeline_line
														.setName("lifeline");
												// assign attribute __messageSend_message_message
												__messageSend_message_message
														.setName("message");
												// assign attribute __messageReceive_message_message
												__messageReceive_message_message
														.setName("message");
												// assign attribute __actorToLine_source_actor
												__actorToLine_source_actor
														.setName("source");
												// assign attribute __actorToLine_target_line
												__actorToLine_target_line
														.setName("target");

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(packageDeclaration);

												// create link
												__packageDeclaration_actors_actor
														.setSrc(packageDeclaration);

												// create link
												__packageDeclaration_actors_sysActor
														.setSrc(packageDeclaration);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(actor);

												// create link
												__packageDeclaration_actors_actor
														.setTrg(actor);

												// create link
												__actorToLine_source_actor
														.setTrg(actor);

												// create link
												__packageDeclaration_actors_sysActor
														.setTrg(sysActor);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysActor);

												// create link
												__sysActorToSysLine_source_sysActor
														.setTrg(sysActor);

												// create link
												__messageSend_covered_sysLine
														.setTrg(sysLine);

												// create link
												__sysActorToSysLine_target_sysLine
														.setTrg(sysLine);

												// create link
												__combo_covered_sysLine
														.setTrg(sysLine);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysLine);

												// create link
												__parentOperand_covered_sysLine
														.setTrg(sysLine);

												// create link
												__operand_covered_sysLine
														.setTrg(sysLine);

												// create link
												__sysLine_coveredBy_combo
														.setSrc(sysLine);

												// create link
												__parentCombo_covered_sysLine
														.setTrg(sysLine);

												// create link
												__sysLine_coveredBy_parentCombo
														.setSrc(sysLine);

												// create link
												__sysLine_coveredBy_parentOperand
														.setSrc(sysLine);

												// create link
												__sysLine_coveredBy_messageSend
														.setSrc(sysLine);

												// create link
												__sysLine_coveredBy_operand
														.setSrc(sysLine);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysActorToSysLine);

												// create link
												__sysActorToSysLine_source_sysActor
														.setSrc(sysActorToSysLine);

												// create link
												__sysActorToSysLine_target_sysLine
														.setSrc(sysActorToSysLine);

												// create link
												__message_sendEvent_messageSend
														.setTrg(messageSend);

												// create link
												__messageSend_message_message
														.setSrc(messageSend);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(messageSend);

												// create link
												__messageSend_covered_sysLine
														.setSrc(messageSend);

												// create link
												__sysLine_coveredBy_messageSend
														.setTrg(messageSend);

												// create link
												__sysLine_coveredBy_combo
														.setTrg(combo);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(combo);

												// create link
												__combo_covered_sysLine
														.setSrc(combo);

												// create link
												__operand_guard_guard
														.setSrc(operand);

												// create link
												__line_coveredBy_operand
														.setTrg(operand);

												// create link
												__operand_covered_sysLine
														.setSrc(operand);

												// create link
												__operand_covered_line
														.setSrc(operand);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(operand);

												// create link
												__sysLine_coveredBy_operand
														.setTrg(operand);

												// create link
												__parentOperand_covered_sysLine
														.setSrc(parentOperand);

												// create link
												__parentOperand_covered_line
														.setSrc(parentOperand);

												// create link
												__messageReceive_enclosingOperand_parentOperand
														.setTrg(parentOperand);

												// create link
												__flowToParentOperand_target_parentOperand
														.setTrg(parentOperand);

												// create link
												__line_coveredBy_parentOperand
														.setTrg(parentOperand);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(parentOperand);

												// create link
												__sysLine_coveredBy_parentOperand
														.setTrg(parentOperand);

												// create link
												__parentOperand_fragment_messageReceive
														.setSrc(parentOperand);

												// create link
												__parentCombo_covered_sysLine
														.setSrc(parentCombo);

												// create link
												__line_coveredBy_parentCombo
														.setTrg(parentCombo);

												// create link
												__parentCombo_covered_line
														.setSrc(parentCombo);

												// create link
												__sysLine_coveredBy_parentCombo
														.setTrg(parentCombo);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(parentCombo);

												// create link
												__flowToParentOperand_source_flow
														.setTrg(flow);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(flow);

												// create link
												__useCase_flows_flow
														.setTrg(flow);

												// create link
												__flowToParentOperand_source_flow
														.setSrc(flowToParentOperand);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(flowToParentOperand);

												// create link
												__flowToParentOperand_target_parentOperand
														.setSrc(flowToParentOperand);

												// create link
												__message_receiveEvent_messageReceive
														.setTrg(messageReceive);

												// create link
												__messageReceive_message_message
														.setSrc(messageReceive);

												// create link
												__parentOperand_fragment_messageReceive
														.setTrg(messageReceive);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(messageReceive);

												// create link
												__messageReceive_enclosingOperand_parentOperand
														.setSrc(messageReceive);

												// create link
												__parentCombo_covered_line
														.setTrg(line);

												// create link
												__interaction_lifeline_line
														.setTrg(line);

												// create link
												__line_coveredBy_parentOperand
														.setSrc(line);

												// create link
												__line_interaction_interaction
														.setSrc(line);

												// create link
												__parentOperand_covered_line
														.setTrg(line);

												// create link
												__line_coveredBy_parentCombo
														.setSrc(line);

												// create link
												__operand_covered_line
														.setTrg(line);

												// create link
												__actorToLine_target_line
														.setTrg(line);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(line);

												// create link
												__line_coveredBy_operand
														.setSrc(line);

												// create link
												__guard_specification_spec
														.setSrc(guard);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(guard);

												// create link
												__operand_guard_guard
														.setTrg(guard);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(spec);

												// create link
												__guard_specification_spec
														.setTrg(spec);

												// create link
												__useCaseToInteraction_source_useCase
														.setTrg(useCase);

												// create link
												__useCase_flows_flow
														.setSrc(useCase);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(useCase);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(useCaseToInteraction);

												// create link
												__useCaseToInteraction_target_interaction
														.setSrc(useCaseToInteraction);

												// create link
												__useCaseToInteraction_source_useCase
														.setSrc(useCaseToInteraction);

												// create link
												__message_sendEvent_messageSend
														.setSrc(message);

												// create link
												__messageSend_message_message
														.setTrg(message);

												// create link
												__message_receiveEvent_messageReceive
														.setSrc(message);

												// create link
												__messageReceive_message_message
														.setTrg(message);

												// create link
												__interaction_message_message
														.setTrg(message);

												// create link
												__message_interaction_interaction
														.setSrc(message);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(message);

												// create link
												__line_interaction_interaction
														.setTrg(interaction);

												// create link
												__useCaseToInteraction_target_interaction
														.setTrg(interaction);

												// create link
												__interaction_lifeline_line
														.setSrc(interaction);

												// create link
												__interaction_message_message
														.setSrc(interaction);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(interaction);

												// create link
												__message_interaction_interaction
														.setTrg(interaction);

												// create link
												__actorToLine_source_actor
														.setSrc(actorToLine);

												// create link
												__actorToLine_target_line
														.setSrc(actorToLine);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(actorToLine);

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__line_interaction_interaction,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__messageSend_message_message,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__packageDeclaration_actors_sysActor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__operand_covered_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__actorToLine_target_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__interaction_lifeline_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentCombo_covered_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__line_coveredBy_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__combo_covered_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysLine_coveredBy_parentCombo,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysLine_coveredBy_operand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCase_flows_flow,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__messageSend_covered_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentOperand_covered_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCaseToInteraction_source_useCase,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentOperand_fragment_messageReceive,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentOperand_covered_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__message_sendEvent_messageSend,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__messageReceive_message_message,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysActorToSysLine_target_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCaseToInteraction_target_interaction,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysActorToSysLine_source_sysActor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__message_interaction_interaction,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__actorToLine_source_actor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentCombo_covered_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__packageDeclaration_actors_actor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__guard_specification_spec,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__interaction_message_message,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysLine_coveredBy_messageSend,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__flowToParentOperand_source_flow,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__message_receiveEvent_messageReceive,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__operand_guard_guard,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysLine_coveredBy_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__flowToParentOperand_target_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__operand_covered_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__line_coveredBy_parentCombo,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__messageReceive_enclosingOperand_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__line_coveredBy_operand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysLine_coveredBy_combo,
																"allContextElements");
												// story node 'solve CSP'
												try {
													fujaba__Success = false;

													_TmpObject = (this
															.isApplicable_solveCsp_BWD(
																	isApplicableMatch,
																	packageDeclaration,
																	actor,
																	sysActor,
																	sysLine,
																	sysActorToSysLine,
																	messageSend,
																	combo,
																	operand,
																	parentOperand,
																	parentCombo,
																	flow,
																	flowToParentOperand,
																	messageReceive,
																	line,
																	guard,
																	spec,
																	useCase,
																	useCaseToInteraction,
																	message,
																	interaction,
																	actorToLine));

													// ensure correct type and really bound of object csp
													JavaSDM.ensure(_TmpObject instanceof CSP);
													csp = (CSP) _TmpObject;
													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												// statement node 'check CSP'
												fujaba__Success = this
														.isApplicable_checkCsp_BWD(csp);
												if (fujaba__Success) {
													// story node 'add match to rule result'
													try {
														fujaba__Success = false;

														// check object isApplicableMatch is really bound
														JavaSDM.ensure(isApplicableMatch != null);
														// check object ruleresult is really bound
														JavaSDM.ensure(ruleresult != null);
														// assign attribute isApplicableMatch
														isApplicableMatch
																.setRuleName("AltUserStepNFToComboRule");
														// assign attribute ruleresult
														ruleresult
																.setSuccess(true);

														// create link
														ruleresult
																.getIsApplicableMatch()
																.add(isApplicableMatch);

														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

												} else {

												}

												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			InteractionOperand parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			InteractionConstraint guard, LiteralString spec, Message message,
			Interaction interaction) {
		match.registerObject("sysLine", sysLine);
		match.registerObject("messageSend", messageSend);
		match.registerObject("combo", combo);
		match.registerObject("operand", operand);
		match.registerObject("parentOperand", parentOperand);
		match.registerObject("parentCombo", parentCombo);
		match.registerObject("messageReceive", messageReceive);
		match.registerObject("line", line);
		match.registerObject("guard", guard);
		match.registerObject("spec", spec);
		match.registerObject("message", message);
		match.registerObject("interaction", interaction);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			InteractionOperand parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			InteractionConstraint guard, LiteralString spec, Message message,
			Interaction interaction) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", true, csp);
		var_combo_interactionOperator.setValue(combo.getInteractionOperator());
		var_combo_interactionOperator.setType("EObject");

		// Create explicit parameters

		// Create unbound variables

		// Create constraints
		EqInterOperKind eqInterOperKind = new EqInterOperKind();

		csp.getConstraints().add(eqInterOperKind);

		// Solve CSP
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_checkCsp_BWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			InteractionOperand parentCombo, NamedFlow flow,
			FlowToInteractionFragment flowToParentOperand,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			InteractionConstraint guard, LiteralString spec, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Message message,
			Interaction interaction, ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("person");
		literal0.setType("String");
		Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal1", true, csp);
		literal1.setValue("system");
		literal1.setType("String");

		// Create attribute variables
		Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"actor.type", true, csp);
		var_actor_type.setValue(actor.getType());
		var_actor_type.setType("EObject");
		Variable var_sysActor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"sysActor.type", true, csp);
		var_sysActor_type.setValue(sysActor.getType());
		var_sysActor_type.setType("EObject");
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", true, csp);
		var_guard_name.setValue(guard.getName());
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", true, csp);
		var_spec_value.setValue(spec.getValue());
		var_spec_value.setType("");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", true, csp);
		var_message_name.setValue(message.getName());
		var_message_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", csp);
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", csp);
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", csp);
		var_step_name.setType("");

		// Create constraints
		EqActorType eqActorType = new EqActorType();
		EqActorType eqActorType_0 = new EqActorType();
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eqActorType);
		csp.getConstraints().add(eqActorType_0);
		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eqActorType.setRuleName("");
		eqActorType.solve(var_actor_type, literal0);
		eqActorType_0.setRuleName("");
		eqActorType_0.solve(var_sysActor_type, literal1);
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("packageDeclaration",
				packageDeclaration);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("sysActor", sysActor);
		isApplicableMatch.registerObject("sysLine", sysLine);
		isApplicableMatch
				.registerObject("sysActorToSysLine", sysActorToSysLine);
		isApplicableMatch.registerObject("messageSend", messageSend);
		isApplicableMatch.registerObject("combo", combo);
		isApplicableMatch.registerObject("operand", operand);
		isApplicableMatch.registerObject("parentOperand", parentOperand);
		isApplicableMatch.registerObject("parentCombo", parentCombo);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("flowToParentOperand",
				flowToParentOperand);
		isApplicableMatch.registerObject("messageReceive", messageReceive);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("guard", guard);
		isApplicableMatch.registerObject("spec", spec);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("message", message);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isApplicable_checkCsp_BWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_BWD(PerformRuleResult ruleresult,
			EObject packageDeclaration, EObject actor, EObject sysActor,
			EObject sysLine, EObject sysActorToSysLine, EObject messageSend,
			EObject combo, EObject operand, EObject parentOperand,
			EObject parentCombo, EObject flow, EObject flowToParentOperand,
			EObject messageReceive, EObject line, EObject step, EObject alt,
			EObject stepToCombo, EObject alternative1ToOperand, EObject guard,
			EObject spec, EObject altFlow, EObject altFlowToOperand,
			EObject useCase, EObject useCaseToInteraction, EObject message,
			EObject interaction, EObject stepToMessage, EObject actorToLine) {
		ruleresult.registerObject("packageDeclaration", packageDeclaration);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("sysActor", sysActor);
		ruleresult.registerObject("sysLine", sysLine);
		ruleresult.registerObject("sysActorToSysLine", sysActorToSysLine);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("parentOperand", parentOperand);
		ruleresult.registerObject("parentCombo", parentCombo);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("flowToParentOperand", flowToParentOperand);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkTypes_BWD(Match match) {
		return true
				&& match.getObject("messageSend")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getMessageOccurrenceSpecification())
				&& match.getObject("combo")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getCombinedFragment())
				&& match.getObject("operand")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getInteractionOperand())
				&& match.getObject("messageReceive")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getMessageOccurrenceSpecification())
				&& match.getObject("guard")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getInteractionConstraint())
				&& match.getObject("spec")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getLiteralString())
				&& match.getObject("message")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getMessage());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_250(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_234769 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_144254 = null;
		Interaction __DEC_messageSend_enclosingInteraction_380191 = null;
		Interaction __DEC_operand_enclosingInteraction_148394 = null;
		InteractionOperand __DEC_combo_fragment_220732 = null;
		InteractionOperand __DEC_messageReceive_fragment_460950 = null;
		InteractionOperand __DEC_messageSend_fragment_670166 = null;
		InteractionOperand __DEC_operand_fragment_674119 = null;
		CombinedFragment __DEC_operand_operand_529865 = null;
		Constraint __DEC_spec_specification_229742 = null;
		InteractionOperand __DEC_guard_guard_161149 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_712715 = null;
		Message __DEC_messageReceive_receiveEvent_712715 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_831137 = null;
		Message __DEC_messageSend_receiveEvent_831137 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_358457 = null;
		Message __DEC_messageReceive_sendEvent_358457 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_605049 = null;
		Message __DEC_messageSend_sendEvent_605049 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_830151 = null;
		MessageEnd __DEC_message_message_830151 = null;
		Match match = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentComboToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;
		Lifeline sysLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// check link covered from messageSend to sysLine
			JavaSDM.ensure(messageSend.getCovered().contains(sysLine));

			// iterate to-many link covered from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from sysLine to operand
					fujaba__Success = false;

					fujaba__IterSysLineToOperand = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link covered from sysLine to parentCombo
							fujaba__Success = false;

							fujaba__IterSysLineToParentCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentCombo
											.next();

									// ensure correct type and really bound of object parentCombo
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentCombo = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentCombo and operand 
									JavaSDM.ensure(!parentCombo.equals(operand));

									// iterate to-many link covered from parentCombo to line
									fujaba__Success = false;

									fujaba__IterParentComboToLine = new ArrayList(
											parentCombo.getCovered())
											.iterator();

									while (fujaba__IterParentComboToLine
											.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterParentComboToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// bind object
											interaction = line.getInteraction();

											// check object interaction is really bound
											JavaSDM.ensure(interaction != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link covered from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// iterate to-many link covered from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check isomorphic binding between objects parentOperand and parentCombo 
													JavaSDM.ensure(!parentOperand
															.equals(parentCombo));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// check link covered from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_234769 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_234769 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_234769 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_234769 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_234769
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_144254 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_144254 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_144254 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_144254 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_144254
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_380191 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_380191 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_380191 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_380191 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_380191
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_148394 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_148394 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_148394 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_148394 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_148394
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_220732 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_220732 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_220732 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_220732 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_220732
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_220732 and parentCombo 
															JavaSDM.ensure(!__DEC_combo_fragment_220732
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_combo_fragment_220732 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_220732
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_460950 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_460950 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_460950 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_460950 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_460950
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_460950 and parentCombo 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_460950
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_460950 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_460950
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_670166 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_670166 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_670166 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_670166 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_670166
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_670166 and parentCombo 
															JavaSDM.ensure(!__DEC_messageSend_fragment_670166
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_messageSend_fragment_670166 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_670166
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_674119 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_674119 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_674119 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_674119 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_674119
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_674119 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_fragment_674119
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_operand_fragment_674119 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_674119
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_529865 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_529865 is really bound
															JavaSDM.ensure(__DEC_operand_operand_529865 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_529865
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_529865 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_529865
																	.equals(combo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_229742 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_229742 is really bound
															JavaSDM.ensure(__DEC_spec_specification_229742 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_229742
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_229742 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_229742
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_161149 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_161149 is really bound
															JavaSDM.ensure(__DEC_guard_guard_161149 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_161149
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_161149 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_161149
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_161149 and parentCombo 
															JavaSDM.ensure(!__DEC_guard_guard_161149
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_guard_guard_161149 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_161149
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_712715
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_712715 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_712715
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_712715 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_712715
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_712715 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_712715 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_712715 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_712715
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_831137
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_831137 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_831137
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_831137 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_831137
																			.next();

																	// check object __DEC_messageSend_receiveEvent_831137 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_831137 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_831137 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_831137
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_358457
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_358457 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_358457
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_358457 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_358457
																			.next();

																	// check object __DEC_messageReceive_sendEvent_358457 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_358457 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_358457 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_358457
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_605049
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_605049 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_605049
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_605049 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_605049
																			.next();

																	// check object __DEC_messageSend_sendEvent_605049 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_605049 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_605049 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_605049
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_830151
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_830151 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_830151
																			.hasNext()) {
																try {
																	__DEC_message_message_830151 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_830151
																			.next();

																	// check object __DEC_message_message_830151 is really bound
																	JavaSDM.ensure(__DEC_message_message_830151 != null);
																	// check isomorphic binding between objects __DEC_message_message_830151 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_830151
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_830151 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_830151
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentCombo and operand 
														JavaSDM.ensure(!parentCombo
																.equals(operand));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check isomorphic binding between objects parentOperand and parentCombo 
														JavaSDM.ensure(!parentOperand
																.equals(parentCombo));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentCombo
														JavaSDM.ensure(!(parentCombo.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to parentCombo
														JavaSDM.ensure(!(parentCombo
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to parentCombo
														JavaSDM.ensure(!(parentCombo
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentCombo to guard
														JavaSDM.ensure(!(guard
																.equals(parentCombo
																		.getGuard())));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to sysLine
														JavaSDM.ensure(sysLine
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to messageSend
														JavaSDM.ensure(messageSend
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_251(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_226006 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_72374 = null;
		Interaction __DEC_messageSend_enclosingInteraction_294841 = null;
		Interaction __DEC_operand_enclosingInteraction_84067 = null;
		InteractionOperand __DEC_combo_fragment_980361 = null;
		InteractionOperand __DEC_messageReceive_fragment_799444 = null;
		InteractionOperand __DEC_messageSend_fragment_341277 = null;
		InteractionOperand __DEC_operand_fragment_88613 = null;
		CombinedFragment __DEC_operand_operand_409235 = null;
		Constraint __DEC_spec_specification_210280 = null;
		InteractionOperand __DEC_guard_guard_62000 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_990233 = null;
		Message __DEC_messageReceive_receiveEvent_990233 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_449657 = null;
		Message __DEC_messageSend_receiveEvent_449657 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_749975 = null;
		Message __DEC_messageReceive_sendEvent_749975 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_581567 = null;
		Message __DEC_messageSend_sendEvent_581567 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_767552 = null;
		MessageEnd __DEC_message_message_767552 = null;
		Match match = null;
		Iterator fujaba__IterSysLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Lifeline sysLine = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// check link covered from messageSend to sysLine
			JavaSDM.ensure(messageSend.getCovered().contains(sysLine));

			// iterate to-many link covered from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from sysLine to operand
					fujaba__Success = false;

					fujaba__IterSysLineToOperand = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link covered from sysLine to parentCombo
							fujaba__Success = false;

							fujaba__IterSysLineToParentCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentCombo
											.next();

									// ensure correct type and really bound of object parentCombo
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentCombo = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentCombo and operand 
									JavaSDM.ensure(!parentCombo.equals(operand));

									// iterate to-many link covered from sysLine to parentOperand
									fujaba__Success = false;

									fujaba__IterSysLineToParentOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentOperand
													.next();

											// ensure correct type and really bound of object parentOperand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentOperand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// check isomorphic binding between objects parentOperand and parentCombo 
											JavaSDM.ensure(!parentOperand
													.equals(parentCombo));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// iterate to-many link covered from parentOperand to line
											fujaba__Success = false;

											fujaba__IterParentOperandToLine = new ArrayList(
													parentOperand.getCovered())
													.iterator();

											while (fujaba__IterParentOperandToLine
													.hasNext()) {
												try {
													line = (Lifeline) fujaba__IterParentOperandToLine
															.next();

													// check object line is really bound
													JavaSDM.ensure(line != null);
													// check isomorphic binding between objects sysLine and line 
													JavaSDM.ensure(!sysLine
															.equals(line));

													// bind object
													interaction = line
															.getInteraction();

													// check object interaction is really bound
													JavaSDM.ensure(interaction != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// check link covered from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// check link covered from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// iterate to-many link src from sysLine to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			sysLine,
																			EMoflonEdge.class,
																			"src"))
															.iterator();

													while (fujaba__IterSysLineTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link trg from _edge_coveredBy to messageSend
															JavaSDM.ensure(messageSend
																	.equals(_edge_coveredBy
																			.getTrg()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_226006 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_226006 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_226006 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_226006 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_226006
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_72374 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_72374 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_72374 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_72374 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_72374
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_294841 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_294841 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_294841 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_294841 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_294841
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_84067 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_84067 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_84067 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_84067 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_84067
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_980361 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_980361 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_980361 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_980361 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_980361
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_980361 and parentCombo 
																	JavaSDM.ensure(!__DEC_combo_fragment_980361
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_combo_fragment_980361 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_980361
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_799444 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_799444 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_799444 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_799444 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_799444
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_799444 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_799444
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_799444 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_799444
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_341277 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_341277 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_341277 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_341277 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_341277
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_341277 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_341277
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_341277 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_341277
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_88613 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_88613 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_88613 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_88613 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_88613
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_88613 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_fragment_88613
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_operand_fragment_88613 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_88613
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_409235 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_409235 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_409235 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_409235
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_409235 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_409235
																			.equals(combo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_210280 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_210280 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_210280 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_210280
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_210280 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_210280
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_62000 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_62000 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_62000 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_62000
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_62000 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_62000
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_62000 and parentCombo 
																	JavaSDM.ensure(!__DEC_guard_guard_62000
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_guard_guard_62000 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_62000
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_990233
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_990233 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_990233
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_990233 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_990233
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_990233 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_990233 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_990233 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_990233
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_449657
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_449657 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_449657
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_449657 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_449657
																					.next();

																			// check object __DEC_messageSend_receiveEvent_449657 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_449657 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_449657 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_449657
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_749975
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_749975 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_749975
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_749975 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_749975
																					.next();

																			// check object __DEC_messageReceive_sendEvent_749975 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_749975 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_749975 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_749975
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_581567
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_581567 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_581567
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_581567 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_581567
																					.next();

																			// check object __DEC_messageSend_sendEvent_581567 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_581567 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_581567 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_581567
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_767552
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_767552 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_767552
																					.hasNext()) {
																		try {
																			__DEC_message_message_767552 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_767552
																					.next();

																			// check object __DEC_message_message_767552 is really bound
																			JavaSDM.ensure(__DEC_message_message_767552 != null);
																			// check isomorphic binding between objects __DEC_message_message_767552 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_767552
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_767552 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_767552
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentCombo and operand 
																JavaSDM.ensure(!parentCombo
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and parentCombo 
																JavaSDM.ensure(!parentOperand
																		.equals(parentCombo));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentCombo to guard
																JavaSDM.ensure(!(guard
																		.equals(parentCombo
																				.getGuard())));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to messageSend
																JavaSDM.ensure(messageSend
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to messageSend
																JavaSDM.ensure(messageSend
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_252(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_882721 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_60469 = null;
		Interaction __DEC_messageSend_enclosingInteraction_935410 = null;
		Interaction __DEC_operand_enclosingInteraction_591081 = null;
		InteractionOperand __DEC_combo_fragment_222014 = null;
		InteractionOperand __DEC_messageReceive_fragment_340031 = null;
		InteractionOperand __DEC_messageSend_fragment_616769 = null;
		InteractionOperand __DEC_operand_fragment_574582 = null;
		CombinedFragment __DEC_operand_operand_250224 = null;
		Constraint __DEC_spec_specification_482354 = null;
		InteractionOperand __DEC_guard_guard_950046 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_46368 = null;
		Message __DEC_messageReceive_receiveEvent_46368 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_272034 = null;
		Message __DEC_messageSend_receiveEvent_272034 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_987344 = null;
		Message __DEC_messageReceive_sendEvent_987344 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_384527 = null;
		Message __DEC_messageSend_sendEvent_384527 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_601508 = null;
		MessageEnd __DEC_message_message_601508 = null;
		Match match = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		CombinedFragment combo = null;
		Lifeline sysLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// check link covered from combo to sysLine
			JavaSDM.ensure(combo.getCovered().contains(sysLine));

			// iterate to-many link covered from sysLine to messageSend
			fujaba__Success = false;

			fujaba__IterSysLineToMessageSend = new ArrayList(
					sysLine.getCoveredBy()).iterator();

			while (fujaba__IterSysLineToMessageSend.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToMessageSend.next();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageSend.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// bind object
					_TmpObject = message.getReceiveEvent();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link message from messageReceive to message
					JavaSDM.ensure(message.equals(messageReceive.getMessage()));

					// check link sendEvent from message to messageSend
					JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

					// iterate to-many link covered from sysLine to operand
					fujaba__Success = false;

					fujaba__IterSysLineToOperand = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link covered from sysLine to parentCombo
							fujaba__Success = false;

							fujaba__IterSysLineToParentCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentCombo
											.next();

									// ensure correct type and really bound of object parentCombo
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentCombo = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentCombo and operand 
									JavaSDM.ensure(!parentCombo.equals(operand));

									// iterate to-many link covered from sysLine to parentOperand
									fujaba__Success = false;

									fujaba__IterSysLineToParentOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentOperand
													.next();

											// ensure correct type and really bound of object parentOperand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentOperand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// check isomorphic binding between objects parentOperand and parentCombo 
											JavaSDM.ensure(!parentOperand
													.equals(parentCombo));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// iterate to-many link covered from parentOperand to line
											fujaba__Success = false;

											fujaba__IterParentOperandToLine = new ArrayList(
													parentOperand.getCovered())
													.iterator();

											while (fujaba__IterParentOperandToLine
													.hasNext()) {
												try {
													line = (Lifeline) fujaba__IterParentOperandToLine
															.next();

													// check object line is really bound
													JavaSDM.ensure(line != null);
													// check isomorphic binding between objects sysLine and line 
													JavaSDM.ensure(!sysLine
															.equals(line));

													// bind object
													interaction = line
															.getInteraction();

													// check object interaction is really bound
													JavaSDM.ensure(interaction != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// check link covered from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// check link covered from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_882721 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_882721 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_882721 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_882721 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_882721
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_60469 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_60469 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_60469 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_60469 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_60469
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_935410 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_935410 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_935410 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_935410 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_935410
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_591081 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_591081 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_591081 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_591081 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_591081
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_222014 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_222014 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_222014 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_222014 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_222014
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_222014 and parentCombo 
															JavaSDM.ensure(!__DEC_combo_fragment_222014
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_combo_fragment_222014 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_222014
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_340031 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_340031 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_340031 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_340031 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_340031
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_340031 and parentCombo 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_340031
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_340031 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_340031
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_616769 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_616769 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_616769 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_616769 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_616769
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_616769 and parentCombo 
															JavaSDM.ensure(!__DEC_messageSend_fragment_616769
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_messageSend_fragment_616769 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_616769
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_574582 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_574582 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_574582 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_574582 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_574582
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_574582 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_fragment_574582
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_operand_fragment_574582 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_574582
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_250224 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_250224 is really bound
															JavaSDM.ensure(__DEC_operand_operand_250224 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_250224
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_250224 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_250224
																	.equals(combo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_482354 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_482354 is really bound
															JavaSDM.ensure(__DEC_spec_specification_482354 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_482354
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_482354 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_482354
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_950046 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_950046 is really bound
															JavaSDM.ensure(__DEC_guard_guard_950046 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_950046
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_950046 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_950046
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_950046 and parentCombo 
															JavaSDM.ensure(!__DEC_guard_guard_950046
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_guard_guard_950046 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_950046
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_46368
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_46368 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_46368
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_46368 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_46368
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_46368 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_46368 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_46368 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_46368
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_272034
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_272034 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_272034
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_272034 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_272034
																			.next();

																	// check object __DEC_messageSend_receiveEvent_272034 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_272034 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_272034 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_272034
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_987344
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_987344 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_987344
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_987344 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_987344
																			.next();

																	// check object __DEC_messageReceive_sendEvent_987344 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_987344 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_987344 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_987344
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_384527
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_384527 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_384527
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_384527 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_384527
																			.next();

																	// check object __DEC_messageSend_sendEvent_384527 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_384527 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_384527 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_384527
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_601508
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_601508 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_601508
																			.hasNext()) {
																try {
																	__DEC_message_message_601508 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_601508
																			.next();

																	// check object __DEC_message_message_601508 is really bound
																	JavaSDM.ensure(__DEC_message_message_601508 != null);
																	// check isomorphic binding between objects __DEC_message_message_601508 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_601508
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_601508 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_601508
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentCombo and operand 
														JavaSDM.ensure(!parentCombo
																.equals(operand));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check isomorphic binding between objects parentOperand and parentCombo 
														JavaSDM.ensure(!parentOperand
																.equals(parentCombo));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentCombo
														JavaSDM.ensure(!(parentCombo.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to parentCombo
														JavaSDM.ensure(!(parentCombo
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to parentCombo
														JavaSDM.ensure(!(parentCombo
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentCombo to guard
														JavaSDM.ensure(!(guard
																.equals(parentCombo
																		.getGuard())));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to sysLine
														JavaSDM.ensure(sysLine
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to combo
														JavaSDM.ensure(combo
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_253(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_122451 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_925558 = null;
		Interaction __DEC_messageSend_enclosingInteraction_326196 = null;
		Interaction __DEC_operand_enclosingInteraction_69484 = null;
		InteractionOperand __DEC_combo_fragment_166379 = null;
		InteractionOperand __DEC_messageReceive_fragment_115672 = null;
		InteractionOperand __DEC_messageSend_fragment_186976 = null;
		InteractionOperand __DEC_operand_fragment_207593 = null;
		CombinedFragment __DEC_operand_operand_460543 = null;
		Constraint __DEC_spec_specification_885287 = null;
		InteractionOperand __DEC_guard_guard_283786 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_401312 = null;
		Message __DEC_messageReceive_receiveEvent_401312 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_587834 = null;
		Message __DEC_messageSend_receiveEvent_587834 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_764415 = null;
		Message __DEC_messageReceive_sendEvent_764415 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_252440 = null;
		Message __DEC_messageSend_sendEvent_252440 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_421974 = null;
		MessageEnd __DEC_message_message_421974 = null;
		Match match = null;
		Iterator fujaba__IterSysLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentComboToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Lifeline sysLine = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// check link covered from combo to sysLine
			JavaSDM.ensure(combo.getCovered().contains(sysLine));

			// iterate to-many link covered from sysLine to messageSend
			fujaba__Success = false;

			fujaba__IterSysLineToMessageSend = new ArrayList(
					sysLine.getCoveredBy()).iterator();

			while (fujaba__IterSysLineToMessageSend.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToMessageSend.next();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageSend.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// bind object
					_TmpObject = message.getReceiveEvent();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link message from messageReceive to message
					JavaSDM.ensure(message.equals(messageReceive.getMessage()));

					// check link sendEvent from message to messageSend
					JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

					// iterate to-many link covered from sysLine to operand
					fujaba__Success = false;

					fujaba__IterSysLineToOperand = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link covered from sysLine to parentOperand
							fujaba__Success = false;

							fujaba__IterSysLineToParentOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentOperand
											.next();

									// ensure correct type and really bound of object parentOperand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentOperand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// check link fragment from messageReceive to parentOperand
									JavaSDM.ensure(parentOperand
											.equals(messageReceive
													.getEnclosingOperand()));

									// iterate to-many link covered from sysLine to parentCombo
									fujaba__Success = false;

									fujaba__IterSysLineToParentCombo = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentCombo
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentCombo
													.next();

											// ensure correct type and really bound of object parentCombo
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentCombo = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentCombo and operand 
											JavaSDM.ensure(!parentCombo
													.equals(operand));

											// check isomorphic binding between objects parentOperand and parentCombo 
											JavaSDM.ensure(!parentOperand
													.equals(parentCombo));

											// iterate to-many link covered from parentCombo to line
											fujaba__Success = false;

											fujaba__IterParentComboToLine = new ArrayList(
													parentCombo.getCovered())
													.iterator();

											while (fujaba__IterParentComboToLine
													.hasNext()) {
												try {
													line = (Lifeline) fujaba__IterParentComboToLine
															.next();

													// check object line is really bound
													JavaSDM.ensure(line != null);
													// check isomorphic binding between objects sysLine and line 
													JavaSDM.ensure(!sysLine
															.equals(line));

													// bind object
													interaction = line
															.getInteraction();

													// check object interaction is really bound
													JavaSDM.ensure(interaction != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// check link covered from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// check link covered from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// iterate to-many link src from sysLine to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			sysLine,
																			EMoflonEdge.class,
																			"src"))
															.iterator();

													while (fujaba__IterSysLineTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link trg from _edge_coveredBy to combo
															JavaSDM.ensure(combo
																	.equals(_edge_coveredBy
																			.getTrg()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_122451 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_122451 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_122451 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_122451 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_122451
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_925558 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_925558 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_925558 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_925558 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_925558
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_326196 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_326196 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_326196 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_326196 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_326196
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_69484 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_69484 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_69484 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_69484 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_69484
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_166379 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_166379 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_166379 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_166379 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_166379
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_166379 and parentCombo 
																	JavaSDM.ensure(!__DEC_combo_fragment_166379
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_combo_fragment_166379 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_166379
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_115672 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_115672 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_115672 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_115672 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_115672
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_115672 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_115672
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_115672 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_115672
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_186976 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_186976 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_186976 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_186976 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_186976
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_186976 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_186976
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_186976 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_186976
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_207593 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_207593 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_207593 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_207593 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_207593
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_207593 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_fragment_207593
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_operand_fragment_207593 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_207593
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_460543 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_460543 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_460543 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_460543
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_460543 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_460543
																			.equals(combo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_885287 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_885287 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_885287 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_885287
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_885287 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_885287
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_283786 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_283786 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_283786 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_283786
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_283786 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_283786
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_283786 and parentCombo 
																	JavaSDM.ensure(!__DEC_guard_guard_283786
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_guard_guard_283786 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_283786
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_401312
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_401312 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_401312
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_401312 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_401312
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_401312 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_401312 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_401312 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_401312
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_587834
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_587834 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_587834
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_587834 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_587834
																					.next();

																			// check object __DEC_messageSend_receiveEvent_587834 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_587834 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_587834 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_587834
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_764415
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_764415 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_764415
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_764415 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_764415
																					.next();

																			// check object __DEC_messageReceive_sendEvent_764415 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_764415 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_764415 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_764415
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_252440
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_252440 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_252440
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_252440 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_252440
																					.next();

																			// check object __DEC_messageSend_sendEvent_252440 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_252440 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_252440 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_252440
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_421974
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_421974 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_421974
																					.hasNext()) {
																		try {
																			__DEC_message_message_421974 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_421974
																					.next();

																			// check object __DEC_message_message_421974 is really bound
																			JavaSDM.ensure(__DEC_message_message_421974 != null);
																			// check isomorphic binding between objects __DEC_message_message_421974 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_421974
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_421974 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_421974
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentCombo and operand 
																JavaSDM.ensure(!parentCombo
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and parentCombo 
																JavaSDM.ensure(!parentOperand
																		.equals(parentCombo));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentCombo to guard
																JavaSDM.ensure(!(guard
																		.equals(parentCombo
																				.getGuard())));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to combo
																JavaSDM.ensure(combo
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to combo
																JavaSDM.ensure(combo
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_254(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_902796 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_182236 = null;
		Interaction __DEC_messageSend_enclosingInteraction_707314 = null;
		Interaction __DEC_operand_enclosingInteraction_606017 = null;
		InteractionOperand __DEC_combo_fragment_188744 = null;
		InteractionOperand __DEC_messageReceive_fragment_566582 = null;
		InteractionOperand __DEC_messageSend_fragment_23570 = null;
		InteractionOperand __DEC_operand_fragment_254467 = null;
		CombinedFragment __DEC_operand_operand_333510 = null;
		Constraint __DEC_spec_specification_418514 = null;
		InteractionOperand __DEC_guard_guard_347294 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_515665 = null;
		Message __DEC_messageReceive_receiveEvent_515665 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_476921 = null;
		Message __DEC_messageSend_receiveEvent_476921 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_357289 = null;
		Message __DEC_messageReceive_sendEvent_357289 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_908293 = null;
		Message __DEC_messageSend_sendEvent_908293 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_885217 = null;
		MessageEnd __DEC_message_message_885217 = null;
		Match match = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		Lifeline sysLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link covered from operand to sysLine
			JavaSDM.ensure(operand.getCovered().contains(sysLine));

			// iterate to-many link covered from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from sysLine to parentCombo
					fujaba__Success = false;

					fujaba__IterSysLineToParentCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToParentCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToParentCombo
									.next();

							// ensure correct type and really bound of object parentCombo
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							parentCombo = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentCombo and operand 
							JavaSDM.ensure(!parentCombo.equals(operand));

							// iterate to-many link covered from sysLine to parentOperand
							fujaba__Success = false;

							fujaba__IterSysLineToParentOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentOperand
											.next();

									// ensure correct type and really bound of object parentOperand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentOperand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// check isomorphic binding between objects parentOperand and parentCombo 
									JavaSDM.ensure(!parentOperand
											.equals(parentCombo));

									// iterate to-many link covered from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// bind object
											_TmpObject = message
													.getReceiveEvent();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;

											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// iterate to-many link covered from parentOperand to line
											fujaba__Success = false;

											fujaba__IterParentOperandToLine = new ArrayList(
													parentOperand.getCovered())
													.iterator();

											while (fujaba__IterParentOperandToLine
													.hasNext()) {
												try {
													line = (Lifeline) fujaba__IterParentOperandToLine
															.next();

													// check object line is really bound
													JavaSDM.ensure(line != null);
													// check isomorphic binding between objects sysLine and line 
													JavaSDM.ensure(!sysLine
															.equals(line));

													// bind object
													interaction = line
															.getInteraction();

													// check object interaction is really bound
													JavaSDM.ensure(interaction != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// check link covered from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// check link covered from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_902796 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_902796 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_902796 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_902796 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_902796
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_182236 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_182236 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_182236 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_182236 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_182236
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_707314 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_707314 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_707314 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_707314 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_707314
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_606017 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_606017 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_606017 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_606017 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_606017
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_188744 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_188744 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_188744 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_188744 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_188744
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_188744 and parentCombo 
															JavaSDM.ensure(!__DEC_combo_fragment_188744
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_combo_fragment_188744 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_188744
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_566582 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_566582 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_566582 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_566582 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_566582
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_566582 and parentCombo 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_566582
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_566582 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_566582
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_23570 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_23570 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_23570 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_23570 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_23570
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_23570 and parentCombo 
															JavaSDM.ensure(!__DEC_messageSend_fragment_23570
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_messageSend_fragment_23570 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_23570
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_254467 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_254467 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_254467 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_254467 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_254467
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_254467 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_fragment_254467
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_operand_fragment_254467 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_254467
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_333510 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_333510 is really bound
															JavaSDM.ensure(__DEC_operand_operand_333510 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_333510
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_333510 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_333510
																	.equals(combo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_418514 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_418514 is really bound
															JavaSDM.ensure(__DEC_spec_specification_418514 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_418514
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_418514 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_418514
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_347294 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_347294 is really bound
															JavaSDM.ensure(__DEC_guard_guard_347294 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_347294
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_347294 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_347294
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_347294 and parentCombo 
															JavaSDM.ensure(!__DEC_guard_guard_347294
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_guard_guard_347294 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_347294
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_515665
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_515665 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_515665
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_515665 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_515665
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_515665 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_515665 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_515665 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_515665
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_476921
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_476921 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_476921
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_476921 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_476921
																			.next();

																	// check object __DEC_messageSend_receiveEvent_476921 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_476921 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_476921 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_476921
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_357289
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_357289 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_357289
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_357289 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_357289
																			.next();

																	// check object __DEC_messageReceive_sendEvent_357289 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_357289 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_357289 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_357289
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_908293
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_908293 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_908293
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_908293 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_908293
																			.next();

																	// check object __DEC_messageSend_sendEvent_908293 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_908293 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_908293 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_908293
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_885217
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_885217 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_885217
																			.hasNext()) {
																try {
																	__DEC_message_message_885217 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_885217
																			.next();

																	// check object __DEC_message_message_885217 is really bound
																	JavaSDM.ensure(__DEC_message_message_885217 != null);
																	// check isomorphic binding between objects __DEC_message_message_885217 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_885217
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_885217 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_885217
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentCombo and operand 
														JavaSDM.ensure(!parentCombo
																.equals(operand));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check isomorphic binding between objects parentOperand and parentCombo 
														JavaSDM.ensure(!parentOperand
																.equals(parentCombo));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentCombo
														JavaSDM.ensure(!(parentCombo.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to parentCombo
														JavaSDM.ensure(!(parentCombo
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to parentCombo
														JavaSDM.ensure(!(parentCombo
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentCombo to guard
														JavaSDM.ensure(!(guard
																.equals(parentCombo
																		.getGuard())));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to sysLine
														JavaSDM.ensure(sysLine
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to operand
														JavaSDM.ensure(operand
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_255(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_379666 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_914653 = null;
		Interaction __DEC_messageSend_enclosingInteraction_489266 = null;
		Interaction __DEC_operand_enclosingInteraction_181614 = null;
		InteractionOperand __DEC_combo_fragment_483153 = null;
		InteractionOperand __DEC_messageReceive_fragment_903750 = null;
		InteractionOperand __DEC_messageSend_fragment_973798 = null;
		InteractionOperand __DEC_operand_fragment_570090 = null;
		CombinedFragment __DEC_operand_operand_418761 = null;
		Constraint __DEC_spec_specification_951252 = null;
		InteractionOperand __DEC_guard_guard_860903 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_772149 = null;
		Message __DEC_messageReceive_receiveEvent_772149 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_237948 = null;
		Message __DEC_messageSend_receiveEvent_237948 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_732383 = null;
		Message __DEC_messageReceive_sendEvent_732383 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_772166 = null;
		Message __DEC_messageSend_sendEvent_772166 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_743684 = null;
		MessageEnd __DEC_message_message_743684 = null;
		Match match = null;
		Iterator fujaba__IterSysLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Lifeline sysLine = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// check link covered from operand to sysLine
			JavaSDM.ensure(operand.getCovered().contains(sysLine));

			// iterate to-many link covered from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from sysLine to parentCombo
					fujaba__Success = false;

					fujaba__IterSysLineToParentCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToParentCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToParentCombo
									.next();

							// ensure correct type and really bound of object parentCombo
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							parentCombo = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentCombo and operand 
							JavaSDM.ensure(!parentCombo.equals(operand));

							// iterate to-many link covered from sysLine to parentOperand
							fujaba__Success = false;

							fujaba__IterSysLineToParentOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentOperand
											.next();

									// ensure correct type and really bound of object parentOperand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentOperand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// check isomorphic binding between objects parentOperand and parentCombo 
									JavaSDM.ensure(!parentOperand
											.equals(parentCombo));

									// iterate to-many link covered from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// bind object
											_TmpObject = message
													.getReceiveEvent();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;

											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// iterate to-many link covered from parentOperand to line
											fujaba__Success = false;

											fujaba__IterParentOperandToLine = new ArrayList(
													parentOperand.getCovered())
													.iterator();

											while (fujaba__IterParentOperandToLine
													.hasNext()) {
												try {
													line = (Lifeline) fujaba__IterParentOperandToLine
															.next();

													// check object line is really bound
													JavaSDM.ensure(line != null);
													// check isomorphic binding between objects sysLine and line 
													JavaSDM.ensure(!sysLine
															.equals(line));

													// bind object
													interaction = line
															.getInteraction();

													// check object interaction is really bound
													JavaSDM.ensure(interaction != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// check link covered from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// check link covered from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// iterate to-many link src from sysLine to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			sysLine,
																			EMoflonEdge.class,
																			"src"))
															.iterator();

													while (fujaba__IterSysLineTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link trg from _edge_coveredBy to operand
															JavaSDM.ensure(operand
																	.equals(_edge_coveredBy
																			.getTrg()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_379666 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_379666 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_379666 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_379666 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_379666
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_914653 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_914653 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_914653 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_914653 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_914653
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_489266 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_489266 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_489266 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_489266 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_489266
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_181614 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_181614 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_181614 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_181614 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_181614
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_483153 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_483153 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_483153 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_483153 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_483153
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_483153 and parentCombo 
																	JavaSDM.ensure(!__DEC_combo_fragment_483153
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_combo_fragment_483153 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_483153
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_903750 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_903750 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_903750 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_903750 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_903750
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_903750 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_903750
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_903750 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_903750
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_973798 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_973798 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_973798 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_973798 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_973798
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_973798 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_973798
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_973798 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_973798
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_570090 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_570090 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_570090 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_570090 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_570090
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_570090 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_fragment_570090
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_operand_fragment_570090 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_570090
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_418761 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_418761 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_418761 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_418761
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_418761 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_418761
																			.equals(combo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_951252 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_951252 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_951252 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_951252
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_951252 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_951252
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_860903 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_860903 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_860903 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_860903
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_860903 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_860903
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_860903 and parentCombo 
																	JavaSDM.ensure(!__DEC_guard_guard_860903
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_guard_guard_860903 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_860903
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_772149
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_772149 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_772149
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_772149 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_772149
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_772149 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_772149 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_772149 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_772149
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_237948
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_237948 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_237948
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_237948 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_237948
																					.next();

																			// check object __DEC_messageSend_receiveEvent_237948 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_237948 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_237948 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_237948
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_732383
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_732383 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_732383
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_732383 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_732383
																					.next();

																			// check object __DEC_messageReceive_sendEvent_732383 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_732383 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_732383 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_732383
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_772166
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_772166 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_772166
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_772166 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_772166
																					.next();

																			// check object __DEC_messageSend_sendEvent_772166 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_772166 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_772166 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_772166
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_743684
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_743684 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_743684
																					.hasNext()) {
																		try {
																			__DEC_message_message_743684 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_743684
																					.next();

																			// check object __DEC_message_message_743684 is really bound
																			JavaSDM.ensure(__DEC_message_message_743684 != null);
																			// check isomorphic binding between objects __DEC_message_message_743684 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_743684
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_743684 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_743684
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentCombo and operand 
																JavaSDM.ensure(!parentCombo
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and parentCombo 
																JavaSDM.ensure(!parentOperand
																		.equals(parentCombo));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentCombo to guard
																JavaSDM.ensure(!(guard
																		.equals(parentCombo
																				.getGuard())));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to operand
																JavaSDM.ensure(operand
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to operand
																JavaSDM.ensure(operand
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_256(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_564563 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_981879 = null;
		Interaction __DEC_messageSend_enclosingInteraction_393233 = null;
		Interaction __DEC_operand_enclosingInteraction_44297 = null;
		InteractionOperand __DEC_combo_fragment_869975 = null;
		InteractionOperand __DEC_messageReceive_fragment_12541 = null;
		InteractionOperand __DEC_messageSend_fragment_786629 = null;
		InteractionOperand __DEC_operand_fragment_628786 = null;
		CombinedFragment __DEC_operand_operand_421728 = null;
		Constraint __DEC_spec_specification_798605 = null;
		InteractionOperand __DEC_guard_guard_95324 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_914424 = null;
		Message __DEC_messageReceive_receiveEvent_914424 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_986169 = null;
		Message __DEC_messageSend_receiveEvent_986169 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_555819 = null;
		Message __DEC_messageReceive_sendEvent_555819 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_412020 = null;
		Message __DEC_messageSend_sendEvent_412020 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_621669 = null;
		MessageEnd __DEC_message_message_621669 = null;
		Match match = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Lifeline sysLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// iterate to-many link covered from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from sysLine to parentCombo
					fujaba__Success = false;

					fujaba__IterSysLineToParentCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToParentCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToParentCombo
									.next();

							// ensure correct type and really bound of object parentCombo
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							parentCombo = (InteractionOperand) _TmpObject;
							// bind object
							_TmpObject = _edge_coveredBy.getTrg();

							// ensure correct type and really bound of object parentOperand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							parentOperand = (InteractionOperand) _TmpObject;

							// check isomorphic binding between objects parentOperand and parentCombo 
							JavaSDM.ensure(!parentOperand.equals(parentCombo));

							// check link covered from parentOperand to sysLine
							JavaSDM.ensure(parentOperand.getCovered().contains(
									sysLine));

							// iterate to-many link covered from sysLine to messageSend
							fujaba__Success = false;

							fujaba__IterSysLineToMessageSend = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// bind object
									_TmpObject = message.getReceiveEvent();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;

									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link fragment from messageReceive to parentOperand
									JavaSDM.ensure(parentOperand
											.equals(messageReceive
													.getEnclosingOperand()));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// iterate to-many link covered from sysLine to operand
									fujaba__Success = false;

									fujaba__IterSysLineToOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentCombo and operand 
											JavaSDM.ensure(!parentCombo
													.equals(operand));

											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// iterate to-many link covered from parentOperand to line
											fujaba__Success = false;

											fujaba__IterParentOperandToLine = new ArrayList(
													parentOperand.getCovered())
													.iterator();

											while (fujaba__IterParentOperandToLine
													.hasNext()) {
												try {
													line = (Lifeline) fujaba__IterParentOperandToLine
															.next();

													// check object line is really bound
													JavaSDM.ensure(line != null);
													// check isomorphic binding between objects sysLine and line 
													JavaSDM.ensure(!sysLine
															.equals(line));

													// bind object
													interaction = line
															.getInteraction();

													// check object interaction is really bound
													JavaSDM.ensure(interaction != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// check link covered from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// check link covered from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_564563 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_564563 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_564563 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_564563 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_564563
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_981879 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_981879 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_981879 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_981879 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_981879
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_393233 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_393233 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_393233 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_393233 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_393233
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_44297 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_44297 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_44297 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_44297 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_44297
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_869975 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_869975 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_869975 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_869975 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_869975
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_869975 and parentCombo 
															JavaSDM.ensure(!__DEC_combo_fragment_869975
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_combo_fragment_869975 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_869975
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_12541 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_12541 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_12541 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_12541 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_12541
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_12541 and parentCombo 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_12541
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_12541 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_12541
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_786629 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_786629 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_786629 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_786629 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_786629
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_786629 and parentCombo 
															JavaSDM.ensure(!__DEC_messageSend_fragment_786629
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_messageSend_fragment_786629 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_786629
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_628786 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_628786 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_628786 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_628786 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_628786
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_628786 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_fragment_628786
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_operand_fragment_628786 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_628786
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_421728 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_421728 is really bound
															JavaSDM.ensure(__DEC_operand_operand_421728 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_421728
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_421728 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_421728
																	.equals(combo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_798605 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_798605 is really bound
															JavaSDM.ensure(__DEC_spec_specification_798605 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_798605
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_798605 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_798605
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_95324 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_95324 is really bound
															JavaSDM.ensure(__DEC_guard_guard_95324 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_95324
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_95324 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_95324
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_95324 and parentCombo 
															JavaSDM.ensure(!__DEC_guard_guard_95324
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_guard_guard_95324 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_95324
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_914424
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_914424 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_914424
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_914424 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_914424
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_914424 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_914424 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_914424 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_914424
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_986169
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_986169 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_986169
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_986169 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_986169
																			.next();

																	// check object __DEC_messageSend_receiveEvent_986169 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_986169 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_986169 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_986169
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_555819
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_555819 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_555819
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_555819 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_555819
																			.next();

																	// check object __DEC_messageReceive_sendEvent_555819 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_555819 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_555819 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_555819
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_412020
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_412020 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_412020
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_412020 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_412020
																			.next();

																	// check object __DEC_messageSend_sendEvent_412020 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_412020 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_412020 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_412020
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_621669
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_621669 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_621669
																			.hasNext()) {
																try {
																	__DEC_message_message_621669 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_621669
																			.next();

																	// check object __DEC_message_message_621669 is really bound
																	JavaSDM.ensure(__DEC_message_message_621669 != null);
																	// check isomorphic binding between objects __DEC_message_message_621669 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_621669
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_621669 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_621669
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentCombo and operand 
														JavaSDM.ensure(!parentCombo
																.equals(operand));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check isomorphic binding between objects parentOperand and parentCombo 
														JavaSDM.ensure(!parentOperand
																.equals(parentCombo));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentCombo
														JavaSDM.ensure(!(parentCombo.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to parentCombo
														JavaSDM.ensure(!(parentCombo
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to parentCombo
														JavaSDM.ensure(!(parentCombo
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentCombo to guard
														JavaSDM.ensure(!(guard
																.equals(parentCombo
																		.getGuard())));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to sysLine
														JavaSDM.ensure(sysLine
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_257(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_634584 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_858335 = null;
		Interaction __DEC_messageSend_enclosingInteraction_625629 = null;
		Interaction __DEC_operand_enclosingInteraction_982914 = null;
		InteractionOperand __DEC_combo_fragment_824646 = null;
		InteractionOperand __DEC_messageReceive_fragment_636674 = null;
		InteractionOperand __DEC_messageSend_fragment_619829 = null;
		InteractionOperand __DEC_operand_fragment_857347 = null;
		CombinedFragment __DEC_operand_operand_60467 = null;
		Constraint __DEC_spec_specification_138994 = null;
		InteractionOperand __DEC_guard_guard_920293 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_412185 = null;
		Message __DEC_messageReceive_receiveEvent_412185 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_265899 = null;
		Message __DEC_messageSend_receiveEvent_265899 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_954541 = null;
		Message __DEC_messageReceive_sendEvent_954541 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_462119 = null;
		Message __DEC_messageSend_sendEvent_462119 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_666916 = null;
		MessageEnd __DEC_message_message_666916 = null;
		Match match = null;
		Iterator fujaba__IterSysLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Lifeline sysLine = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// check link covered from parentOperand to sysLine
			JavaSDM.ensure(parentOperand.getCovered().contains(sysLine));

			// iterate to-many link covered from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from sysLine to operand
					fujaba__Success = false;

					fujaba__IterSysLineToOperand = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link covered from sysLine to parentCombo
							fujaba__Success = false;

							fujaba__IterSysLineToParentCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentCombo
											.next();

									// ensure correct type and really bound of object parentCombo
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentCombo = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentCombo and operand 
									JavaSDM.ensure(!parentCombo.equals(operand));

									// check isomorphic binding between objects parentOperand and parentCombo 
									JavaSDM.ensure(!parentOperand
											.equals(parentCombo));

									// iterate to-many link covered from parentOperand to line
									fujaba__Success = false;

									fujaba__IterParentOperandToLine = new ArrayList(
											parentOperand.getCovered())
											.iterator();

									while (fujaba__IterParentOperandToLine
											.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterParentOperandToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// bind object
											interaction = line.getInteraction();

											// check object interaction is really bound
											JavaSDM.ensure(interaction != null);

											// check link covered from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// check link covered from line to parentCombo
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentCombo));

											// iterate to-many link covered from sysLine to messageSend
											fujaba__Success = false;

											fujaba__IterSysLineToMessageSend = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToMessageSend
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToMessageSend
															.next();

													// ensure correct type and really bound of object messageSend
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageSend = (MessageOccurrenceSpecification) _TmpObject;
													// bind object
													message = messageSend
															.getMessage();

													// check object message is really bound
													JavaSDM.ensure(message != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// bind object
													_TmpObject = message
															.getReceiveEvent();

													// ensure correct type and really bound of object messageReceive
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageReceive = (MessageOccurrenceSpecification) _TmpObject;

													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// check link message from messageReceive to message
													JavaSDM.ensure(message
															.equals(messageReceive
																	.getMessage()));

													// check link sendEvent from message to messageSend
													JavaSDM.ensure(messageSend.equals(message
															.getSendEvent()));

													// iterate to-many link src from sysLine to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			sysLine,
																			EMoflonEdge.class,
																			"src"))
															.iterator();

													while (fujaba__IterSysLineTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link trg from _edge_coveredBy to parentOperand
															JavaSDM.ensure(parentOperand
																	.equals(_edge_coveredBy
																			.getTrg()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_634584 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_634584 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_634584 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_634584 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_634584
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_858335 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_858335 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_858335 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_858335 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_858335
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_625629 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_625629 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_625629 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_625629 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_625629
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_982914 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_982914 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_982914 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_982914 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_982914
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_824646 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_824646 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_824646 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_824646 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_824646
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_824646 and parentCombo 
																	JavaSDM.ensure(!__DEC_combo_fragment_824646
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_combo_fragment_824646 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_824646
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_636674 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_636674 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_636674 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_636674 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_636674
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_636674 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_636674
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_636674 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_636674
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_619829 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_619829 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_619829 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_619829 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_619829
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_619829 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_619829
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_619829 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_619829
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_857347 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_857347 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_857347 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_857347 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_857347
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_857347 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_fragment_857347
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_operand_fragment_857347 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_857347
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_60467 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_60467 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_60467 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_60467
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_60467 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_60467
																			.equals(combo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_138994 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_138994 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_138994 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_138994
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_138994 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_138994
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_920293 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_920293 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_920293 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_920293
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_920293 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_920293
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_920293 and parentCombo 
																	JavaSDM.ensure(!__DEC_guard_guard_920293
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_guard_guard_920293 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_920293
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_412185
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_412185 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_412185
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_412185 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_412185
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_412185 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_412185 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_412185 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_412185
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_265899
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_265899 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_265899
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_265899 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_265899
																					.next();

																			// check object __DEC_messageSend_receiveEvent_265899 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_265899 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_265899 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_265899
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_954541
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_954541 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_954541
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_954541 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_954541
																					.next();

																			// check object __DEC_messageReceive_sendEvent_954541 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_954541 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_954541 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_954541
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_462119
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_462119 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_462119
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_462119 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_462119
																					.next();

																			// check object __DEC_messageSend_sendEvent_462119 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_462119 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_462119 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_462119
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_666916
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_666916 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_666916
																					.hasNext()) {
																		try {
																			__DEC_message_message_666916 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_666916
																					.next();

																			// check object __DEC_message_message_666916 is really bound
																			JavaSDM.ensure(__DEC_message_message_666916 != null);
																			// check isomorphic binding between objects __DEC_message_message_666916 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_666916
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_666916 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_666916
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentCombo and operand 
																JavaSDM.ensure(!parentCombo
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and parentCombo 
																JavaSDM.ensure(!parentOperand
																		.equals(parentCombo));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentCombo to guard
																JavaSDM.ensure(!(guard
																		.equals(parentCombo
																				.getGuard())));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_258(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_947864 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_600451 = null;
		Interaction __DEC_messageSend_enclosingInteraction_863160 = null;
		Interaction __DEC_operand_enclosingInteraction_86204 = null;
		InteractionOperand __DEC_combo_fragment_737383 = null;
		InteractionOperand __DEC_messageReceive_fragment_326895 = null;
		InteractionOperand __DEC_messageSend_fragment_340748 = null;
		InteractionOperand __DEC_operand_fragment_232952 = null;
		CombinedFragment __DEC_operand_operand_22970 = null;
		Constraint __DEC_spec_specification_115506 = null;
		InteractionOperand __DEC_guard_guard_997825 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_165121 = null;
		Message __DEC_messageReceive_receiveEvent_165121 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_904505 = null;
		Message __DEC_messageSend_receiveEvent_904505 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_64398 = null;
		Message __DEC_messageReceive_sendEvent_64398 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_231537 = null;
		Message __DEC_messageSend_sendEvent_231537 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_33713 = null;
		MessageEnd __DEC_message_message_33713 = null;
		Match match = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentComboToLine = null;
		Lifeline line = null;
		InteractionOperand parentCombo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Lifeline sysLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// iterate to-many link covered from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from sysLine to messageSend
					fujaba__Success = false;

					fujaba__IterSysLineToMessageSend = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToMessageSend
									.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageSend.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// bind object
							_TmpObject = message.getReceiveEvent();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// iterate to-many link covered from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// bind object
									_TmpObject = _edge_coveredBy.getTrg();

									// ensure correct type and really bound of object parentCombo
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentCombo = (InteractionOperand) _TmpObject;

									// check isomorphic binding between objects parentCombo and operand 
									JavaSDM.ensure(!parentCombo.equals(operand));

									// check link covered from parentCombo to sysLine
									JavaSDM.ensure(parentCombo.getCovered()
											.contains(sysLine));

									// iterate to-many link covered from parentCombo to line
									fujaba__Success = false;

									fujaba__IterParentComboToLine = new ArrayList(
											parentCombo.getCovered())
											.iterator();

									while (fujaba__IterParentComboToLine
											.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterParentComboToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// bind object
											interaction = line.getInteraction();

											// check object interaction is really bound
											JavaSDM.ensure(interaction != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link covered from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// iterate to-many link covered from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check isomorphic binding between objects parentOperand and parentCombo 
													JavaSDM.ensure(!parentOperand
															.equals(parentCombo));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// check link covered from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_947864 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_947864 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_947864 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_947864 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_947864
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_600451 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_600451 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_600451 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_600451 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_600451
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_863160 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_863160 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_863160 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_863160 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_863160
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_86204 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_86204 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_86204 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_86204 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_86204
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_737383 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_737383 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_737383 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_737383 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_737383
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_737383 and parentCombo 
															JavaSDM.ensure(!__DEC_combo_fragment_737383
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_combo_fragment_737383 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_737383
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_326895 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_326895 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_326895 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_326895 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_326895
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_326895 and parentCombo 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_326895
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_326895 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_326895
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_340748 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_340748 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_340748 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_340748 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_340748
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_340748 and parentCombo 
															JavaSDM.ensure(!__DEC_messageSend_fragment_340748
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_messageSend_fragment_340748 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_340748
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_232952 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_232952 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_232952 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_232952 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_232952
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_232952 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_fragment_232952
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_operand_fragment_232952 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_232952
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_22970 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_22970 is really bound
															JavaSDM.ensure(__DEC_operand_operand_22970 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_22970
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_22970 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_22970
																	.equals(combo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_115506 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_115506 is really bound
															JavaSDM.ensure(__DEC_spec_specification_115506 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_115506
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_115506 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_115506
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_997825 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_997825 is really bound
															JavaSDM.ensure(__DEC_guard_guard_997825 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_997825
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_997825 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_997825
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_997825 and parentCombo 
															JavaSDM.ensure(!__DEC_guard_guard_997825
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_guard_guard_997825 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_997825
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_165121
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_165121 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_165121
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_165121 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_165121
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_165121 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_165121 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_165121 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_165121
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_904505
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_904505 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_904505
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_904505 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_904505
																			.next();

																	// check object __DEC_messageSend_receiveEvent_904505 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_904505 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_904505 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_904505
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_64398
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_64398 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_64398
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_64398 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_64398
																			.next();

																	// check object __DEC_messageReceive_sendEvent_64398 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_64398 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_64398 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_64398
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_231537
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_231537 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_231537
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_231537 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_231537
																			.next();

																	// check object __DEC_messageSend_sendEvent_231537 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_231537 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_231537 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_231537
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_33713
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_33713 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_33713
																			.hasNext()) {
																try {
																	__DEC_message_message_33713 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_33713
																			.next();

																	// check object __DEC_message_message_33713 is really bound
																	JavaSDM.ensure(__DEC_message_message_33713 != null);
																	// check isomorphic binding between objects __DEC_message_message_33713 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_33713
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_33713 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_33713
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentCombo and operand 
														JavaSDM.ensure(!parentCombo
																.equals(operand));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check isomorphic binding between objects parentOperand and parentCombo 
														JavaSDM.ensure(!parentOperand
																.equals(parentCombo));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentCombo
														JavaSDM.ensure(!(parentCombo.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to parentCombo
														JavaSDM.ensure(!(parentCombo
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to parentCombo
														JavaSDM.ensure(!(parentCombo
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentCombo to guard
														JavaSDM.ensure(!(guard
																.equals(parentCombo
																		.getGuard())));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to sysLine
														JavaSDM.ensure(sysLine
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_259(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_723375 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_192233 = null;
		Interaction __DEC_messageSend_enclosingInteraction_171643 = null;
		Interaction __DEC_operand_enclosingInteraction_213980 = null;
		InteractionOperand __DEC_combo_fragment_376727 = null;
		InteractionOperand __DEC_messageReceive_fragment_503107 = null;
		InteractionOperand __DEC_messageSend_fragment_387592 = null;
		InteractionOperand __DEC_operand_fragment_312839 = null;
		CombinedFragment __DEC_operand_operand_957676 = null;
		Constraint __DEC_spec_specification_977192 = null;
		InteractionOperand __DEC_guard_guard_34658 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_501643 = null;
		Message __DEC_messageReceive_receiveEvent_501643 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_19035 = null;
		Message __DEC_messageSend_receiveEvent_19035 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_357651 = null;
		Message __DEC_messageReceive_sendEvent_357651 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_517304 = null;
		Message __DEC_messageSend_sendEvent_517304 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_570159 = null;
		MessageEnd __DEC_message_message_570159 = null;
		Match match = null;
		Iterator fujaba__IterSysLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Lifeline sysLine = null;
		InteractionOperand parentCombo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentCombo = (InteractionOperand) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// check link covered from parentCombo to sysLine
			JavaSDM.ensure(parentCombo.getCovered().contains(sysLine));

			// iterate to-many link covered from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from sysLine to messageSend
					fujaba__Success = false;

					fujaba__IterSysLineToMessageSend = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToMessageSend
									.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageSend.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// bind object
							_TmpObject = message.getReceiveEvent();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// iterate to-many link covered from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentCombo and operand 
									JavaSDM.ensure(!parentCombo.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link covered from sysLine to parentOperand
									fujaba__Success = false;

									fujaba__IterSysLineToParentOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentOperand
													.next();

											// ensure correct type and really bound of object parentOperand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentOperand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// check isomorphic binding between objects parentOperand and parentCombo 
											JavaSDM.ensure(!parentOperand
													.equals(parentCombo));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// iterate to-many link covered from parentOperand to line
											fujaba__Success = false;

											fujaba__IterParentOperandToLine = new ArrayList(
													parentOperand.getCovered())
													.iterator();

											while (fujaba__IterParentOperandToLine
													.hasNext()) {
												try {
													line = (Lifeline) fujaba__IterParentOperandToLine
															.next();

													// check object line is really bound
													JavaSDM.ensure(line != null);
													// check isomorphic binding between objects sysLine and line 
													JavaSDM.ensure(!sysLine
															.equals(line));

													// bind object
													interaction = line
															.getInteraction();

													// check object interaction is really bound
													JavaSDM.ensure(interaction != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// check link covered from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// check link covered from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// iterate to-many link src from sysLine to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			sysLine,
																			EMoflonEdge.class,
																			"src"))
															.iterator();

													while (fujaba__IterSysLineTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link trg from _edge_coveredBy to parentCombo
															JavaSDM.ensure(parentCombo
																	.equals(_edge_coveredBy
																			.getTrg()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_723375 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_723375 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_723375 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_723375 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_723375
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_192233 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_192233 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_192233 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_192233 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_192233
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_171643 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_171643 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_171643 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_171643 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_171643
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_213980 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_213980 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_213980 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_213980 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_213980
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_376727 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_376727 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_376727 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_376727 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_376727
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_376727 and parentCombo 
																	JavaSDM.ensure(!__DEC_combo_fragment_376727
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_combo_fragment_376727 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_376727
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_503107 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_503107 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_503107 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_503107 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_503107
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_503107 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_503107
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_503107 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_503107
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_387592 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_387592 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_387592 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_387592 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_387592
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_387592 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_387592
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_387592 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_387592
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_312839 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_312839 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_312839 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_312839 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_312839
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_312839 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_fragment_312839
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_operand_fragment_312839 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_312839
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_957676 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_957676 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_957676 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_957676
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_957676 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_957676
																			.equals(combo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_977192 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_977192 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_977192 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_977192
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_977192 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_977192
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_34658 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_34658 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_34658 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_34658
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_34658 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_34658
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_34658 and parentCombo 
																	JavaSDM.ensure(!__DEC_guard_guard_34658
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_guard_guard_34658 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_34658
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_501643
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_501643 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_501643
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_501643 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_501643
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_501643 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_501643 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_501643 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_501643
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_19035
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_19035 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_19035
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_19035 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_19035
																					.next();

																			// check object __DEC_messageSend_receiveEvent_19035 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_19035 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_19035 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_19035
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_357651
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_357651 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_357651
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_357651 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_357651
																					.next();

																			// check object __DEC_messageReceive_sendEvent_357651 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_357651 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_357651 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_357651
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_517304
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_517304 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_517304
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_517304 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_517304
																					.next();

																			// check object __DEC_messageSend_sendEvent_517304 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_517304 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_517304 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_517304
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_570159
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_570159 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_570159
																					.hasNext()) {
																		try {
																			__DEC_message_message_570159 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_570159
																					.next();

																			// check object __DEC_message_message_570159 is really bound
																			JavaSDM.ensure(__DEC_message_message_570159 != null);
																			// check isomorphic binding between objects __DEC_message_message_570159 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_570159
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_570159 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_570159
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentCombo and operand 
																JavaSDM.ensure(!parentCombo
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and parentCombo 
																JavaSDM.ensure(!parentOperand
																		.equals(parentCombo));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentCombo to guard
																JavaSDM.ensure(!(guard
																		.equals(parentCombo
																				.getGuard())));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_260(
			EMoflonEdge _edge_fragment) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_144984 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_970364 = null;
		Interaction __DEC_messageSend_enclosingInteraction_479460 = null;
		Interaction __DEC_operand_enclosingInteraction_683663 = null;
		InteractionOperand __DEC_combo_fragment_231991 = null;
		InteractionOperand __DEC_messageReceive_fragment_163741 = null;
		InteractionOperand __DEC_messageSend_fragment_482085 = null;
		InteractionOperand __DEC_operand_fragment_17787 = null;
		CombinedFragment __DEC_operand_operand_80593 = null;
		Constraint __DEC_spec_specification_132107 = null;
		InteractionOperand __DEC_guard_guard_159170 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_68600 = null;
		Message __DEC_messageReceive_receiveEvent_68600 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_374998 = null;
		Message __DEC_messageSend_receiveEvent_374998 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_164164 = null;
		Message __DEC_messageReceive_sendEvent_164164 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_912530 = null;
		Message __DEC_messageSend_sendEvent_912530 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_517684 = null;
		MessageEnd __DEC_message_message_517684 = null;
		Match match = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentOperandToSysLine = null;
		Lifeline sysLine = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_fragment is really bound
			JavaSDM.ensure(_edge_fragment != null);
			// bind object
			_TmpObject = _edge_fragment.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// iterate to-many link covered from parentOperand to sysLine
					fujaba__Success = false;

					fujaba__IterParentOperandToSysLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToSysLine.hasNext()) {
						try {
							sysLine = (Lifeline) fujaba__IterParentOperandToSysLine
									.next();

							// check object sysLine is really bound
							JavaSDM.ensure(sysLine != null);
							// check isomorphic binding between objects sysLine and line 
							JavaSDM.ensure(!sysLine.equals(line));

							// iterate to-many link covered from sysLine to combo
							fujaba__Success = false;

							fujaba__IterSysLineToCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// iterate to-many link covered from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// bind object
											_TmpObject = message
													.getReceiveEvent();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;

											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// check link trg from _edge_fragment to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(_edge_fragment
															.getTrg()));

											// iterate to-many link covered from sysLine to operand
											fujaba__Success = false;

											fujaba__IterSysLineToOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToOperand
															.next();

													// ensure correct type and really bound of object operand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													operand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// bind object
													guard = operand.getGuard();

													// check object guard is really bound
													JavaSDM.ensure(guard != null);

													// bind object
													_TmpObject = guard
															.getSpecification();

													// ensure correct type and really bound of object spec
													JavaSDM.ensure(_TmpObject instanceof LiteralString);
													spec = (LiteralString) _TmpObject;

													// check link covered from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// iterate to-many link covered from sysLine to parentCombo
													fujaba__Success = false;

													fujaba__IterSysLineToParentCombo = new ArrayList(
															sysLine.getCoveredBy())
															.iterator();

													while (fujaba__IterSysLineToParentCombo
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterSysLineToParentCombo
																	.next();

															// ensure correct type and really bound of object parentCombo
															JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
															parentCombo = (InteractionOperand) _TmpObject;
															// check isomorphic binding between objects parentCombo and operand 
															JavaSDM.ensure(!parentCombo
																	.equals(operand));

															// check isomorphic binding between objects parentOperand and parentCombo 
															JavaSDM.ensure(!parentOperand
																	.equals(parentCombo));

															// check link covered from line to parentCombo
															JavaSDM.ensure(line
																	.getCoveredBy()
																	.contains(
																			parentCombo));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_144984 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_144984 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_144984 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_144984 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_144984
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_970364 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_970364 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_970364 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_970364 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_970364
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_479460 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_479460 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_479460 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_479460 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_479460
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_683663 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_683663 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_683663 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_683663 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_683663
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_231991 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_231991 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_231991 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_231991 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_231991
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_231991 and parentCombo 
																	JavaSDM.ensure(!__DEC_combo_fragment_231991
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_combo_fragment_231991 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_231991
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_163741 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_163741 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_163741 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_163741 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_163741
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_163741 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_163741
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_163741 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_163741
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_482085 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_482085 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_482085 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_482085 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_482085
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_482085 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_482085
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_482085 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_482085
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_17787 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_17787 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_17787 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_17787 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_17787
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_17787 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_fragment_17787
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_operand_fragment_17787 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_17787
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_80593 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_80593 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_80593 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_80593
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_80593 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_80593
																			.equals(combo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_132107 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_132107 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_132107 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_132107
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_132107 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_132107
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_159170 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_159170 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_159170 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_159170
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_159170 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_159170
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_159170 and parentCombo 
																	JavaSDM.ensure(!__DEC_guard_guard_159170
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_guard_guard_159170 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_159170
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_68600
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_68600 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_68600
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_68600 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_68600
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_68600 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_68600 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_68600 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_68600
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_374998
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_374998 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_374998
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_374998 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_374998
																					.next();

																			// check object __DEC_messageSend_receiveEvent_374998 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_374998 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_374998 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_374998
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_164164
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_164164 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_164164
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_164164 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_164164
																					.next();

																			// check object __DEC_messageReceive_sendEvent_164164 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_164164 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_164164 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_164164
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_912530
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_912530 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_912530
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_912530 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_912530
																					.next();

																			// check object __DEC_messageSend_sendEvent_912530 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_912530 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_912530 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_912530
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_517684
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_517684 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_517684
																					.hasNext()) {
																		try {
																			__DEC_message_message_517684 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_517684
																					.next();

																			// check object __DEC_message_message_517684 is really bound
																			JavaSDM.ensure(__DEC_message_message_517684 != null);
																			// check isomorphic binding between objects __DEC_message_message_517684 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_517684
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_517684 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_517684
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_fragment is really bound
																JavaSDM.ensure(_edge_fragment != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentCombo and operand 
																JavaSDM.ensure(!parentCombo
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and parentCombo 
																JavaSDM.ensure(!parentOperand
																		.equals(parentCombo));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentCombo to guard
																JavaSDM.ensure(!(guard
																		.equals(parentCombo
																				.getGuard())));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_fragment to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(_edge_fragment
																				.getSrc()));

																// check link trg from _edge_fragment to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(_edge_fragment
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_261(
			EMoflonEdge _edge_enclosingOperand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_811355 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_281031 = null;
		Interaction __DEC_messageSend_enclosingInteraction_684501 = null;
		Interaction __DEC_operand_enclosingInteraction_254837 = null;
		InteractionOperand __DEC_combo_fragment_262019 = null;
		InteractionOperand __DEC_messageReceive_fragment_60150 = null;
		InteractionOperand __DEC_messageSend_fragment_411696 = null;
		InteractionOperand __DEC_operand_fragment_720090 = null;
		CombinedFragment __DEC_operand_operand_233581 = null;
		Constraint __DEC_spec_specification_936445 = null;
		InteractionOperand __DEC_guard_guard_308408 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_770673 = null;
		Message __DEC_messageReceive_receiveEvent_770673 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_694532 = null;
		Message __DEC_messageSend_receiveEvent_694532 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_832557 = null;
		Message __DEC_messageReceive_sendEvent_832557 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_672066 = null;
		Message __DEC_messageSend_sendEvent_672066 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_614614 = null;
		MessageEnd __DEC_message_message_614614 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_fragment = null;
		EMoflonEdge _edge_fragment = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentOperandToSysLine = null;
		Lifeline sysLine = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_enclosingOperand is really bound
			JavaSDM.ensure(_edge_enclosingOperand != null);
			// bind object
			_TmpObject = _edge_enclosingOperand.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// iterate to-many link covered from parentOperand to sysLine
					fujaba__Success = false;

					fujaba__IterParentOperandToSysLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToSysLine.hasNext()) {
						try {
							sysLine = (Lifeline) fujaba__IterParentOperandToSysLine
									.next();

							// check object sysLine is really bound
							JavaSDM.ensure(sysLine != null);
							// check isomorphic binding between objects sysLine and line 
							JavaSDM.ensure(!sysLine.equals(line));

							// iterate to-many link covered from sysLine to combo
							fujaba__Success = false;

							fujaba__IterSysLineToCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// iterate to-many link covered from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// bind object
											_TmpObject = message
													.getReceiveEvent();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;

											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// check link src from _edge_enclosingOperand to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(_edge_enclosingOperand
															.getSrc()));

											// iterate to-many link covered from sysLine to operand
											fujaba__Success = false;

											fujaba__IterSysLineToOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToOperand
															.next();

													// ensure correct type and really bound of object operand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													operand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// bind object
													guard = operand.getGuard();

													// check object guard is really bound
													JavaSDM.ensure(guard != null);

													// bind object
													_TmpObject = guard
															.getSpecification();

													// ensure correct type and really bound of object spec
													JavaSDM.ensure(_TmpObject instanceof LiteralString);
													spec = (LiteralString) _TmpObject;

													// check link covered from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// iterate to-many link covered from sysLine to parentCombo
													fujaba__Success = false;

													fujaba__IterSysLineToParentCombo = new ArrayList(
															sysLine.getCoveredBy())
															.iterator();

													while (fujaba__IterSysLineToParentCombo
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterSysLineToParentCombo
																	.next();

															// ensure correct type and really bound of object parentCombo
															JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
															parentCombo = (InteractionOperand) _TmpObject;
															// check isomorphic binding between objects parentCombo and operand 
															JavaSDM.ensure(!parentCombo
																	.equals(operand));

															// check isomorphic binding between objects parentOperand and parentCombo 
															JavaSDM.ensure(!parentOperand
																	.equals(parentCombo));

															// check link covered from line to parentCombo
															JavaSDM.ensure(line
																	.getCoveredBy()
																	.contains(
																			parentCombo));

															// iterate to-many link src from parentOperand to _edge_fragment
															fujaba__Success = false;

															fujaba__IterParentOperandTo_edge_fragment = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					parentOperand,
																					EMoflonEdge.class,
																					"src"))
																	.iterator();

															while (fujaba__IterParentOperandTo_edge_fragment
																	.hasNext()) {
																try {
																	_edge_fragment = (EMoflonEdge) fujaba__IterParentOperandTo_edge_fragment
																			.next();

																	// check object _edge_fragment is really bound
																	JavaSDM.ensure(_edge_fragment != null);
																	// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
																	JavaSDM.ensure(!_edge_fragment
																			.equals(_edge_enclosingOperand));

																	// check link trg from _edge_fragment to messageReceive
																	JavaSDM.ensure(messageReceive
																			.equals(_edge_fragment
																					.getTrg()));

																	// story node 'test core match and DECs'
																	try {
																		fujaba__Success = false;

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_combo_enclosingInteraction_811355 = combo
																					.getEnclosingInteraction();

																			// check object __DEC_combo_enclosingInteraction_811355 is really bound
																			JavaSDM.ensure(__DEC_combo_enclosingInteraction_811355 != null);

																			// check isomorphic binding between objects __DEC_combo_enclosingInteraction_811355 and interaction 
																			JavaSDM.ensure(!__DEC_combo_enclosingInteraction_811355
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageReceive_enclosingInteraction_281031 = messageReceive
																					.getEnclosingInteraction();

																			// check object __DEC_messageReceive_enclosingInteraction_281031 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_281031 != null);

																			// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_281031 and interaction 
																			JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_281031
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageSend_enclosingInteraction_684501 = messageSend
																					.getEnclosingInteraction();

																			// check object __DEC_messageSend_enclosingInteraction_684501 is really bound
																			JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_684501 != null);

																			// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_684501 and interaction 
																			JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_684501
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_enclosingInteraction_254837 = operand
																					.getEnclosingInteraction();

																			// check object __DEC_operand_enclosingInteraction_254837 is really bound
																			JavaSDM.ensure(__DEC_operand_enclosingInteraction_254837 != null);

																			// check isomorphic binding between objects __DEC_operand_enclosingInteraction_254837 and interaction 
																			JavaSDM.ensure(!__DEC_operand_enclosingInteraction_254837
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// negative check for link packagedElement from guard
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						guard,
																						ModalSequenceDiagram.Package.class,
																						"packagedElement")
																				.size() == 0);
																		// negative check for link packagedElement from spec
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						spec,
																						ModalSequenceDiagram.Package.class,
																						"packagedElement")
																				.size() == 0);
																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_combo_fragment_262019 = combo
																					.getEnclosingOperand();

																			// check object __DEC_combo_fragment_262019 is really bound
																			JavaSDM.ensure(__DEC_combo_fragment_262019 != null);

																			// check isomorphic binding between objects __DEC_combo_fragment_262019 and operand 
																			JavaSDM.ensure(!__DEC_combo_fragment_262019
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_combo_fragment_262019 and parentCombo 
																			JavaSDM.ensure(!__DEC_combo_fragment_262019
																					.equals(parentCombo));

																			// check isomorphic binding between objects __DEC_combo_fragment_262019 and parentOperand 
																			JavaSDM.ensure(!__DEC_combo_fragment_262019
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageReceive_fragment_60150 = messageReceive
																					.getEnclosingOperand();

																			// check object __DEC_messageReceive_fragment_60150 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_fragment_60150 != null);

																			// check isomorphic binding between objects __DEC_messageReceive_fragment_60150 and operand 
																			JavaSDM.ensure(!__DEC_messageReceive_fragment_60150
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_messageReceive_fragment_60150 and parentCombo 
																			JavaSDM.ensure(!__DEC_messageReceive_fragment_60150
																					.equals(parentCombo));

																			// check isomorphic binding between objects __DEC_messageReceive_fragment_60150 and parentOperand 
																			JavaSDM.ensure(!__DEC_messageReceive_fragment_60150
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageSend_fragment_411696 = messageSend
																					.getEnclosingOperand();

																			// check object __DEC_messageSend_fragment_411696 is really bound
																			JavaSDM.ensure(__DEC_messageSend_fragment_411696 != null);

																			// check isomorphic binding between objects __DEC_messageSend_fragment_411696 and operand 
																			JavaSDM.ensure(!__DEC_messageSend_fragment_411696
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_messageSend_fragment_411696 and parentCombo 
																			JavaSDM.ensure(!__DEC_messageSend_fragment_411696
																					.equals(parentCombo));

																			// check isomorphic binding between objects __DEC_messageSend_fragment_411696 and parentOperand 
																			JavaSDM.ensure(!__DEC_messageSend_fragment_411696
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_fragment_720090 = operand
																					.getEnclosingOperand();

																			// check object __DEC_operand_fragment_720090 is really bound
																			JavaSDM.ensure(__DEC_operand_fragment_720090 != null);

																			// check isomorphic binding between objects __DEC_operand_fragment_720090 and operand 
																			JavaSDM.ensure(!__DEC_operand_fragment_720090
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_operand_fragment_720090 and parentCombo 
																			JavaSDM.ensure(!__DEC_operand_fragment_720090
																					.equals(parentCombo));

																			// check isomorphic binding between objects __DEC_operand_fragment_720090 and parentOperand 
																			JavaSDM.ensure(!__DEC_operand_fragment_720090
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_operand_233581 = operand
																					.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																					.eContainer()
																					: null;

																			// check object __DEC_operand_operand_233581 is really bound
																			JavaSDM.ensure(__DEC_operand_operand_233581 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(__DEC_operand_operand_233581
																					.getOperand()
																					.contains(
																							operand));

																			// check isomorphic binding between objects __DEC_operand_operand_233581 and combo 
																			JavaSDM.ensure(!__DEC_operand_operand_233581
																					.equals(combo));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_spec_specification_936445 = spec
																					.eContainer() instanceof Constraint ? (Constraint) spec
																					.eContainer()
																					: null;

																			// check object __DEC_spec_specification_936445 is really bound
																			JavaSDM.ensure(__DEC_spec_specification_936445 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(spec
																					.equals(__DEC_spec_specification_936445
																							.getSpecification()));

																			// check isomorphic binding between objects __DEC_spec_specification_936445 and guard 
																			JavaSDM.ensure(!__DEC_spec_specification_936445
																					.equals(guard));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_guard_guard_308408 = guard
																					.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																					.eContainer()
																					: null;

																			// check object __DEC_guard_guard_308408 is really bound
																			JavaSDM.ensure(__DEC_guard_guard_308408 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(guard
																					.equals(__DEC_guard_guard_308408
																							.getGuard()));

																			// check isomorphic binding between objects __DEC_guard_guard_308408 and operand 
																			JavaSDM.ensure(!__DEC_guard_guard_308408
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_guard_guard_308408 and parentCombo 
																			JavaSDM.ensure(!__DEC_guard_guard_308408
																					.equals(parentCombo));

																			// check isomorphic binding between objects __DEC_guard_guard_308408 and parentOperand 
																			JavaSDM.ensure(!__DEC_guard_guard_308408
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_770673
																			fujaba__Success = false;

																			fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_770673 = new ArrayList(
																					org.moflon.util.eMoflonEMFUtil
																							.getOppositeReference(
																									messageReceive,
																									Message.class,
																									"receiveEvent"))
																					.iterator();

																			while (!(fujaba__Success)
																					&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_770673
																							.hasNext()) {
																				try {
																					__DEC_messageReceive_receiveEvent_770673 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_770673
																							.next();

																					// check object __DEC_messageReceive_receiveEvent_770673 is really bound
																					JavaSDM.ensure(__DEC_messageReceive_receiveEvent_770673 != null);
																					// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_770673 and message 
																					JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_770673
																							.equals(message));

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}
																			}
																			JavaSDM.ensure(fujaba__Success);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_694532
																			fujaba__Success = false;

																			fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_694532 = new ArrayList(
																					org.moflon.util.eMoflonEMFUtil
																							.getOppositeReference(
																									messageSend,
																									Message.class,
																									"receiveEvent"))
																					.iterator();

																			while (!(fujaba__Success)
																					&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_694532
																							.hasNext()) {
																				try {
																					__DEC_messageSend_receiveEvent_694532 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_694532
																							.next();

																					// check object __DEC_messageSend_receiveEvent_694532 is really bound
																					JavaSDM.ensure(__DEC_messageSend_receiveEvent_694532 != null);
																					// check isomorphic binding between objects __DEC_messageSend_receiveEvent_694532 and message 
																					JavaSDM.ensure(!__DEC_messageSend_receiveEvent_694532
																							.equals(message));

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}
																			}
																			JavaSDM.ensure(fujaba__Success);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_832557
																			fujaba__Success = false;

																			fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_832557 = new ArrayList(
																					org.moflon.util.eMoflonEMFUtil
																							.getOppositeReference(
																									messageReceive,
																									Message.class,
																									"sendEvent"))
																					.iterator();

																			while (!(fujaba__Success)
																					&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_832557
																							.hasNext()) {
																				try {
																					__DEC_messageReceive_sendEvent_832557 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_832557
																							.next();

																					// check object __DEC_messageReceive_sendEvent_832557 is really bound
																					JavaSDM.ensure(__DEC_messageReceive_sendEvent_832557 != null);
																					// check isomorphic binding between objects __DEC_messageReceive_sendEvent_832557 and message 
																					JavaSDM.ensure(!__DEC_messageReceive_sendEvent_832557
																							.equals(message));

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}
																			}
																			JavaSDM.ensure(fujaba__Success);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_672066
																			fujaba__Success = false;

																			fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_672066 = new ArrayList(
																					org.moflon.util.eMoflonEMFUtil
																							.getOppositeReference(
																									messageSend,
																									Message.class,
																									"sendEvent"))
																					.iterator();

																			while (!(fujaba__Success)
																					&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_672066
																							.hasNext()) {
																				try {
																					__DEC_messageSend_sendEvent_672066 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_672066
																							.next();

																					// check object __DEC_messageSend_sendEvent_672066 is really bound
																					JavaSDM.ensure(__DEC_messageSend_sendEvent_672066 != null);
																					// check isomorphic binding between objects __DEC_messageSend_sendEvent_672066 and message 
																					JavaSDM.ensure(!__DEC_messageSend_sendEvent_672066
																							.equals(message));

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}
																			}
																			JavaSDM.ensure(fujaba__Success);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// iterate to-many link message from message to __DEC_message_message_614614
																			fujaba__Success = false;

																			fujaba__IterMessageTo__DEC_message_message_614614 = new ArrayList(
																					org.moflon.util.eMoflonEMFUtil
																							.getOppositeReference(
																									message,
																									MessageEnd.class,
																									"message"))
																					.iterator();

																			while (!(fujaba__Success)
																					&& fujaba__IterMessageTo__DEC_message_message_614614
																							.hasNext()) {
																				try {
																					__DEC_message_message_614614 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_614614
																							.next();

																					// check object __DEC_message_message_614614 is really bound
																					JavaSDM.ensure(__DEC_message_message_614614 != null);
																					// check isomorphic binding between objects __DEC_message_message_614614 and messageReceive 
																					JavaSDM.ensure(!__DEC_message_message_614614
																							.equals(messageReceive));

																					// check isomorphic binding between objects __DEC_message_message_614614 and messageSend 
																					JavaSDM.ensure(!__DEC_message_message_614614
																							.equals(messageSend));

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}
																			}
																			JavaSDM.ensure(fujaba__Success);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check link fragment from operand to operand
																		JavaSDM.ensure(!(operand
																				.equals(operand
																						.getEnclosingOperand())));

																		// check link fragment from operand to operand
																		JavaSDM.ensure(!(operand
																				.equals(operand
																						.getEnclosingOperand())));

																		// check object _edge_enclosingOperand is really bound
																		JavaSDM.ensure(_edge_enclosingOperand != null);
																		// check object _edge_fragment is really bound
																		JavaSDM.ensure(_edge_fragment != null);
																		// check object combo is really bound
																		JavaSDM.ensure(combo != null);
																		// check object guard is really bound
																		JavaSDM.ensure(guard != null);
																		// check object interaction is really bound
																		JavaSDM.ensure(interaction != null);
																		// check object line is really bound
																		JavaSDM.ensure(line != null);
																		// check object message is really bound
																		JavaSDM.ensure(message != null);
																		// check object messageReceive is really bound
																		JavaSDM.ensure(messageReceive != null);
																		// check object messageSend is really bound
																		JavaSDM.ensure(messageSend != null);
																		// check object operand is really bound
																		JavaSDM.ensure(operand != null);
																		// check object parentCombo is really bound
																		JavaSDM.ensure(parentCombo != null);
																		// check object parentOperand is really bound
																		JavaSDM.ensure(parentOperand != null);
																		// check object spec is really bound
																		JavaSDM.ensure(spec != null);
																		// check object sysLine is really bound
																		JavaSDM.ensure(sysLine != null);
																		// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
																		JavaSDM.ensure(!_edge_fragment
																				.equals(_edge_enclosingOperand));

																		// check isomorphic binding between objects sysLine and line 
																		JavaSDM.ensure(!sysLine
																				.equals(line));

																		// check isomorphic binding between objects messageSend and messageReceive 
																		JavaSDM.ensure(!messageSend
																				.equals(messageReceive));

																		// check isomorphic binding between objects parentCombo and operand 
																		JavaSDM.ensure(!parentCombo
																				.equals(operand));

																		// check isomorphic binding between objects parentOperand and operand 
																		JavaSDM.ensure(!parentOperand
																				.equals(operand));

																		// check isomorphic binding between objects parentOperand and parentCombo 
																		JavaSDM.ensure(!parentOperand
																				.equals(parentCombo));

																		// check link fragment from messageReceive to parentOperand
																		JavaSDM.ensure(parentOperand
																				.equals(messageReceive
																						.getEnclosingOperand()));

																		// check link fragment from combo to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(combo
																						.getEnclosingInteraction())));

																		// check link fragment from messageReceive to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(messageReceive
																						.getEnclosingInteraction())));

																		// check link fragment from messageSend to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(messageSend
																						.getEnclosingInteraction())));

																		// check link fragment from operand to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(operand
																						.getEnclosingInteraction())));

																		// check link fragment from combo to operand
																		JavaSDM.ensure(!(operand
																				.equals(combo
																						.getEnclosingOperand())));

																		// check link fragment from messageReceive to operand
																		JavaSDM.ensure(!(operand
																				.equals(messageReceive
																						.getEnclosingOperand())));

																		// check link fragment from messageSend to operand
																		JavaSDM.ensure(!(operand
																				.equals(messageSend
																						.getEnclosingOperand())));

																		// check link fragment from combo to parentCombo
																		JavaSDM.ensure(!(parentCombo
																				.equals(combo
																						.getEnclosingOperand())));

																		// check link fragment from messageReceive to parentCombo
																		JavaSDM.ensure(!(parentCombo
																				.equals(messageReceive
																						.getEnclosingOperand())));

																		// check link fragment from messageSend to parentCombo
																		JavaSDM.ensure(!(parentCombo
																				.equals(messageSend
																						.getEnclosingOperand())));

																		// check link fragment from combo to parentOperand
																		JavaSDM.ensure(!(parentOperand
																				.equals(combo
																						.getEnclosingOperand())));

																		// check link fragment from messageSend to parentOperand
																		JavaSDM.ensure(!(parentOperand
																				.equals(messageSend
																						.getEnclosingOperand())));

																		// check link guard from operand to guard
																		JavaSDM.ensure(guard
																				.equals(operand
																						.getGuard()));

																		// check link guard from parentCombo to guard
																		JavaSDM.ensure(!(guard
																				.equals(parentCombo
																						.getGuard())));

																		// check link guard from parentOperand to guard
																		JavaSDM.ensure(!(guard
																				.equals(parentOperand
																						.getGuard())));

																		// check link lifeline from line to interaction
																		JavaSDM.ensure(interaction
																				.equals(line
																						.getInteraction()));

																		// check link message from message to interaction
																		JavaSDM.ensure(interaction
																				.equals(message
																						.getInteraction()));

																		// check link message from messageReceive to message
																		JavaSDM.ensure(message
																				.equals(messageReceive
																						.getMessage()));

																		// check link message from messageSend to message
																		JavaSDM.ensure(message
																				.equals(messageSend
																						.getMessage()));

																		// check link receiveEvent from message to messageReceive
																		JavaSDM.ensure(messageReceive
																				.equals(message
																						.getReceiveEvent()));

																		// check link receiveEvent from message to messageSend
																		JavaSDM.ensure(!(messageSend
																				.equals(message
																						.getReceiveEvent())));

																		// check link sendEvent from message to messageSend
																		JavaSDM.ensure(messageSend
																				.equals(message
																						.getSendEvent()));

																		// check link sendEvent from message to messageReceive
																		JavaSDM.ensure(!(messageReceive
																				.equals(message
																						.getSendEvent())));

																		// check link operand from operand to combo
																		JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						operand,
																						CombinedFragment.class,
																						"$eContainer")
																				.contains(combo)));

																		// check link specification from spec to guard
																		JavaSDM.ensure(guard
																				.equals(spec
																						.eContainer()));

																		// check link src from _edge_enclosingOperand to messageReceive
																		JavaSDM.ensure(messageReceive
																				.equals(_edge_enclosingOperand
																						.getSrc()));

																		// check link src from _edge_fragment to parentOperand
																		JavaSDM.ensure(parentOperand
																				.equals(_edge_fragment
																						.getSrc()));

																		// check link trg from _edge_enclosingOperand to parentOperand
																		JavaSDM.ensure(parentOperand
																				.equals(_edge_enclosingOperand
																						.getTrg()));

																		// check link trg from _edge_fragment to messageReceive
																		JavaSDM.ensure(messageReceive
																				.equals(_edge_fragment
																						.getTrg()));

																		// check link covered from combo to sysLine
																		JavaSDM.ensure(combo
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link covered from messageSend to sysLine
																		JavaSDM.ensure(messageSend
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link covered from line to operand
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						operand));

																		// check link covered from operand to sysLine
																		JavaSDM.ensure(operand
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link covered from line to parentCombo
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						parentCombo));

																		// check link covered from parentCombo to sysLine
																		JavaSDM.ensure(parentCombo
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link covered from line to parentOperand
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						parentOperand));

																		// check link covered from parentOperand to sysLine
																		JavaSDM.ensure(parentOperand
																				.getCovered()
																				.contains(
																						sysLine));

																		// create object match
																		match = TGGRuntimeFactory.eINSTANCE
																				.createMatch();

																		// assign attribute match
																		match.setRuleName(__eClass
																				.getName());
																		// statement node 'bookkeeping with generic isAppropriate method'
																		fujaba__Success = this
																				.isAppropriate_BWD(
																						match,
																						sysLine,
																						messageSend,
																						combo,
																						operand,
																						parentOperand,
																						parentCombo,
																						messageReceive,
																						line,
																						guard,
																						spec,
																						message,
																						interaction);
																		if (fujaba__Success) {
																			// statement node 'Ensure that the correct types of elements are matched'
																			fujaba__Success = this
																					.checkTypes_BWD(match);
																			if (fujaba__Success) {
																				// story node 'Add match to rule result'
																				try {
																					fujaba__Success = false;

																					// check object __performOperation is really bound
																					JavaSDM.ensure(__performOperation != null);
																					// check object __result is really bound
																					JavaSDM.ensure(__result != null);
																					// check object match is really bound
																					JavaSDM.ensure(match != null);

																					// create link
																					org.moflon.util.eMoflonEMFUtil
																							.addOppositeReference(
																									match,
																									__performOperation,
																									"isApplicableOperation");

																					// create link
																					__result.getContents()
																							.add(match);

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}

																			} else {

																			}

																		} else {

																		}
																		fujaba__Success = true;
																	} catch (JavaSDMException fujaba__InternalException) {
																		fujaba__Success = false;
																	}

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_262(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_269568 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_746561 = null;
		Interaction __DEC_messageSend_enclosingInteraction_29319 = null;
		Interaction __DEC_operand_enclosingInteraction_124071 = null;
		InteractionOperand __DEC_combo_fragment_944516 = null;
		InteractionOperand __DEC_messageReceive_fragment_143178 = null;
		InteractionOperand __DEC_messageSend_fragment_466120 = null;
		InteractionOperand __DEC_operand_fragment_939197 = null;
		CombinedFragment __DEC_operand_operand_22241 = null;
		Constraint __DEC_spec_specification_196206 = null;
		InteractionOperand __DEC_guard_guard_177784 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_806171 = null;
		Message __DEC_messageReceive_receiveEvent_806171 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_976020 = null;
		Message __DEC_messageSend_receiveEvent_976020 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_468397 = null;
		Message __DEC_messageReceive_sendEvent_468397 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_57704 = null;
		Message __DEC_messageSend_sendEvent_57704 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_310559 = null;
		MessageEnd __DEC_message_message_310559 = null;
		Match match = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentOperandToSysLine = null;
		Lifeline sysLine = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// check link covered from line to parentOperand
			JavaSDM.ensure(line.getCoveredBy().contains(parentOperand));

			// iterate to-many link covered from parentOperand to sysLine
			fujaba__Success = false;

			fujaba__IterParentOperandToSysLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterParentOperandToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// check isomorphic binding between objects sysLine and line 
					JavaSDM.ensure(!sysLine.equals(line));

					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to messageSend
							fujaba__Success = false;

							fujaba__IterSysLineToMessageSend = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// bind object
									_TmpObject = message.getReceiveEvent();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;

									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link fragment from messageReceive to parentOperand
									JavaSDM.ensure(parentOperand
											.equals(messageReceive
													.getEnclosingOperand()));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// iterate to-many link covered from sysLine to operand
									fujaba__Success = false;

									fujaba__IterSysLineToOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// check link covered from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// iterate to-many link covered from sysLine to parentCombo
											fujaba__Success = false;

											fujaba__IterSysLineToParentCombo = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentCombo
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentCombo
															.next();

													// ensure correct type and really bound of object parentCombo
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentCombo = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentCombo and operand 
													JavaSDM.ensure(!parentCombo
															.equals(operand));

													// check isomorphic binding between objects parentOperand and parentCombo 
													JavaSDM.ensure(!parentOperand
															.equals(parentCombo));

													// check link covered from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_269568 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_269568 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_269568 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_269568 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_269568
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_746561 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_746561 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_746561 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_746561 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_746561
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_29319 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_29319 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_29319 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_29319 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_29319
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_124071 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_124071 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_124071 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_124071 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_124071
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_944516 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_944516 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_944516 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_944516 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_944516
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_944516 and parentCombo 
															JavaSDM.ensure(!__DEC_combo_fragment_944516
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_combo_fragment_944516 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_944516
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_143178 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_143178 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_143178 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_143178 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_143178
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_143178 and parentCombo 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_143178
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_143178 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_143178
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_466120 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_466120 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_466120 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_466120 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_466120
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_466120 and parentCombo 
															JavaSDM.ensure(!__DEC_messageSend_fragment_466120
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_messageSend_fragment_466120 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_466120
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_939197 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_939197 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_939197 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_939197 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_939197
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_939197 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_fragment_939197
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_operand_fragment_939197 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_939197
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_22241 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_22241 is really bound
															JavaSDM.ensure(__DEC_operand_operand_22241 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_22241
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_22241 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_22241
																	.equals(combo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_196206 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_196206 is really bound
															JavaSDM.ensure(__DEC_spec_specification_196206 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_196206
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_196206 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_196206
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_177784 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_177784 is really bound
															JavaSDM.ensure(__DEC_guard_guard_177784 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_177784
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_177784 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_177784
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_177784 and parentCombo 
															JavaSDM.ensure(!__DEC_guard_guard_177784
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_guard_guard_177784 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_177784
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_806171
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_806171 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_806171
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_806171 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_806171
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_806171 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_806171 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_806171 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_806171
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_976020
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_976020 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_976020
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_976020 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_976020
																			.next();

																	// check object __DEC_messageSend_receiveEvent_976020 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_976020 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_976020 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_976020
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_468397
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_468397 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_468397
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_468397 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_468397
																			.next();

																	// check object __DEC_messageReceive_sendEvent_468397 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_468397 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_468397 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_468397
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_57704
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_57704 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_57704
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_57704 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_57704
																			.next();

																	// check object __DEC_messageSend_sendEvent_57704 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_57704 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_57704 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_57704
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_310559
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_310559 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_310559
																			.hasNext()) {
																try {
																	__DEC_message_message_310559 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_310559
																			.next();

																	// check object __DEC_message_message_310559 is really bound
																	JavaSDM.ensure(__DEC_message_message_310559 != null);
																	// check isomorphic binding between objects __DEC_message_message_310559 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_310559
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_310559 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_310559
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentCombo and operand 
														JavaSDM.ensure(!parentCombo
																.equals(operand));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check isomorphic binding between objects parentOperand and parentCombo 
														JavaSDM.ensure(!parentOperand
																.equals(parentCombo));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentCombo
														JavaSDM.ensure(!(parentCombo.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to parentCombo
														JavaSDM.ensure(!(parentCombo
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to parentCombo
														JavaSDM.ensure(!(parentCombo
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentCombo to guard
														JavaSDM.ensure(!(guard
																.equals(parentCombo
																		.getGuard())));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to line
														JavaSDM.ensure(line
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_263(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_213243 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_993644 = null;
		Interaction __DEC_messageSend_enclosingInteraction_748912 = null;
		Interaction __DEC_operand_enclosingInteraction_397125 = null;
		InteractionOperand __DEC_combo_fragment_968922 = null;
		InteractionOperand __DEC_messageReceive_fragment_468378 = null;
		InteractionOperand __DEC_messageSend_fragment_907801 = null;
		InteractionOperand __DEC_operand_fragment_252629 = null;
		CombinedFragment __DEC_operand_operand_394038 = null;
		Constraint __DEC_spec_specification_50259 = null;
		InteractionOperand __DEC_guard_guard_179233 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_290815 = null;
		Message __DEC_messageReceive_receiveEvent_290815 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_80413 = null;
		Message __DEC_messageSend_receiveEvent_80413 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_937861 = null;
		Message __DEC_messageReceive_sendEvent_937861 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_950463 = null;
		Message __DEC_messageSend_sendEvent_950463 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_130705 = null;
		MessageEnd __DEC_message_message_130705 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentOperandToSysLine = null;
		Lifeline sysLine = null;
		Interaction interaction = null;
		Lifeline line = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from line to parentOperand
			JavaSDM.ensure(line.getCoveredBy().contains(parentOperand));

			// iterate to-many link covered from parentOperand to sysLine
			fujaba__Success = false;

			fujaba__IterParentOperandToSysLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterParentOperandToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// check isomorphic binding between objects sysLine and line 
					JavaSDM.ensure(!sysLine.equals(line));

					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to messageSend
							fujaba__Success = false;

							fujaba__IterSysLineToMessageSend = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// bind object
									_TmpObject = message.getReceiveEvent();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;

									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link fragment from messageReceive to parentOperand
									JavaSDM.ensure(parentOperand
											.equals(messageReceive
													.getEnclosingOperand()));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// iterate to-many link covered from sysLine to operand
									fujaba__Success = false;

									fujaba__IterSysLineToOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// check link covered from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// iterate to-many link covered from sysLine to parentCombo
											fujaba__Success = false;

											fujaba__IterSysLineToParentCombo = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentCombo
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentCombo
															.next();

													// ensure correct type and really bound of object parentCombo
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentCombo = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentCombo and operand 
													JavaSDM.ensure(!parentCombo
															.equals(operand));

													// check isomorphic binding between objects parentOperand and parentCombo 
													JavaSDM.ensure(!parentOperand
															.equals(parentCombo));

													// check link covered from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// iterate to-many link trg from parentOperand to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterParentOperandTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			parentOperand,
																			EMoflonEdge.class,
																			"trg"))
															.iterator();

													while (fujaba__IterParentOperandTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterParentOperandTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link src from _edge_coveredBy to line
															JavaSDM.ensure(line
																	.equals(_edge_coveredBy
																			.getSrc()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_213243 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_213243 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_213243 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_213243 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_213243
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_993644 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_993644 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_993644 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_993644 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_993644
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_748912 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_748912 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_748912 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_748912 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_748912
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_397125 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_397125 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_397125 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_397125 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_397125
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_968922 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_968922 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_968922 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_968922 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_968922
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_968922 and parentCombo 
																	JavaSDM.ensure(!__DEC_combo_fragment_968922
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_combo_fragment_968922 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_968922
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_468378 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_468378 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_468378 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_468378 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_468378
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_468378 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_468378
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_468378 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_468378
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_907801 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_907801 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_907801 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_907801 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_907801
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_907801 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_907801
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_907801 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_907801
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_252629 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_252629 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_252629 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_252629 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_252629
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_252629 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_fragment_252629
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_operand_fragment_252629 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_252629
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_394038 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_394038 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_394038 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_394038
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_394038 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_394038
																			.equals(combo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_50259 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_50259 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_50259 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_50259
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_50259 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_50259
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_179233 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_179233 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_179233 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_179233
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_179233 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_179233
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_179233 and parentCombo 
																	JavaSDM.ensure(!__DEC_guard_guard_179233
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_guard_guard_179233 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_179233
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_290815
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_290815 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_290815
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_290815 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_290815
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_290815 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_290815 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_290815 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_290815
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_80413
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_80413 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_80413
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_80413 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_80413
																					.next();

																			// check object __DEC_messageSend_receiveEvent_80413 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_80413 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_80413 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_80413
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_937861
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_937861 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_937861
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_937861 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_937861
																					.next();

																			// check object __DEC_messageReceive_sendEvent_937861 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_937861 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_937861 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_937861
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_950463
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_950463 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_950463
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_950463 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_950463
																					.next();

																			// check object __DEC_messageSend_sendEvent_950463 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_950463 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_950463 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_950463
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_130705
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_130705 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_130705
																					.hasNext()) {
																		try {
																			__DEC_message_message_130705 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_130705
																					.next();

																			// check object __DEC_message_message_130705 is really bound
																			JavaSDM.ensure(__DEC_message_message_130705 != null);
																			// check isomorphic binding between objects __DEC_message_message_130705 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_130705
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_130705 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_130705
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentCombo and operand 
																JavaSDM.ensure(!parentCombo
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and parentCombo 
																JavaSDM.ensure(!parentOperand
																		.equals(parentCombo));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentCombo to guard
																JavaSDM.ensure(!(guard
																		.equals(parentCombo
																				.getGuard())));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to line
																JavaSDM.ensure(line
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to line
																JavaSDM.ensure(line
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_264(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_495798 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_843244 = null;
		Interaction __DEC_messageSend_enclosingInteraction_722946 = null;
		Interaction __DEC_operand_enclosingInteraction_39147 = null;
		InteractionOperand __DEC_combo_fragment_466800 = null;
		InteractionOperand __DEC_messageReceive_fragment_528310 = null;
		InteractionOperand __DEC_messageSend_fragment_272226 = null;
		InteractionOperand __DEC_operand_fragment_742828 = null;
		CombinedFragment __DEC_operand_operand_786436 = null;
		Constraint __DEC_spec_specification_305395 = null;
		InteractionOperand __DEC_guard_guard_806322 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_272627 = null;
		Message __DEC_messageReceive_receiveEvent_272627 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_375333 = null;
		Message __DEC_messageSend_receiveEvent_375333 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_842120 = null;
		Message __DEC_messageReceive_sendEvent_842120 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_386375 = null;
		Message __DEC_messageSend_sendEvent_386375 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_818159 = null;
		MessageEnd __DEC_message_message_818159 = null;
		Match match = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentComboToSysLine = null;
		Lifeline sysLine = null;
		InteractionOperand parentCombo = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentCombo = (InteractionOperand) _TmpObject;

			// check link covered from line to parentCombo
			JavaSDM.ensure(line.getCoveredBy().contains(parentCombo));

			// iterate to-many link covered from parentCombo to sysLine
			fujaba__Success = false;

			fujaba__IterParentComboToSysLine = new ArrayList(
					parentCombo.getCovered()).iterator();

			while (fujaba__IterParentComboToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterParentComboToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// check isomorphic binding between objects sysLine and line 
					JavaSDM.ensure(!sysLine.equals(line));

					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to messageSend
							fujaba__Success = false;

							fujaba__IterSysLineToMessageSend = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// bind object
									_TmpObject = message.getReceiveEvent();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;

									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// iterate to-many link covered from sysLine to operand
									fujaba__Success = false;

									fujaba__IterSysLineToOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentCombo and operand 
											JavaSDM.ensure(!parentCombo
													.equals(operand));

											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// check link covered from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// iterate to-many link covered from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check isomorphic binding between objects parentOperand and parentCombo 
													JavaSDM.ensure(!parentOperand
															.equals(parentCombo));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// check link covered from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_495798 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_495798 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_495798 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_495798 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_495798
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_843244 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_843244 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_843244 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_843244 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_843244
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_722946 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_722946 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_722946 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_722946 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_722946
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_39147 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_39147 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_39147 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_39147 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_39147
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_466800 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_466800 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_466800 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_466800 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_466800
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_466800 and parentCombo 
															JavaSDM.ensure(!__DEC_combo_fragment_466800
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_combo_fragment_466800 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_466800
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_528310 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_528310 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_528310 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_528310 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_528310
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_528310 and parentCombo 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_528310
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_528310 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_528310
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_272226 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_272226 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_272226 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_272226 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_272226
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_272226 and parentCombo 
															JavaSDM.ensure(!__DEC_messageSend_fragment_272226
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_messageSend_fragment_272226 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_272226
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_742828 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_742828 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_742828 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_742828 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_742828
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_742828 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_fragment_742828
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_operand_fragment_742828 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_742828
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_786436 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_786436 is really bound
															JavaSDM.ensure(__DEC_operand_operand_786436 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_786436
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_786436 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_786436
																	.equals(combo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_305395 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_305395 is really bound
															JavaSDM.ensure(__DEC_spec_specification_305395 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_305395
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_305395 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_305395
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_806322 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_806322 is really bound
															JavaSDM.ensure(__DEC_guard_guard_806322 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_806322
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_806322 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_806322
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_806322 and parentCombo 
															JavaSDM.ensure(!__DEC_guard_guard_806322
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_guard_guard_806322 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_806322
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_272627
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_272627 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_272627
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_272627 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_272627
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_272627 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_272627 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_272627 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_272627
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_375333
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_375333 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_375333
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_375333 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_375333
																			.next();

																	// check object __DEC_messageSend_receiveEvent_375333 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_375333 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_375333 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_375333
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_842120
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_842120 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_842120
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_842120 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_842120
																			.next();

																	// check object __DEC_messageReceive_sendEvent_842120 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_842120 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_842120 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_842120
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_386375
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_386375 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_386375
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_386375 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_386375
																			.next();

																	// check object __DEC_messageSend_sendEvent_386375 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_386375 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_386375 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_386375
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_818159
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_818159 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_818159
																			.hasNext()) {
																try {
																	__DEC_message_message_818159 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_818159
																			.next();

																	// check object __DEC_message_message_818159 is really bound
																	JavaSDM.ensure(__DEC_message_message_818159 != null);
																	// check isomorphic binding between objects __DEC_message_message_818159 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_818159
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_818159 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_818159
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentCombo and operand 
														JavaSDM.ensure(!parentCombo
																.equals(operand));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check isomorphic binding between objects parentOperand and parentCombo 
														JavaSDM.ensure(!parentOperand
																.equals(parentCombo));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentCombo
														JavaSDM.ensure(!(parentCombo.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to parentCombo
														JavaSDM.ensure(!(parentCombo
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to parentCombo
														JavaSDM.ensure(!(parentCombo
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentCombo to guard
														JavaSDM.ensure(!(guard
																.equals(parentCombo
																		.getGuard())));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to line
														JavaSDM.ensure(line
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_265(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_684447 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_415170 = null;
		Interaction __DEC_messageSend_enclosingInteraction_571444 = null;
		Interaction __DEC_operand_enclosingInteraction_97039 = null;
		InteractionOperand __DEC_combo_fragment_50789 = null;
		InteractionOperand __DEC_messageReceive_fragment_755817 = null;
		InteractionOperand __DEC_messageSend_fragment_976122 = null;
		InteractionOperand __DEC_operand_fragment_356648 = null;
		CombinedFragment __DEC_operand_operand_832612 = null;
		Constraint __DEC_spec_specification_652055 = null;
		InteractionOperand __DEC_guard_guard_352931 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_756641 = null;
		Message __DEC_messageReceive_receiveEvent_756641 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_923750 = null;
		Message __DEC_messageSend_receiveEvent_923750 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_907925 = null;
		Message __DEC_messageReceive_sendEvent_907925 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_869413 = null;
		Message __DEC_messageSend_sendEvent_869413 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_170483 = null;
		MessageEnd __DEC_message_message_170483 = null;
		Match match = null;
		Iterator fujaba__IterParentComboTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentComboToSysLine = null;
		Lifeline sysLine = null;
		Interaction interaction = null;
		Lifeline line = null;
		InteractionOperand parentCombo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentCombo = (InteractionOperand) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from line to parentCombo
			JavaSDM.ensure(line.getCoveredBy().contains(parentCombo));

			// iterate to-many link covered from parentCombo to sysLine
			fujaba__Success = false;

			fujaba__IterParentComboToSysLine = new ArrayList(
					parentCombo.getCovered()).iterator();

			while (fujaba__IterParentComboToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterParentComboToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// check isomorphic binding between objects sysLine and line 
					JavaSDM.ensure(!sysLine.equals(line));

					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentCombo and operand 
									JavaSDM.ensure(!parentCombo.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// check link covered from line to operand
									JavaSDM.ensure(line.getCoveredBy()
											.contains(operand));

									// iterate to-many link covered from sysLine to parentOperand
									fujaba__Success = false;

									fujaba__IterSysLineToParentOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentOperand
													.next();

											// ensure correct type and really bound of object parentOperand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentOperand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// check isomorphic binding between objects parentOperand and parentCombo 
											JavaSDM.ensure(!parentOperand
													.equals(parentCombo));

											// check link covered from line to parentOperand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentOperand));

											// iterate to-many link covered from sysLine to messageSend
											fujaba__Success = false;

											fujaba__IterSysLineToMessageSend = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToMessageSend
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToMessageSend
															.next();

													// ensure correct type and really bound of object messageSend
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageSend = (MessageOccurrenceSpecification) _TmpObject;
													// bind object
													message = messageSend
															.getMessage();

													// check object message is really bound
													JavaSDM.ensure(message != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// bind object
													_TmpObject = message
															.getReceiveEvent();

													// ensure correct type and really bound of object messageReceive
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageReceive = (MessageOccurrenceSpecification) _TmpObject;

													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// check link message from messageReceive to message
													JavaSDM.ensure(message
															.equals(messageReceive
																	.getMessage()));

													// check link sendEvent from message to messageSend
													JavaSDM.ensure(messageSend.equals(message
															.getSendEvent()));

													// iterate to-many link trg from parentCombo to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterParentComboTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			parentCombo,
																			EMoflonEdge.class,
																			"trg"))
															.iterator();

													while (fujaba__IterParentComboTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterParentComboTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link src from _edge_coveredBy to line
															JavaSDM.ensure(line
																	.equals(_edge_coveredBy
																			.getSrc()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_684447 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_684447 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_684447 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_684447 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_684447
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_415170 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_415170 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_415170 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_415170 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_415170
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_571444 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_571444 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_571444 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_571444 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_571444
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_97039 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_97039 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_97039 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_97039 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_97039
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_50789 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_50789 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_50789 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_50789 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_50789
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_50789 and parentCombo 
																	JavaSDM.ensure(!__DEC_combo_fragment_50789
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_combo_fragment_50789 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_50789
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_755817 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_755817 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_755817 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_755817 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_755817
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_755817 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_755817
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_755817 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_755817
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_976122 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_976122 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_976122 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_976122 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_976122
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_976122 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_976122
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_976122 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_976122
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_356648 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_356648 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_356648 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_356648 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_356648
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_356648 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_fragment_356648
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_operand_fragment_356648 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_356648
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_832612 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_832612 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_832612 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_832612
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_832612 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_832612
																			.equals(combo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_652055 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_652055 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_652055 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_652055
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_652055 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_652055
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_352931 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_352931 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_352931 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_352931
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_352931 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_352931
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_352931 and parentCombo 
																	JavaSDM.ensure(!__DEC_guard_guard_352931
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_guard_guard_352931 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_352931
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_756641
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_756641 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_756641
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_756641 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_756641
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_756641 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_756641 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_756641 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_756641
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_923750
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_923750 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_923750
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_923750 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_923750
																					.next();

																			// check object __DEC_messageSend_receiveEvent_923750 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_923750 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_923750 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_923750
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_907925
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_907925 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_907925
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_907925 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_907925
																					.next();

																			// check object __DEC_messageReceive_sendEvent_907925 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_907925 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_907925 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_907925
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_869413
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_869413 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_869413
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_869413 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_869413
																					.next();

																			// check object __DEC_messageSend_sendEvent_869413 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_869413 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_869413 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_869413
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_170483
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_170483 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_170483
																					.hasNext()) {
																		try {
																			__DEC_message_message_170483 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_170483
																					.next();

																			// check object __DEC_message_message_170483 is really bound
																			JavaSDM.ensure(__DEC_message_message_170483 != null);
																			// check isomorphic binding between objects __DEC_message_message_170483 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_170483
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_170483 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_170483
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentCombo and operand 
																JavaSDM.ensure(!parentCombo
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and parentCombo 
																JavaSDM.ensure(!parentOperand
																		.equals(parentCombo));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentCombo to guard
																JavaSDM.ensure(!(guard
																		.equals(parentCombo
																				.getGuard())));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to line
																JavaSDM.ensure(line
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to line
																JavaSDM.ensure(line
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_50(
			EMoflonEdge _edge_stepAlternative) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_744218 = null;
		NormalStep __DEC_alt_stepAlternative_830296 = null;
		Flow __DEC_step_steps_270144 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_9144 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_9144 = null;
		Match match = null;
		Iterator fujaba__IterPackageDeclarationToSysActor = null;
		Actor sysActor = null;
		UseCase useCase = null;
		NamedFlow flow = null;
		PackageDeclaration packageDeclaration = null;
		Actor actor = null;
		NormalStep step = null;
		AlternativeFlow altFlow = null;
		AlternativeFlowAlternative alt = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_stepAlternative is really bound
			JavaSDM.ensure(_edge_stepAlternative != null);
			// bind object
			_TmpObject = _edge_stepAlternative.getTrg();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			_TmpObject = alt.getRef();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// bind object
			_TmpObject = _edge_stepAlternative.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getActors().contains(actor));

			// check link stepAlternative from alt to step
			JavaSDM.ensure(step.equals(alt.eContainer()));

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// iterate to-many link actors from packageDeclaration to sysActor
			fujaba__Success = false;

			fujaba__IterPackageDeclarationToSysActor = new ArrayList(
					packageDeclaration.getActors()).iterator();

			while (fujaba__IterPackageDeclarationToSysActor.hasNext()) {
				try {
					sysActor = (Actor) fujaba__IterPackageDeclarationToSysActor
							.next();

					// check object sysActor is really bound
					JavaSDM.ensure(sysActor != null);
					// check isomorphic binding between objects sysActor and actor 
					JavaSDM.ensure(!sysActor.equals(actor));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_744218 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_744218 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_744218 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_744218
									.getFlows().contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_744218 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_744218
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_830296 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_830296 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_830296 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_830296
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_830296 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_830296
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_270144 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_270144 is really bound
							JavaSDM.ensure(__DEC_step_steps_270144 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_270144.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_270144 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_270144
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_270144 and flow 
							JavaSDM.ensure(!__DEC_step_steps_270144
									.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_9144
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_9144 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_9144
											.hasNext()) {
								try {
									__DEC_altFlow_ref_9144 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_9144
											.next();

									// check object __DEC_altFlow_ref_9144 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_9144 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_9144 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_9144
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_stepAlternative is really bound
						JavaSDM.ensure(_edge_stepAlternative != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object packageDeclaration is really bound
						JavaSDM.ensure(packageDeclaration != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object sysActor is really bound
						JavaSDM.ensure(sysActor != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects sysActor and actor 
						JavaSDM.ensure(!sysActor.equals(actor));

						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link actors from actor to packageDeclaration
						JavaSDM.ensure(packageDeclaration.equals(actor
								.eContainer()));

						// check link actors from sysActor to packageDeclaration
						JavaSDM.ensure(packageDeclaration.equals(sysActor
								.eContainer()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_stepAlternative to step
						JavaSDM.ensure(step.equals(_edge_stepAlternative
								.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_stepAlternative to alt
						JavaSDM.ensure(alt.equals(_edge_stepAlternative
								.getTrg()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match,
								packageDeclaration, actor, sysActor, flow,
								step, alt, altFlow, useCase);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_51(
			EMoflonEdge _edge_ref) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_601391 = null;
		NormalStep __DEC_alt_stepAlternative_812921 = null;
		Flow __DEC_step_steps_567204 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_813684 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_813684 = null;
		Match match = null;
		Iterator fujaba__IterPackageDeclarationToSysActor = null;
		Actor sysActor = null;
		AlternativeFlow altFlow = null;
		UseCase useCase = null;
		NamedFlow flow = null;
		PackageDeclaration packageDeclaration = null;
		Actor actor = null;
		NormalStep step = null;
		AlternativeFlowAlternative alt = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_ref is really bound
			JavaSDM.ensure(_edge_ref != null);
			// bind object
			_TmpObject = _edge_ref.getSrc();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			step = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
					.eContainer() : null;

			// check object step is really bound
			JavaSDM.ensure(step != null);

			// check if contained via correct reference
			JavaSDM.ensure(step.getStepAlternative().contains(alt));

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getActors().contains(actor));

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_ref.getTrg();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check link ref from alt to altFlow
			JavaSDM.ensure(altFlow.equals(alt.getRef()));

			// iterate to-many link actors from packageDeclaration to sysActor
			fujaba__Success = false;

			fujaba__IterPackageDeclarationToSysActor = new ArrayList(
					packageDeclaration.getActors()).iterator();

			while (fujaba__IterPackageDeclarationToSysActor.hasNext()) {
				try {
					sysActor = (Actor) fujaba__IterPackageDeclarationToSysActor
							.next();

					// check object sysActor is really bound
					JavaSDM.ensure(sysActor != null);
					// check isomorphic binding between objects sysActor and actor 
					JavaSDM.ensure(!sysActor.equals(actor));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_601391 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_601391 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_601391 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_601391
									.getFlows().contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_601391 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_601391
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_812921 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_812921 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_812921 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_812921
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_812921 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_812921
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_567204 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_567204 is really bound
							JavaSDM.ensure(__DEC_step_steps_567204 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_567204.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_567204 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_567204
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_567204 and flow 
							JavaSDM.ensure(!__DEC_step_steps_567204
									.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_813684
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_813684 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_813684
											.hasNext()) {
								try {
									__DEC_altFlow_ref_813684 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_813684
											.next();

									// check object __DEC_altFlow_ref_813684 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_813684 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_813684 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_813684
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_ref is really bound
						JavaSDM.ensure(_edge_ref != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object packageDeclaration is really bound
						JavaSDM.ensure(packageDeclaration != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object sysActor is really bound
						JavaSDM.ensure(sysActor != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects sysActor and actor 
						JavaSDM.ensure(!sysActor.equals(actor));

						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link actors from actor to packageDeclaration
						JavaSDM.ensure(packageDeclaration.equals(actor
								.eContainer()));

						// check link actors from sysActor to packageDeclaration
						JavaSDM.ensure(packageDeclaration.equals(sysActor
								.eContainer()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_ref to alt
						JavaSDM.ensure(alt.equals(_edge_ref.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_ref to altFlow
						JavaSDM.ensure(altFlow.equals(_edge_ref.getTrg()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match,
								packageDeclaration, actor, sysActor, flow,
								step, alt, altFlow, useCase);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_266(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_130002 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_369197 = null;
		Interaction __DEC_messageSend_enclosingInteraction_216059 = null;
		Interaction __DEC_operand_enclosingInteraction_757152 = null;
		InteractionOperand __DEC_combo_fragment_565123 = null;
		InteractionOperand __DEC_messageReceive_fragment_303480 = null;
		InteractionOperand __DEC_messageSend_fragment_864748 = null;
		InteractionOperand __DEC_operand_fragment_79027 = null;
		CombinedFragment __DEC_operand_operand_574285 = null;
		Constraint __DEC_spec_specification_875898 = null;
		InteractionOperand __DEC_guard_guard_698866 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_457267 = null;
		Message __DEC_messageReceive_receiveEvent_457267 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_440589 = null;
		Message __DEC_messageSend_receiveEvent_440589 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_888612 = null;
		Message __DEC_messageReceive_sendEvent_888612 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_893883 = null;
		Message __DEC_messageSend_sendEvent_893883 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_299369 = null;
		MessageEnd __DEC_message_message_299369 = null;
		Match match = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterOperandToSysLine = null;
		Lifeline sysLine = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link covered from line to operand
			JavaSDM.ensure(line.getCoveredBy().contains(operand));

			// iterate to-many link covered from operand to sysLine
			fujaba__Success = false;

			fujaba__IterOperandToSysLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterOperandToSysLine.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// check isomorphic binding between objects sysLine and line 
					JavaSDM.ensure(!sysLine.equals(line));

					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to parentCombo
							fujaba__Success = false;

							fujaba__IterSysLineToParentCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentCombo
											.next();

									// ensure correct type and really bound of object parentCombo
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentCombo = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentCombo and operand 
									JavaSDM.ensure(!parentCombo.equals(operand));

									// check link covered from line to parentCombo
									JavaSDM.ensure(line.getCoveredBy()
											.contains(parentCombo));

									// iterate to-many link covered from sysLine to parentOperand
									fujaba__Success = false;

									fujaba__IterSysLineToParentOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentOperand
													.next();

											// ensure correct type and really bound of object parentOperand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentOperand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// check isomorphic binding between objects parentOperand and parentCombo 
											JavaSDM.ensure(!parentOperand
													.equals(parentCombo));

											// check link covered from line to parentOperand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentOperand));

											// iterate to-many link covered from sysLine to messageSend
											fujaba__Success = false;

											fujaba__IterSysLineToMessageSend = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToMessageSend
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToMessageSend
															.next();

													// ensure correct type and really bound of object messageSend
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageSend = (MessageOccurrenceSpecification) _TmpObject;
													// bind object
													message = messageSend
															.getMessage();

													// check object message is really bound
													JavaSDM.ensure(message != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// bind object
													_TmpObject = message
															.getReceiveEvent();

													// ensure correct type and really bound of object messageReceive
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageReceive = (MessageOccurrenceSpecification) _TmpObject;

													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// check link message from messageReceive to message
													JavaSDM.ensure(message
															.equals(messageReceive
																	.getMessage()));

													// check link sendEvent from message to messageSend
													JavaSDM.ensure(messageSend.equals(message
															.getSendEvent()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_130002 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_130002 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_130002 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_130002 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_130002
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_369197 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_369197 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_369197 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_369197 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_369197
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_216059 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_216059 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_216059 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_216059 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_216059
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_757152 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_757152 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_757152 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_757152 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_757152
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_565123 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_565123 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_565123 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_565123 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_565123
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_565123 and parentCombo 
															JavaSDM.ensure(!__DEC_combo_fragment_565123
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_combo_fragment_565123 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_565123
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_303480 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_303480 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_303480 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_303480 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_303480
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_303480 and parentCombo 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_303480
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_303480 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_303480
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_864748 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_864748 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_864748 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_864748 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_864748
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_864748 and parentCombo 
															JavaSDM.ensure(!__DEC_messageSend_fragment_864748
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_messageSend_fragment_864748 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_864748
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_79027 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_79027 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_79027 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_79027 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_79027
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_79027 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_fragment_79027
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_operand_fragment_79027 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_79027
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_574285 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_574285 is really bound
															JavaSDM.ensure(__DEC_operand_operand_574285 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_574285
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_574285 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_574285
																	.equals(combo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_875898 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_875898 is really bound
															JavaSDM.ensure(__DEC_spec_specification_875898 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_875898
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_875898 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_875898
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_698866 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_698866 is really bound
															JavaSDM.ensure(__DEC_guard_guard_698866 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_698866
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_698866 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_698866
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_698866 and parentCombo 
															JavaSDM.ensure(!__DEC_guard_guard_698866
																	.equals(parentCombo));

															// check isomorphic binding between objects __DEC_guard_guard_698866 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_698866
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_457267
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_457267 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_457267
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_457267 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_457267
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_457267 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_457267 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_457267 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_457267
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_440589
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_440589 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_440589
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_440589 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_440589
																			.next();

																	// check object __DEC_messageSend_receiveEvent_440589 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_440589 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_440589 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_440589
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_888612
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_888612 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_888612
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_888612 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_888612
																			.next();

																	// check object __DEC_messageReceive_sendEvent_888612 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_888612 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_888612 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_888612
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_893883
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_893883 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_893883
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_893883 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_893883
																			.next();

																	// check object __DEC_messageSend_sendEvent_893883 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_893883 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_893883 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_893883
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_299369
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_299369 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_299369
																			.hasNext()) {
																try {
																	__DEC_message_message_299369 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_299369
																			.next();

																	// check object __DEC_message_message_299369 is really bound
																	JavaSDM.ensure(__DEC_message_message_299369 != null);
																	// check isomorphic binding between objects __DEC_message_message_299369 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_299369
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_299369 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_299369
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentCombo and operand 
														JavaSDM.ensure(!parentCombo
																.equals(operand));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check isomorphic binding between objects parentOperand and parentCombo 
														JavaSDM.ensure(!parentOperand
																.equals(parentCombo));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentCombo
														JavaSDM.ensure(!(parentCombo.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to parentCombo
														JavaSDM.ensure(!(parentCombo
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to parentCombo
														JavaSDM.ensure(!(parentCombo
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentCombo to guard
														JavaSDM.ensure(!(guard
																.equals(parentCombo
																		.getGuard())));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to line
														JavaSDM.ensure(line
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to operand
														JavaSDM.ensure(operand
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_267(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_913994 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_676738 = null;
		Interaction __DEC_messageSend_enclosingInteraction_27094 = null;
		Interaction __DEC_operand_enclosingInteraction_992647 = null;
		InteractionOperand __DEC_combo_fragment_215894 = null;
		InteractionOperand __DEC_messageReceive_fragment_469799 = null;
		InteractionOperand __DEC_messageSend_fragment_502460 = null;
		InteractionOperand __DEC_operand_fragment_379947 = null;
		CombinedFragment __DEC_operand_operand_355901 = null;
		Constraint __DEC_spec_specification_475918 = null;
		InteractionOperand __DEC_guard_guard_174870 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_513671 = null;
		Message __DEC_messageReceive_receiveEvent_513671 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_89804 = null;
		Message __DEC_messageSend_receiveEvent_89804 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_534371 = null;
		Message __DEC_messageReceive_sendEvent_534371 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_788724 = null;
		Message __DEC_messageSend_sendEvent_788724 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_134595 = null;
		MessageEnd __DEC_message_message_134595 = null;
		Match match = null;
		Iterator fujaba__IterOperandTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterOperandToSysLine = null;
		Lifeline sysLine = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link covered from line to operand
			JavaSDM.ensure(line.getCoveredBy().contains(operand));

			// iterate to-many link covered from operand to sysLine
			fujaba__Success = false;

			fujaba__IterOperandToSysLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterOperandToSysLine.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// check isomorphic binding between objects sysLine and line 
					JavaSDM.ensure(!sysLine.equals(line));

					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to parentCombo
							fujaba__Success = false;

							fujaba__IterSysLineToParentCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentCombo
											.next();

									// ensure correct type and really bound of object parentCombo
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentCombo = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentCombo and operand 
									JavaSDM.ensure(!parentCombo.equals(operand));

									// check link covered from line to parentCombo
									JavaSDM.ensure(line.getCoveredBy()
											.contains(parentCombo));

									// iterate to-many link covered from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// bind object
											_TmpObject = message
													.getReceiveEvent();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;

											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// iterate to-many link covered from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check isomorphic binding between objects parentOperand and parentCombo 
													JavaSDM.ensure(!parentOperand
															.equals(parentCombo));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// check link covered from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// iterate to-many link trg from operand to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterOperandTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			operand,
																			EMoflonEdge.class,
																			"trg"))
															.iterator();

													while (fujaba__IterOperandTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterOperandTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link src from _edge_coveredBy to line
															JavaSDM.ensure(line
																	.equals(_edge_coveredBy
																			.getSrc()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_913994 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_913994 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_913994 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_913994 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_913994
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_676738 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_676738 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_676738 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_676738 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_676738
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_27094 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_27094 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_27094 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_27094 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_27094
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_992647 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_992647 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_992647 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_992647 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_992647
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_215894 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_215894 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_215894 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_215894 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_215894
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_215894 and parentCombo 
																	JavaSDM.ensure(!__DEC_combo_fragment_215894
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_combo_fragment_215894 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_215894
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_469799 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_469799 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_469799 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_469799 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_469799
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_469799 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_469799
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_469799 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_469799
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_502460 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_502460 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_502460 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_502460 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_502460
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_502460 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_502460
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_502460 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_502460
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_379947 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_379947 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_379947 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_379947 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_379947
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_379947 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_fragment_379947
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_operand_fragment_379947 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_379947
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_355901 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_355901 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_355901 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_355901
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_355901 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_355901
																			.equals(combo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_475918 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_475918 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_475918 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_475918
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_475918 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_475918
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_174870 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_174870 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_174870 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_174870
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_174870 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_174870
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_174870 and parentCombo 
																	JavaSDM.ensure(!__DEC_guard_guard_174870
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_guard_guard_174870 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_174870
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_513671
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_513671 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_513671
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_513671 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_513671
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_513671 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_513671 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_513671 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_513671
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_89804
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_89804 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_89804
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_89804 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_89804
																					.next();

																			// check object __DEC_messageSend_receiveEvent_89804 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_89804 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_89804 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_89804
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_534371
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_534371 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_534371
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_534371 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_534371
																					.next();

																			// check object __DEC_messageReceive_sendEvent_534371 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_534371 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_534371 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_534371
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_788724
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_788724 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_788724
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_788724 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_788724
																					.next();

																			// check object __DEC_messageSend_sendEvent_788724 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_788724 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_788724 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_788724
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_134595
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_134595 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_134595
																					.hasNext()) {
																		try {
																			__DEC_message_message_134595 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_134595
																					.next();

																			// check object __DEC_message_message_134595 is really bound
																			JavaSDM.ensure(__DEC_message_message_134595 != null);
																			// check isomorphic binding between objects __DEC_message_message_134595 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_134595
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_134595 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_134595
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentCombo and operand 
																JavaSDM.ensure(!parentCombo
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and parentCombo 
																JavaSDM.ensure(!parentOperand
																		.equals(parentCombo));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentCombo to guard
																JavaSDM.ensure(!(guard
																		.equals(parentCombo
																				.getGuard())));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to operand
																JavaSDM.ensure(operand
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to line
																JavaSDM.ensure(line
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to line
																JavaSDM.ensure(line
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to operand
																JavaSDM.ensure(operand
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_268(
			EMoflonEdge _edge_guard) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_385586 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_196107 = null;
		Interaction __DEC_messageSend_enclosingInteraction_958030 = null;
		Interaction __DEC_operand_enclosingInteraction_508866 = null;
		InteractionOperand __DEC_combo_fragment_925315 = null;
		InteractionOperand __DEC_messageReceive_fragment_967270 = null;
		InteractionOperand __DEC_messageSend_fragment_543470 = null;
		InteractionOperand __DEC_operand_fragment_885255 = null;
		CombinedFragment __DEC_operand_operand_146798 = null;
		Constraint __DEC_spec_specification_938585 = null;
		InteractionOperand __DEC_guard_guard_173329 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_657977 = null;
		Message __DEC_messageReceive_receiveEvent_657977 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_549472 = null;
		Message __DEC_messageSend_receiveEvent_549472 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_430568 = null;
		Message __DEC_messageReceive_sendEvent_430568 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_564424 = null;
		Message __DEC_messageSend_sendEvent_564424 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_472253 = null;
		MessageEnd __DEC_message_message_472253 = null;
		Match match = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterOperandToSysLine = null;
		Lifeline sysLine = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_guard is really bound
			JavaSDM.ensure(_edge_guard != null);
			// bind object
			_TmpObject = _edge_guard.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link trg from _edge_guard to guard
			JavaSDM.ensure(guard.equals(_edge_guard.getTrg()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// iterate to-many link covered from operand to sysLine
					fujaba__Success = false;

					fujaba__IterOperandToSysLine = new ArrayList(
							operand.getCovered()).iterator();

					while (fujaba__IterOperandToSysLine.hasNext()) {
						try {
							sysLine = (Lifeline) fujaba__IterOperandToSysLine
									.next();

							// check object sysLine is really bound
							JavaSDM.ensure(sysLine != null);
							// check isomorphic binding between objects sysLine and line 
							JavaSDM.ensure(!sysLine.equals(line));

							// iterate to-many link covered from sysLine to combo
							fujaba__Success = false;

							fujaba__IterSysLineToCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// iterate to-many link covered from sysLine to parentCombo
									fujaba__Success = false;

									fujaba__IterSysLineToParentCombo = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentCombo
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentCombo
													.next();

											// ensure correct type and really bound of object parentCombo
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentCombo = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentCombo and operand 
											JavaSDM.ensure(!parentCombo
													.equals(operand));

											// check link covered from line to parentCombo
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentCombo));

											// iterate to-many link covered from sysLine to messageSend
											fujaba__Success = false;

											fujaba__IterSysLineToMessageSend = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToMessageSend
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToMessageSend
															.next();

													// ensure correct type and really bound of object messageSend
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageSend = (MessageOccurrenceSpecification) _TmpObject;
													// bind object
													message = messageSend
															.getMessage();

													// check object message is really bound
													JavaSDM.ensure(message != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// bind object
													_TmpObject = message
															.getReceiveEvent();

													// ensure correct type and really bound of object messageReceive
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageReceive = (MessageOccurrenceSpecification) _TmpObject;

													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// check link message from messageReceive to message
													JavaSDM.ensure(message
															.equals(messageReceive
																	.getMessage()));

													// check link sendEvent from message to messageSend
													JavaSDM.ensure(messageSend.equals(message
															.getSendEvent()));

													// iterate to-many link covered from sysLine to parentOperand
													fujaba__Success = false;

													fujaba__IterSysLineToParentOperand = new ArrayList(
															sysLine.getCoveredBy())
															.iterator();

													while (fujaba__IterSysLineToParentOperand
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterSysLineToParentOperand
																	.next();

															// ensure correct type and really bound of object parentOperand
															JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
															parentOperand = (InteractionOperand) _TmpObject;
															// check isomorphic binding between objects parentOperand and operand 
															JavaSDM.ensure(!parentOperand
																	.equals(operand));

															// check isomorphic binding between objects parentOperand and parentCombo 
															JavaSDM.ensure(!parentOperand
																	.equals(parentCombo));

															// check link fragment from messageReceive to parentOperand
															JavaSDM.ensure(parentOperand
																	.equals(messageReceive
																			.getEnclosingOperand()));

															// check link covered from line to parentOperand
															JavaSDM.ensure(line
																	.getCoveredBy()
																	.contains(
																			parentOperand));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_385586 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_385586 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_385586 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_385586 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_385586
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_196107 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_196107 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_196107 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_196107 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_196107
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_958030 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_958030 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_958030 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_958030 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_958030
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_508866 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_508866 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_508866 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_508866 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_508866
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_925315 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_925315 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_925315 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_925315 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_925315
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_925315 and parentCombo 
																	JavaSDM.ensure(!__DEC_combo_fragment_925315
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_combo_fragment_925315 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_925315
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_967270 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_967270 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_967270 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_967270 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_967270
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_967270 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_967270
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_967270 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_967270
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_543470 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_543470 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_543470 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_543470 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_543470
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_543470 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_543470
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_543470 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_543470
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_885255 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_885255 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_885255 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_885255 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_885255
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_885255 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_fragment_885255
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_operand_fragment_885255 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_885255
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_146798 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_146798 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_146798 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_146798
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_146798 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_146798
																			.equals(combo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_938585 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_938585 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_938585 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_938585
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_938585 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_938585
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_173329 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_173329 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_173329 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_173329
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_173329 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_173329
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_173329 and parentCombo 
																	JavaSDM.ensure(!__DEC_guard_guard_173329
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_guard_guard_173329 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_173329
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_657977
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_657977 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_657977
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_657977 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_657977
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_657977 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_657977 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_657977 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_657977
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_549472
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_549472 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_549472
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_549472 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_549472
																					.next();

																			// check object __DEC_messageSend_receiveEvent_549472 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_549472 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_549472 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_549472
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_430568
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_430568 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_430568
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_430568 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_430568
																					.next();

																			// check object __DEC_messageReceive_sendEvent_430568 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_430568 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_430568 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_430568
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_564424
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_564424 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_564424
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_564424 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_564424
																					.next();

																			// check object __DEC_messageSend_sendEvent_564424 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_564424 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_564424 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_564424
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_472253
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_472253 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_472253
																					.hasNext()) {
																		try {
																			__DEC_message_message_472253 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_472253
																					.next();

																			// check object __DEC_message_message_472253 is really bound
																			JavaSDM.ensure(__DEC_message_message_472253 != null);
																			// check isomorphic binding between objects __DEC_message_message_472253 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_472253
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_472253 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_472253
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_guard is really bound
																JavaSDM.ensure(_edge_guard != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentCombo and operand 
																JavaSDM.ensure(!parentCombo
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and parentCombo 
																JavaSDM.ensure(!parentOperand
																		.equals(parentCombo));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentCombo to guard
																JavaSDM.ensure(!(guard
																		.equals(parentCombo
																				.getGuard())));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_guard to operand
																JavaSDM.ensure(operand
																		.equals(_edge_guard
																				.getSrc()));

																// check link trg from _edge_guard to guard
																JavaSDM.ensure(guard
																		.equals(_edge_guard
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_269(
			EMoflonEdge _edge_specification) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_391885 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_708927 = null;
		Interaction __DEC_messageSend_enclosingInteraction_444418 = null;
		Interaction __DEC_operand_enclosingInteraction_808195 = null;
		InteractionOperand __DEC_combo_fragment_652634 = null;
		InteractionOperand __DEC_messageReceive_fragment_599754 = null;
		InteractionOperand __DEC_messageSend_fragment_989854 = null;
		InteractionOperand __DEC_operand_fragment_519997 = null;
		CombinedFragment __DEC_operand_operand_179049 = null;
		Constraint __DEC_spec_specification_326912 = null;
		InteractionOperand __DEC_guard_guard_880000 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_469890 = null;
		Message __DEC_messageReceive_receiveEvent_469890 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_365667 = null;
		Message __DEC_messageSend_receiveEvent_365667 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_377450 = null;
		Message __DEC_messageReceive_sendEvent_377450 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_848666 = null;
		Message __DEC_messageSend_sendEvent_848666 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_489238 = null;
		MessageEnd __DEC_message_message_489238 = null;
		Match match = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterOperandToSysLine = null;
		Lifeline sysLine = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionOperand operand = null;
		InteractionConstraint guard = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_specification is really bound
			JavaSDM.ensure(_edge_specification != null);
			// bind object
			_TmpObject = _edge_specification.getSrc();

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;

			// bind object
			operand = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
					.eContainer() : null;

			// check object operand is really bound
			JavaSDM.ensure(operand != null);

			// check if contained via correct reference
			JavaSDM.ensure(guard.equals(operand.getGuard()));

			// bind object
			_TmpObject = _edge_specification.getTrg();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link specification from spec to guard
			JavaSDM.ensure(guard.equals(spec.eContainer()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// iterate to-many link covered from operand to sysLine
					fujaba__Success = false;

					fujaba__IterOperandToSysLine = new ArrayList(
							operand.getCovered()).iterator();

					while (fujaba__IterOperandToSysLine.hasNext()) {
						try {
							sysLine = (Lifeline) fujaba__IterOperandToSysLine
									.next();

							// check object sysLine is really bound
							JavaSDM.ensure(sysLine != null);
							// check isomorphic binding between objects sysLine and line 
							JavaSDM.ensure(!sysLine.equals(line));

							// iterate to-many link covered from sysLine to combo
							fujaba__Success = false;

							fujaba__IterSysLineToCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// iterate to-many link covered from sysLine to parentCombo
									fujaba__Success = false;

									fujaba__IterSysLineToParentCombo = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentCombo
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentCombo
													.next();

											// ensure correct type and really bound of object parentCombo
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentCombo = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentCombo and operand 
											JavaSDM.ensure(!parentCombo
													.equals(operand));

											// check link covered from line to parentCombo
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentCombo));

											// iterate to-many link covered from sysLine to messageSend
											fujaba__Success = false;

											fujaba__IterSysLineToMessageSend = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToMessageSend
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToMessageSend
															.next();

													// ensure correct type and really bound of object messageSend
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageSend = (MessageOccurrenceSpecification) _TmpObject;
													// bind object
													message = messageSend
															.getMessage();

													// check object message is really bound
													JavaSDM.ensure(message != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// bind object
													_TmpObject = message
															.getReceiveEvent();

													// ensure correct type and really bound of object messageReceive
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageReceive = (MessageOccurrenceSpecification) _TmpObject;

													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// check link message from messageReceive to message
													JavaSDM.ensure(message
															.equals(messageReceive
																	.getMessage()));

													// check link sendEvent from message to messageSend
													JavaSDM.ensure(messageSend.equals(message
															.getSendEvent()));

													// iterate to-many link covered from sysLine to parentOperand
													fujaba__Success = false;

													fujaba__IterSysLineToParentOperand = new ArrayList(
															sysLine.getCoveredBy())
															.iterator();

													while (fujaba__IterSysLineToParentOperand
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterSysLineToParentOperand
																	.next();

															// ensure correct type and really bound of object parentOperand
															JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
															parentOperand = (InteractionOperand) _TmpObject;
															// check isomorphic binding between objects parentOperand and operand 
															JavaSDM.ensure(!parentOperand
																	.equals(operand));

															// check isomorphic binding between objects parentOperand and parentCombo 
															JavaSDM.ensure(!parentOperand
																	.equals(parentCombo));

															// check link fragment from messageReceive to parentOperand
															JavaSDM.ensure(parentOperand
																	.equals(messageReceive
																			.getEnclosingOperand()));

															// check link covered from line to parentOperand
															JavaSDM.ensure(line
																	.getCoveredBy()
																	.contains(
																			parentOperand));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_391885 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_391885 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_391885 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_391885 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_391885
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_708927 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_708927 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_708927 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_708927 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_708927
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_444418 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_444418 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_444418 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_444418 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_444418
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_808195 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_808195 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_808195 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_808195 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_808195
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_652634 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_652634 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_652634 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_652634 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_652634
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_652634 and parentCombo 
																	JavaSDM.ensure(!__DEC_combo_fragment_652634
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_combo_fragment_652634 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_652634
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_599754 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_599754 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_599754 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_599754 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_599754
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_599754 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_599754
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_599754 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_599754
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_989854 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_989854 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_989854 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_989854 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_989854
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_989854 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_989854
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_989854 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_989854
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_519997 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_519997 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_519997 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_519997 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_519997
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_519997 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_fragment_519997
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_operand_fragment_519997 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_519997
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_179049 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_179049 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_179049 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_179049
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_179049 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_179049
																			.equals(combo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_326912 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_326912 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_326912 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_326912
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_326912 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_326912
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_880000 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_880000 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_880000 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_880000
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_880000 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_880000
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_880000 and parentCombo 
																	JavaSDM.ensure(!__DEC_guard_guard_880000
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_guard_guard_880000 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_880000
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_469890
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_469890 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_469890
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_469890 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_469890
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_469890 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_469890 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_469890 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_469890
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_365667
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_365667 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_365667
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_365667 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_365667
																					.next();

																			// check object __DEC_messageSend_receiveEvent_365667 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_365667 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_365667 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_365667
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_377450
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_377450 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_377450
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_377450 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_377450
																					.next();

																			// check object __DEC_messageReceive_sendEvent_377450 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_377450 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_377450 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_377450
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_848666
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_848666 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_848666
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_848666 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_848666
																					.next();

																			// check object __DEC_messageSend_sendEvent_848666 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_848666 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_848666 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_848666
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_489238
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_489238 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_489238
																					.hasNext()) {
																		try {
																			__DEC_message_message_489238 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_489238
																					.next();

																			// check object __DEC_message_message_489238 is really bound
																			JavaSDM.ensure(__DEC_message_message_489238 != null);
																			// check isomorphic binding between objects __DEC_message_message_489238 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_489238
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_489238 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_489238
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_specification is really bound
																JavaSDM.ensure(_edge_specification != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentCombo and operand 
																JavaSDM.ensure(!parentCombo
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and parentCombo 
																JavaSDM.ensure(!parentOperand
																		.equals(parentCombo));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentCombo to guard
																JavaSDM.ensure(!(guard
																		.equals(parentCombo
																				.getGuard())));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_specification to guard
																JavaSDM.ensure(guard
																		.equals(_edge_specification
																				.getSrc()));

																// check link trg from _edge_specification to spec
																JavaSDM.ensure(spec
																		.equals(_edge_specification
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_52(
			EMoflonEdge _edge_steps) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_727386 = null;
		NormalStep __DEC_alt_stepAlternative_602138 = null;
		Flow __DEC_step_steps_402969 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_193014 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_193014 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		Iterator fujaba__IterPackageDeclarationToSysActor = null;
		Actor sysActor = null;
		PackageDeclaration packageDeclaration = null;
		Actor actor = null;
		NormalStep step = null;
		UseCase useCase = null;
		NamedFlow flow = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_steps is really bound
			JavaSDM.ensure(_edge_steps != null);
			// bind object
			_TmpObject = _edge_steps.getSrc();

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_steps.getTrg();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getActors().contains(actor));

			// check link steps from step to flow
			JavaSDM.ensure(flow.equals(step.eContainer()));

			// iterate to-many link actors from packageDeclaration to sysActor
			fujaba__Success = false;

			fujaba__IterPackageDeclarationToSysActor = new ArrayList(
					packageDeclaration.getActors()).iterator();

			while (fujaba__IterPackageDeclarationToSysActor.hasNext()) {
				try {
					sysActor = (Actor) fujaba__IterPackageDeclarationToSysActor
							.next();

					// check object sysActor is really bound
					JavaSDM.ensure(sysActor != null);
					// check isomorphic binding between objects sysActor and actor 
					JavaSDM.ensure(!sysActor.equals(actor));

					// iterate to-many link stepAlternative from step to alt
					fujaba__Success = false;

					fujaba__IterStepToAlt = new ArrayList(
							step.getStepAlternative()).iterator();

					while (fujaba__IterStepToAlt.hasNext()) {
						try {
							_TmpObject = fujaba__IterStepToAlt.next();

							// ensure correct type and really bound of object alt
							JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
							alt = (AlternativeFlowAlternative) _TmpObject;
							// bind object
							_TmpObject = alt.getRef();

							// ensure correct type and really bound of object altFlow
							JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
							altFlow = (AlternativeFlow) _TmpObject;

							// check isomorphic binding between objects flow and altFlow 
							JavaSDM.ensure(!flow.equals(altFlow));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_altFlow_flows_727386 = altFlow
											.eContainer() instanceof UseCase ? (UseCase) altFlow
											.eContainer() : null;

									// check object __DEC_altFlow_flows_727386 is really bound
									JavaSDM.ensure(__DEC_altFlow_flows_727386 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_altFlow_flows_727386
											.getFlows().contains(altFlow));

									// check isomorphic binding between objects __DEC_altFlow_flows_727386 and useCase 
									JavaSDM.ensure(!__DEC_altFlow_flows_727386
											.equals(useCase));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_alt_stepAlternative_602138 = alt
											.eContainer() instanceof NormalStep ? (NormalStep) alt
											.eContainer() : null;

									// check object __DEC_alt_stepAlternative_602138 is really bound
									JavaSDM.ensure(__DEC_alt_stepAlternative_602138 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_alt_stepAlternative_602138
											.getStepAlternative().contains(alt));

									// check isomorphic binding between objects __DEC_alt_stepAlternative_602138 and step 
									JavaSDM.ensure(!__DEC_alt_stepAlternative_602138
											.equals(step));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_step_steps_402969 = step.eContainer() instanceof Flow ? (Flow) step
											.eContainer() : null;

									// check object __DEC_step_steps_402969 is really bound
									JavaSDM.ensure(__DEC_step_steps_402969 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_step_steps_402969
											.getSteps().contains(step));

									// check isomorphic binding between objects __DEC_step_steps_402969 and altFlow 
									JavaSDM.ensure(!__DEC_step_steps_402969
											.equals(altFlow));

									// check isomorphic binding between objects __DEC_step_steps_402969 and flow 
									JavaSDM.ensure(!__DEC_step_steps_402969
											.equals(flow));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link ref from altFlow to __DEC_altFlow_ref_193014
									fujaba__Success = false;

									fujaba__IterAltFlowTo__DEC_altFlow_ref_193014 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															altFlow,
															AlternativeFlowAlternative.class,
															"ref")).iterator();

									while (!(fujaba__Success)
											&& fujaba__IterAltFlowTo__DEC_altFlow_ref_193014
													.hasNext()) {
										try {
											__DEC_altFlow_ref_193014 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_193014
													.next();

											// check object __DEC_altFlow_ref_193014 is really bound
											JavaSDM.ensure(__DEC_altFlow_ref_193014 != null);
											// check isomorphic binding between objects __DEC_altFlow_ref_193014 and alt 
											JavaSDM.ensure(!__DEC_altFlow_ref_193014
													.equals(alt));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check object _edge_steps is really bound
								JavaSDM.ensure(_edge_steps != null);
								// check object actor is really bound
								JavaSDM.ensure(actor != null);
								// check object alt is really bound
								JavaSDM.ensure(alt != null);
								// check object altFlow is really bound
								JavaSDM.ensure(altFlow != null);
								// check object flow is really bound
								JavaSDM.ensure(flow != null);
								// check object packageDeclaration is really bound
								JavaSDM.ensure(packageDeclaration != null);
								// check object step is really bound
								JavaSDM.ensure(step != null);
								// check object sysActor is really bound
								JavaSDM.ensure(sysActor != null);
								// check object useCase is really bound
								JavaSDM.ensure(useCase != null);
								// check isomorphic binding between objects sysActor and actor 
								JavaSDM.ensure(!sysActor.equals(actor));

								// check isomorphic binding between objects flow and altFlow 
								JavaSDM.ensure(!flow.equals(altFlow));

								// check link actor from step to actor
								JavaSDM.ensure(actor.equals(step.getActor()));

								// check link ref from alt to altFlow
								JavaSDM.ensure(altFlow.equals(alt.getRef()));

								// check link actors from actor to packageDeclaration
								JavaSDM.ensure(packageDeclaration.equals(actor
										.eContainer()));

								// check link actors from sysActor to packageDeclaration
								JavaSDM.ensure(packageDeclaration
										.equals(sysActor.eContainer()));

								// check link flows from flow to useCase
								JavaSDM.ensure(useCase.equals(flow.eContainer()));

								// check link flows from altFlow to useCase
								JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(altFlow,
												UseCase.class, "$eContainer")
										.contains(useCase)));

								// check link src from _edge_steps to flow
								JavaSDM.ensure(flow.equals(_edge_steps.getSrc()));

								// check link stepAlternative from alt to step
								JavaSDM.ensure(step.equals(alt.eContainer()));

								// check link steps from step to flow
								JavaSDM.ensure(flow.equals(step.eContainer()));

								// check link steps from step to altFlow
								JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(step,
												AlternativeFlow.class,
												"$eContainer")
										.contains(altFlow)));

								// check link trg from _edge_steps to step
								JavaSDM.ensure(step.equals(_edge_steps.getTrg()));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_FWD(match,
										packageDeclaration, actor, sysActor,
										flow, step, alt, altFlow, useCase);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_FWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_53(
			EMoflonEdge _edge_actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_891703 = null;
		NormalStep __DEC_alt_stepAlternative_964058 = null;
		Flow __DEC_step_steps_898527 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_221110 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_221110 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		Iterator fujaba__IterPackageDeclarationToSysActor = null;
		Actor sysActor = null;
		PackageDeclaration packageDeclaration = null;
		Actor actor = null;
		UseCase useCase = null;
		NamedFlow flow = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_actor is really bound
			JavaSDM.ensure(_edge_actor != null);
			// bind object
			_TmpObject = _edge_actor.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_actor.getTrg();

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;

			// check link actor from step to actor
			JavaSDM.ensure(actor.equals(step.getActor()));

			// bind object
			packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getActors().contains(actor));

			// iterate to-many link actors from packageDeclaration to sysActor
			fujaba__Success = false;

			fujaba__IterPackageDeclarationToSysActor = new ArrayList(
					packageDeclaration.getActors()).iterator();

			while (fujaba__IterPackageDeclarationToSysActor.hasNext()) {
				try {
					sysActor = (Actor) fujaba__IterPackageDeclarationToSysActor
							.next();

					// check object sysActor is really bound
					JavaSDM.ensure(sysActor != null);
					// check isomorphic binding between objects sysActor and actor 
					JavaSDM.ensure(!sysActor.equals(actor));

					// iterate to-many link stepAlternative from step to alt
					fujaba__Success = false;

					fujaba__IterStepToAlt = new ArrayList(
							step.getStepAlternative()).iterator();

					while (fujaba__IterStepToAlt.hasNext()) {
						try {
							_TmpObject = fujaba__IterStepToAlt.next();

							// ensure correct type and really bound of object alt
							JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
							alt = (AlternativeFlowAlternative) _TmpObject;
							// bind object
							_TmpObject = alt.getRef();

							// ensure correct type and really bound of object altFlow
							JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
							altFlow = (AlternativeFlow) _TmpObject;

							// check isomorphic binding between objects flow and altFlow 
							JavaSDM.ensure(!flow.equals(altFlow));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_altFlow_flows_891703 = altFlow
											.eContainer() instanceof UseCase ? (UseCase) altFlow
											.eContainer() : null;

									// check object __DEC_altFlow_flows_891703 is really bound
									JavaSDM.ensure(__DEC_altFlow_flows_891703 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_altFlow_flows_891703
											.getFlows().contains(altFlow));

									// check isomorphic binding between objects __DEC_altFlow_flows_891703 and useCase 
									JavaSDM.ensure(!__DEC_altFlow_flows_891703
											.equals(useCase));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_alt_stepAlternative_964058 = alt
											.eContainer() instanceof NormalStep ? (NormalStep) alt
											.eContainer() : null;

									// check object __DEC_alt_stepAlternative_964058 is really bound
									JavaSDM.ensure(__DEC_alt_stepAlternative_964058 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_alt_stepAlternative_964058
											.getStepAlternative().contains(alt));

									// check isomorphic binding between objects __DEC_alt_stepAlternative_964058 and step 
									JavaSDM.ensure(!__DEC_alt_stepAlternative_964058
											.equals(step));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_step_steps_898527 = step.eContainer() instanceof Flow ? (Flow) step
											.eContainer() : null;

									// check object __DEC_step_steps_898527 is really bound
									JavaSDM.ensure(__DEC_step_steps_898527 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_step_steps_898527
											.getSteps().contains(step));

									// check isomorphic binding between objects __DEC_step_steps_898527 and altFlow 
									JavaSDM.ensure(!__DEC_step_steps_898527
											.equals(altFlow));

									// check isomorphic binding between objects __DEC_step_steps_898527 and flow 
									JavaSDM.ensure(!__DEC_step_steps_898527
											.equals(flow));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link ref from altFlow to __DEC_altFlow_ref_221110
									fujaba__Success = false;

									fujaba__IterAltFlowTo__DEC_altFlow_ref_221110 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															altFlow,
															AlternativeFlowAlternative.class,
															"ref")).iterator();

									while (!(fujaba__Success)
											&& fujaba__IterAltFlowTo__DEC_altFlow_ref_221110
													.hasNext()) {
										try {
											__DEC_altFlow_ref_221110 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_221110
													.next();

											// check object __DEC_altFlow_ref_221110 is really bound
											JavaSDM.ensure(__DEC_altFlow_ref_221110 != null);
											// check isomorphic binding between objects __DEC_altFlow_ref_221110 and alt 
											JavaSDM.ensure(!__DEC_altFlow_ref_221110
													.equals(alt));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check object _edge_actor is really bound
								JavaSDM.ensure(_edge_actor != null);
								// check object actor is really bound
								JavaSDM.ensure(actor != null);
								// check object alt is really bound
								JavaSDM.ensure(alt != null);
								// check object altFlow is really bound
								JavaSDM.ensure(altFlow != null);
								// check object flow is really bound
								JavaSDM.ensure(flow != null);
								// check object packageDeclaration is really bound
								JavaSDM.ensure(packageDeclaration != null);
								// check object step is really bound
								JavaSDM.ensure(step != null);
								// check object sysActor is really bound
								JavaSDM.ensure(sysActor != null);
								// check object useCase is really bound
								JavaSDM.ensure(useCase != null);
								// check isomorphic binding between objects sysActor and actor 
								JavaSDM.ensure(!sysActor.equals(actor));

								// check isomorphic binding between objects flow and altFlow 
								JavaSDM.ensure(!flow.equals(altFlow));

								// check link actor from step to actor
								JavaSDM.ensure(actor.equals(step.getActor()));

								// check link ref from alt to altFlow
								JavaSDM.ensure(altFlow.equals(alt.getRef()));

								// check link actors from actor to packageDeclaration
								JavaSDM.ensure(packageDeclaration.equals(actor
										.eContainer()));

								// check link actors from sysActor to packageDeclaration
								JavaSDM.ensure(packageDeclaration
										.equals(sysActor.eContainer()));

								// check link flows from flow to useCase
								JavaSDM.ensure(useCase.equals(flow.eContainer()));

								// check link flows from altFlow to useCase
								JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(altFlow,
												UseCase.class, "$eContainer")
										.contains(useCase)));

								// check link src from _edge_actor to step
								JavaSDM.ensure(step.equals(_edge_actor.getSrc()));

								// check link stepAlternative from alt to step
								JavaSDM.ensure(step.equals(alt.eContainer()));

								// check link steps from step to flow
								JavaSDM.ensure(flow.equals(step.eContainer()));

								// check link steps from step to altFlow
								JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(step,
												AlternativeFlow.class,
												"$eContainer")
										.contains(altFlow)));

								// check link trg from _edge_actor to actor
								JavaSDM.ensure(actor.equals(_edge_actor
										.getTrg()));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_FWD(match,
										packageDeclaration, actor, sysActor,
										flow, step, alt, altFlow, useCase);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_FWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_270(
			EMoflonEdge _edge_sendEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_124733 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_774726 = null;
		Interaction __DEC_messageSend_enclosingInteraction_368144 = null;
		Interaction __DEC_operand_enclosingInteraction_127911 = null;
		InteractionOperand __DEC_combo_fragment_221063 = null;
		InteractionOperand __DEC_messageReceive_fragment_322730 = null;
		InteractionOperand __DEC_messageSend_fragment_935059 = null;
		InteractionOperand __DEC_operand_fragment_889636 = null;
		CombinedFragment __DEC_operand_operand_501167 = null;
		Constraint __DEC_spec_specification_922905 = null;
		InteractionOperand __DEC_guard_guard_467499 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_951830 = null;
		Message __DEC_messageReceive_receiveEvent_951830 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_635971 = null;
		Message __DEC_messageSend_receiveEvent_635971 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_245521 = null;
		Message __DEC_messageReceive_sendEvent_245521 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_779358 = null;
		Message __DEC_messageSend_sendEvent_779358 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_293986 = null;
		MessageEnd __DEC_message_message_293986 = null;
		Match match = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentComboToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterMessageSendToSysLine = null;
		Lifeline sysLine = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_sendEvent is really bound
			JavaSDM.ensure(_edge_sendEvent != null);
			// bind object
			_TmpObject = _edge_sendEvent.getTrg();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// check link src from _edge_sendEvent to message
			JavaSDM.ensure(message.equals(_edge_sendEvent.getSrc()));

			// iterate to-many link covered from messageSend to sysLine
			fujaba__Success = false;

			fujaba__IterMessageSendToSysLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterMessageSendToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link covered from sysLine to parentCombo
									fujaba__Success = false;

									fujaba__IterSysLineToParentCombo = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentCombo
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentCombo
													.next();

											// ensure correct type and really bound of object parentCombo
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentCombo = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentCombo and operand 
											JavaSDM.ensure(!parentCombo
													.equals(operand));

											// iterate to-many link covered from parentCombo to line
											fujaba__Success = false;

											fujaba__IterParentComboToLine = new ArrayList(
													parentCombo.getCovered())
													.iterator();

											while (fujaba__IterParentComboToLine
													.hasNext()) {
												try {
													line = (Lifeline) fujaba__IterParentComboToLine
															.next();

													// check object line is really bound
													JavaSDM.ensure(line != null);
													// check isomorphic binding between objects sysLine and line 
													JavaSDM.ensure(!sysLine
															.equals(line));

													// bind object
													interaction = line
															.getInteraction();

													// check object interaction is really bound
													JavaSDM.ensure(interaction != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// check link covered from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// iterate to-many link covered from sysLine to parentOperand
													fujaba__Success = false;

													fujaba__IterSysLineToParentOperand = new ArrayList(
															sysLine.getCoveredBy())
															.iterator();

													while (fujaba__IterSysLineToParentOperand
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterSysLineToParentOperand
																	.next();

															// ensure correct type and really bound of object parentOperand
															JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
															parentOperand = (InteractionOperand) _TmpObject;
															// check isomorphic binding between objects parentOperand and operand 
															JavaSDM.ensure(!parentOperand
																	.equals(operand));

															// check isomorphic binding between objects parentOperand and parentCombo 
															JavaSDM.ensure(!parentOperand
																	.equals(parentCombo));

															// check link fragment from messageReceive to parentOperand
															JavaSDM.ensure(parentOperand
																	.equals(messageReceive
																			.getEnclosingOperand()));

															// check link covered from line to parentOperand
															JavaSDM.ensure(line
																	.getCoveredBy()
																	.contains(
																			parentOperand));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_124733 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_124733 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_124733 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_124733 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_124733
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_774726 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_774726 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_774726 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_774726 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_774726
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_368144 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_368144 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_368144 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_368144 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_368144
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_127911 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_127911 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_127911 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_127911 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_127911
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_221063 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_221063 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_221063 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_221063 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_221063
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_221063 and parentCombo 
																	JavaSDM.ensure(!__DEC_combo_fragment_221063
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_combo_fragment_221063 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_221063
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_322730 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_322730 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_322730 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_322730 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_322730
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_322730 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_322730
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_322730 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_322730
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_935059 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_935059 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_935059 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_935059 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_935059
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_935059 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_935059
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_935059 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_935059
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_889636 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_889636 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_889636 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_889636 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_889636
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_889636 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_fragment_889636
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_operand_fragment_889636 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_889636
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_501167 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_501167 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_501167 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_501167
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_501167 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_501167
																			.equals(combo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_922905 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_922905 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_922905 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_922905
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_922905 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_922905
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_467499 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_467499 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_467499 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_467499
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_467499 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_467499
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_467499 and parentCombo 
																	JavaSDM.ensure(!__DEC_guard_guard_467499
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_guard_guard_467499 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_467499
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_951830
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_951830 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_951830
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_951830 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_951830
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_951830 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_951830 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_951830 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_951830
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_635971
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_635971 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_635971
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_635971 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_635971
																					.next();

																			// check object __DEC_messageSend_receiveEvent_635971 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_635971 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_635971 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_635971
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_245521
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_245521 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_245521
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_245521 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_245521
																					.next();

																			// check object __DEC_messageReceive_sendEvent_245521 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_245521 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_245521 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_245521
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_779358
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_779358 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_779358
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_779358 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_779358
																					.next();

																			// check object __DEC_messageSend_sendEvent_779358 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_779358 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_779358 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_779358
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_293986
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_293986 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_293986
																					.hasNext()) {
																		try {
																			__DEC_message_message_293986 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_293986
																					.next();

																			// check object __DEC_message_message_293986 is really bound
																			JavaSDM.ensure(__DEC_message_message_293986 != null);
																			// check isomorphic binding between objects __DEC_message_message_293986 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_293986
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_293986 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_293986
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_sendEvent is really bound
																JavaSDM.ensure(_edge_sendEvent != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentCombo and operand 
																JavaSDM.ensure(!parentCombo
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and parentCombo 
																JavaSDM.ensure(!parentOperand
																		.equals(parentCombo));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentCombo to guard
																JavaSDM.ensure(!(guard
																		.equals(parentCombo
																				.getGuard())));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_sendEvent to message
																JavaSDM.ensure(message
																		.equals(_edge_sendEvent
																				.getSrc()));

																// check link trg from _edge_sendEvent to messageSend
																JavaSDM.ensure(messageSend
																		.equals(_edge_sendEvent
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_271(
			EMoflonEdge _edge_receiveEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_875880 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_869985 = null;
		Interaction __DEC_messageSend_enclosingInteraction_83868 = null;
		Interaction __DEC_operand_enclosingInteraction_35449 = null;
		InteractionOperand __DEC_combo_fragment_195337 = null;
		InteractionOperand __DEC_messageReceive_fragment_414112 = null;
		InteractionOperand __DEC_messageSend_fragment_411169 = null;
		InteractionOperand __DEC_operand_fragment_315594 = null;
		CombinedFragment __DEC_operand_operand_256883 = null;
		Constraint __DEC_spec_specification_97738 = null;
		InteractionOperand __DEC_guard_guard_261770 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_422883 = null;
		Message __DEC_messageReceive_receiveEvent_422883 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_811527 = null;
		Message __DEC_messageSend_receiveEvent_811527 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_72883 = null;
		Message __DEC_messageReceive_sendEvent_72883 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_905512 = null;
		Message __DEC_messageSend_sendEvent_905512 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_635711 = null;
		MessageEnd __DEC_message_message_635711 = null;
		Match match = null;
		Iterator fujaba__IterParentComboToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterMessageSendToSysLine = null;
		Lifeline sysLine = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_receiveEvent is really bound
			JavaSDM.ensure(_edge_receiveEvent != null);
			// bind object
			_TmpObject = _edge_receiveEvent.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_receiveEvent to messageReceive
			JavaSDM.ensure(messageReceive.equals(_edge_receiveEvent.getTrg()));

			// iterate to-many link covered from messageSend to sysLine
			fujaba__Success = false;

			fujaba__IterMessageSendToSysLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterMessageSendToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link covered from sysLine to parentOperand
									fujaba__Success = false;

									fujaba__IterSysLineToParentOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentOperand
													.next();

											// ensure correct type and really bound of object parentOperand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentOperand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// iterate to-many link covered from sysLine to parentCombo
											fujaba__Success = false;

											fujaba__IterSysLineToParentCombo = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentCombo
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentCombo
															.next();

													// ensure correct type and really bound of object parentCombo
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentCombo = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentCombo and operand 
													JavaSDM.ensure(!parentCombo
															.equals(operand));

													// check isomorphic binding between objects parentOperand and parentCombo 
													JavaSDM.ensure(!parentOperand
															.equals(parentCombo));

													// iterate to-many link covered from parentCombo to line
													fujaba__Success = false;

													fujaba__IterParentComboToLine = new ArrayList(
															parentCombo
																	.getCovered())
															.iterator();

													while (fujaba__IterParentComboToLine
															.hasNext()) {
														try {
															line = (Lifeline) fujaba__IterParentComboToLine
																	.next();

															// check object line is really bound
															JavaSDM.ensure(line != null);
															// check isomorphic binding between objects sysLine and line 
															JavaSDM.ensure(!sysLine
																	.equals(line));

															// check link lifeline from line to interaction
															JavaSDM.ensure(interaction
																	.equals(line
																			.getInteraction()));

															// check link covered from line to operand
															JavaSDM.ensure(line
																	.getCoveredBy()
																	.contains(
																			operand));

															// check link covered from line to parentOperand
															JavaSDM.ensure(line
																	.getCoveredBy()
																	.contains(
																			parentOperand));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_875880 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_875880 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_875880 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_875880 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_875880
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_869985 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_869985 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_869985 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_869985 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_869985
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_83868 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_83868 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_83868 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_83868 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_83868
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_35449 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_35449 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_35449 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_35449 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_35449
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_195337 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_195337 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_195337 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_195337 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_195337
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_195337 and parentCombo 
																	JavaSDM.ensure(!__DEC_combo_fragment_195337
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_combo_fragment_195337 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_195337
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_414112 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_414112 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_414112 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_414112 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_414112
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_414112 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_414112
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_414112 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_414112
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_411169 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_411169 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_411169 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_411169 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_411169
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_411169 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_411169
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_411169 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_411169
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_315594 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_315594 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_315594 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_315594 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_315594
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_315594 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_fragment_315594
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_operand_fragment_315594 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_315594
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_256883 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_256883 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_256883 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_256883
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_256883 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_256883
																			.equals(combo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_97738 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_97738 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_97738 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_97738
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_97738 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_97738
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_261770 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_261770 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_261770 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_261770
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_261770 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_261770
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_261770 and parentCombo 
																	JavaSDM.ensure(!__DEC_guard_guard_261770
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_guard_guard_261770 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_261770
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_422883
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_422883 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_422883
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_422883 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_422883
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_422883 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_422883 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_422883 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_422883
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_811527
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_811527 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_811527
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_811527 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_811527
																					.next();

																			// check object __DEC_messageSend_receiveEvent_811527 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_811527 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_811527 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_811527
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_72883
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_72883 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_72883
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_72883 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_72883
																					.next();

																			// check object __DEC_messageReceive_sendEvent_72883 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_72883 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_72883 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_72883
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_905512
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_905512 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_905512
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_905512 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_905512
																					.next();

																			// check object __DEC_messageSend_sendEvent_905512 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_905512 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_905512 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_905512
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_635711
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_635711 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_635711
																					.hasNext()) {
																		try {
																			__DEC_message_message_635711 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_635711
																					.next();

																			// check object __DEC_message_message_635711 is really bound
																			JavaSDM.ensure(__DEC_message_message_635711 != null);
																			// check isomorphic binding between objects __DEC_message_message_635711 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_635711
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_635711 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_635711
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_receiveEvent is really bound
																JavaSDM.ensure(_edge_receiveEvent != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentCombo and operand 
																JavaSDM.ensure(!parentCombo
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and parentCombo 
																JavaSDM.ensure(!parentOperand
																		.equals(parentCombo));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentCombo to guard
																JavaSDM.ensure(!(guard
																		.equals(parentCombo
																				.getGuard())));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_receiveEvent to message
																JavaSDM.ensure(message
																		.equals(_edge_receiveEvent
																				.getSrc()));

																// check link trg from _edge_receiveEvent to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(_edge_receiveEvent
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_272(
			EMoflonEdge _edge_interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_694200 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_744552 = null;
		Interaction __DEC_messageSend_enclosingInteraction_523218 = null;
		Interaction __DEC_operand_enclosingInteraction_947084 = null;
		InteractionOperand __DEC_combo_fragment_768368 = null;
		InteractionOperand __DEC_messageReceive_fragment_202697 = null;
		InteractionOperand __DEC_messageSend_fragment_143729 = null;
		InteractionOperand __DEC_operand_fragment_142594 = null;
		CombinedFragment __DEC_operand_operand_581428 = null;
		Constraint __DEC_spec_specification_878289 = null;
		InteractionOperand __DEC_guard_guard_789800 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_771936 = null;
		Message __DEC_messageReceive_receiveEvent_771936 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_893492 = null;
		Message __DEC_messageSend_receiveEvent_893492 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_636577 = null;
		Message __DEC_messageReceive_sendEvent_636577 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_44417 = null;
		Message __DEC_messageSend_sendEvent_44417 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_330893 = null;
		MessageEnd __DEC_message_message_330893 = null;
		Match match = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterParentComboToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterMessageSendToSysLine = null;
		Lifeline sysLine = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_interaction is really bound
			JavaSDM.ensure(_edge_interaction != null);
			// bind object
			_TmpObject = _edge_interaction.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_interaction to interaction
			JavaSDM.ensure(interaction.equals(_edge_interaction.getTrg()));

			// iterate to-many link covered from messageSend to sysLine
			fujaba__Success = false;

			fujaba__IterMessageSendToSysLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterMessageSendToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link covered from sysLine to parentCombo
									fujaba__Success = false;

									fujaba__IterSysLineToParentCombo = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentCombo
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentCombo
													.next();

											// ensure correct type and really bound of object parentCombo
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentCombo = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentCombo and operand 
											JavaSDM.ensure(!parentCombo
													.equals(operand));

											// iterate to-many link covered from parentCombo to line
											fujaba__Success = false;

											fujaba__IterParentComboToLine = new ArrayList(
													parentCombo.getCovered())
													.iterator();

											while (fujaba__IterParentComboToLine
													.hasNext()) {
												try {
													line = (Lifeline) fujaba__IterParentComboToLine
															.next();

													// check object line is really bound
													JavaSDM.ensure(line != null);
													// check isomorphic binding between objects sysLine and line 
													JavaSDM.ensure(!sysLine
															.equals(line));

													// check link lifeline from line to interaction
													JavaSDM.ensure(interaction.equals(line
															.getInteraction()));

													// check link covered from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// iterate to-many link covered from sysLine to parentOperand
													fujaba__Success = false;

													fujaba__IterSysLineToParentOperand = new ArrayList(
															sysLine.getCoveredBy())
															.iterator();

													while (fujaba__IterSysLineToParentOperand
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterSysLineToParentOperand
																	.next();

															// ensure correct type and really bound of object parentOperand
															JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
															parentOperand = (InteractionOperand) _TmpObject;
															// check isomorphic binding between objects parentOperand and operand 
															JavaSDM.ensure(!parentOperand
																	.equals(operand));

															// check isomorphic binding between objects parentOperand and parentCombo 
															JavaSDM.ensure(!parentOperand
																	.equals(parentCombo));

															// check link fragment from messageReceive to parentOperand
															JavaSDM.ensure(parentOperand
																	.equals(messageReceive
																			.getEnclosingOperand()));

															// check link covered from line to parentOperand
															JavaSDM.ensure(line
																	.getCoveredBy()
																	.contains(
																			parentOperand));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_694200 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_694200 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_694200 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_694200 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_694200
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_744552 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_744552 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_744552 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_744552 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_744552
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_523218 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_523218 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_523218 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_523218 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_523218
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_947084 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_947084 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_947084 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_947084 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_947084
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_768368 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_768368 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_768368 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_768368 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_768368
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_768368 and parentCombo 
																	JavaSDM.ensure(!__DEC_combo_fragment_768368
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_combo_fragment_768368 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_768368
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_202697 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_202697 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_202697 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_202697 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_202697
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_202697 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_202697
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_202697 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_202697
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_143729 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_143729 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_143729 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_143729 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_143729
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_143729 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_143729
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_143729 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_143729
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_142594 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_142594 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_142594 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_142594 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_142594
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_142594 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_fragment_142594
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_operand_fragment_142594 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_142594
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_581428 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_581428 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_581428 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_581428
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_581428 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_581428
																			.equals(combo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_878289 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_878289 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_878289 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_878289
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_878289 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_878289
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_789800 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_789800 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_789800 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_789800
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_789800 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_789800
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_789800 and parentCombo 
																	JavaSDM.ensure(!__DEC_guard_guard_789800
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_guard_guard_789800 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_789800
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_771936
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_771936 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_771936
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_771936 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_771936
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_771936 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_771936 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_771936 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_771936
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_893492
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_893492 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_893492
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_893492 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_893492
																					.next();

																			// check object __DEC_messageSend_receiveEvent_893492 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_893492 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_893492 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_893492
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_636577
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_636577 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_636577
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_636577 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_636577
																					.next();

																			// check object __DEC_messageReceive_sendEvent_636577 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_636577 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_636577 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_636577
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_44417
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_44417 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_44417
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_44417 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_44417
																					.next();

																			// check object __DEC_messageSend_sendEvent_44417 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_44417 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_44417 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_44417
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_330893
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_330893 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_330893
																					.hasNext()) {
																		try {
																			__DEC_message_message_330893 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_330893
																					.next();

																			// check object __DEC_message_message_330893 is really bound
																			JavaSDM.ensure(__DEC_message_message_330893 != null);
																			// check isomorphic binding between objects __DEC_message_message_330893 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_330893
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_330893 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_330893
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_interaction is really bound
																JavaSDM.ensure(_edge_interaction != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentCombo and operand 
																JavaSDM.ensure(!parentCombo
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and parentCombo 
																JavaSDM.ensure(!parentOperand
																		.equals(parentCombo));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentCombo to guard
																JavaSDM.ensure(!(guard
																		.equals(parentCombo
																				.getGuard())));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_interaction to message
																JavaSDM.ensure(message
																		.equals(_edge_interaction
																				.getSrc()));

																// check link trg from _edge_interaction to interaction
																JavaSDM.ensure(interaction
																		.equals(_edge_interaction
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_273(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_405139 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_994324 = null;
		Interaction __DEC_messageSend_enclosingInteraction_748207 = null;
		Interaction __DEC_operand_enclosingInteraction_753719 = null;
		InteractionOperand __DEC_combo_fragment_492561 = null;
		InteractionOperand __DEC_messageReceive_fragment_260140 = null;
		InteractionOperand __DEC_messageSend_fragment_190268 = null;
		InteractionOperand __DEC_operand_fragment_70597 = null;
		CombinedFragment __DEC_operand_operand_723380 = null;
		Constraint __DEC_spec_specification_302252 = null;
		InteractionOperand __DEC_guard_guard_404688 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_332777 = null;
		Message __DEC_messageReceive_receiveEvent_332777 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_912147 = null;
		Message __DEC_messageSend_receiveEvent_912147 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_825173 = null;
		Message __DEC_messageReceive_sendEvent_825173 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_763827 = null;
		Message __DEC_messageSend_sendEvent_763827 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_420481 = null;
		MessageEnd __DEC_message_message_420481 = null;
		Match match = null;
		Iterator fujaba__IterMessageTo_edge_interaction = null;
		EMoflonEdge _edge_interaction = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterParentComboToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterMessageSendToSysLine = null;
		Lifeline sysLine = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link src from _edge_message to interaction
			JavaSDM.ensure(interaction.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageSend to sysLine
			fujaba__Success = false;

			fujaba__IterMessageSendToSysLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterMessageSendToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link covered from sysLine to parentCombo
									fujaba__Success = false;

									fujaba__IterSysLineToParentCombo = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentCombo
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentCombo
													.next();

											// ensure correct type and really bound of object parentCombo
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentCombo = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentCombo and operand 
											JavaSDM.ensure(!parentCombo
													.equals(operand));

											// iterate to-many link covered from parentCombo to line
											fujaba__Success = false;

											fujaba__IterParentComboToLine = new ArrayList(
													parentCombo.getCovered())
													.iterator();

											while (fujaba__IterParentComboToLine
													.hasNext()) {
												try {
													line = (Lifeline) fujaba__IterParentComboToLine
															.next();

													// check object line is really bound
													JavaSDM.ensure(line != null);
													// check isomorphic binding between objects sysLine and line 
													JavaSDM.ensure(!sysLine
															.equals(line));

													// check link lifeline from line to interaction
													JavaSDM.ensure(interaction.equals(line
															.getInteraction()));

													// check link covered from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// iterate to-many link covered from sysLine to parentOperand
													fujaba__Success = false;

													fujaba__IterSysLineToParentOperand = new ArrayList(
															sysLine.getCoveredBy())
															.iterator();

													while (fujaba__IterSysLineToParentOperand
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterSysLineToParentOperand
																	.next();

															// ensure correct type and really bound of object parentOperand
															JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
															parentOperand = (InteractionOperand) _TmpObject;
															// check isomorphic binding between objects parentOperand and operand 
															JavaSDM.ensure(!parentOperand
																	.equals(operand));

															// check isomorphic binding between objects parentOperand and parentCombo 
															JavaSDM.ensure(!parentOperand
																	.equals(parentCombo));

															// check link fragment from messageReceive to parentOperand
															JavaSDM.ensure(parentOperand
																	.equals(messageReceive
																			.getEnclosingOperand()));

															// check link covered from line to parentOperand
															JavaSDM.ensure(line
																	.getCoveredBy()
																	.contains(
																			parentOperand));

															// iterate to-many link src from message to _edge_interaction
															fujaba__Success = false;

															fujaba__IterMessageTo_edge_interaction = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					EMoflonEdge.class,
																					"src"))
																	.iterator();

															while (fujaba__IterMessageTo_edge_interaction
																	.hasNext()) {
																try {
																	_edge_interaction = (EMoflonEdge) fujaba__IterMessageTo_edge_interaction
																			.next();

																	// check object _edge_interaction is really bound
																	JavaSDM.ensure(_edge_interaction != null);
																	// check isomorphic binding between objects _edge_message and _edge_interaction 
																	JavaSDM.ensure(!_edge_message
																			.equals(_edge_interaction));

																	// check link trg from _edge_interaction to interaction
																	JavaSDM.ensure(interaction
																			.equals(_edge_interaction
																					.getTrg()));

																	// story node 'test core match and DECs'
																	try {
																		fujaba__Success = false;

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_combo_enclosingInteraction_405139 = combo
																					.getEnclosingInteraction();

																			// check object __DEC_combo_enclosingInteraction_405139 is really bound
																			JavaSDM.ensure(__DEC_combo_enclosingInteraction_405139 != null);

																			// check isomorphic binding between objects __DEC_combo_enclosingInteraction_405139 and interaction 
																			JavaSDM.ensure(!__DEC_combo_enclosingInteraction_405139
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageReceive_enclosingInteraction_994324 = messageReceive
																					.getEnclosingInteraction();

																			// check object __DEC_messageReceive_enclosingInteraction_994324 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_994324 != null);

																			// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_994324 and interaction 
																			JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_994324
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageSend_enclosingInteraction_748207 = messageSend
																					.getEnclosingInteraction();

																			// check object __DEC_messageSend_enclosingInteraction_748207 is really bound
																			JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_748207 != null);

																			// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_748207 and interaction 
																			JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_748207
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_enclosingInteraction_753719 = operand
																					.getEnclosingInteraction();

																			// check object __DEC_operand_enclosingInteraction_753719 is really bound
																			JavaSDM.ensure(__DEC_operand_enclosingInteraction_753719 != null);

																			// check isomorphic binding between objects __DEC_operand_enclosingInteraction_753719 and interaction 
																			JavaSDM.ensure(!__DEC_operand_enclosingInteraction_753719
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// negative check for link packagedElement from guard
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						guard,
																						ModalSequenceDiagram.Package.class,
																						"packagedElement")
																				.size() == 0);
																		// negative check for link packagedElement from spec
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						spec,
																						ModalSequenceDiagram.Package.class,
																						"packagedElement")
																				.size() == 0);
																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_combo_fragment_492561 = combo
																					.getEnclosingOperand();

																			// check object __DEC_combo_fragment_492561 is really bound
																			JavaSDM.ensure(__DEC_combo_fragment_492561 != null);

																			// check isomorphic binding between objects __DEC_combo_fragment_492561 and operand 
																			JavaSDM.ensure(!__DEC_combo_fragment_492561
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_combo_fragment_492561 and parentCombo 
																			JavaSDM.ensure(!__DEC_combo_fragment_492561
																					.equals(parentCombo));

																			// check isomorphic binding between objects __DEC_combo_fragment_492561 and parentOperand 
																			JavaSDM.ensure(!__DEC_combo_fragment_492561
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageReceive_fragment_260140 = messageReceive
																					.getEnclosingOperand();

																			// check object __DEC_messageReceive_fragment_260140 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_fragment_260140 != null);

																			// check isomorphic binding between objects __DEC_messageReceive_fragment_260140 and operand 
																			JavaSDM.ensure(!__DEC_messageReceive_fragment_260140
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_messageReceive_fragment_260140 and parentCombo 
																			JavaSDM.ensure(!__DEC_messageReceive_fragment_260140
																					.equals(parentCombo));

																			// check isomorphic binding between objects __DEC_messageReceive_fragment_260140 and parentOperand 
																			JavaSDM.ensure(!__DEC_messageReceive_fragment_260140
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageSend_fragment_190268 = messageSend
																					.getEnclosingOperand();

																			// check object __DEC_messageSend_fragment_190268 is really bound
																			JavaSDM.ensure(__DEC_messageSend_fragment_190268 != null);

																			// check isomorphic binding between objects __DEC_messageSend_fragment_190268 and operand 
																			JavaSDM.ensure(!__DEC_messageSend_fragment_190268
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_messageSend_fragment_190268 and parentCombo 
																			JavaSDM.ensure(!__DEC_messageSend_fragment_190268
																					.equals(parentCombo));

																			// check isomorphic binding between objects __DEC_messageSend_fragment_190268 and parentOperand 
																			JavaSDM.ensure(!__DEC_messageSend_fragment_190268
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_fragment_70597 = operand
																					.getEnclosingOperand();

																			// check object __DEC_operand_fragment_70597 is really bound
																			JavaSDM.ensure(__DEC_operand_fragment_70597 != null);

																			// check isomorphic binding between objects __DEC_operand_fragment_70597 and operand 
																			JavaSDM.ensure(!__DEC_operand_fragment_70597
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_operand_fragment_70597 and parentCombo 
																			JavaSDM.ensure(!__DEC_operand_fragment_70597
																					.equals(parentCombo));

																			// check isomorphic binding between objects __DEC_operand_fragment_70597 and parentOperand 
																			JavaSDM.ensure(!__DEC_operand_fragment_70597
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_operand_723380 = operand
																					.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																					.eContainer()
																					: null;

																			// check object __DEC_operand_operand_723380 is really bound
																			JavaSDM.ensure(__DEC_operand_operand_723380 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(__DEC_operand_operand_723380
																					.getOperand()
																					.contains(
																							operand));

																			// check isomorphic binding between objects __DEC_operand_operand_723380 and combo 
																			JavaSDM.ensure(!__DEC_operand_operand_723380
																					.equals(combo));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_spec_specification_302252 = spec
																					.eContainer() instanceof Constraint ? (Constraint) spec
																					.eContainer()
																					: null;

																			// check object __DEC_spec_specification_302252 is really bound
																			JavaSDM.ensure(__DEC_spec_specification_302252 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(spec
																					.equals(__DEC_spec_specification_302252
																							.getSpecification()));

																			// check isomorphic binding between objects __DEC_spec_specification_302252 and guard 
																			JavaSDM.ensure(!__DEC_spec_specification_302252
																					.equals(guard));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_guard_guard_404688 = guard
																					.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																					.eContainer()
																					: null;

																			// check object __DEC_guard_guard_404688 is really bound
																			JavaSDM.ensure(__DEC_guard_guard_404688 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(guard
																					.equals(__DEC_guard_guard_404688
																							.getGuard()));

																			// check isomorphic binding between objects __DEC_guard_guard_404688 and operand 
																			JavaSDM.ensure(!__DEC_guard_guard_404688
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_guard_guard_404688 and parentCombo 
																			JavaSDM.ensure(!__DEC_guard_guard_404688
																					.equals(parentCombo));

																			// check isomorphic binding between objects __DEC_guard_guard_404688 and parentOperand 
																			JavaSDM.ensure(!__DEC_guard_guard_404688
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_332777
																			fujaba__Success = false;

																			fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_332777 = new ArrayList(
																					org.moflon.util.eMoflonEMFUtil
																							.getOppositeReference(
																									messageReceive,
																									Message.class,
																									"receiveEvent"))
																					.iterator();

																			while (!(fujaba__Success)
																					&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_332777
																							.hasNext()) {
																				try {
																					__DEC_messageReceive_receiveEvent_332777 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_332777
																							.next();

																					// check object __DEC_messageReceive_receiveEvent_332777 is really bound
																					JavaSDM.ensure(__DEC_messageReceive_receiveEvent_332777 != null);
																					// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_332777 and message 
																					JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_332777
																							.equals(message));

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}
																			}
																			JavaSDM.ensure(fujaba__Success);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_912147
																			fujaba__Success = false;

																			fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_912147 = new ArrayList(
																					org.moflon.util.eMoflonEMFUtil
																							.getOppositeReference(
																									messageSend,
																									Message.class,
																									"receiveEvent"))
																					.iterator();

																			while (!(fujaba__Success)
																					&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_912147
																							.hasNext()) {
																				try {
																					__DEC_messageSend_receiveEvent_912147 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_912147
																							.next();

																					// check object __DEC_messageSend_receiveEvent_912147 is really bound
																					JavaSDM.ensure(__DEC_messageSend_receiveEvent_912147 != null);
																					// check isomorphic binding between objects __DEC_messageSend_receiveEvent_912147 and message 
																					JavaSDM.ensure(!__DEC_messageSend_receiveEvent_912147
																							.equals(message));

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}
																			}
																			JavaSDM.ensure(fujaba__Success);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_825173
																			fujaba__Success = false;

																			fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_825173 = new ArrayList(
																					org.moflon.util.eMoflonEMFUtil
																							.getOppositeReference(
																									messageReceive,
																									Message.class,
																									"sendEvent"))
																					.iterator();

																			while (!(fujaba__Success)
																					&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_825173
																							.hasNext()) {
																				try {
																					__DEC_messageReceive_sendEvent_825173 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_825173
																							.next();

																					// check object __DEC_messageReceive_sendEvent_825173 is really bound
																					JavaSDM.ensure(__DEC_messageReceive_sendEvent_825173 != null);
																					// check isomorphic binding between objects __DEC_messageReceive_sendEvent_825173 and message 
																					JavaSDM.ensure(!__DEC_messageReceive_sendEvent_825173
																							.equals(message));

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}
																			}
																			JavaSDM.ensure(fujaba__Success);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_763827
																			fujaba__Success = false;

																			fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_763827 = new ArrayList(
																					org.moflon.util.eMoflonEMFUtil
																							.getOppositeReference(
																									messageSend,
																									Message.class,
																									"sendEvent"))
																					.iterator();

																			while (!(fujaba__Success)
																					&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_763827
																							.hasNext()) {
																				try {
																					__DEC_messageSend_sendEvent_763827 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_763827
																							.next();

																					// check object __DEC_messageSend_sendEvent_763827 is really bound
																					JavaSDM.ensure(__DEC_messageSend_sendEvent_763827 != null);
																					// check isomorphic binding between objects __DEC_messageSend_sendEvent_763827 and message 
																					JavaSDM.ensure(!__DEC_messageSend_sendEvent_763827
																							.equals(message));

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}
																			}
																			JavaSDM.ensure(fujaba__Success);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// iterate to-many link message from message to __DEC_message_message_420481
																			fujaba__Success = false;

																			fujaba__IterMessageTo__DEC_message_message_420481 = new ArrayList(
																					org.moflon.util.eMoflonEMFUtil
																							.getOppositeReference(
																									message,
																									MessageEnd.class,
																									"message"))
																					.iterator();

																			while (!(fujaba__Success)
																					&& fujaba__IterMessageTo__DEC_message_message_420481
																							.hasNext()) {
																				try {
																					__DEC_message_message_420481 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_420481
																							.next();

																					// check object __DEC_message_message_420481 is really bound
																					JavaSDM.ensure(__DEC_message_message_420481 != null);
																					// check isomorphic binding between objects __DEC_message_message_420481 and messageReceive 
																					JavaSDM.ensure(!__DEC_message_message_420481
																							.equals(messageReceive));

																					// check isomorphic binding between objects __DEC_message_message_420481 and messageSend 
																					JavaSDM.ensure(!__DEC_message_message_420481
																							.equals(messageSend));

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}
																			}
																			JavaSDM.ensure(fujaba__Success);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check link fragment from operand to operand
																		JavaSDM.ensure(!(operand
																				.equals(operand
																						.getEnclosingOperand())));

																		// check link fragment from operand to operand
																		JavaSDM.ensure(!(operand
																				.equals(operand
																						.getEnclosingOperand())));

																		// check object _edge_interaction is really bound
																		JavaSDM.ensure(_edge_interaction != null);
																		// check object _edge_message is really bound
																		JavaSDM.ensure(_edge_message != null);
																		// check object combo is really bound
																		JavaSDM.ensure(combo != null);
																		// check object guard is really bound
																		JavaSDM.ensure(guard != null);
																		// check object interaction is really bound
																		JavaSDM.ensure(interaction != null);
																		// check object line is really bound
																		JavaSDM.ensure(line != null);
																		// check object message is really bound
																		JavaSDM.ensure(message != null);
																		// check object messageReceive is really bound
																		JavaSDM.ensure(messageReceive != null);
																		// check object messageSend is really bound
																		JavaSDM.ensure(messageSend != null);
																		// check object operand is really bound
																		JavaSDM.ensure(operand != null);
																		// check object parentCombo is really bound
																		JavaSDM.ensure(parentCombo != null);
																		// check object parentOperand is really bound
																		JavaSDM.ensure(parentOperand != null);
																		// check object spec is really bound
																		JavaSDM.ensure(spec != null);
																		// check object sysLine is really bound
																		JavaSDM.ensure(sysLine != null);
																		// check isomorphic binding between objects _edge_message and _edge_interaction 
																		JavaSDM.ensure(!_edge_message
																				.equals(_edge_interaction));

																		// check isomorphic binding between objects sysLine and line 
																		JavaSDM.ensure(!sysLine
																				.equals(line));

																		// check isomorphic binding between objects messageSend and messageReceive 
																		JavaSDM.ensure(!messageSend
																				.equals(messageReceive));

																		// check isomorphic binding between objects parentCombo and operand 
																		JavaSDM.ensure(!parentCombo
																				.equals(operand));

																		// check isomorphic binding between objects parentOperand and operand 
																		JavaSDM.ensure(!parentOperand
																				.equals(operand));

																		// check isomorphic binding between objects parentOperand and parentCombo 
																		JavaSDM.ensure(!parentOperand
																				.equals(parentCombo));

																		// check link fragment from messageReceive to parentOperand
																		JavaSDM.ensure(parentOperand
																				.equals(messageReceive
																						.getEnclosingOperand()));

																		// check link fragment from combo to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(combo
																						.getEnclosingInteraction())));

																		// check link fragment from messageReceive to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(messageReceive
																						.getEnclosingInteraction())));

																		// check link fragment from messageSend to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(messageSend
																						.getEnclosingInteraction())));

																		// check link fragment from operand to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(operand
																						.getEnclosingInteraction())));

																		// check link fragment from combo to operand
																		JavaSDM.ensure(!(operand
																				.equals(combo
																						.getEnclosingOperand())));

																		// check link fragment from messageReceive to operand
																		JavaSDM.ensure(!(operand
																				.equals(messageReceive
																						.getEnclosingOperand())));

																		// check link fragment from messageSend to operand
																		JavaSDM.ensure(!(operand
																				.equals(messageSend
																						.getEnclosingOperand())));

																		// check link fragment from combo to parentCombo
																		JavaSDM.ensure(!(parentCombo
																				.equals(combo
																						.getEnclosingOperand())));

																		// check link fragment from messageReceive to parentCombo
																		JavaSDM.ensure(!(parentCombo
																				.equals(messageReceive
																						.getEnclosingOperand())));

																		// check link fragment from messageSend to parentCombo
																		JavaSDM.ensure(!(parentCombo
																				.equals(messageSend
																						.getEnclosingOperand())));

																		// check link fragment from combo to parentOperand
																		JavaSDM.ensure(!(parentOperand
																				.equals(combo
																						.getEnclosingOperand())));

																		// check link fragment from messageSend to parentOperand
																		JavaSDM.ensure(!(parentOperand
																				.equals(messageSend
																						.getEnclosingOperand())));

																		// check link guard from operand to guard
																		JavaSDM.ensure(guard
																				.equals(operand
																						.getGuard()));

																		// check link guard from parentCombo to guard
																		JavaSDM.ensure(!(guard
																				.equals(parentCombo
																						.getGuard())));

																		// check link guard from parentOperand to guard
																		JavaSDM.ensure(!(guard
																				.equals(parentOperand
																						.getGuard())));

																		// check link lifeline from line to interaction
																		JavaSDM.ensure(interaction
																				.equals(line
																						.getInteraction()));

																		// check link message from message to interaction
																		JavaSDM.ensure(interaction
																				.equals(message
																						.getInteraction()));

																		// check link message from messageReceive to message
																		JavaSDM.ensure(message
																				.equals(messageReceive
																						.getMessage()));

																		// check link message from messageSend to message
																		JavaSDM.ensure(message
																				.equals(messageSend
																						.getMessage()));

																		// check link receiveEvent from message to messageReceive
																		JavaSDM.ensure(messageReceive
																				.equals(message
																						.getReceiveEvent()));

																		// check link receiveEvent from message to messageSend
																		JavaSDM.ensure(!(messageSend
																				.equals(message
																						.getReceiveEvent())));

																		// check link sendEvent from message to messageSend
																		JavaSDM.ensure(messageSend
																				.equals(message
																						.getSendEvent()));

																		// check link sendEvent from message to messageReceive
																		JavaSDM.ensure(!(messageReceive
																				.equals(message
																						.getSendEvent())));

																		// check link operand from operand to combo
																		JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						operand,
																						CombinedFragment.class,
																						"$eContainer")
																				.contains(combo)));

																		// check link specification from spec to guard
																		JavaSDM.ensure(guard
																				.equals(spec
																						.eContainer()));

																		// check link src from _edge_interaction to message
																		JavaSDM.ensure(message
																				.equals(_edge_interaction
																						.getSrc()));

																		// check link src from _edge_message to interaction
																		JavaSDM.ensure(interaction
																				.equals(_edge_message
																						.getSrc()));

																		// check link trg from _edge_interaction to interaction
																		JavaSDM.ensure(interaction
																				.equals(_edge_interaction
																						.getTrg()));

																		// check link trg from _edge_message to message
																		JavaSDM.ensure(message
																				.equals(_edge_message
																						.getTrg()));

																		// check link covered from combo to sysLine
																		JavaSDM.ensure(combo
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link covered from messageSend to sysLine
																		JavaSDM.ensure(messageSend
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link covered from line to operand
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						operand));

																		// check link covered from operand to sysLine
																		JavaSDM.ensure(operand
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link covered from line to parentCombo
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						parentCombo));

																		// check link covered from parentCombo to sysLine
																		JavaSDM.ensure(parentCombo
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link covered from line to parentOperand
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						parentOperand));

																		// check link covered from parentOperand to sysLine
																		JavaSDM.ensure(parentOperand
																				.getCovered()
																				.contains(
																						sysLine));

																		// create object match
																		match = TGGRuntimeFactory.eINSTANCE
																				.createMatch();

																		// assign attribute match
																		match.setRuleName(__eClass
																				.getName());
																		// statement node 'bookkeeping with generic isAppropriate method'
																		fujaba__Success = this
																				.isAppropriate_BWD(
																						match,
																						sysLine,
																						messageSend,
																						combo,
																						operand,
																						parentOperand,
																						parentCombo,
																						messageReceive,
																						line,
																						guard,
																						spec,
																						message,
																						interaction);
																		if (fujaba__Success) {
																			// statement node 'Ensure that the correct types of elements are matched'
																			fujaba__Success = this
																					.checkTypes_BWD(match);
																			if (fujaba__Success) {
																				// story node 'Add match to rule result'
																				try {
																					fujaba__Success = false;

																					// check object __performOperation is really bound
																					JavaSDM.ensure(__performOperation != null);
																					// check object __result is really bound
																					JavaSDM.ensure(__result != null);
																					// check object match is really bound
																					JavaSDM.ensure(match != null);

																					// create link
																					org.moflon.util.eMoflonEMFUtil
																							.addOppositeReference(
																									match,
																									__performOperation,
																									"isApplicableOperation");

																					// create link
																					__result.getContents()
																							.add(match);

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}

																			} else {

																			}

																		} else {

																		}
																		fujaba__Success = true;
																	} catch (JavaSDMException fujaba__InternalException) {
																		fujaba__Success = false;
																	}

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_274(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_383857 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_575904 = null;
		Interaction __DEC_messageSend_enclosingInteraction_279348 = null;
		Interaction __DEC_operand_enclosingInteraction_732091 = null;
		InteractionOperand __DEC_combo_fragment_304522 = null;
		InteractionOperand __DEC_messageReceive_fragment_570898 = null;
		InteractionOperand __DEC_messageSend_fragment_225795 = null;
		InteractionOperand __DEC_operand_fragment_740314 = null;
		CombinedFragment __DEC_operand_operand_139550 = null;
		Constraint __DEC_spec_specification_181562 = null;
		InteractionOperand __DEC_guard_guard_598144 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_686748 = null;
		Message __DEC_messageReceive_receiveEvent_686748 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_212851 = null;
		Message __DEC_messageSend_receiveEvent_212851 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_38129 = null;
		Message __DEC_messageReceive_sendEvent_38129 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_219708 = null;
		Message __DEC_messageSend_sendEvent_219708 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_940457 = null;
		MessageEnd __DEC_message_message_940457 = null;
		Match match = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterMessageSendToSysLine = null;
		Lifeline sysLine = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// check link trg from _edge_message to message
			JavaSDM.ensure(message.equals(_edge_message.getTrg()));

			// iterate to-many link covered from messageSend to sysLine
			fujaba__Success = false;

			fujaba__IterMessageSendToSysLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterMessageSendToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link covered from operand to line
									fujaba__Success = false;

									fujaba__IterOperandToLine = new ArrayList(
											operand.getCovered()).iterator();

									while (fujaba__IterOperandToLine.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterOperandToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// bind object
											interaction = line.getInteraction();

											// check object interaction is really bound
											JavaSDM.ensure(interaction != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// iterate to-many link covered from sysLine to parentCombo
											fujaba__Success = false;

											fujaba__IterSysLineToParentCombo = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentCombo
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentCombo
															.next();

													// ensure correct type and really bound of object parentCombo
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentCombo = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentCombo and operand 
													JavaSDM.ensure(!parentCombo
															.equals(operand));

													// check link covered from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// iterate to-many link covered from sysLine to parentOperand
													fujaba__Success = false;

													fujaba__IterSysLineToParentOperand = new ArrayList(
															sysLine.getCoveredBy())
															.iterator();

													while (fujaba__IterSysLineToParentOperand
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterSysLineToParentOperand
																	.next();

															// ensure correct type and really bound of object parentOperand
															JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
															parentOperand = (InteractionOperand) _TmpObject;
															// check isomorphic binding between objects parentOperand and operand 
															JavaSDM.ensure(!parentOperand
																	.equals(operand));

															// check isomorphic binding between objects parentOperand and parentCombo 
															JavaSDM.ensure(!parentOperand
																	.equals(parentCombo));

															// check link fragment from messageReceive to parentOperand
															JavaSDM.ensure(parentOperand
																	.equals(messageReceive
																			.getEnclosingOperand()));

															// check link covered from line to parentOperand
															JavaSDM.ensure(line
																	.getCoveredBy()
																	.contains(
																			parentOperand));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_383857 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_383857 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_383857 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_383857 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_383857
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_575904 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_575904 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_575904 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_575904 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_575904
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_279348 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_279348 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_279348 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_279348 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_279348
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_732091 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_732091 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_732091 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_732091 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_732091
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_304522 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_304522 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_304522 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_304522 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_304522
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_304522 and parentCombo 
																	JavaSDM.ensure(!__DEC_combo_fragment_304522
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_combo_fragment_304522 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_304522
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_570898 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_570898 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_570898 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_570898 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_570898
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_570898 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_570898
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_570898 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_570898
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_225795 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_225795 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_225795 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_225795 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_225795
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_225795 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_225795
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_225795 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_225795
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_740314 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_740314 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_740314 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_740314 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_740314
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_740314 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_fragment_740314
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_operand_fragment_740314 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_740314
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_139550 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_139550 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_139550 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_139550
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_139550 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_139550
																			.equals(combo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_181562 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_181562 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_181562 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_181562
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_181562 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_181562
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_598144 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_598144 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_598144 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_598144
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_598144 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_598144
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_598144 and parentCombo 
																	JavaSDM.ensure(!__DEC_guard_guard_598144
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_guard_guard_598144 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_598144
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_686748
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_686748 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_686748
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_686748 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_686748
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_686748 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_686748 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_686748 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_686748
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_212851
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_212851 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_212851
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_212851 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_212851
																					.next();

																			// check object __DEC_messageSend_receiveEvent_212851 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_212851 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_212851 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_212851
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_38129
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_38129 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_38129
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_38129 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_38129
																					.next();

																			// check object __DEC_messageReceive_sendEvent_38129 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_38129 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_38129 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_38129
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_219708
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_219708 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_219708
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_219708 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_219708
																					.next();

																			// check object __DEC_messageSend_sendEvent_219708 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_219708 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_219708 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_219708
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_940457
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_940457 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_940457
																					.hasNext()) {
																		try {
																			__DEC_message_message_940457 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_940457
																					.next();

																			// check object __DEC_message_message_940457 is really bound
																			JavaSDM.ensure(__DEC_message_message_940457 != null);
																			// check isomorphic binding between objects __DEC_message_message_940457 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_940457
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_940457 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_940457
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_message is really bound
																JavaSDM.ensure(_edge_message != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentCombo and operand 
																JavaSDM.ensure(!parentCombo
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and parentCombo 
																JavaSDM.ensure(!parentOperand
																		.equals(parentCombo));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentCombo to guard
																JavaSDM.ensure(!(guard
																		.equals(parentCombo
																				.getGuard())));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(_edge_message
																				.getSrc()));

																// check link trg from _edge_message to message
																JavaSDM.ensure(message
																		.equals(_edge_message
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_275(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_117490 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_984676 = null;
		Interaction __DEC_messageSend_enclosingInteraction_920811 = null;
		Interaction __DEC_operand_enclosingInteraction_2040 = null;
		InteractionOperand __DEC_combo_fragment_11018 = null;
		InteractionOperand __DEC_messageReceive_fragment_121107 = null;
		InteractionOperand __DEC_messageSend_fragment_197177 = null;
		InteractionOperand __DEC_operand_fragment_61789 = null;
		CombinedFragment __DEC_operand_operand_656616 = null;
		Constraint __DEC_spec_specification_55784 = null;
		InteractionOperand __DEC_guard_guard_280167 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_524874 = null;
		Message __DEC_messageReceive_receiveEvent_524874 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_94791 = null;
		Message __DEC_messageSend_receiveEvent_94791 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_730283 = null;
		Message __DEC_messageReceive_sendEvent_730283 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_844625 = null;
		Message __DEC_messageSend_sendEvent_844625 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_55542 = null;
		MessageEnd __DEC_message_message_55542 = null;
		Match match = null;
		Iterator fujaba__IterParentComboToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		InteractionOperand parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterMessageSendToSysLine = null;
		Lifeline sysLine = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link src from _edge_message to messageReceive
			JavaSDM.ensure(messageReceive.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageSend to sysLine
			fujaba__Success = false;

			fujaba__IterMessageSendToSysLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterMessageSendToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link covered from sysLine to parentOperand
									fujaba__Success = false;

									fujaba__IterSysLineToParentOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentOperand
													.next();

											// ensure correct type and really bound of object parentOperand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentOperand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// iterate to-many link covered from sysLine to parentCombo
											fujaba__Success = false;

											fujaba__IterSysLineToParentCombo = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentCombo
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentCombo
															.next();

													// ensure correct type and really bound of object parentCombo
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentCombo = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentCombo and operand 
													JavaSDM.ensure(!parentCombo
															.equals(operand));

													// check isomorphic binding between objects parentOperand and parentCombo 
													JavaSDM.ensure(!parentOperand
															.equals(parentCombo));

													// iterate to-many link covered from parentCombo to line
													fujaba__Success = false;

													fujaba__IterParentComboToLine = new ArrayList(
															parentCombo
																	.getCovered())
															.iterator();

													while (fujaba__IterParentComboToLine
															.hasNext()) {
														try {
															line = (Lifeline) fujaba__IterParentComboToLine
																	.next();

															// check object line is really bound
															JavaSDM.ensure(line != null);
															// check isomorphic binding between objects sysLine and line 
															JavaSDM.ensure(!sysLine
																	.equals(line));

															// check link lifeline from line to interaction
															JavaSDM.ensure(interaction
																	.equals(line
																			.getInteraction()));

															// check link covered from line to operand
															JavaSDM.ensure(line
																	.getCoveredBy()
																	.contains(
																			operand));

															// check link covered from line to parentOperand
															JavaSDM.ensure(line
																	.getCoveredBy()
																	.contains(
																			parentOperand));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_117490 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_117490 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_117490 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_117490 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_117490
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_984676 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_984676 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_984676 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_984676 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_984676
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_920811 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_920811 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_920811 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_920811 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_920811
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_2040 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_2040 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_2040 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_2040 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_2040
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_11018 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_11018 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_11018 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_11018 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_11018
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_11018 and parentCombo 
																	JavaSDM.ensure(!__DEC_combo_fragment_11018
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_combo_fragment_11018 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_11018
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_121107 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_121107 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_121107 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_121107 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_121107
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_121107 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_121107
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_121107 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_121107
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_197177 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_197177 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_197177 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_197177 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_197177
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_197177 and parentCombo 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_197177
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_197177 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_197177
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_61789 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_61789 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_61789 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_61789 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_61789
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_61789 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_fragment_61789
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_operand_fragment_61789 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_61789
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_656616 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_656616 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_656616 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_656616
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_656616 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_656616
																			.equals(combo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_55784 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_55784 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_55784 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_55784
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_55784 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_55784
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_280167 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_280167 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_280167 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_280167
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_280167 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_280167
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_280167 and parentCombo 
																	JavaSDM.ensure(!__DEC_guard_guard_280167
																			.equals(parentCombo));

																	// check isomorphic binding between objects __DEC_guard_guard_280167 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_280167
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_524874
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_524874 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_524874
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_524874 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_524874
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_524874 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_524874 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_524874 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_524874
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_94791
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_94791 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_94791
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_94791 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_94791
																					.next();

																			// check object __DEC_messageSend_receiveEvent_94791 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_94791 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_94791 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_94791
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_730283
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_730283 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_730283
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_730283 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_730283
																					.next();

																			// check object __DEC_messageReceive_sendEvent_730283 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_730283 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_730283 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_730283
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_844625
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_844625 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_844625
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_844625 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_844625
																					.next();

																			// check object __DEC_messageSend_sendEvent_844625 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_844625 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_844625 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_844625
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_55542
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_55542 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_55542
																					.hasNext()) {
																		try {
																			__DEC_message_message_55542 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_55542
																					.next();

																			// check object __DEC_message_message_55542 is really bound
																			JavaSDM.ensure(__DEC_message_message_55542 != null);
																			// check isomorphic binding between objects __DEC_message_message_55542 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_55542
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_55542 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_55542
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_message is really bound
																JavaSDM.ensure(_edge_message != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentCombo and operand 
																JavaSDM.ensure(!parentCombo
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check isomorphic binding between objects parentOperand and parentCombo 
																JavaSDM.ensure(!parentOperand
																		.equals(parentCombo));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentCombo
																JavaSDM.ensure(!(parentCombo
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentCombo to guard
																JavaSDM.ensure(!(guard
																		.equals(parentCombo
																				.getGuard())));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(_edge_message
																				.getSrc()));

																// check link trg from _edge_message to message
																JavaSDM.ensure(message
																		.equals(_edge_message
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RuleResult checkAttributes_FWD(TripleMatch tripleMatch) {

		// [user code injected with eMoflon]

		// TODO: implement this method here but do not remove the injection marker 
		throw new UnsupportedOperationException();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RuleResult checkAttributes_BWD(TripleMatch tripleMatch) {

		// [user code injected with eMoflon]

		// TODO: implement this method here but do not remove the injection marker 
		throw new UnsupportedOperationException();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match, NamedFlow flow,
			NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase, Actor actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __useCase_flows_flow = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_FWD(match, flow, step,
					alt, altFlow, useCase, actor));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __alt_ref_altFlow
				__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __flow_steps_step
				__flow_steps_step = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_stepAlternative_alt
				__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_actor_actor
				__step_actor_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __step_stepAlternative_alt
				__step_stepAlternative_alt.setName("stepAlternative");
				// assign attribute __alt_ref_altFlow
				__alt_ref_altFlow.setName("ref");
				// assign attribute __flow_steps_step
				__flow_steps_step.setName("steps");
				// assign attribute __step_actor_actor
				__step_actor_actor.setName("actor");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__alt_ref_altFlow, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__flow_steps_step, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_stepAlternative_alt, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						step, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						altFlow, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_actor_actor, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match, alt,
						"toBeTranslatedNodes");

				// create link
				__flow_steps_step.setSrc(flow);

				// create link
				__flow_steps_step.setTrg(step);

				// create link
				__step_actor_actor.setSrc(step);

				// create link
				__step_stepAlternative_alt.setSrc(step);

				// create link
				__step_stepAlternative_alt.setTrg(alt);

				// create link
				__alt_ref_altFlow.setSrc(alt);

				// create link
				__alt_ref_altFlow.setTrg(altFlow);

				// create link
				__step_actor_actor.setTrg(actor);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __useCase_flows_flow
				__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __useCase_flows_flow
				__useCase_flows_flow.setName("flows");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						flow, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						useCase, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__useCase_flows_flow, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						actor, "contextNodes");

				// create link
				__useCase_flows_flow.setTrg(flow);

				// create link
				__useCase_flows_flow.setSrc(useCase);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_FWD(match, flow, step, alt, altFlow,
					useCase, actor);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_FWD(Match match, NamedFlow flow,
			NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase, Actor actor) {
		match.registerObject("flow", flow);
		match.registerObject("step", step);
		match.registerObject("alt", alt);
		match.registerObject("altFlow", altFlow);
		match.registerObject("useCase", useCase);
		match.registerObject("actor", actor);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_FWD(Match match, NamedFlow flow,
			NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase, Actor actor) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals

		// Create attribute variables

		// Create explicit parameters

		// Create unbound variables

		// Create constraints

		// Solve CSP
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			NamedFlow flow, InteractionOperand parentOperand,
			FlowToInteractionFragment flowToParentOperand, Lifeline line,
			CombinedFragment parentCombo, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			Interaction interaction, Actor actor, ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", true, csp);
		var_altFlow_name.setValue(altFlow.getName());
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", true, csp);
		var_alt_condition.setValue(alt.getCondition());
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", true, csp);
		var_step_name.setValue(step.getName());
		var_step_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", csp);
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", csp);
		var_spec_value.setType("");
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", csp);
		var_combo_interactionOperator.setType("EObject");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", csp);
		var_message_name.setType("");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		EqInterOperKind eqInterOperKind = new EqInterOperKind();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eqInterOperKind);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("parentOperand", parentOperand);
		isApplicableMatch.registerObject("flowToParentOperand",
				flowToParentOperand);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("parentCombo", parentCombo);
		isApplicableMatch.registerObject("step", step);
		isApplicableMatch.registerObject("alt", alt);
		isApplicableMatch.registerObject("altFlow", altFlow);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_FWD(PerformRuleResult ruleresult, EObject flow,
			EObject parentOperand, EObject flowToParentOperand,
			EObject messageSend, EObject messageReceive, EObject line,
			EObject combo, EObject parentCombo, EObject step, EObject alt,
			EObject stepToCombo, EObject operand,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand, EObject useCase,
			EObject useCaseToInteraction, EObject message, EObject interaction,
			EObject stepToMessage, EObject actor, EObject actorToLine) {
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("parentOperand", parentOperand);
		ruleresult.registerObject("flowToParentOperand", flowToParentOperand);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("parentCombo", parentCombo);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_BWD(Match match,
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			CombinedFragment combo, CombinedFragment parentCombo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, Message message, Interaction interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __line_coveredBy_parentCombo = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __combo_enclosingOperand_parentOperand = null;
		EMoflonEdge __combo_operand_operand = null;
		EMoflonEdge __messageSend_enclosingOperand_parentOperand = null;
		EMoflonEdge __messageReceive_enclosingOperand_parentOperand = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __parentOperand_covered_line = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __parentCombo_covered_line = null;
		EMoflonEdge __parentOperand_fragment_messageReceive = null;
		EMoflonEdge __line_coveredBy_parentOperand = null;
		EMoflonEdge __parentOperand_fragment_combo = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __parentOperand_fragment_messageSend = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __parentCombo_operand_parentOperand = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __line_interaction_interaction = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);
			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_BWD(match, parentOperand,
					messageSend, messageReceive, line, combo, parentCombo,
					operand, guard, spec, message, interaction));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object parentCombo is really bound
				JavaSDM.ensure(parentCombo != null);
				// check object parentOperand is really bound
				JavaSDM.ensure(parentOperand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check isomorphic binding between objects parentCombo and combo 
				JavaSDM.ensure(!parentCombo.equals(combo));

				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check isomorphic binding between objects parentOperand and operand 
				JavaSDM.ensure(!parentOperand.equals(operand));

				// create object __line_coveredBy_parentCombo
				__line_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __guard_specification_spec
				__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_enclosingOperand_parentOperand
				__combo_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_operand_operand
				__combo_operand_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_enclosingOperand_parentOperand
				__messageSend_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_enclosingOperand_parentOperand
				__messageReceive_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_guard_guard
				__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_message_message
				__interaction_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_sendEvent_messageSend
				__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_message_message
				__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_covered_line
				__parentOperand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_covered_line
				__operand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_interaction_interaction
				__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentCombo_covered_line
				__parentCombo_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_fragment_messageReceive
				__parentOperand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_parentOperand
				__line_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_fragment_combo
				__parentOperand_fragment_combo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_message_message
				__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_fragment_messageSend
				__parentOperand_fragment_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_operand
				__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __parentOperand_fragment_messageSend
				__parentOperand_fragment_messageSend.setName("fragment");
				// assign attribute __messageSend_enclosingOperand_parentOperand
				__messageSend_enclosingOperand_parentOperand
						.setName("enclosingOperand");
				// assign attribute __parentOperand_fragment_messageReceive
				__parentOperand_fragment_messageReceive.setName("fragment");
				// assign attribute __messageReceive_enclosingOperand_parentOperand
				__messageReceive_enclosingOperand_parentOperand
						.setName("enclosingOperand");
				// assign attribute __line_coveredBy_parentOperand
				__line_coveredBy_parentOperand.setName("coveredBy");
				// assign attribute __parentOperand_covered_line
				__parentOperand_covered_line.setName("covered");
				// assign attribute __parentOperand_fragment_combo
				__parentOperand_fragment_combo.setName("fragment");
				// assign attribute __combo_enclosingOperand_parentOperand
				__combo_enclosingOperand_parentOperand
						.setName("enclosingOperand");
				// assign attribute __line_coveredBy_parentCombo
				__line_coveredBy_parentCombo.setName("coveredBy");
				// assign attribute __parentCombo_covered_line
				__parentCombo_covered_line.setName("covered");
				// assign attribute __combo_operand_operand
				__combo_operand_operand.setName("operand");
				// assign attribute __line_coveredBy_operand
				__line_coveredBy_operand.setName("coveredBy");
				// assign attribute __operand_covered_line
				__operand_covered_line.setName("covered");
				// assign attribute __operand_guard_guard
				__operand_guard_guard.setName("guard");
				// assign attribute __guard_specification_spec
				__guard_specification_spec.setName("specification");
				// assign attribute __message_sendEvent_messageSend
				__message_sendEvent_messageSend.setName("sendEvent");
				// assign attribute __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive.setName("receiveEvent");
				// assign attribute __message_interaction_interaction
				__message_interaction_interaction.setName("interaction");
				// assign attribute __interaction_message_message
				__interaction_message_message.setName("message");
				// assign attribute __messageSend_message_message
				__messageSend_message_message.setName("message");
				// assign attribute __messageReceive_message_message
				__messageReceive_message_message.setName("message");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_parentCombo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__guard_specification_spec, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_enclosingOperand_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageReceive, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageSend, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_operand_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						operand, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_enclosingOperand_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageReceive_enclosingOperand_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						guard, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_guard_guard, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_sendEvent_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil
						.addOppositeReference(match,
								__messageReceive_message_message,
								"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_receiveEvent_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_interaction_interaction,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						combo, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentCombo_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						message, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_fragment_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_parentOperand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_fragment_combo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_fragment_messageSend,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						spec, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_operand, "toBeTranslatedEdges");

				// create link
				__parentOperand_covered_line.setSrc(parentOperand);

				// create link
				__parentOperand_fragment_messageReceive.setSrc(parentOperand);

				// create link
				__parentOperand_fragment_messageSend.setSrc(parentOperand);

				// create link
				__combo_enclosingOperand_parentOperand.setTrg(parentOperand);

				// create link
				__messageSend_enclosingOperand_parentOperand
						.setTrg(parentOperand);

				// create link
				__parentOperand_fragment_combo.setSrc(parentOperand);

				// create link
				__line_coveredBy_parentOperand.setTrg(parentOperand);

				// create link
				__messageReceive_enclosingOperand_parentOperand
						.setTrg(parentOperand);

				// create link
				__messageSend_message_message.setSrc(messageSend);

				// create link
				__message_sendEvent_messageSend.setTrg(messageSend);

				// create link
				__messageSend_enclosingOperand_parentOperand
						.setSrc(messageSend);

				// create link
				__parentOperand_fragment_messageSend.setTrg(messageSend);

				// create link
				__parentOperand_fragment_messageReceive.setTrg(messageReceive);

				// create link
				__message_receiveEvent_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_message_message.setSrc(messageReceive);

				// create link
				__messageReceive_enclosingOperand_parentOperand
						.setSrc(messageReceive);

				// create link
				__line_coveredBy_parentCombo.setSrc(line);

				// create link
				__line_coveredBy_parentOperand.setSrc(line);

				// create link
				__parentCombo_covered_line.setTrg(line);

				// create link
				__parentOperand_covered_line.setTrg(line);

				// create link
				__line_coveredBy_operand.setSrc(line);

				// create link
				__operand_covered_line.setTrg(line);

				// create link
				__combo_enclosingOperand_parentOperand.setSrc(combo);

				// create link
				__combo_operand_operand.setSrc(combo);

				// create link
				__parentOperand_fragment_combo.setTrg(combo);

				// create link
				__parentCombo_covered_line.setSrc(parentCombo);

				// create link
				__line_coveredBy_parentCombo.setTrg(parentCombo);

				// create link
				__operand_guard_guard.setSrc(operand);

				// create link
				__operand_covered_line.setSrc(operand);

				// create link
				__line_coveredBy_operand.setTrg(operand);

				// create link
				__combo_operand_operand.setTrg(operand);

				// create link
				__guard_specification_spec.setSrc(guard);

				// create link
				__operand_guard_guard.setTrg(guard);

				// create link
				__guard_specification_spec.setTrg(spec);

				// create link
				__message_sendEvent_messageSend.setSrc(message);

				// create link
				__messageReceive_message_message.setTrg(message);

				// create link
				__message_receiveEvent_messageReceive.setSrc(message);

				// create link
				__message_interaction_interaction.setSrc(message);

				// create link
				__interaction_message_message.setTrg(message);

				// create link
				__messageSend_message_message.setTrg(message);

				// create link
				__interaction_message_message.setSrc(interaction);

				// create link
				__message_interaction_interaction.setTrg(interaction);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object parentCombo is really bound
				JavaSDM.ensure(parentCombo != null);
				// check object parentOperand is really bound
				JavaSDM.ensure(parentOperand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check isomorphic binding between objects parentCombo and combo 
				JavaSDM.ensure(!parentCombo.equals(combo));

				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check isomorphic binding between objects parentOperand and operand 
				JavaSDM.ensure(!parentOperand.equals(operand));

				// create object __parentCombo_operand_parentOperand
				__parentCombo_operand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_lifeline_line
				__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_interaction_interaction
				__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __parentCombo_operand_parentOperand
				__parentCombo_operand_parentOperand.setName("operand");
				// assign attribute __line_interaction_interaction
				__line_interaction_interaction.setName("interaction");
				// assign attribute __interaction_lifeline_line
				__interaction_lifeline_line.setName("lifeline");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentCombo_operand_parentOperand, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						interaction, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_lifeline_line, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_interaction_interaction, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						parentOperand, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						line, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						parentCombo, "contextNodes");

				// create link
				__parentCombo_operand_parentOperand.setTrg(parentOperand);

				// create link
				__line_interaction_interaction.setSrc(line);

				// create link
				__interaction_lifeline_line.setTrg(line);

				// create link
				__parentCombo_operand_parentOperand.setSrc(parentCombo);

				// create link
				__interaction_lifeline_line.setSrc(interaction);

				// create link
				__line_interaction_interaction.setTrg(interaction);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_BWD(match, parentOperand, messageSend,
					messageReceive, line, combo, parentCombo, operand, guard,
					spec, message, interaction);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_BWD(Match match,
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			CombinedFragment combo, CombinedFragment parentCombo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, Message message, Interaction interaction) {
		match.registerObject("parentOperand", parentOperand);
		match.registerObject("messageSend", messageSend);
		match.registerObject("messageReceive", messageReceive);
		match.registerObject("line", line);
		match.registerObject("combo", combo);
		match.registerObject("parentCombo", parentCombo);
		match.registerObject("operand", operand);
		match.registerObject("guard", guard);
		match.registerObject("spec", spec);
		match.registerObject("message", message);
		match.registerObject("interaction", interaction);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_BWD(Match match,
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			CombinedFragment combo, CombinedFragment parentCombo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, Message message, Interaction interaction) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", true, csp);
		var_combo_interactionOperator.setValue(combo.getInteractionOperator());
		var_combo_interactionOperator.setType("EObject");

		// Create explicit parameters

		// Create unbound variables

		// Create constraints
		EqInterOperKind eqInterOperKind = new EqInterOperKind();

		csp.getConstraints().add(eqInterOperKind);

		// Solve CSP
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			NamedFlow flow, InteractionOperand parentOperand,
			FlowToInteractionFragment flowToParentOperand,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			CombinedFragment combo, CombinedFragment parentCombo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Message message,
			Interaction interaction, Actor actor, ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals

		// Create attribute variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", true, csp);
		var_guard_name.setValue(guard.getName());
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", true, csp);
		var_spec_value.setValue(spec.getValue());
		var_spec_value.setType("");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", true, csp);
		var_message_name.setValue(message.getName());
		var_message_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", csp);
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", csp);
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", csp);
		var_step_name.setType("");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("parentOperand", parentOperand);
		isApplicableMatch.registerObject("flowToParentOperand",
				flowToParentOperand);
		isApplicableMatch.registerObject("messageSend", messageSend);
		isApplicableMatch.registerObject("messageReceive", messageReceive);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("combo", combo);
		isApplicableMatch.registerObject("parentCombo", parentCombo);
		isApplicableMatch.registerObject("operand", operand);
		isApplicableMatch.registerObject("guard", guard);
		isApplicableMatch.registerObject("spec", spec);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("message", message);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_BWD(PerformRuleResult ruleresult, EObject flow,
			EObject parentOperand, EObject flowToParentOperand,
			EObject messageSend, EObject messageReceive, EObject line,
			EObject combo, EObject parentCombo, EObject step, EObject alt,
			EObject stepToCombo, EObject operand,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand, EObject useCase,
			EObject useCaseToInteraction, EObject message, EObject interaction,
			EObject stepToMessage, EObject actor, EObject actorToLine) {
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("parentOperand", parentOperand);
		ruleresult.registerObject("flowToParentOperand", flowToParentOperand);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("parentCombo", parentCombo);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_53(
			EMoflonEdge _edge_fragment) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_620173 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_907300 = null;
		Interaction __DEC_messageSend_enclosingInteraction_252360 = null;
		Interaction __DEC_operand_enclosingInteraction_326944 = null;
		InteractionOperand __DEC_combo_fragment_452497 = null;
		InteractionOperand __DEC_messageReceive_fragment_615826 = null;
		InteractionOperand __DEC_messageSend_fragment_225304 = null;
		InteractionOperand __DEC_operand_fragment_987526 = null;
		Constraint __DEC_spec_specification_497960 = null;
		InteractionOperand __DEC_guard_guard_570559 = null;
		CombinedFragment __DEC_operand_operand_620835 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_272920 = null;
		Message __DEC_messageReceive_receiveEvent_272920 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_810482 = null;
		Message __DEC_messageSend_receiveEvent_810482 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_601171 = null;
		Message __DEC_messageReceive_sendEvent_601171 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_519365 = null;
		Message __DEC_messageSend_sendEvent_519365 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_532458 = null;
		MessageEnd __DEC_message_message_532458 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_fragment is really bound
			JavaSDM.ensure(_edge_fragment != null);
			// bind object
			_TmpObject = _edge_fragment.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			_TmpObject = _edge_fragment.getTrg();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check link fragment from messageSend to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageSend
					.getEnclosingOperand()));

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// iterate to-many link fragment from parentOperand to combo
			fujaba__Success = false;

			fujaba__IterParentOperandToCombo = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_620173 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_620173 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_620173 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_620173 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_620173
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_907300 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_907300 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_907300 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_907300 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_907300
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_252360 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_252360 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_252360 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_252360 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_252360
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_326944 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_326944 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_326944 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_326944 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_326944
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_452497 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_452497 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_452497 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_452497 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_452497
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_452497 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_452497
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_615826 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_615826 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_615826 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_615826 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_615826
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_615826 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_615826
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_225304 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_225304 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_225304 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_225304 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_225304
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_225304 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_225304
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_987526 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_987526 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_987526 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_987526 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_987526
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_987526 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_987526
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_497960 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_497960 is really bound
													JavaSDM.ensure(__DEC_spec_specification_497960 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_497960
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_497960 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_497960
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_570559 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_570559 is really bound
													JavaSDM.ensure(__DEC_guard_guard_570559 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_570559
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_570559 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_570559
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_570559 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_570559
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_620835 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_620835 is really bound
													JavaSDM.ensure(__DEC_operand_operand_620835 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_620835
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_620835 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_620835
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_620835 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_620835
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_272920
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_272920 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_272920
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_272920 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_272920
																	.next();

															// check object __DEC_messageReceive_receiveEvent_272920 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_272920 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_272920 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_272920
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_810482
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_810482 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_810482
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_810482 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_810482
																	.next();

															// check object __DEC_messageSend_receiveEvent_810482 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_810482 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_810482 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_810482
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_601171
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_601171 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_601171
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_601171 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_601171
																	.next();

															// check object __DEC_messageReceive_sendEvent_601171 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_601171 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_601171 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_601171
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_519365
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_519365 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_519365
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_519365 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_519365
																	.next();

															// check object __DEC_messageSend_sendEvent_519365 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_519365 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_519365 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_519365
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_532458
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_532458 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_532458
																	.hasNext()) {
														try {
															__DEC_message_message_532458 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_532458
																	.next();

															// check object __DEC_message_message_532458 is really bound
															JavaSDM.ensure(__DEC_message_message_532458 != null);
															// check isomorphic binding between objects __DEC_message_message_532458 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_532458
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_532458 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_532458
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_fragment is really bound
												JavaSDM.ensure(_edge_fragment != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_fragment to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_fragment
																.getSrc()));

												// check link trg from _edge_fragment to messageSend
												JavaSDM.ensure(messageSend
														.equals(_edge_fragment
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_54(
			EMoflonEdge _edge_enclosingOperand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_20032 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_645214 = null;
		Interaction __DEC_messageSend_enclosingInteraction_439645 = null;
		Interaction __DEC_operand_enclosingInteraction_321446 = null;
		InteractionOperand __DEC_combo_fragment_398961 = null;
		InteractionOperand __DEC_messageReceive_fragment_58865 = null;
		InteractionOperand __DEC_messageSend_fragment_68456 = null;
		InteractionOperand __DEC_operand_fragment_360147 = null;
		Constraint __DEC_spec_specification_637702 = null;
		InteractionOperand __DEC_guard_guard_218628 = null;
		CombinedFragment __DEC_operand_operand_160013 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_606512 = null;
		Message __DEC_messageReceive_receiveEvent_606512 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_458581 = null;
		Message __DEC_messageSend_receiveEvent_458581 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_70220 = null;
		Message __DEC_messageReceive_sendEvent_70220 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_846278 = null;
		Message __DEC_messageSend_sendEvent_846278 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_70874 = null;
		MessageEnd __DEC_message_message_70874 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_fragment = null;
		EMoflonEdge _edge_fragment = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		InteractionOperand parentOperand = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_enclosingOperand is really bound
			JavaSDM.ensure(_edge_enclosingOperand != null);
			// bind object
			_TmpObject = _edge_enclosingOperand.getSrc();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// bind object
			_TmpObject = _edge_enclosingOperand.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// check link fragment from messageSend to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageSend
					.getEnclosingOperand()));

			// iterate to-many link fragment from parentOperand to combo
			fujaba__Success = false;

			fujaba__IterParentOperandToCombo = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// iterate to-many link src from parentOperand to _edge_fragment
											fujaba__Success = false;

											fujaba__IterParentOperandTo_edge_fragment = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	parentOperand,
																	EMoflonEdge.class,
																	"src"))
													.iterator();

											while (fujaba__IterParentOperandTo_edge_fragment
													.hasNext()) {
												try {
													_edge_fragment = (EMoflonEdge) fujaba__IterParentOperandTo_edge_fragment
															.next();

													// check object _edge_fragment is really bound
													JavaSDM.ensure(_edge_fragment != null);
													// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
													JavaSDM.ensure(!_edge_fragment
															.equals(_edge_enclosingOperand));

													// check link trg from _edge_fragment to messageSend
													JavaSDM.ensure(messageSend
															.equals(_edge_fragment
																	.getTrg()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_20032 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_20032 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_20032 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_20032 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_20032
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_645214 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_645214 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_645214 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_645214 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_645214
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_439645 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_439645 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_439645 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_439645 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_439645
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_321446 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_321446 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_321446 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_321446 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_321446
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_398961 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_398961 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_398961 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_398961 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_398961
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_398961 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_398961
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_58865 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_58865 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_58865 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_58865 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_58865
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_58865 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_58865
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_68456 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_68456 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_68456 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_68456 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_68456
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_68456 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_68456
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_360147 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_360147 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_360147 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_360147 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_360147
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_360147 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_360147
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_637702 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_637702 is really bound
															JavaSDM.ensure(__DEC_spec_specification_637702 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_637702
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_637702 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_637702
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_218628 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_218628 is really bound
															JavaSDM.ensure(__DEC_guard_guard_218628 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_218628
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_218628 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_218628
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_218628 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_218628
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_160013 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_160013 is really bound
															JavaSDM.ensure(__DEC_operand_operand_160013 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_160013
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_160013 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_160013
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_160013 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_160013
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_606512
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_606512 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_606512
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_606512 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_606512
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_606512 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_606512 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_606512 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_606512
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_458581
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_458581 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_458581
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_458581 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_458581
																			.next();

																	// check object __DEC_messageSend_receiveEvent_458581 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_458581 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_458581 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_458581
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_70220
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_70220 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_70220
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_70220 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_70220
																			.next();

																	// check object __DEC_messageReceive_sendEvent_70220 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_70220 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_70220 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_70220
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_846278
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_846278 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_846278
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_846278 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_846278
																			.next();

																	// check object __DEC_messageSend_sendEvent_846278 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_846278 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_846278 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_846278
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_70874
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_70874 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_70874
																			.hasNext()) {
																try {
																	__DEC_message_message_70874 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_70874
																			.next();

																	// check object __DEC_message_message_70874 is really bound
																	JavaSDM.ensure(__DEC_message_message_70874 != null);
																	// check isomorphic binding between objects __DEC_message_message_70874 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_70874
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_70874 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_70874
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_enclosingOperand is really bound
														JavaSDM.ensure(_edge_enclosingOperand != null);
														// check object _edge_fragment is really bound
														JavaSDM.ensure(_edge_fragment != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
														JavaSDM.ensure(!_edge_fragment
																.equals(_edge_enclosingOperand));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_enclosingOperand to messageSend
														JavaSDM.ensure(messageSend
																.equals(_edge_enclosingOperand
																		.getSrc()));

														// check link src from _edge_fragment to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_fragment
																		.getSrc()));

														// check link trg from _edge_enclosingOperand to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_enclosingOperand
																		.getTrg()));

														// check link trg from _edge_fragment to messageSend
														JavaSDM.ensure(messageSend
																.equals(_edge_fragment
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_55(
			EMoflonEdge _edge_fragment) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_271926 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_752841 = null;
		Interaction __DEC_messageSend_enclosingInteraction_208558 = null;
		Interaction __DEC_operand_enclosingInteraction_50589 = null;
		InteractionOperand __DEC_combo_fragment_550423 = null;
		InteractionOperand __DEC_messageReceive_fragment_917851 = null;
		InteractionOperand __DEC_messageSend_fragment_550596 = null;
		InteractionOperand __DEC_operand_fragment_949195 = null;
		Constraint __DEC_spec_specification_924555 = null;
		InteractionOperand __DEC_guard_guard_813390 = null;
		CombinedFragment __DEC_operand_operand_432504 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_5087 = null;
		Message __DEC_messageReceive_receiveEvent_5087 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_69590 = null;
		Message __DEC_messageSend_receiveEvent_69590 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_569421 = null;
		Message __DEC_messageReceive_sendEvent_569421 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_59111 = null;
		Message __DEC_messageSend_sendEvent_59111 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_833828 = null;
		MessageEnd __DEC_message_message_833828 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_fragment is really bound
			JavaSDM.ensure(_edge_fragment != null);
			// bind object
			_TmpObject = _edge_fragment.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			_TmpObject = _edge_fragment.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link fragment from messageReceive to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageReceive
					.getEnclosingOperand()));

			// iterate to-many link fragment from parentOperand to messageSend
			fujaba__Success = false;

			fujaba__IterParentOperandToMessageSend = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToMessageSend.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToMessageSend.next();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;
					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// bind object
					message = messageSend.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from messageReceive to message
					JavaSDM.ensure(message.equals(messageReceive.getMessage()));

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// check link sendEvent from message to messageSend
					JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link fragment from parentOperand to combo
									fujaba__Success = false;

									fujaba__IterParentOperandToCombo = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToCombo
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToCombo
													.next();

											// ensure correct type and really bound of object combo
											JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
											combo = (CombinedFragment) _TmpObject;
											// check isomorphic binding between objects parentCombo and combo 
											JavaSDM.ensure(!parentCombo
													.equals(combo));

											// check link operand from operand to combo
											JavaSDM.ensure(combo.equals(operand
													.eContainer()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_271926 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_271926 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_271926 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_271926 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_271926
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_752841 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_752841 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_752841 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_752841 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_752841
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_208558 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_208558 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_208558 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_208558 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_208558
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_50589 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_50589 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_50589 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_50589 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_50589
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_550423 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_550423 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_550423 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_550423 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_550423
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_550423 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_550423
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_917851 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_917851 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_917851 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_917851 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_917851
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_917851 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_917851
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_550596 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_550596 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_550596 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_550596 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_550596
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_550596 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_550596
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_949195 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_949195 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_949195 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_949195 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_949195
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_949195 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_949195
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_924555 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_924555 is really bound
													JavaSDM.ensure(__DEC_spec_specification_924555 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_924555
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_924555 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_924555
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_813390 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_813390 is really bound
													JavaSDM.ensure(__DEC_guard_guard_813390 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_813390
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_813390 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_813390
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_813390 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_813390
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_432504 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_432504 is really bound
													JavaSDM.ensure(__DEC_operand_operand_432504 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_432504
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_432504 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_432504
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_432504 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_432504
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_5087
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_5087 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_5087
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_5087 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_5087
																	.next();

															// check object __DEC_messageReceive_receiveEvent_5087 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_5087 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_5087 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_5087
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_69590
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_69590 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_69590
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_69590 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_69590
																	.next();

															// check object __DEC_messageSend_receiveEvent_69590 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_69590 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_69590 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_69590
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_569421
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_569421 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_569421
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_569421 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_569421
																	.next();

															// check object __DEC_messageReceive_sendEvent_569421 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_569421 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_569421 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_569421
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_59111
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_59111 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_59111
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_59111 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_59111
																	.next();

															// check object __DEC_messageSend_sendEvent_59111 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_59111 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_59111 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_59111
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_833828
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_833828 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_833828
																	.hasNext()) {
														try {
															__DEC_message_message_833828 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_833828
																	.next();

															// check object __DEC_message_message_833828 is really bound
															JavaSDM.ensure(__DEC_message_message_833828 != null);
															// check isomorphic binding between objects __DEC_message_message_833828 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_833828
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_833828 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_833828
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_fragment is really bound
												JavaSDM.ensure(_edge_fragment != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_fragment to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_fragment
																.getSrc()));

												// check link trg from _edge_fragment to messageReceive
												JavaSDM.ensure(messageReceive
														.equals(_edge_fragment
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_56(
			EMoflonEdge _edge_enclosingOperand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_669955 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_586917 = null;
		Interaction __DEC_messageSend_enclosingInteraction_187042 = null;
		Interaction __DEC_operand_enclosingInteraction_726253 = null;
		InteractionOperand __DEC_combo_fragment_231770 = null;
		InteractionOperand __DEC_messageReceive_fragment_567956 = null;
		InteractionOperand __DEC_messageSend_fragment_678085 = null;
		InteractionOperand __DEC_operand_fragment_827843 = null;
		Constraint __DEC_spec_specification_809773 = null;
		InteractionOperand __DEC_guard_guard_426227 = null;
		CombinedFragment __DEC_operand_operand_954639 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_446188 = null;
		Message __DEC_messageReceive_receiveEvent_446188 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_619459 = null;
		Message __DEC_messageSend_receiveEvent_619459 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_783836 = null;
		Message __DEC_messageReceive_sendEvent_783836 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_423578 = null;
		Message __DEC_messageSend_sendEvent_423578 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_990359 = null;
		MessageEnd __DEC_message_message_990359 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_fragment = null;
		EMoflonEdge _edge_fragment = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_enclosingOperand is really bound
			JavaSDM.ensure(_edge_enclosingOperand != null);
			// bind object
			_TmpObject = _edge_enclosingOperand.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			_TmpObject = _edge_enclosingOperand.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// check link fragment from messageReceive to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageReceive
					.getEnclosingOperand()));

			// iterate to-many link fragment from parentOperand to combo
			fujaba__Success = false;

			fujaba__IterParentOperandToCombo = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// iterate to-many link src from parentOperand to _edge_fragment
											fujaba__Success = false;

											fujaba__IterParentOperandTo_edge_fragment = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	parentOperand,
																	EMoflonEdge.class,
																	"src"))
													.iterator();

											while (fujaba__IterParentOperandTo_edge_fragment
													.hasNext()) {
												try {
													_edge_fragment = (EMoflonEdge) fujaba__IterParentOperandTo_edge_fragment
															.next();

													// check object _edge_fragment is really bound
													JavaSDM.ensure(_edge_fragment != null);
													// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
													JavaSDM.ensure(!_edge_fragment
															.equals(_edge_enclosingOperand));

													// check link trg from _edge_fragment to messageReceive
													JavaSDM.ensure(messageReceive
															.equals(_edge_fragment
																	.getTrg()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_669955 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_669955 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_669955 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_669955 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_669955
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_586917 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_586917 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_586917 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_586917 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_586917
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_187042 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_187042 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_187042 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_187042 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_187042
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_726253 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_726253 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_726253 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_726253 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_726253
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_231770 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_231770 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_231770 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_231770 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_231770
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_231770 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_231770
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_567956 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_567956 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_567956 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_567956 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_567956
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_567956 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_567956
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_678085 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_678085 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_678085 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_678085 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_678085
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_678085 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_678085
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_827843 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_827843 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_827843 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_827843 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_827843
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_827843 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_827843
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_809773 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_809773 is really bound
															JavaSDM.ensure(__DEC_spec_specification_809773 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_809773
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_809773 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_809773
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_426227 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_426227 is really bound
															JavaSDM.ensure(__DEC_guard_guard_426227 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_426227
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_426227 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_426227
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_426227 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_426227
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_954639 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_954639 is really bound
															JavaSDM.ensure(__DEC_operand_operand_954639 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_954639
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_954639 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_954639
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_954639 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_954639
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_446188
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_446188 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_446188
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_446188 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_446188
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_446188 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_446188 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_446188 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_446188
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_619459
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_619459 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_619459
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_619459 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_619459
																			.next();

																	// check object __DEC_messageSend_receiveEvent_619459 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_619459 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_619459 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_619459
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_783836
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_783836 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_783836
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_783836 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_783836
																			.next();

																	// check object __DEC_messageReceive_sendEvent_783836 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_783836 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_783836 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_783836
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_423578
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_423578 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_423578
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_423578 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_423578
																			.next();

																	// check object __DEC_messageSend_sendEvent_423578 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_423578 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_423578 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_423578
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_990359
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_990359 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_990359
																			.hasNext()) {
																try {
																	__DEC_message_message_990359 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_990359
																			.next();

																	// check object __DEC_message_message_990359 is really bound
																	JavaSDM.ensure(__DEC_message_message_990359 != null);
																	// check isomorphic binding between objects __DEC_message_message_990359 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_990359
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_990359 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_990359
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_enclosingOperand is really bound
														JavaSDM.ensure(_edge_enclosingOperand != null);
														// check object _edge_fragment is really bound
														JavaSDM.ensure(_edge_fragment != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
														JavaSDM.ensure(!_edge_fragment
																.equals(_edge_enclosingOperand));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_enclosingOperand to messageReceive
														JavaSDM.ensure(messageReceive
																.equals(_edge_enclosingOperand
																		.getSrc()));

														// check link src from _edge_fragment to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_fragment
																		.getSrc()));

														// check link trg from _edge_enclosingOperand to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_enclosingOperand
																		.getTrg()));

														// check link trg from _edge_fragment to messageReceive
														JavaSDM.ensure(messageReceive
																.equals(_edge_fragment
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_57(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_995244 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_984878 = null;
		Interaction __DEC_messageSend_enclosingInteraction_7211 = null;
		Interaction __DEC_operand_enclosingInteraction_748735 = null;
		InteractionOperand __DEC_combo_fragment_368851 = null;
		InteractionOperand __DEC_messageReceive_fragment_298178 = null;
		InteractionOperand __DEC_messageSend_fragment_912200 = null;
		InteractionOperand __DEC_operand_fragment_736398 = null;
		Constraint __DEC_spec_specification_171162 = null;
		InteractionOperand __DEC_guard_guard_458766 = null;
		CombinedFragment __DEC_operand_operand_61362 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_780980 = null;
		Message __DEC_messageReceive_receiveEvent_780980 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_995094 = null;
		Message __DEC_messageSend_receiveEvent_995094 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_760269 = null;
		Message __DEC_messageReceive_sendEvent_760269 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_467874 = null;
		Message __DEC_messageSend_sendEvent_467874 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_500737 = null;
		MessageEnd __DEC_message_message_500737 = null;
		Match match = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link covered from parentCombo to line
			JavaSDM.ensure(parentCombo.getCovered().contains(line));

			// check link covered from line to parentOperand
			JavaSDM.ensure(line.getCoveredBy().contains(parentOperand));

			// iterate to-many link covered from line to operand
			fujaba__Success = false;

			fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToOperand.next();

					// ensure correct type and really bound of object operand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					operand = (InteractionOperand) _TmpObject;
					// check isomorphic binding between objects parentOperand and operand 
					JavaSDM.ensure(!parentOperand.equals(operand));

					// bind object
					guard = operand.getGuard();

					// check object guard is really bound
					JavaSDM.ensure(guard != null);

					// bind object
					_TmpObject = guard.getSpecification();

					// ensure correct type and really bound of object spec
					JavaSDM.ensure(_TmpObject instanceof LiteralString);
					spec = (LiteralString) _TmpObject;

					// iterate to-many link fragment from parentOperand to combo
					fujaba__Success = false;

					fujaba__IterParentOperandToCombo = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToCombo
									.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link operand from operand to combo
							JavaSDM.ensure(combo.equals(operand.eContainer()));

							// iterate to-many link fragment from parentOperand to messageSend
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageSend = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageSend
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// bind object
											message = messageReceive
													.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link message from messageSend to message
											JavaSDM.ensure(message
													.equals(messageSend
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_995244 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_995244 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_995244 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_995244 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_995244
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_984878 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_984878 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_984878 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_984878 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_984878
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_7211 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_7211 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_7211 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_7211 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_7211
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_748735 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_748735 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_748735 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_748735 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_748735
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_368851 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_368851 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_368851 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_368851 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_368851
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_368851 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_368851
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_298178 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_298178 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_298178 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_298178 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_298178
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_298178 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_298178
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_912200 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_912200 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_912200 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_912200 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_912200
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_912200 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_912200
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_736398 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_736398 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_736398 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_736398 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_736398
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_736398 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_736398
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_171162 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_171162 is really bound
													JavaSDM.ensure(__DEC_spec_specification_171162 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_171162
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_171162 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_171162
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_458766 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_458766 is really bound
													JavaSDM.ensure(__DEC_guard_guard_458766 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_458766
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_458766 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_458766
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_458766 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_458766
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_61362 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_61362 is really bound
													JavaSDM.ensure(__DEC_operand_operand_61362 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_61362
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_61362 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_61362
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_61362 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_61362
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_780980
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_780980 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_780980
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_780980 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_780980
																	.next();

															// check object __DEC_messageReceive_receiveEvent_780980 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_780980 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_780980 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_780980
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_995094
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_995094 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_995094
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_995094 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_995094
																	.next();

															// check object __DEC_messageSend_receiveEvent_995094 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_995094 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_995094 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_995094
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_760269
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_760269 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_760269
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_760269 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_760269
																	.next();

															// check object __DEC_messageReceive_sendEvent_760269 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_760269 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_760269 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_760269
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_467874
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_467874 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_467874
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_467874 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_467874
																	.next();

															// check object __DEC_messageSend_sendEvent_467874 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_467874 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_467874 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_467874
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_500737
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_500737 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_500737
																	.hasNext()) {
														try {
															__DEC_message_message_500737 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_500737
																	.next();

															// check object __DEC_message_message_500737 is really bound
															JavaSDM.ensure(__DEC_message_message_500737 != null);
															// check isomorphic binding between objects __DEC_message_message_500737 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_500737
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_500737 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_500737
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_coveredBy is really bound
												JavaSDM.ensure(_edge_coveredBy != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_coveredBy to line
												JavaSDM.ensure(line
														.equals(_edge_coveredBy
																.getSrc()));

												// check link trg from _edge_coveredBy to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_coveredBy
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_58(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_847318 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_558431 = null;
		Interaction __DEC_messageSend_enclosingInteraction_99844 = null;
		Interaction __DEC_operand_enclosingInteraction_101110 = null;
		InteractionOperand __DEC_combo_fragment_582139 = null;
		InteractionOperand __DEC_messageReceive_fragment_89664 = null;
		InteractionOperand __DEC_messageSend_fragment_102026 = null;
		InteractionOperand __DEC_operand_fragment_322143 = null;
		Constraint __DEC_spec_specification_559509 = null;
		InteractionOperand __DEC_guard_guard_253114 = null;
		CombinedFragment __DEC_operand_operand_338964 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_650277 = null;
		Message __DEC_messageReceive_receiveEvent_650277 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_452394 = null;
		Message __DEC_messageSend_receiveEvent_452394 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_967206 = null;
		Message __DEC_messageReceive_sendEvent_967206 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_568546 = null;
		Message __DEC_messageSend_sendEvent_568546 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_729824 = null;
		MessageEnd __DEC_message_message_729824 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// iterate to-many link fragment from parentOperand to messageReceive
			fujaba__Success = false;

			fujaba__IterParentOperandToMessageReceive = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToMessageReceive
							.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// iterate to-many link fragment from parentOperand to messageSend
					fujaba__Success = false;

					fujaba__IterParentOperandToMessageSend = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToMessageSend
									.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// bind object
							message = messageSend.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// bind object
									parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
											.eContainer() : null;

									// check object parentCombo is really bound
									JavaSDM.ensure(parentCombo != null);

									// check if contained via correct reference
									JavaSDM.ensure(parentCombo.getOperand()
											.contains(parentOperand));

									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// bind object
									_TmpObject = _edge_covered.getTrg();

									// ensure correct type and really bound of object line
									JavaSDM.ensure(_TmpObject instanceof Lifeline);
									line = (Lifeline) _TmpObject;

									// bind object
									interaction = line.getInteraction();

									// check object interaction is really bound
									JavaSDM.ensure(interaction != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link covered from parentCombo to line
									JavaSDM.ensure(parentCombo.getCovered()
											.contains(line));

									// check link covered from line to parentOperand
									JavaSDM.ensure(line.getCoveredBy()
											.contains(parentOperand));

									// iterate to-many link covered from line to operand
									fujaba__Success = false;

									fujaba__IterLineToOperand = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToOperand.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// check link operand from operand to combo
											JavaSDM.ensure(combo.equals(operand
													.eContainer()));

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// iterate to-many link trg from parentOperand to _edge_coveredBy
											fujaba__Success = false;

											fujaba__IterParentOperandTo_edge_coveredBy = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	parentOperand,
																	EMoflonEdge.class,
																	"trg"))
													.iterator();

											while (fujaba__IterParentOperandTo_edge_coveredBy
													.hasNext()) {
												try {
													_edge_coveredBy = (EMoflonEdge) fujaba__IterParentOperandTo_edge_coveredBy
															.next();

													// check object _edge_coveredBy is really bound
													JavaSDM.ensure(_edge_coveredBy != null);
													// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
													JavaSDM.ensure(!_edge_coveredBy
															.equals(_edge_covered));

													// check link src from _edge_coveredBy to line
													JavaSDM.ensure(line
															.equals(_edge_coveredBy
																	.getSrc()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_847318 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_847318 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_847318 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_847318 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_847318
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_558431 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_558431 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_558431 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_558431 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_558431
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_99844 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_99844 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_99844 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_99844 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_99844
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_101110 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_101110 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_101110 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_101110 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_101110
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_582139 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_582139 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_582139 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_582139 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_582139
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_582139 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_582139
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_89664 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_89664 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_89664 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_89664 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_89664
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_89664 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_89664
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_102026 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_102026 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_102026 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_102026 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_102026
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_102026 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_102026
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_322143 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_322143 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_322143 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_322143 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_322143
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_322143 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_322143
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_559509 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_559509 is really bound
															JavaSDM.ensure(__DEC_spec_specification_559509 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_559509
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_559509 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_559509
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_253114 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_253114 is really bound
															JavaSDM.ensure(__DEC_guard_guard_253114 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_253114
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_253114 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_253114
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_253114 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_253114
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_338964 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_338964 is really bound
															JavaSDM.ensure(__DEC_operand_operand_338964 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_338964
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_338964 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_338964
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_338964 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_338964
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_650277
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_650277 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_650277
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_650277 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_650277
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_650277 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_650277 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_650277 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_650277
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_452394
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_452394 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_452394
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_452394 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_452394
																			.next();

																	// check object __DEC_messageSend_receiveEvent_452394 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_452394 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_452394 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_452394
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_967206
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_967206 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_967206
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_967206 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_967206
																			.next();

																	// check object __DEC_messageReceive_sendEvent_967206 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_967206 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_967206 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_967206
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_568546
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_568546 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_568546
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_568546 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_568546
																			.next();

																	// check object __DEC_messageSend_sendEvent_568546 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_568546 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_568546 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_568546
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_729824
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_729824 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_729824
																			.hasNext()) {
																try {
																	__DEC_message_message_729824 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_729824
																			.next();

																	// check object __DEC_message_message_729824 is really bound
																	JavaSDM.ensure(__DEC_message_message_729824 != null);
																	// check isomorphic binding between objects __DEC_message_message_729824 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_729824
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_729824 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_729824
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_covered is really bound
														JavaSDM.ensure(_edge_covered != null);
														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
														JavaSDM.ensure(!_edge_coveredBy
																.equals(_edge_covered));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_covered to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_covered
																		.getSrc()));

														// check link src from _edge_coveredBy to line
														JavaSDM.ensure(line
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_covered to line
														JavaSDM.ensure(line
																.equals(_edge_covered
																		.getTrg()));

														// check link trg from _edge_coveredBy to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_59(
			EMoflonEdge _edge_fragment) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_349764 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_191743 = null;
		Interaction __DEC_messageSend_enclosingInteraction_977878 = null;
		Interaction __DEC_operand_enclosingInteraction_442491 = null;
		InteractionOperand __DEC_combo_fragment_14246 = null;
		InteractionOperand __DEC_messageReceive_fragment_864560 = null;
		InteractionOperand __DEC_messageSend_fragment_919690 = null;
		InteractionOperand __DEC_operand_fragment_793718 = null;
		Constraint __DEC_spec_specification_889981 = null;
		InteractionOperand __DEC_guard_guard_675046 = null;
		CombinedFragment __DEC_operand_operand_349353 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_936905 = null;
		Message __DEC_messageReceive_receiveEvent_936905 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_471780 = null;
		Message __DEC_messageSend_receiveEvent_471780 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_673617 = null;
		Message __DEC_messageReceive_sendEvent_673617 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_830838 = null;
		Message __DEC_messageSend_sendEvent_830838 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_125102 = null;
		MessageEnd __DEC_message_message_125102 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		CombinedFragment combo = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_fragment is really bound
			JavaSDM.ensure(_edge_fragment != null);
			// bind object
			_TmpObject = _edge_fragment.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// iterate to-many link fragment from parentOperand to messageReceive
			fujaba__Success = false;

			fujaba__IterParentOperandToMessageReceive = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToMessageReceive
							.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageReceive.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// bind object
					_TmpObject = _edge_fragment.getTrg();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;

					// check link fragment from combo to parentOperand
					JavaSDM.ensure(parentOperand.equals(combo
							.getEnclosingOperand()));

					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageSend to message
											JavaSDM.ensure(message
													.equals(messageSend
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_349764 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_349764 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_349764 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_349764 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_349764
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_191743 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_191743 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_191743 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_191743 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_191743
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_977878 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_977878 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_977878 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_977878 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_977878
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_442491 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_442491 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_442491 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_442491 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_442491
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_14246 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_14246 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_14246 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_14246 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_14246
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_14246 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_14246
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_864560 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_864560 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_864560 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_864560 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_864560
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_864560 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_864560
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_919690 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_919690 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_919690 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_919690 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_919690
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_919690 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_919690
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_793718 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_793718 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_793718 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_793718 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_793718
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_793718 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_793718
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_889981 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_889981 is really bound
													JavaSDM.ensure(__DEC_spec_specification_889981 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_889981
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_889981 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_889981
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_675046 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_675046 is really bound
													JavaSDM.ensure(__DEC_guard_guard_675046 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_675046
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_675046 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_675046
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_675046 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_675046
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_349353 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_349353 is really bound
													JavaSDM.ensure(__DEC_operand_operand_349353 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_349353
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_349353 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_349353
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_349353 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_349353
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_936905
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_936905 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_936905
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_936905 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_936905
																	.next();

															// check object __DEC_messageReceive_receiveEvent_936905 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_936905 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_936905 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_936905
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_471780
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_471780 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_471780
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_471780 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_471780
																	.next();

															// check object __DEC_messageSend_receiveEvent_471780 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_471780 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_471780 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_471780
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_673617
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_673617 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_673617
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_673617 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_673617
																	.next();

															// check object __DEC_messageReceive_sendEvent_673617 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_673617 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_673617 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_673617
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_830838
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_830838 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_830838
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_830838 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_830838
																	.next();

															// check object __DEC_messageSend_sendEvent_830838 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_830838 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_830838 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_830838
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_125102
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_125102 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_125102
																	.hasNext()) {
														try {
															__DEC_message_message_125102 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_125102
																	.next();

															// check object __DEC_message_message_125102 is really bound
															JavaSDM.ensure(__DEC_message_message_125102 != null);
															// check isomorphic binding between objects __DEC_message_message_125102 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_125102
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_125102 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_125102
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_fragment is really bound
												JavaSDM.ensure(_edge_fragment != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_fragment to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_fragment
																.getSrc()));

												// check link trg from _edge_fragment to combo
												JavaSDM.ensure(combo
														.equals(_edge_fragment
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_60(
			EMoflonEdge _edge_enclosingOperand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_39868 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_333957 = null;
		Interaction __DEC_messageSend_enclosingInteraction_821291 = null;
		Interaction __DEC_operand_enclosingInteraction_921836 = null;
		InteractionOperand __DEC_combo_fragment_123008 = null;
		InteractionOperand __DEC_messageReceive_fragment_925544 = null;
		InteractionOperand __DEC_messageSend_fragment_443740 = null;
		InteractionOperand __DEC_operand_fragment_313835 = null;
		Constraint __DEC_spec_specification_812185 = null;
		InteractionOperand __DEC_guard_guard_77678 = null;
		CombinedFragment __DEC_operand_operand_842031 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_825196 = null;
		Message __DEC_messageReceive_receiveEvent_825196 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_521917 = null;
		Message __DEC_messageSend_receiveEvent_521917 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_798288 = null;
		Message __DEC_messageReceive_sendEvent_798288 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_757379 = null;
		Message __DEC_messageSend_sendEvent_757379 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_221678 = null;
		MessageEnd __DEC_message_message_221678 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_fragment = null;
		EMoflonEdge _edge_fragment = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand parentOperand = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_enclosingOperand is really bound
			JavaSDM.ensure(_edge_enclosingOperand != null);
			// bind object
			_TmpObject = _edge_enclosingOperand.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_enclosingOperand.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// check link fragment from combo to parentOperand
			JavaSDM.ensure(parentOperand.equals(combo.getEnclosingOperand()));

			// iterate to-many link fragment from parentOperand to messageSend
			fujaba__Success = false;

			fujaba__IterParentOperandToMessageSend = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToMessageSend.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToMessageSend.next();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;
					// iterate to-many link fragment from parentOperand to messageReceive
					fujaba__Success = false;

					fujaba__IterParentOperandToMessageReceive = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// bind object
							parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
									.eContainer() : null;

							// check object parentCombo is really bound
							JavaSDM.ensure(parentCombo != null);

							// check if contained via correct reference
							JavaSDM.ensure(parentCombo.getOperand().contains(
									parentOperand));

							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// iterate to-many link covered from parentOperand to line
							fujaba__Success = false;

							fujaba__IterParentOperandToLine = new ArrayList(
									parentOperand.getCovered()).iterator();

							while (fujaba__IterParentOperandToLine.hasNext()) {
								try {
									line = (Lifeline) fujaba__IterParentOperandToLine
											.next();

									// check object line is really bound
									JavaSDM.ensure(line != null);
									// bind object
									interaction = line.getInteraction();

									// check object interaction is really bound
									JavaSDM.ensure(interaction != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link covered from parentCombo to line
									JavaSDM.ensure(parentCombo.getCovered()
											.contains(line));

									// iterate to-many link covered from line to operand
									fujaba__Success = false;

									fujaba__IterLineToOperand = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToOperand.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// check link operand from operand to combo
											JavaSDM.ensure(combo.equals(operand
													.eContainer()));

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// iterate to-many link src from parentOperand to _edge_fragment
											fujaba__Success = false;

											fujaba__IterParentOperandTo_edge_fragment = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	parentOperand,
																	EMoflonEdge.class,
																	"src"))
													.iterator();

											while (fujaba__IterParentOperandTo_edge_fragment
													.hasNext()) {
												try {
													_edge_fragment = (EMoflonEdge) fujaba__IterParentOperandTo_edge_fragment
															.next();

													// check object _edge_fragment is really bound
													JavaSDM.ensure(_edge_fragment != null);
													// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
													JavaSDM.ensure(!_edge_fragment
															.equals(_edge_enclosingOperand));

													// check link trg from _edge_fragment to combo
													JavaSDM.ensure(combo
															.equals(_edge_fragment
																	.getTrg()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_39868 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_39868 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_39868 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_39868 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_39868
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_333957 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_333957 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_333957 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_333957 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_333957
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_821291 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_821291 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_821291 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_821291 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_821291
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_921836 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_921836 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_921836 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_921836 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_921836
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_123008 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_123008 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_123008 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_123008 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_123008
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_123008 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_123008
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_925544 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_925544 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_925544 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_925544 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_925544
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_925544 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_925544
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_443740 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_443740 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_443740 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_443740 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_443740
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_443740 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_443740
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_313835 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_313835 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_313835 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_313835 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_313835
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_313835 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_313835
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_812185 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_812185 is really bound
															JavaSDM.ensure(__DEC_spec_specification_812185 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_812185
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_812185 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_812185
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_77678 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_77678 is really bound
															JavaSDM.ensure(__DEC_guard_guard_77678 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_77678
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_77678 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_77678
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_77678 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_77678
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_842031 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_842031 is really bound
															JavaSDM.ensure(__DEC_operand_operand_842031 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_842031
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_842031 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_842031
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_842031 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_842031
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_825196
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_825196 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_825196
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_825196 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_825196
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_825196 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_825196 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_825196 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_825196
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_521917
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_521917 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_521917
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_521917 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_521917
																			.next();

																	// check object __DEC_messageSend_receiveEvent_521917 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_521917 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_521917 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_521917
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_798288
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_798288 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_798288
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_798288 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_798288
																			.next();

																	// check object __DEC_messageReceive_sendEvent_798288 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_798288 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_798288 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_798288
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_757379
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_757379 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_757379
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_757379 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_757379
																			.next();

																	// check object __DEC_messageSend_sendEvent_757379 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_757379 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_757379 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_757379
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_221678
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_221678 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_221678
																			.hasNext()) {
																try {
																	__DEC_message_message_221678 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_221678
																			.next();

																	// check object __DEC_message_message_221678 is really bound
																	JavaSDM.ensure(__DEC_message_message_221678 != null);
																	// check isomorphic binding between objects __DEC_message_message_221678 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_221678
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_221678 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_221678
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_enclosingOperand is really bound
														JavaSDM.ensure(_edge_enclosingOperand != null);
														// check object _edge_fragment is really bound
														JavaSDM.ensure(_edge_fragment != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
														JavaSDM.ensure(!_edge_fragment
																.equals(_edge_enclosingOperand));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_enclosingOperand to combo
														JavaSDM.ensure(combo
																.equals(_edge_enclosingOperand
																		.getSrc()));

														// check link src from _edge_fragment to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_fragment
																		.getSrc()));

														// check link trg from _edge_enclosingOperand to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_enclosingOperand
																		.getTrg()));

														// check link trg from _edge_fragment to combo
														JavaSDM.ensure(combo
																.equals(_edge_fragment
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_61(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_846560 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_6182 = null;
		Interaction __DEC_messageSend_enclosingInteraction_917681 = null;
		Interaction __DEC_operand_enclosingInteraction_815805 = null;
		InteractionOperand __DEC_combo_fragment_87660 = null;
		InteractionOperand __DEC_messageReceive_fragment_501046 = null;
		InteractionOperand __DEC_messageSend_fragment_600786 = null;
		InteractionOperand __DEC_operand_fragment_113906 = null;
		Constraint __DEC_spec_specification_643175 = null;
		InteractionOperand __DEC_guard_guard_363122 = null;
		CombinedFragment __DEC_operand_operand_744796 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_142062 = null;
		Message __DEC_messageReceive_receiveEvent_142062 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490865 = null;
		Message __DEC_messageSend_receiveEvent_490865 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_126655 = null;
		Message __DEC_messageReceive_sendEvent_126655 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_596099 = null;
		Message __DEC_messageSend_sendEvent_596099 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_147719 = null;
		MessageEnd __DEC_message_message_147719 = null;
		Match match = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		CombinedFragment parentCombo = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;

			// check link covered from parentCombo to line
			JavaSDM.ensure(parentCombo.getCovered().contains(line));

			// iterate to-many link covered from line to operand
			fujaba__Success = false;

			fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToOperand.next();

					// ensure correct type and really bound of object operand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					operand = (InteractionOperand) _TmpObject;
					// bind object
					guard = operand.getGuard();

					// check object guard is really bound
					JavaSDM.ensure(guard != null);

					// bind object
					_TmpObject = guard.getSpecification();

					// ensure correct type and really bound of object spec
					JavaSDM.ensure(_TmpObject instanceof LiteralString);
					spec = (LiteralString) _TmpObject;

					// iterate to-many link covered from line to parentOperand
					fujaba__Success = false;

					fujaba__IterLineToParentOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToParentOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToParentOperand.next();

							// ensure correct type and really bound of object parentOperand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							parentOperand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// check link operand from parentOperand to parentCombo
							JavaSDM.ensure(parentCombo.equals(parentOperand
									.eContainer()));

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// iterate to-many link fragment from parentOperand to messageSend
											fujaba__Success = false;

											fujaba__IterParentOperandToMessageSend = new ArrayList(
													parentOperand.getFragment())
													.iterator();

											while (fujaba__IterParentOperandToMessageSend
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterParentOperandToMessageSend
															.next();

													// ensure correct type and really bound of object messageSend
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageSend = (MessageOccurrenceSpecification) _TmpObject;
													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// bind object
													message = messageSend
															.getMessage();

													// check object message is really bound
													JavaSDM.ensure(message != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// check link message from messageReceive to message
													JavaSDM.ensure(message
															.equals(messageReceive
																	.getMessage()));

													// check link receiveEvent from message to messageReceive
													JavaSDM.ensure(messageReceive.equals(message
															.getReceiveEvent()));

													// check link sendEvent from message to messageSend
													JavaSDM.ensure(messageSend.equals(message
															.getSendEvent()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_846560 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_846560 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_846560 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_846560 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_846560
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_6182 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_6182 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_6182 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_6182 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_6182
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_917681 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_917681 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_917681 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_917681 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_917681
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_815805 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_815805 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_815805 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_815805 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_815805
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_87660 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_87660 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_87660 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_87660 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_87660
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_87660 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_87660
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_501046 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_501046 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_501046 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_501046 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_501046
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_501046 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_501046
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_600786 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_600786 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_600786 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_600786 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_600786
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_600786 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_600786
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_113906 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_113906 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_113906 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_113906 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_113906
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_113906 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_113906
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_643175 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_643175 is really bound
															JavaSDM.ensure(__DEC_spec_specification_643175 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_643175
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_643175 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_643175
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_363122 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_363122 is really bound
															JavaSDM.ensure(__DEC_guard_guard_363122 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_363122
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_363122 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_363122
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_363122 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_363122
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_744796 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_744796 is really bound
															JavaSDM.ensure(__DEC_operand_operand_744796 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_744796
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_744796 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_744796
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_744796 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_744796
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_142062
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_142062 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_142062
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_142062 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_142062
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_142062 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_142062 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_142062 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_142062
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_490865
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490865 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490865
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_490865 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490865
																			.next();

																	// check object __DEC_messageSend_receiveEvent_490865 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_490865 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_490865 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_490865
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_126655
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_126655 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_126655
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_126655 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_126655
																			.next();

																	// check object __DEC_messageReceive_sendEvent_126655 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_126655 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_126655 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_126655
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_596099
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_596099 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_596099
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_596099 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_596099
																			.next();

																	// check object __DEC_messageSend_sendEvent_596099 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_596099 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_596099 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_596099
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_147719
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_147719 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_147719
																			.hasNext()) {
																try {
																	__DEC_message_message_147719 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_147719
																			.next();

																	// check object __DEC_message_message_147719 is really bound
																	JavaSDM.ensure(__DEC_message_message_147719 != null);
																	// check isomorphic binding between objects __DEC_message_message_147719 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_147719
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_147719 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_147719
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to line
														JavaSDM.ensure(line
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_62(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_871918 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_714258 = null;
		Interaction __DEC_messageSend_enclosingInteraction_732649 = null;
		Interaction __DEC_operand_enclosingInteraction_521971 = null;
		InteractionOperand __DEC_combo_fragment_365797 = null;
		InteractionOperand __DEC_messageReceive_fragment_45743 = null;
		InteractionOperand __DEC_messageSend_fragment_19868 = null;
		InteractionOperand __DEC_operand_fragment_777932 = null;
		Constraint __DEC_spec_specification_602757 = null;
		InteractionOperand __DEC_guard_guard_872512 = null;
		CombinedFragment __DEC_operand_operand_431051 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_316151 = null;
		Message __DEC_messageReceive_receiveEvent_316151 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_247360 = null;
		Message __DEC_messageSend_receiveEvent_247360 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_201757 = null;
		Message __DEC_messageReceive_sendEvent_201757 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_950506 = null;
		Message __DEC_messageSend_sendEvent_950506 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_458904 = null;
		MessageEnd __DEC_message_message_458904 = null;
		Match match = null;
		Iterator fujaba__IterLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from parentCombo to line
			JavaSDM.ensure(parentCombo.getCovered().contains(line));

			// iterate to-many link covered from line to operand
			fujaba__Success = false;

			fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToOperand.next();

					// ensure correct type and really bound of object operand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					operand = (InteractionOperand) _TmpObject;
					// bind object
					guard = operand.getGuard();

					// check object guard is really bound
					JavaSDM.ensure(guard != null);

					// bind object
					_TmpObject = guard.getSpecification();

					// ensure correct type and really bound of object spec
					JavaSDM.ensure(_TmpObject instanceof LiteralString);
					spec = (LiteralString) _TmpObject;

					// iterate to-many link covered from line to parentOperand
					fujaba__Success = false;

					fujaba__IterLineToParentOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToParentOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToParentOperand.next();

							// ensure correct type and really bound of object parentOperand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							parentOperand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// check link operand from parentOperand to parentCombo
							JavaSDM.ensure(parentCombo.equals(parentOperand
									.eContainer()));

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// iterate to-many link fragment from parentOperand to messageSend
											fujaba__Success = false;

											fujaba__IterParentOperandToMessageSend = new ArrayList(
													parentOperand.getFragment())
													.iterator();

											while (fujaba__IterParentOperandToMessageSend
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterParentOperandToMessageSend
															.next();

													// ensure correct type and really bound of object messageSend
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageSend = (MessageOccurrenceSpecification) _TmpObject;
													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// bind object
													message = messageSend
															.getMessage();

													// check object message is really bound
													JavaSDM.ensure(message != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// check link message from messageReceive to message
													JavaSDM.ensure(message
															.equals(messageReceive
																	.getMessage()));

													// check link receiveEvent from message to messageReceive
													JavaSDM.ensure(messageReceive.equals(message
															.getReceiveEvent()));

													// check link sendEvent from message to messageSend
													JavaSDM.ensure(messageSend.equals(message
															.getSendEvent()));

													// iterate to-many link src from line to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterLineTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			line,
																			EMoflonEdge.class,
																			"src"))
															.iterator();

													while (fujaba__IterLineTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link trg from _edge_coveredBy to parentCombo
															JavaSDM.ensure(parentCombo
																	.equals(_edge_coveredBy
																			.getTrg()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_871918 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_871918 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_871918 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_871918 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_871918
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_714258 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_714258 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_714258 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_714258 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_714258
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_732649 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_732649 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_732649 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_732649 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_732649
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_521971 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_521971 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_521971 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_521971 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_521971
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_365797 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_365797 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_365797 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_365797 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_365797
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_365797 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_365797
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_45743 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_45743 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_45743 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_45743 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_45743
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_45743 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_45743
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_19868 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_19868 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_19868 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_19868 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_19868
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_19868 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_19868
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_777932 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_777932 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_777932 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_777932 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_777932
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_777932 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_777932
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_602757 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_602757 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_602757 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_602757
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_602757 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_602757
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_872512 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_872512 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_872512 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_872512
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_872512 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_872512
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_872512 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_872512
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_431051 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_431051 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_431051 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_431051
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_431051 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_431051
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_431051 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_431051
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_316151
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_316151 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_316151
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_316151 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_316151
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_316151 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_316151 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_316151 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_316151
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_247360
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_247360 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_247360
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_247360 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_247360
																					.next();

																			// check object __DEC_messageSend_receiveEvent_247360 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_247360 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_247360 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_247360
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_201757
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_201757 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_201757
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_201757 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_201757
																					.next();

																			// check object __DEC_messageReceive_sendEvent_201757 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_201757 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_201757 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_201757
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_950506
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_950506 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_950506
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_950506 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_950506
																					.next();

																			// check object __DEC_messageSend_sendEvent_950506 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_950506 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_950506 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_950506
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_458904
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_458904 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_458904
																					.hasNext()) {
																		try {
																			__DEC_message_message_458904 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_458904
																					.next();

																			// check object __DEC_message_message_458904 is really bound
																			JavaSDM.ensure(__DEC_message_message_458904 != null);
																			// check isomorphic binding between objects __DEC_message_message_458904 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_458904
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_458904 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_458904
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(combo
																				.getEnclosingOperand()));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from operand to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(combo
																		.equals(operand
																				.eContainer()));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to line
																JavaSDM.ensure(line
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to line
																JavaSDM.ensure(line
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link covered from operand to line
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				line));

																// check link covered from parentCombo to line
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				line));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				parentOperand,
																				messageSend,
																				messageReceive,
																				line,
																				combo,
																				parentCombo,
																				operand,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_14(
			EMoflonEdge _edge_stepAlternative) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_845003 = null;
		NormalStep __DEC_alt_stepAlternative_192526 = null;
		Flow __DEC_step_steps_250635 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_295896 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_295896 = null;
		Match match = null;
		UseCase useCase = null;
		NamedFlow flow = null;
		Actor actor = null;
		NormalStep step = null;
		AlternativeFlow altFlow = null;
		AlternativeFlowAlternative alt = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_stepAlternative is really bound
			JavaSDM.ensure(_edge_stepAlternative != null);
			// bind object
			_TmpObject = _edge_stepAlternative.getTrg();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			_TmpObject = alt.getRef();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// bind object
			_TmpObject = _edge_stepAlternative.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// check link stepAlternative from alt to step
			JavaSDM.ensure(step.equals(alt.eContainer()));

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_altFlow_flows_845003 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
							.eContainer() : null;

					// check object __DEC_altFlow_flows_845003 is really bound
					JavaSDM.ensure(__DEC_altFlow_flows_845003 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_altFlow_flows_845003.getFlows()
							.contains(altFlow));

					// check isomorphic binding between objects __DEC_altFlow_flows_845003 and useCase 
					JavaSDM.ensure(!__DEC_altFlow_flows_845003.equals(useCase));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_alt_stepAlternative_192526 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
							.eContainer() : null;

					// check object __DEC_alt_stepAlternative_192526 is really bound
					JavaSDM.ensure(__DEC_alt_stepAlternative_192526 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_alt_stepAlternative_192526
							.getStepAlternative().contains(alt));

					// check isomorphic binding between objects __DEC_alt_stepAlternative_192526 and step 
					JavaSDM.ensure(!__DEC_alt_stepAlternative_192526
							.equals(step));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_250635 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_250635 is really bound
					JavaSDM.ensure(__DEC_step_steps_250635 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_250635.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_250635 and altFlow 
					JavaSDM.ensure(!__DEC_step_steps_250635.equals(altFlow));

					// check isomorphic binding between objects __DEC_step_steps_250635 and flow 
					JavaSDM.ensure(!__DEC_step_steps_250635.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link ref from altFlow to __DEC_altFlow_ref_295896
					fujaba__Success = false;

					fujaba__IterAltFlowTo__DEC_altFlow_ref_295896 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(altFlow,
											AlternativeFlowAlternative.class,
											"ref")).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterAltFlowTo__DEC_altFlow_ref_295896
									.hasNext()) {
						try {
							__DEC_altFlow_ref_295896 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_295896
									.next();

							// check object __DEC_altFlow_ref_295896 is really bound
							JavaSDM.ensure(__DEC_altFlow_ref_295896 != null);
							// check isomorphic binding between objects __DEC_altFlow_ref_295896 and alt 
							JavaSDM.ensure(!__DEC_altFlow_ref_295896
									.equals(alt));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_stepAlternative is really bound
				JavaSDM.ensure(_edge_stepAlternative != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link ref from alt to altFlow
				JavaSDM.ensure(altFlow.equals(alt.getRef()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link flows from altFlow to useCase
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(altFlow, UseCase.class,
								"$eContainer").contains(useCase)));

				// check link src from _edge_stepAlternative to step
				JavaSDM.ensure(step.equals(_edge_stepAlternative.getSrc()));

				// check link stepAlternative from alt to step
				JavaSDM.ensure(step.equals(alt.eContainer()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link steps from step to altFlow
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(step, AlternativeFlow.class,
								"$eContainer").contains(altFlow)));

				// check link trg from _edge_stepAlternative to alt
				JavaSDM.ensure(alt.equals(_edge_stepAlternative.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, flow, step,
						alt, altFlow, useCase, actor);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_15(
			EMoflonEdge _edge_ref) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_548286 = null;
		NormalStep __DEC_alt_stepAlternative_657593 = null;
		Flow __DEC_step_steps_995711 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_944083 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_944083 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		UseCase useCase = null;
		NamedFlow flow = null;
		Actor actor = null;
		NormalStep step = null;
		AlternativeFlowAlternative alt = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_ref is really bound
			JavaSDM.ensure(_edge_ref != null);
			// bind object
			_TmpObject = _edge_ref.getSrc();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			step = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
					.eContainer() : null;

			// check object step is really bound
			JavaSDM.ensure(step != null);

			// check if contained via correct reference
			JavaSDM.ensure(step.getStepAlternative().contains(alt));

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_ref.getTrg();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check link ref from alt to altFlow
			JavaSDM.ensure(altFlow.equals(alt.getRef()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_altFlow_flows_548286 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
							.eContainer() : null;

					// check object __DEC_altFlow_flows_548286 is really bound
					JavaSDM.ensure(__DEC_altFlow_flows_548286 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_altFlow_flows_548286.getFlows()
							.contains(altFlow));

					// check isomorphic binding between objects __DEC_altFlow_flows_548286 and useCase 
					JavaSDM.ensure(!__DEC_altFlow_flows_548286.equals(useCase));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_alt_stepAlternative_657593 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
							.eContainer() : null;

					// check object __DEC_alt_stepAlternative_657593 is really bound
					JavaSDM.ensure(__DEC_alt_stepAlternative_657593 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_alt_stepAlternative_657593
							.getStepAlternative().contains(alt));

					// check isomorphic binding between objects __DEC_alt_stepAlternative_657593 and step 
					JavaSDM.ensure(!__DEC_alt_stepAlternative_657593
							.equals(step));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_995711 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_995711 is really bound
					JavaSDM.ensure(__DEC_step_steps_995711 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_995711.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_995711 and altFlow 
					JavaSDM.ensure(!__DEC_step_steps_995711.equals(altFlow));

					// check isomorphic binding between objects __DEC_step_steps_995711 and flow 
					JavaSDM.ensure(!__DEC_step_steps_995711.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link ref from altFlow to __DEC_altFlow_ref_944083
					fujaba__Success = false;

					fujaba__IterAltFlowTo__DEC_altFlow_ref_944083 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(altFlow,
											AlternativeFlowAlternative.class,
											"ref")).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterAltFlowTo__DEC_altFlow_ref_944083
									.hasNext()) {
						try {
							__DEC_altFlow_ref_944083 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_944083
									.next();

							// check object __DEC_altFlow_ref_944083 is really bound
							JavaSDM.ensure(__DEC_altFlow_ref_944083 != null);
							// check isomorphic binding between objects __DEC_altFlow_ref_944083 and alt 
							JavaSDM.ensure(!__DEC_altFlow_ref_944083
									.equals(alt));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_ref is really bound
				JavaSDM.ensure(_edge_ref != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link ref from alt to altFlow
				JavaSDM.ensure(altFlow.equals(alt.getRef()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link flows from altFlow to useCase
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(altFlow, UseCase.class,
								"$eContainer").contains(useCase)));

				// check link src from _edge_ref to alt
				JavaSDM.ensure(alt.equals(_edge_ref.getSrc()));

				// check link stepAlternative from alt to step
				JavaSDM.ensure(step.equals(alt.eContainer()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link steps from step to altFlow
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(step, AlternativeFlow.class,
								"$eContainer").contains(altFlow)));

				// check link trg from _edge_ref to altFlow
				JavaSDM.ensure(altFlow.equals(_edge_ref.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, flow, step,
						alt, altFlow, useCase, actor);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_63(
			EMoflonEdge _edge_operand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_943806 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_48547 = null;
		Interaction __DEC_messageSend_enclosingInteraction_699819 = null;
		Interaction __DEC_operand_enclosingInteraction_987302 = null;
		InteractionOperand __DEC_combo_fragment_393763 = null;
		InteractionOperand __DEC_messageReceive_fragment_805543 = null;
		InteractionOperand __DEC_messageSend_fragment_710593 = null;
		InteractionOperand __DEC_operand_fragment_914977 = null;
		Constraint __DEC_spec_specification_290161 = null;
		InteractionOperand __DEC_guard_guard_968325 = null;
		CombinedFragment __DEC_operand_operand_196439 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_8623 = null;
		Message __DEC_messageReceive_receiveEvent_8623 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_355274 = null;
		Message __DEC_messageSend_receiveEvent_355274 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_472093 = null;
		Message __DEC_messageReceive_sendEvent_472093 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147164 = null;
		Message __DEC_messageSend_sendEvent_147164 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_202948 = null;
		MessageEnd __DEC_message_message_202948 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_operand is really bound
			JavaSDM.ensure(_edge_operand != null);
			// bind object
			_TmpObject = _edge_operand.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			parentOperand = combo.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// bind object
			_TmpObject = _edge_operand.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// check link operand from operand to combo
			JavaSDM.ensure(combo.equals(operand.eContainer()));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from operand to line
					JavaSDM.ensure(operand.getCovered().contains(line));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link fragment from parentOperand to messageReceive
					fujaba__Success = false;

					fujaba__IterParentOperandToMessageReceive = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// iterate to-many link fragment from parentOperand to messageSend
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageSend = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageSend
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link message from messageSend to message
									JavaSDM.ensure(message.equals(messageSend
											.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_943806 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_943806 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_943806 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_943806 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_943806
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_48547 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_48547 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_48547 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_48547 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_48547
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_699819 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_699819 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_699819 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_699819 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_699819
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_987302 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_987302 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_987302 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_987302 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_987302
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_393763 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_393763 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_393763 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_393763 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_393763
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_393763 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_393763
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_805543 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_805543 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_805543 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_805543 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_805543
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_805543 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_805543
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_710593 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_710593 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_710593 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_710593 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_710593
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_710593 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_710593
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_914977 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_914977 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_914977 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_914977 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_914977
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_914977 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_914977
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_290161 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_290161 is really bound
											JavaSDM.ensure(__DEC_spec_specification_290161 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_290161
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_290161 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_290161
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_968325 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_968325 is really bound
											JavaSDM.ensure(__DEC_guard_guard_968325 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_968325
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_968325 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_968325
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_968325 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_968325
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_196439 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_196439 is really bound
											JavaSDM.ensure(__DEC_operand_operand_196439 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_196439
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_196439 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_196439
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_196439 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_196439
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_8623
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_8623 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_8623
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_8623 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_8623
															.next();

													// check object __DEC_messageReceive_receiveEvent_8623 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_8623 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_8623 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_8623
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_355274
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_355274 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_355274
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_355274 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_355274
															.next();

													// check object __DEC_messageSend_receiveEvent_355274 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_355274 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_355274 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_355274
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_472093
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_472093 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_472093
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_472093 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_472093
															.next();

													// check object __DEC_messageReceive_sendEvent_472093 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_472093 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_472093 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_472093
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_147164
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147164 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147164
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_147164 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147164
															.next();

													// check object __DEC_messageSend_sendEvent_147164 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_147164 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_147164 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_147164
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_202948
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_202948 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_202948
															.hasNext()) {
												try {
													__DEC_message_message_202948 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_202948
															.next();

													// check object __DEC_message_message_202948 is really bound
													JavaSDM.ensure(__DEC_message_message_202948 != null);
													// check isomorphic binding between objects __DEC_message_message_202948 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_202948
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_202948 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_202948
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_operand is really bound
										JavaSDM.ensure(_edge_operand != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_operand to combo
										JavaSDM.ensure(combo
												.equals(_edge_operand.getSrc()));

										// check link trg from _edge_operand to operand
										JavaSDM.ensure(operand
												.equals(_edge_operand.getTrg()));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from line to parentOperand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(parentOperand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														parentOperand,
														messageSend,
														messageReceive, line,
														combo, parentCombo,
														operand, guard, spec,
														message, interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_64(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_294113 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_71107 = null;
		Interaction __DEC_messageSend_enclosingInteraction_720938 = null;
		Interaction __DEC_operand_enclosingInteraction_304033 = null;
		InteractionOperand __DEC_combo_fragment_580749 = null;
		InteractionOperand __DEC_messageReceive_fragment_612158 = null;
		InteractionOperand __DEC_messageSend_fragment_764668 = null;
		InteractionOperand __DEC_operand_fragment_264218 = null;
		Constraint __DEC_spec_specification_857273 = null;
		InteractionOperand __DEC_guard_guard_672673 = null;
		CombinedFragment __DEC_operand_operand_880175 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_991264 = null;
		Message __DEC_messageReceive_receiveEvent_991264 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_312617 = null;
		Message __DEC_messageSend_receiveEvent_312617 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_311444 = null;
		Message __DEC_messageReceive_sendEvent_311444 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_182388 = null;
		Message __DEC_messageSend_sendEvent_182388 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_478056 = null;
		MessageEnd __DEC_message_message_478056 = null;
		Match match = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from operand to line
			JavaSDM.ensure(operand.getCovered().contains(line));

			// iterate to-many link covered from line to parentOperand
			fujaba__Success = false;

			fujaba__IterLineToParentOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToParentOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToParentOperand.next();

					// ensure correct type and really bound of object parentOperand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					parentOperand = (InteractionOperand) _TmpObject;
					// check isomorphic binding between objects parentOperand and operand 
					JavaSDM.ensure(!parentOperand.equals(operand));

					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link fragment from parentOperand to combo
					fujaba__Success = false;

					fujaba__IterParentOperandToCombo = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToCombo
									.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link operand from operand to combo
							JavaSDM.ensure(combo.equals(operand.eContainer()));

							// iterate to-many link fragment from parentOperand to messageReceive
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageReceive = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageReceive
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageReceive
											.next();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;
									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_294113 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_294113 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_294113 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_294113 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_294113
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_71107 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_71107 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_71107 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_71107 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_71107
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_720938 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_720938 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_720938 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_720938 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_720938
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_304033 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_304033 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_304033 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_304033 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_304033
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_580749 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_580749 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_580749 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_580749 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_580749
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_580749 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_580749
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_612158 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_612158 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_612158 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_612158 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_612158
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_612158 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_612158
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_764668 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_764668 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_764668 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_764668 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_764668
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_764668 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_764668
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_264218 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_264218 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_264218 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_264218 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_264218
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_264218 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_264218
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_857273 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_857273 is really bound
													JavaSDM.ensure(__DEC_spec_specification_857273 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_857273
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_857273 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_857273
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_672673 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_672673 is really bound
													JavaSDM.ensure(__DEC_guard_guard_672673 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_672673
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_672673 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_672673
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_672673 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_672673
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_880175 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_880175 is really bound
													JavaSDM.ensure(__DEC_operand_operand_880175 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_880175
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_880175 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_880175
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_880175 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_880175
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_991264
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_991264 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_991264
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_991264 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_991264
																	.next();

															// check object __DEC_messageReceive_receiveEvent_991264 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_991264 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_991264 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_991264
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_312617
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_312617 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_312617
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_312617 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_312617
																	.next();

															// check object __DEC_messageSend_receiveEvent_312617 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_312617 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_312617 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_312617
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_311444
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_311444 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_311444
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_311444 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_311444
																	.next();

															// check object __DEC_messageReceive_sendEvent_311444 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_311444 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_311444 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_311444
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_182388
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_182388 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_182388
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_182388 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_182388
																	.next();

															// check object __DEC_messageSend_sendEvent_182388 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_182388 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_182388 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_182388
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_478056
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_478056 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_478056
																	.hasNext()) {
														try {
															__DEC_message_message_478056 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_478056
																	.next();

															// check object __DEC_message_message_478056 is really bound
															JavaSDM.ensure(__DEC_message_message_478056 != null);
															// check isomorphic binding between objects __DEC_message_message_478056 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_478056
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_478056 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_478056
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_coveredBy is really bound
												JavaSDM.ensure(_edge_coveredBy != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_coveredBy to line
												JavaSDM.ensure(line
														.equals(_edge_coveredBy
																.getSrc()));

												// check link trg from _edge_coveredBy to operand
												JavaSDM.ensure(operand
														.equals(_edge_coveredBy
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_65(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_320702 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_256262 = null;
		Interaction __DEC_messageSend_enclosingInteraction_373635 = null;
		Interaction __DEC_operand_enclosingInteraction_506957 = null;
		InteractionOperand __DEC_combo_fragment_362866 = null;
		InteractionOperand __DEC_messageReceive_fragment_741371 = null;
		InteractionOperand __DEC_messageSend_fragment_631172 = null;
		InteractionOperand __DEC_operand_fragment_157361 = null;
		Constraint __DEC_spec_specification_858594 = null;
		InteractionOperand __DEC_guard_guard_842329 = null;
		CombinedFragment __DEC_operand_operand_400815 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_77868 = null;
		Message __DEC_messageReceive_receiveEvent_77868 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_366085 = null;
		Message __DEC_messageSend_receiveEvent_366085 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_224669 = null;
		Message __DEC_messageReceive_sendEvent_224669 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_391563 = null;
		Message __DEC_messageSend_sendEvent_391563 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_690387 = null;
		MessageEnd __DEC_message_message_690387 = null;
		Match match = null;
		Iterator fujaba__IterLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from operand to line
			JavaSDM.ensure(operand.getCovered().contains(line));

			// iterate to-many link covered from line to parentOperand
			fujaba__Success = false;

			fujaba__IterLineToParentOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToParentOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToParentOperand.next();

					// ensure correct type and really bound of object parentOperand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					parentOperand = (InteractionOperand) _TmpObject;
					// check isomorphic binding between objects parentOperand and operand 
					JavaSDM.ensure(!parentOperand.equals(operand));

					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link fragment from parentOperand to combo
					fujaba__Success = false;

					fujaba__IterParentOperandToCombo = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToCombo
									.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link operand from operand to combo
							JavaSDM.ensure(combo.equals(operand.eContainer()));

							// iterate to-many link fragment from parentOperand to messageReceive
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageReceive = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageReceive
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageReceive
											.next();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;
									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// iterate to-many link src from line to _edge_coveredBy
											fujaba__Success = false;

											fujaba__IterLineTo_edge_coveredBy = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	line,
																	EMoflonEdge.class,
																	"src"))
													.iterator();

											while (fujaba__IterLineTo_edge_coveredBy
													.hasNext()) {
												try {
													_edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy
															.next();

													// check object _edge_coveredBy is really bound
													JavaSDM.ensure(_edge_coveredBy != null);
													// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
													JavaSDM.ensure(!_edge_coveredBy
															.equals(_edge_covered));

													// check link trg from _edge_coveredBy to operand
													JavaSDM.ensure(operand
															.equals(_edge_coveredBy
																	.getTrg()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_320702 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_320702 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_320702 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_320702 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_320702
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_256262 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_256262 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_256262 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_256262 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_256262
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_373635 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_373635 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_373635 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_373635 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_373635
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_506957 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_506957 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_506957 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_506957 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_506957
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_362866 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_362866 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_362866 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_362866 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_362866
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_362866 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_362866
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_741371 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_741371 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_741371 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_741371 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_741371
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_741371 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_741371
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_631172 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_631172 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_631172 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_631172 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_631172
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_631172 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_631172
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_157361 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_157361 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_157361 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_157361 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_157361
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_157361 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_157361
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_858594 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_858594 is really bound
															JavaSDM.ensure(__DEC_spec_specification_858594 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_858594
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_858594 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_858594
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_842329 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_842329 is really bound
															JavaSDM.ensure(__DEC_guard_guard_842329 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_842329
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_842329 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_842329
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_842329 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_842329
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_400815 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_400815 is really bound
															JavaSDM.ensure(__DEC_operand_operand_400815 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_400815
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_400815 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_400815
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_400815 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_400815
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_77868
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_77868 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_77868
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_77868 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_77868
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_77868 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_77868 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_77868 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_77868
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_366085
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_366085 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_366085
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_366085 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_366085
																			.next();

																	// check object __DEC_messageSend_receiveEvent_366085 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_366085 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_366085 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_366085
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_224669
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_224669 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_224669
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_224669 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_224669
																			.next();

																	// check object __DEC_messageReceive_sendEvent_224669 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_224669 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_224669 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_224669
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_391563
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_391563 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_391563
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_391563 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_391563
																			.next();

																	// check object __DEC_messageSend_sendEvent_391563 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_391563 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_391563 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_391563
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_690387
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_690387 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_690387
																			.hasNext()) {
																try {
																	__DEC_message_message_690387 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_690387
																			.next();

																	// check object __DEC_message_message_690387 is really bound
																	JavaSDM.ensure(__DEC_message_message_690387 != null);
																	// check isomorphic binding between objects __DEC_message_message_690387 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_690387
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_690387 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_690387
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_covered is really bound
														JavaSDM.ensure(_edge_covered != null);
														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
														JavaSDM.ensure(!_edge_coveredBy
																.equals(_edge_covered));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_covered to operand
														JavaSDM.ensure(operand
																.equals(_edge_covered
																		.getSrc()));

														// check link src from _edge_coveredBy to line
														JavaSDM.ensure(line
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_covered to line
														JavaSDM.ensure(line
																.equals(_edge_covered
																		.getTrg()));

														// check link trg from _edge_coveredBy to operand
														JavaSDM.ensure(operand
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_66(
			EMoflonEdge _edge_guard) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_470942 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_29498 = null;
		Interaction __DEC_messageSend_enclosingInteraction_721367 = null;
		Interaction __DEC_operand_enclosingInteraction_668610 = null;
		InteractionOperand __DEC_combo_fragment_460491 = null;
		InteractionOperand __DEC_messageReceive_fragment_620992 = null;
		InteractionOperand __DEC_messageSend_fragment_581384 = null;
		InteractionOperand __DEC_operand_fragment_526974 = null;
		Constraint __DEC_spec_specification_417662 = null;
		InteractionOperand __DEC_guard_guard_156145 = null;
		CombinedFragment __DEC_operand_operand_276155 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_267715 = null;
		Message __DEC_messageReceive_receiveEvent_267715 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_48268 = null;
		Message __DEC_messageSend_receiveEvent_48268 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_767360 = null;
		Message __DEC_messageReceive_sendEvent_767360 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_730153 = null;
		Message __DEC_messageSend_sendEvent_730153 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_589767 = null;
		MessageEnd __DEC_message_message_589767 = null;
		Match match = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_guard is really bound
			JavaSDM.ensure(_edge_guard != null);
			// bind object
			_TmpObject = _edge_guard.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			parentOperand = combo.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link trg from _edge_guard to guard
			JavaSDM.ensure(guard.equals(_edge_guard.getTrg()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// check link covered from line to parentOperand
					JavaSDM.ensure(line.getCoveredBy().contains(parentOperand));

					// iterate to-many link fragment from parentOperand to messageReceive
					fujaba__Success = false;

					fujaba__IterParentOperandToMessageReceive = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// iterate to-many link fragment from parentOperand to messageSend
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageSend = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageSend
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link receiveEvent from message to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(message.getReceiveEvent()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_470942 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_470942 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_470942 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_470942 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_470942
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_29498 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_29498 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_29498 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_29498 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_29498
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_721367 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_721367 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_721367 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_721367 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_721367
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_668610 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_668610 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_668610 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_668610 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_668610
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_460491 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_460491 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_460491 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_460491 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_460491
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_460491 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_460491
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_620992 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_620992 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_620992 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_620992 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_620992
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_620992 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_620992
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_581384 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_581384 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_581384 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_581384 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_581384
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_581384 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_581384
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_526974 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_526974 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_526974 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_526974 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_526974
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_526974 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_526974
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_417662 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_417662 is really bound
											JavaSDM.ensure(__DEC_spec_specification_417662 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_417662
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_417662 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_417662
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_156145 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_156145 is really bound
											JavaSDM.ensure(__DEC_guard_guard_156145 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_156145
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_156145 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_156145
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_156145 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_156145
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_276155 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_276155 is really bound
											JavaSDM.ensure(__DEC_operand_operand_276155 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_276155
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_276155 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_276155
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_276155 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_276155
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_267715
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_267715 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_267715
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_267715 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_267715
															.next();

													// check object __DEC_messageReceive_receiveEvent_267715 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_267715 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_267715 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_267715
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_48268
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_48268 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_48268
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_48268 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_48268
															.next();

													// check object __DEC_messageSend_receiveEvent_48268 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_48268 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_48268 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_48268
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_767360
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_767360 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_767360
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_767360 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_767360
															.next();

													// check object __DEC_messageReceive_sendEvent_767360 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_767360 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_767360 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_767360
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_730153
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_730153 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_730153
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_730153 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_730153
															.next();

													// check object __DEC_messageSend_sendEvent_730153 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_730153 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_730153 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_730153
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_589767
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_589767 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_589767
															.hasNext()) {
												try {
													__DEC_message_message_589767 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_589767
															.next();

													// check object __DEC_message_message_589767 is really bound
													JavaSDM.ensure(__DEC_message_message_589767 != null);
													// check isomorphic binding between objects __DEC_message_message_589767 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_589767
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_589767 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_589767
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_guard is really bound
										JavaSDM.ensure(_edge_guard != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_guard to operand
										JavaSDM.ensure(operand
												.equals(_edge_guard.getSrc()));

										// check link trg from _edge_guard to guard
										JavaSDM.ensure(guard.equals(_edge_guard
												.getTrg()));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from line to parentOperand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(parentOperand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														parentOperand,
														messageSend,
														messageReceive, line,
														combo, parentCombo,
														operand, guard, spec,
														message, interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_67(
			EMoflonEdge _edge_specification) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_643469 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_97927 = null;
		Interaction __DEC_messageSend_enclosingInteraction_712857 = null;
		Interaction __DEC_operand_enclosingInteraction_229409 = null;
		InteractionOperand __DEC_combo_fragment_844242 = null;
		InteractionOperand __DEC_messageReceive_fragment_81837 = null;
		InteractionOperand __DEC_messageSend_fragment_757877 = null;
		InteractionOperand __DEC_operand_fragment_36377 = null;
		Constraint __DEC_spec_specification_241409 = null;
		InteractionOperand __DEC_guard_guard_226656 = null;
		CombinedFragment __DEC_operand_operand_102513 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_718438 = null;
		Message __DEC_messageReceive_receiveEvent_718438 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_624321 = null;
		Message __DEC_messageSend_receiveEvent_624321 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_377157 = null;
		Message __DEC_messageReceive_sendEvent_377157 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_598717 = null;
		Message __DEC_messageSend_sendEvent_598717 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_902233 = null;
		MessageEnd __DEC_message_message_902233 = null;
		Match match = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		InteractionOperand parentOperand = null;
		CombinedFragment combo = null;
		InteractionOperand operand = null;
		InteractionConstraint guard = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_specification is really bound
			JavaSDM.ensure(_edge_specification != null);
			// bind object
			_TmpObject = _edge_specification.getSrc();

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;

			// bind object
			operand = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
					.eContainer() : null;

			// check object operand is really bound
			JavaSDM.ensure(operand != null);

			// check if contained via correct reference
			JavaSDM.ensure(guard.equals(operand.getGuard()));

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			parentOperand = combo.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// bind object
			_TmpObject = _edge_specification.getTrg();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link specification from spec to guard
			JavaSDM.ensure(guard.equals(spec.eContainer()));

			// iterate to-many link fragment from parentOperand to messageSend
			fujaba__Success = false;

			fujaba__IterParentOperandToMessageSend = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToMessageSend.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToMessageSend.next();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;
					// iterate to-many link fragment from parentOperand to messageReceive
					fujaba__Success = false;

					fujaba__IterParentOperandToMessageReceive = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// bind object
							parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
									.eContainer() : null;

							// check object parentCombo is really bound
							JavaSDM.ensure(parentCombo != null);

							// check if contained via correct reference
							JavaSDM.ensure(parentCombo.getOperand().contains(
									parentOperand));

							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// iterate to-many link covered from operand to line
							fujaba__Success = false;

							fujaba__IterOperandToLine = new ArrayList(
									operand.getCovered()).iterator();

							while (fujaba__IterOperandToLine.hasNext()) {
								try {
									line = (Lifeline) fujaba__IterOperandToLine
											.next();

									// check object line is really bound
									JavaSDM.ensure(line != null);
									// bind object
									interaction = line.getInteraction();

									// check object interaction is really bound
									JavaSDM.ensure(interaction != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link covered from parentCombo to line
									JavaSDM.ensure(parentCombo.getCovered()
											.contains(line));

									// check link covered from line to parentOperand
									JavaSDM.ensure(line.getCoveredBy()
											.contains(parentOperand));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_643469 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_643469 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_643469 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_643469 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_643469
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_97927 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_97927 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_97927 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_97927 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_97927
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_712857 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_712857 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_712857 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_712857 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_712857
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_229409 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_229409 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_229409 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_229409 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_229409
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_844242 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_844242 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_844242 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_844242 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_844242
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_844242 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_844242
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_81837 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_81837 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_81837 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_81837 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_81837
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_81837 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_81837
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_757877 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_757877 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_757877 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_757877 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_757877
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_757877 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_757877
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_36377 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_36377 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_36377 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_36377 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_36377
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_36377 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_36377
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_241409 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_241409 is really bound
											JavaSDM.ensure(__DEC_spec_specification_241409 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_241409
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_241409 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_241409
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_226656 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_226656 is really bound
											JavaSDM.ensure(__DEC_guard_guard_226656 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_226656
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_226656 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_226656
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_226656 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_226656
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_102513 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_102513 is really bound
											JavaSDM.ensure(__DEC_operand_operand_102513 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_102513
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_102513 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_102513
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_102513 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_102513
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_718438
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_718438 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_718438
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_718438 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_718438
															.next();

													// check object __DEC_messageReceive_receiveEvent_718438 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_718438 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_718438 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_718438
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_624321
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_624321 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_624321
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_624321 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_624321
															.next();

													// check object __DEC_messageSend_receiveEvent_624321 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_624321 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_624321 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_624321
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_377157
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_377157 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_377157
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_377157 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_377157
															.next();

													// check object __DEC_messageReceive_sendEvent_377157 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_377157 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_377157 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_377157
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_598717
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_598717 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_598717
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_598717 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_598717
															.next();

													// check object __DEC_messageSend_sendEvent_598717 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_598717 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_598717 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_598717
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_902233
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_902233 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_902233
															.hasNext()) {
												try {
													__DEC_message_message_902233 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_902233
															.next();

													// check object __DEC_message_message_902233 is really bound
													JavaSDM.ensure(__DEC_message_message_902233 != null);
													// check isomorphic binding between objects __DEC_message_message_902233 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_902233
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_902233 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_902233
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_specification is really bound
										JavaSDM.ensure(_edge_specification != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_specification to guard
										JavaSDM.ensure(guard
												.equals(_edge_specification
														.getSrc()));

										// check link trg from _edge_specification to spec
										JavaSDM.ensure(spec
												.equals(_edge_specification
														.getTrg()));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from line to parentOperand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(parentOperand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														parentOperand,
														messageSend,
														messageReceive, line,
														combo, parentCombo,
														operand, guard, spec,
														message, interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_16(
			EMoflonEdge _edge_steps) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_100631 = null;
		NormalStep __DEC_alt_stepAlternative_174993 = null;
		Flow __DEC_step_steps_173615 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_159834 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_159834 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		Actor actor = null;
		NormalStep step = null;
		UseCase useCase = null;
		NamedFlow flow = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_steps is really bound
			JavaSDM.ensure(_edge_steps != null);
			// bind object
			_TmpObject = _edge_steps.getSrc();

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_steps.getTrg();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// check link steps from step to flow
			JavaSDM.ensure(flow.equals(step.eContainer()));

			// iterate to-many link stepAlternative from step to alt
			fujaba__Success = false;

			fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative())
					.iterator();

			while (fujaba__IterStepToAlt.hasNext()) {
				try {
					_TmpObject = fujaba__IterStepToAlt.next();

					// ensure correct type and really bound of object alt
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
					alt = (AlternativeFlowAlternative) _TmpObject;
					// bind object
					_TmpObject = alt.getRef();

					// ensure correct type and really bound of object altFlow
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
					altFlow = (AlternativeFlow) _TmpObject;

					// check isomorphic binding between objects flow and altFlow 
					JavaSDM.ensure(!flow.equals(altFlow));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_100631 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_100631 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_100631 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_100631
									.getFlows().contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_100631 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_100631
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_174993 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_174993 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_174993 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_174993
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_174993 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_174993
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_173615 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_173615 is really bound
							JavaSDM.ensure(__DEC_step_steps_173615 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_173615.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_173615 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_173615
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_173615 and flow 
							JavaSDM.ensure(!__DEC_step_steps_173615
									.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_159834
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_159834 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_159834
											.hasNext()) {
								try {
									__DEC_altFlow_ref_159834 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_159834
											.next();

									// check object __DEC_altFlow_ref_159834 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_159834 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_159834 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_159834
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_steps is really bound
						JavaSDM.ensure(_edge_steps != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_steps to flow
						JavaSDM.ensure(flow.equals(_edge_steps.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_steps to step
						JavaSDM.ensure(step.equals(_edge_steps.getTrg()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match, flow,
								step, alt, altFlow, useCase, actor);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_17(
			EMoflonEdge _edge_actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_420627 = null;
		NormalStep __DEC_alt_stepAlternative_311545 = null;
		Flow __DEC_step_steps_528507 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_901277 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_901277 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		UseCase useCase = null;
		NamedFlow flow = null;
		Actor actor = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_actor is really bound
			JavaSDM.ensure(_edge_actor != null);
			// bind object
			_TmpObject = _edge_actor.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// check link trg from _edge_actor to actor
			JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

			// iterate to-many link stepAlternative from step to alt
			fujaba__Success = false;

			fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative())
					.iterator();

			while (fujaba__IterStepToAlt.hasNext()) {
				try {
					_TmpObject = fujaba__IterStepToAlt.next();

					// ensure correct type and really bound of object alt
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
					alt = (AlternativeFlowAlternative) _TmpObject;
					// bind object
					_TmpObject = alt.getRef();

					// ensure correct type and really bound of object altFlow
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
					altFlow = (AlternativeFlow) _TmpObject;

					// check isomorphic binding between objects flow and altFlow 
					JavaSDM.ensure(!flow.equals(altFlow));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_420627 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_420627 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_420627 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_420627
									.getFlows().contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_420627 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_420627
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_311545 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_311545 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_311545 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_311545
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_311545 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_311545
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_528507 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_528507 is really bound
							JavaSDM.ensure(__DEC_step_steps_528507 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_528507.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_528507 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_528507
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_528507 and flow 
							JavaSDM.ensure(!__DEC_step_steps_528507
									.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_901277
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_901277 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_901277
											.hasNext()) {
								try {
									__DEC_altFlow_ref_901277 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_901277
											.next();

									// check object __DEC_altFlow_ref_901277 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_901277 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_901277 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_901277
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_actor is really bound
						JavaSDM.ensure(_edge_actor != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_actor to step
						JavaSDM.ensure(step.equals(_edge_actor.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_actor to actor
						JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match, flow,
								step, alt, altFlow, useCase, actor);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_68(
			EMoflonEdge _edge_sendEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_421506 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_491080 = null;
		Interaction __DEC_messageSend_enclosingInteraction_880697 = null;
		Interaction __DEC_operand_enclosingInteraction_756566 = null;
		InteractionOperand __DEC_combo_fragment_348128 = null;
		InteractionOperand __DEC_messageReceive_fragment_619463 = null;
		InteractionOperand __DEC_messageSend_fragment_480939 = null;
		InteractionOperand __DEC_operand_fragment_866119 = null;
		Constraint __DEC_spec_specification_436360 = null;
		InteractionOperand __DEC_guard_guard_565507 = null;
		CombinedFragment __DEC_operand_operand_929037 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_90505 = null;
		Message __DEC_messageReceive_receiveEvent_90505 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_817442 = null;
		Message __DEC_messageSend_receiveEvent_817442 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_990371 = null;
		Message __DEC_messageReceive_sendEvent_990371 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_606236 = null;
		Message __DEC_messageSend_sendEvent_606236 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_948299 = null;
		MessageEnd __DEC_message_message_948299 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Message message = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_sendEvent is really bound
			JavaSDM.ensure(_edge_sendEvent != null);
			// bind object
			_TmpObject = _edge_sendEvent.getTrg();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			parentOperand = messageSend.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link src from _edge_sendEvent to message
			JavaSDM.ensure(message.equals(_edge_sendEvent.getSrc()));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_421506 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_421506 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_421506 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_421506 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_421506
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_491080 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_491080 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_491080 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_491080 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_491080
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_880697 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_880697 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_880697 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_880697 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_880697
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_756566 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_756566 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_756566 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_756566 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_756566
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_348128 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_348128 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_348128 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_348128 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_348128
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_348128 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_348128
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_619463 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_619463 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_619463 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_619463 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_619463
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_619463 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_619463
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_480939 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_480939 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_480939 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_480939 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_480939
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_480939 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_480939
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_866119 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_866119 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_866119 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_866119 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_866119
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_866119 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_866119
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_436360 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_436360 is really bound
													JavaSDM.ensure(__DEC_spec_specification_436360 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_436360
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_436360 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_436360
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_565507 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_565507 is really bound
													JavaSDM.ensure(__DEC_guard_guard_565507 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_565507
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_565507 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_565507
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_565507 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_565507
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_929037 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_929037 is really bound
													JavaSDM.ensure(__DEC_operand_operand_929037 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_929037
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_929037 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_929037
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_929037 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_929037
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_90505
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_90505 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_90505
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_90505 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_90505
																	.next();

															// check object __DEC_messageReceive_receiveEvent_90505 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_90505 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_90505 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_90505
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_817442
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_817442 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_817442
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_817442 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_817442
																	.next();

															// check object __DEC_messageSend_receiveEvent_817442 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_817442 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_817442 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_817442
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_990371
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_990371 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_990371
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_990371 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_990371
																	.next();

															// check object __DEC_messageReceive_sendEvent_990371 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_990371 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_990371 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_990371
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_606236
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_606236 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_606236
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_606236 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_606236
																	.next();

															// check object __DEC_messageSend_sendEvent_606236 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_606236 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_606236 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_606236
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_948299
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_948299 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_948299
																	.hasNext()) {
														try {
															__DEC_message_message_948299 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_948299
																	.next();

															// check object __DEC_message_message_948299 is really bound
															JavaSDM.ensure(__DEC_message_message_948299 != null);
															// check isomorphic binding between objects __DEC_message_message_948299 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_948299
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_948299 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_948299
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_sendEvent is really bound
												JavaSDM.ensure(_edge_sendEvent != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_sendEvent to message
												JavaSDM.ensure(message
														.equals(_edge_sendEvent
																.getSrc()));

												// check link trg from _edge_sendEvent to messageSend
												JavaSDM.ensure(messageSend
														.equals(_edge_sendEvent
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_69(
			EMoflonEdge _edge_receiveEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_774020 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_902844 = null;
		Interaction __DEC_messageSend_enclosingInteraction_565981 = null;
		Interaction __DEC_operand_enclosingInteraction_13934 = null;
		InteractionOperand __DEC_combo_fragment_484641 = null;
		InteractionOperand __DEC_messageReceive_fragment_117686 = null;
		InteractionOperand __DEC_messageSend_fragment_985509 = null;
		InteractionOperand __DEC_operand_fragment_907681 = null;
		Constraint __DEC_spec_specification_582647 = null;
		InteractionOperand __DEC_guard_guard_323705 = null;
		CombinedFragment __DEC_operand_operand_450989 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_136027 = null;
		Message __DEC_messageReceive_receiveEvent_136027 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_244709 = null;
		Message __DEC_messageSend_receiveEvent_244709 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_373874 = null;
		Message __DEC_messageReceive_sendEvent_373874 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_222543 = null;
		Message __DEC_messageSend_sendEvent_222543 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_788665 = null;
		MessageEnd __DEC_message_message_788665 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		InteractionOperand parentOperand = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_receiveEvent is really bound
			JavaSDM.ensure(_edge_receiveEvent != null);
			// bind object
			_TmpObject = _edge_receiveEvent.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			parentOperand = messageReceive.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// check link src from _edge_receiveEvent to message
			JavaSDM.ensure(message.equals(_edge_receiveEvent.getSrc()));

			// iterate to-many link fragment from parentOperand to combo
			fujaba__Success = false;

			fujaba__IterParentOperandToCombo = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageSend to message
											JavaSDM.ensure(message
													.equals(messageSend
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_774020 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_774020 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_774020 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_774020 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_774020
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_902844 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_902844 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_902844 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_902844 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_902844
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_565981 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_565981 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_565981 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_565981 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_565981
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_13934 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_13934 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_13934 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_13934 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_13934
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_484641 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_484641 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_484641 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_484641 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_484641
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_484641 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_484641
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_117686 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_117686 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_117686 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_117686 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_117686
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_117686 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_117686
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_985509 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_985509 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_985509 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_985509 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_985509
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_985509 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_985509
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_907681 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_907681 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_907681 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_907681 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_907681
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_907681 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_907681
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_582647 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_582647 is really bound
													JavaSDM.ensure(__DEC_spec_specification_582647 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_582647
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_582647 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_582647
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_323705 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_323705 is really bound
													JavaSDM.ensure(__DEC_guard_guard_323705 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_323705
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_323705 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_323705
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_323705 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_323705
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_450989 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_450989 is really bound
													JavaSDM.ensure(__DEC_operand_operand_450989 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_450989
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_450989 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_450989
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_450989 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_450989
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_136027
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_136027 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_136027
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_136027 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_136027
																	.next();

															// check object __DEC_messageReceive_receiveEvent_136027 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_136027 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_136027 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_136027
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_244709
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_244709 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_244709
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_244709 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_244709
																	.next();

															// check object __DEC_messageSend_receiveEvent_244709 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_244709 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_244709 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_244709
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_373874
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_373874 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_373874
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_373874 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_373874
																	.next();

															// check object __DEC_messageReceive_sendEvent_373874 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_373874 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_373874 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_373874
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_222543
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_222543 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_222543
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_222543 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_222543
																	.next();

															// check object __DEC_messageSend_sendEvent_222543 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_222543 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_222543 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_222543
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_788665
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_788665 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_788665
																	.hasNext()) {
														try {
															__DEC_message_message_788665 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_788665
																	.next();

															// check object __DEC_message_message_788665 is really bound
															JavaSDM.ensure(__DEC_message_message_788665 != null);
															// check isomorphic binding between objects __DEC_message_message_788665 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_788665
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_788665 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_788665
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_receiveEvent is really bound
												JavaSDM.ensure(_edge_receiveEvent != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_receiveEvent to message
												JavaSDM.ensure(message
														.equals(_edge_receiveEvent
																.getSrc()));

												// check link trg from _edge_receiveEvent to messageReceive
												JavaSDM.ensure(messageReceive
														.equals(_edge_receiveEvent
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_70(
			EMoflonEdge _edge_interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_311568 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_727797 = null;
		Interaction __DEC_messageSend_enclosingInteraction_743353 = null;
		Interaction __DEC_operand_enclosingInteraction_548522 = null;
		InteractionOperand __DEC_combo_fragment_358334 = null;
		InteractionOperand __DEC_messageReceive_fragment_212530 = null;
		InteractionOperand __DEC_messageSend_fragment_446525 = null;
		InteractionOperand __DEC_operand_fragment_444556 = null;
		Constraint __DEC_spec_specification_193221 = null;
		InteractionOperand __DEC_guard_guard_381981 = null;
		CombinedFragment __DEC_operand_operand_654471 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_625364 = null;
		Message __DEC_messageReceive_receiveEvent_625364 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_145793 = null;
		Message __DEC_messageSend_receiveEvent_145793 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_298590 = null;
		Message __DEC_messageReceive_sendEvent_298590 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_372261 = null;
		Message __DEC_messageSend_sendEvent_372261 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_967952 = null;
		MessageEnd __DEC_message_message_967952 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_interaction is really bound
			JavaSDM.ensure(_edge_interaction != null);
			// bind object
			_TmpObject = _edge_interaction.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// bind object
			parentOperand = messageSend.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check link fragment from messageReceive to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageReceive
					.getEnclosingOperand()));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_interaction to interaction
			JavaSDM.ensure(interaction.equals(_edge_interaction.getTrg()));

			// iterate to-many link fragment from parentOperand to combo
			fujaba__Success = false;

			fujaba__IterParentOperandToCombo = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// check link lifeline from line to interaction
							JavaSDM.ensure(interaction.equals(line
									.getInteraction()));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_311568 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_311568 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_311568 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_311568 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_311568
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_727797 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_727797 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_727797 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_727797 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_727797
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_743353 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_743353 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_743353 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_743353 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_743353
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_548522 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_548522 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_548522 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_548522 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_548522
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_358334 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_358334 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_358334 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_358334 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_358334
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_358334 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_358334
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_212530 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_212530 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_212530 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_212530 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_212530
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_212530 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_212530
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_446525 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_446525 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_446525 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_446525 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_446525
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_446525 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_446525
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_444556 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_444556 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_444556 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_444556 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_444556
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_444556 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_444556
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_193221 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_193221 is really bound
											JavaSDM.ensure(__DEC_spec_specification_193221 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_193221
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_193221 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_193221
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_381981 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_381981 is really bound
											JavaSDM.ensure(__DEC_guard_guard_381981 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_381981
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_381981 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_381981
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_381981 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_381981
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_654471 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_654471 is really bound
											JavaSDM.ensure(__DEC_operand_operand_654471 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_654471
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_654471 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_654471
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_654471 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_654471
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_625364
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_625364 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_625364
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_625364 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_625364
															.next();

													// check object __DEC_messageReceive_receiveEvent_625364 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_625364 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_625364 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_625364
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_145793
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_145793 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_145793
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_145793 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_145793
															.next();

													// check object __DEC_messageSend_receiveEvent_145793 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_145793 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_145793 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_145793
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_298590
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_298590 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_298590
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_298590 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_298590
															.next();

													// check object __DEC_messageReceive_sendEvent_298590 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_298590 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_298590 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_298590
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_372261
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_372261 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_372261
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_372261 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_372261
															.next();

													// check object __DEC_messageSend_sendEvent_372261 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_372261 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_372261 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_372261
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_967952
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_967952 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_967952
															.hasNext()) {
												try {
													__DEC_message_message_967952 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_967952
															.next();

													// check object __DEC_message_message_967952 is really bound
													JavaSDM.ensure(__DEC_message_message_967952 != null);
													// check isomorphic binding between objects __DEC_message_message_967952 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_967952
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_967952 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_967952
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_interaction is really bound
										JavaSDM.ensure(_edge_interaction != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_interaction to message
										JavaSDM.ensure(message
												.equals(_edge_interaction
														.getSrc()));

										// check link trg from _edge_interaction to interaction
										JavaSDM.ensure(interaction
												.equals(_edge_interaction
														.getTrg()));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from line to parentOperand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(parentOperand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														parentOperand,
														messageSend,
														messageReceive, line,
														combo, parentCombo,
														operand, guard, spec,
														message, interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_71(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_943706 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_299076 = null;
		Interaction __DEC_messageSend_enclosingInteraction_474961 = null;
		Interaction __DEC_operand_enclosingInteraction_44766 = null;
		InteractionOperand __DEC_combo_fragment_651815 = null;
		InteractionOperand __DEC_messageReceive_fragment_322200 = null;
		InteractionOperand __DEC_messageSend_fragment_248625 = null;
		InteractionOperand __DEC_operand_fragment_563836 = null;
		Constraint __DEC_spec_specification_753545 = null;
		InteractionOperand __DEC_guard_guard_156502 = null;
		CombinedFragment __DEC_operand_operand_107924 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_835447 = null;
		Message __DEC_messageReceive_receiveEvent_835447 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_991084 = null;
		Message __DEC_messageSend_receiveEvent_991084 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_335467 = null;
		Message __DEC_messageReceive_sendEvent_335467 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_10645 = null;
		Message __DEC_messageSend_sendEvent_10645 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_298331 = null;
		MessageEnd __DEC_message_message_298331 = null;
		Match match = null;
		Iterator fujaba__IterMessageTo_edge_interaction = null;
		EMoflonEdge _edge_interaction = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// bind object
			parentOperand = messageSend.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check link fragment from messageReceive to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageReceive
					.getEnclosingOperand()));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link src from _edge_message to interaction
			JavaSDM.ensure(interaction.equals(_edge_message.getSrc()));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link src from message to _edge_interaction
									fujaba__Success = false;

									fujaba__IterMessageTo_edge_interaction = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															EMoflonEdge.class,
															"src")).iterator();

									while (fujaba__IterMessageTo_edge_interaction
											.hasNext()) {
										try {
											_edge_interaction = (EMoflonEdge) fujaba__IterMessageTo_edge_interaction
													.next();

											// check object _edge_interaction is really bound
											JavaSDM.ensure(_edge_interaction != null);
											// check isomorphic binding between objects _edge_message and _edge_interaction 
											JavaSDM.ensure(!_edge_message
													.equals(_edge_interaction));

											// check link trg from _edge_interaction to interaction
											JavaSDM.ensure(interaction
													.equals(_edge_interaction
															.getTrg()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_943706 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_943706 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_943706 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_943706 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_943706
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_299076 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_299076 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_299076 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_299076 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_299076
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_474961 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_474961 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_474961 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_474961 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_474961
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_44766 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_44766 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_44766 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_44766 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_44766
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_651815 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_651815 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_651815 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_651815 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_651815
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_651815 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_651815
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_322200 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_322200 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_322200 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_322200 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_322200
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_322200 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_322200
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_248625 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_248625 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_248625 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_248625 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_248625
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_248625 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_248625
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_563836 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_563836 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_563836 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_563836 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_563836
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_563836 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_563836
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_753545 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_753545 is really bound
													JavaSDM.ensure(__DEC_spec_specification_753545 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_753545
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_753545 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_753545
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_156502 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_156502 is really bound
													JavaSDM.ensure(__DEC_guard_guard_156502 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_156502
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_156502 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_156502
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_156502 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_156502
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_107924 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_107924 is really bound
													JavaSDM.ensure(__DEC_operand_operand_107924 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_107924
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_107924 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_107924
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_107924 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_107924
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_835447
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_835447 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_835447
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_835447 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_835447
																	.next();

															// check object __DEC_messageReceive_receiveEvent_835447 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_835447 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_835447 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_835447
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_991084
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_991084 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_991084
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_991084 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_991084
																	.next();

															// check object __DEC_messageSend_receiveEvent_991084 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_991084 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_991084 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_991084
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_335467
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_335467 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_335467
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_335467 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_335467
																	.next();

															// check object __DEC_messageReceive_sendEvent_335467 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_335467 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_335467 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_335467
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_10645
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_10645 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_10645
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_10645 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_10645
																	.next();

															// check object __DEC_messageSend_sendEvent_10645 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_10645 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_10645 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_10645
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_298331
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_298331 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_298331
																	.hasNext()) {
														try {
															__DEC_message_message_298331 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_298331
																	.next();

															// check object __DEC_message_message_298331 is really bound
															JavaSDM.ensure(__DEC_message_message_298331 != null);
															// check isomorphic binding between objects __DEC_message_message_298331 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_298331
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_298331 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_298331
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_interaction is really bound
												JavaSDM.ensure(_edge_interaction != null);
												// check object _edge_message is really bound
												JavaSDM.ensure(_edge_message != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects _edge_message and _edge_interaction 
												JavaSDM.ensure(!_edge_message
														.equals(_edge_interaction));

												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_interaction to message
												JavaSDM.ensure(message
														.equals(_edge_interaction
																.getSrc()));

												// check link src from _edge_message to interaction
												JavaSDM.ensure(interaction
														.equals(_edge_message
																.getSrc()));

												// check link trg from _edge_interaction to interaction
												JavaSDM.ensure(interaction
														.equals(_edge_interaction
																.getTrg()));

												// check link trg from _edge_message to message
												JavaSDM.ensure(message
														.equals(_edge_message
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_72(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_525670 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_408334 = null;
		Interaction __DEC_messageSend_enclosingInteraction_108068 = null;
		Interaction __DEC_operand_enclosingInteraction_381018 = null;
		InteractionOperand __DEC_combo_fragment_879051 = null;
		InteractionOperand __DEC_messageReceive_fragment_667085 = null;
		InteractionOperand __DEC_messageSend_fragment_279604 = null;
		InteractionOperand __DEC_operand_fragment_438848 = null;
		Constraint __DEC_spec_specification_655264 = null;
		InteractionOperand __DEC_guard_guard_298594 = null;
		CombinedFragment __DEC_operand_operand_62157 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_652328 = null;
		Message __DEC_messageReceive_receiveEvent_652328 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_679711 = null;
		Message __DEC_messageSend_receiveEvent_679711 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_955935 = null;
		Message __DEC_messageReceive_sendEvent_955935 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_129156 = null;
		Message __DEC_messageSend_sendEvent_129156 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_649186 = null;
		MessageEnd __DEC_message_message_649186 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Message message = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			parentOperand = messageSend.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link trg from _edge_message to message
			JavaSDM.ensure(message.equals(_edge_message.getTrg()));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_525670 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_525670 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_525670 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_525670 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_525670
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_408334 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_408334 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_408334 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_408334 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_408334
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_108068 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_108068 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_108068 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_108068 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_108068
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_381018 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_381018 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_381018 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_381018 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_381018
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_879051 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_879051 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_879051 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_879051 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_879051
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_879051 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_879051
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_667085 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_667085 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_667085 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_667085 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_667085
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_667085 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_667085
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_279604 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_279604 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_279604 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_279604 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_279604
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_279604 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_279604
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_438848 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_438848 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_438848 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_438848 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_438848
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_438848 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_438848
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_655264 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_655264 is really bound
													JavaSDM.ensure(__DEC_spec_specification_655264 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_655264
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_655264 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_655264
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_298594 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_298594 is really bound
													JavaSDM.ensure(__DEC_guard_guard_298594 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_298594
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_298594 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_298594
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_298594 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_298594
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_62157 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_62157 is really bound
													JavaSDM.ensure(__DEC_operand_operand_62157 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_62157
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_62157 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_62157
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_62157 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_62157
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_652328
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_652328 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_652328
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_652328 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_652328
																	.next();

															// check object __DEC_messageReceive_receiveEvent_652328 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_652328 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_652328 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_652328
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_679711
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_679711 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_679711
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_679711 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_679711
																	.next();

															// check object __DEC_messageSend_receiveEvent_679711 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_679711 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_679711 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_679711
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_955935
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_955935 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_955935
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_955935 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_955935
																	.next();

															// check object __DEC_messageReceive_sendEvent_955935 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_955935 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_955935 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_955935
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_129156
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_129156 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_129156
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_129156 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_129156
																	.next();

															// check object __DEC_messageSend_sendEvent_129156 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_129156 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_129156 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_129156
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_649186
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_649186 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_649186
																	.hasNext()) {
														try {
															__DEC_message_message_649186 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_649186
																	.next();

															// check object __DEC_message_message_649186 is really bound
															JavaSDM.ensure(__DEC_message_message_649186 != null);
															// check isomorphic binding between objects __DEC_message_message_649186 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_649186
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_649186 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_649186
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_message is really bound
												JavaSDM.ensure(_edge_message != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_message to messageSend
												JavaSDM.ensure(messageSend
														.equals(_edge_message
																.getSrc()));

												// check link trg from _edge_message to message
												JavaSDM.ensure(message
														.equals(_edge_message
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_73(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_60356 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_340674 = null;
		Interaction __DEC_messageSend_enclosingInteraction_764847 = null;
		Interaction __DEC_operand_enclosingInteraction_75383 = null;
		InteractionOperand __DEC_combo_fragment_183822 = null;
		InteractionOperand __DEC_messageReceive_fragment_820173 = null;
		InteractionOperand __DEC_messageSend_fragment_833842 = null;
		InteractionOperand __DEC_operand_fragment_895687 = null;
		Constraint __DEC_spec_specification_217739 = null;
		InteractionOperand __DEC_guard_guard_439988 = null;
		CombinedFragment __DEC_operand_operand_93217 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_758405 = null;
		Message __DEC_messageReceive_receiveEvent_758405 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_498323 = null;
		Message __DEC_messageSend_receiveEvent_498323 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_122332 = null;
		Message __DEC_messageReceive_sendEvent_122332 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_596838 = null;
		Message __DEC_messageSend_sendEvent_596838 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_752705 = null;
		MessageEnd __DEC_message_message_752705 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Message message = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			parentOperand = messageReceive.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link trg from _edge_message to message
			JavaSDM.ensure(message.equals(_edge_message.getTrg()));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageSend to message
											JavaSDM.ensure(message
													.equals(messageSend
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_60356 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_60356 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_60356 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_60356 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_60356
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_340674 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_340674 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_340674 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_340674 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_340674
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_764847 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_764847 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_764847 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_764847 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_764847
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_75383 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_75383 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_75383 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_75383 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_75383
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_183822 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_183822 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_183822 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_183822 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_183822
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_183822 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_183822
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_820173 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_820173 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_820173 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_820173 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_820173
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_820173 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_820173
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_833842 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_833842 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_833842 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_833842 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_833842
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_833842 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_833842
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_895687 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_895687 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_895687 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_895687 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_895687
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_895687 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_895687
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_217739 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_217739 is really bound
													JavaSDM.ensure(__DEC_spec_specification_217739 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_217739
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_217739 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_217739
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_439988 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_439988 is really bound
													JavaSDM.ensure(__DEC_guard_guard_439988 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_439988
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_439988 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_439988
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_439988 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_439988
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_93217 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_93217 is really bound
													JavaSDM.ensure(__DEC_operand_operand_93217 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_93217
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_93217 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_93217
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_93217 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_93217
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_758405
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_758405 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_758405
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_758405 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_758405
																	.next();

															// check object __DEC_messageReceive_receiveEvent_758405 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_758405 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_758405 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_758405
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_498323
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_498323 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_498323
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_498323 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_498323
																	.next();

															// check object __DEC_messageSend_receiveEvent_498323 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_498323 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_498323 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_498323
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_122332
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_122332 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_122332
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_122332 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_122332
																	.next();

															// check object __DEC_messageReceive_sendEvent_122332 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_122332 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_122332 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_122332
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_596838
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_596838 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_596838
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_596838 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_596838
																	.next();

															// check object __DEC_messageSend_sendEvent_596838 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_596838 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_596838 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_596838
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_752705
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_752705 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_752705
																	.hasNext()) {
														try {
															__DEC_message_message_752705 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_752705
																	.next();

															// check object __DEC_message_message_752705 is really bound
															JavaSDM.ensure(__DEC_message_message_752705 != null);
															// check isomorphic binding between objects __DEC_message_message_752705 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_752705
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_752705 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_752705
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_message is really bound
												JavaSDM.ensure(_edge_message != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_message to messageReceive
												JavaSDM.ensure(messageReceive
														.equals(_edge_message
																.getSrc()));

												// check link trg from _edge_message to message
												JavaSDM.ensure(message
														.equals(_edge_message
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow,
			UseCase useCase, Flow flow, Actor actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __useCase_flows_flow = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_FWD(match, step, alt,
					altFlow, useCase, flow, actor));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __step_stepAlternative_alt
				__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __flow_steps_step
				__flow_steps_step = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __alt_ref_altFlow
				__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_actor_actor
				__step_actor_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __step_stepAlternative_alt
				__step_stepAlternative_alt.setName("stepAlternative");
				// assign attribute __alt_ref_altFlow
				__alt_ref_altFlow.setName("ref");
				// assign attribute __flow_steps_step
				__flow_steps_step.setName("steps");
				// assign attribute __step_actor_actor
				__step_actor_actor.setName("actor");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						altFlow, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_stepAlternative_alt, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						step, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__flow_steps_step, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match, alt,
						"toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__alt_ref_altFlow, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_actor_actor, "toBeTranslatedEdges");

				// create link
				__step_stepAlternative_alt.setSrc(step);

				// create link
				__flow_steps_step.setTrg(step);

				// create link
				__step_actor_actor.setSrc(step);

				// create link
				__step_stepAlternative_alt.setTrg(alt);

				// create link
				__alt_ref_altFlow.setSrc(alt);

				// create link
				__alt_ref_altFlow.setTrg(altFlow);

				// create link
				__flow_steps_step.setSrc(flow);

				// create link
				__step_actor_actor.setTrg(actor);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __useCase_flows_flow
				__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __useCase_flows_flow
				__useCase_flows_flow.setName("flows");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__useCase_flows_flow, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						actor, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						useCase, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						flow, "contextNodes");

				// create link
				__useCase_flows_flow.setSrc(useCase);

				// create link
				__useCase_flows_flow.setTrg(flow);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_FWD(match, step, alt, altFlow, useCase,
					flow, actor);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_FWD(Match match, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow,
			UseCase useCase, Flow flow, Actor actor) {
		match.registerObject("step", step);
		match.registerObject("alt", alt);
		match.registerObject("altFlow", altFlow);
		match.registerObject("useCase", useCase);
		match.registerObject("flow", flow);
		match.registerObject("actor", actor);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_FWD(Match match, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow,
			UseCase useCase, Flow flow, Actor actor) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals

		// Create attribute variables

		// Create explicit parameters

		// Create unbound variables

		// Create constraints

		// Solve CSP
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			NormalStep step, AlternativeFlowAlternative alt, Lifeline line,
			AlternativeFlow altFlow, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Flow flow,
			Interaction interaction, Actor actor, ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", true, csp);
		var_altFlow_name.setValue(altFlow.getName());
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", true, csp);
		var_alt_condition.setValue(alt.getCondition());
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", true, csp);
		var_step_name.setValue(step.getName());
		var_step_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", csp);
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", csp);
		var_spec_value.setType("");
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", csp);
		var_combo_interactionOperator.setType("EObject");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", csp);
		var_message_name.setType("");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		EqInterOperKind eqInterOperKind = new EqInterOperKind();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eqInterOperKind);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("step", step);
		isApplicableMatch.registerObject("alt", alt);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("altFlow", altFlow);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_FWD(PerformRuleResult ruleresult, EObject step,
			EObject alt, EObject combo, EObject line, EObject stepToCombo,
			EObject operand, EObject alternative1ToOperand, EObject guard,
			EObject spec, EObject altFlow, EObject altFlowToOperand,
			EObject useCase, EObject useCaseToInteraction, EObject flow,
			EObject message, EObject interaction, EObject stepToMessage,
			EObject messageSend, EObject messageReceive, EObject actor,
			EObject actorToLine) {
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_BWD(Match match, CombinedFragment combo,
			Lifeline line, InteractionOperand operand,
			InteractionConstraint guard, LiteralString spec, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __messageReceive_covered_line = null;
		EMoflonEdge __combo_covered_line = null;
		EMoflonEdge __line_coveredBy_combo = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __line_coveredBy_messageReceive = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __combo_operand_operand = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __line_interaction_interaction = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_BWD(match, combo, line,
					operand, guard, spec, message, interaction, messageSend,
					messageReceive));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// create object __operand_covered_line
				__operand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_covered_line
				__messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_covered_line
				__combo_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_combo
				__line_coveredBy_combo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_sendEvent_messageSend
				__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_message_message
				__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __guard_specification_spec
				__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_messageReceive
				__line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_guard_guard
				__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_operand_operand
				__combo_operand_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_message_message
				__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_interaction_interaction
				__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_operand
				__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_message_message
				__interaction_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __combo_operand_operand
				__combo_operand_operand.setName("operand");
				// assign attribute __line_coveredBy_combo
				__line_coveredBy_combo.setName("coveredBy");
				// assign attribute __combo_covered_line
				__combo_covered_line.setName("covered");
				// assign attribute __line_coveredBy_operand
				__line_coveredBy_operand.setName("coveredBy");
				// assign attribute __operand_covered_line
				__operand_covered_line.setName("covered");
				// assign attribute __operand_guard_guard
				__operand_guard_guard.setName("guard");
				// assign attribute __guard_specification_spec
				__guard_specification_spec.setName("specification");
				// assign attribute __message_sendEvent_messageSend
				__message_sendEvent_messageSend.setName("sendEvent");
				// assign attribute __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive.setName("receiveEvent");
				// assign attribute __message_interaction_interaction
				__message_interaction_interaction.setName("interaction");
				// assign attribute __interaction_message_message
				__interaction_message_message.setName("message");
				// assign attribute __messageSend_message_message
				__messageSend_message_message.setName("message");
				// assign attribute __messageReceive_message_message
				__messageReceive_message_message.setName("message");
				// assign attribute __line_coveredBy_messageReceive
				__line_coveredBy_messageReceive.setName("coveredBy");
				// assign attribute __messageReceive_covered_line
				__messageReceive_covered_line.setName("covered");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						guard, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageSend, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageReceive_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageReceive, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						combo, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						spec, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						operand, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_combo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_sendEvent_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						message, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_receiveEvent_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil
						.addOppositeReference(match,
								__messageReceive_message_message,
								"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__guard_specification_spec, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_messageReceive, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_guard_guard, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_operand_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_interaction_interaction,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_message_message, "toBeTranslatedEdges");

				// create link
				__combo_covered_line.setSrc(combo);

				// create link
				__line_coveredBy_combo.setTrg(combo);

				// create link
				__combo_operand_operand.setSrc(combo);

				// create link
				__operand_covered_line.setTrg(line);

				// create link
				__line_coveredBy_messageReceive.setSrc(line);

				// create link
				__messageReceive_covered_line.setTrg(line);

				// create link
				__line_coveredBy_combo.setSrc(line);

				// create link
				__line_coveredBy_operand.setSrc(line);

				// create link
				__combo_covered_line.setTrg(line);

				// create link
				__line_coveredBy_operand.setTrg(operand);

				// create link
				__operand_covered_line.setSrc(operand);

				// create link
				__operand_guard_guard.setSrc(operand);

				// create link
				__combo_operand_operand.setTrg(operand);

				// create link
				__guard_specification_spec.setSrc(guard);

				// create link
				__operand_guard_guard.setTrg(guard);

				// create link
				__guard_specification_spec.setTrg(spec);

				// create link
				__messageSend_message_message.setTrg(message);

				// create link
				__message_receiveEvent_messageReceive.setSrc(message);

				// create link
				__message_interaction_interaction.setSrc(message);

				// create link
				__interaction_message_message.setTrg(message);

				// create link
				__message_sendEvent_messageSend.setSrc(message);

				// create link
				__messageReceive_message_message.setTrg(message);

				// create link
				__interaction_message_message.setSrc(interaction);

				// create link
				__message_interaction_interaction.setTrg(interaction);

				// create link
				__message_sendEvent_messageSend.setTrg(messageSend);

				// create link
				__messageSend_message_message.setSrc(messageSend);

				// create link
				__line_coveredBy_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_message_message.setSrc(messageReceive);

				// create link
				__message_receiveEvent_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_covered_line.setSrc(messageReceive);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// create object __interaction_lifeline_line
				__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_interaction_interaction
				__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __line_interaction_interaction
				__line_interaction_interaction.setName("interaction");
				// assign attribute __interaction_lifeline_line
				__interaction_lifeline_line.setName("lifeline");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						line, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_lifeline_line, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						interaction, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_interaction_interaction, "contextEdges");

				// create link
				__line_interaction_interaction.setSrc(line);

				// create link
				__interaction_lifeline_line.setTrg(line);

				// create link
				__line_interaction_interaction.setTrg(interaction);

				// create link
				__interaction_lifeline_line.setSrc(interaction);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_BWD(match, combo, line, operand, guard,
					spec, message, interaction, messageSend, messageReceive);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_BWD(Match match, CombinedFragment combo,
			Lifeline line, InteractionOperand operand,
			InteractionConstraint guard, LiteralString spec, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive) {
		match.registerObject("combo", combo);
		match.registerObject("line", line);
		match.registerObject("operand", operand);
		match.registerObject("guard", guard);
		match.registerObject("spec", spec);
		match.registerObject("message", message);
		match.registerObject("interaction", interaction);
		match.registerObject("messageSend", messageSend);
		match.registerObject("messageReceive", messageReceive);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_BWD(Match match, CombinedFragment combo,
			Lifeline line, InteractionOperand operand,
			InteractionConstraint guard, LiteralString spec, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", true, csp);
		var_combo_interactionOperator.setValue(combo.getInteractionOperator());
		var_combo_interactionOperator.setType("EObject");

		// Create explicit parameters

		// Create unbound variables

		// Create constraints
		EqInterOperKind eqInterOperKind = new EqInterOperKind();

		csp.getConstraints().add(eqInterOperKind);

		// Solve CSP
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			CombinedFragment combo, Lifeline line, InteractionOperand operand,
			InteractionConstraint guard, LiteralString spec, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Flow flow,
			Message message, Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Actor actor,
			ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals

		// Create attribute variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", true, csp);
		var_guard_name.setValue(guard.getName());
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", true, csp);
		var_spec_value.setValue(spec.getValue());
		var_spec_value.setType("");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", true, csp);
		var_message_name.setValue(message.getName());
		var_message_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", csp);
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", csp);
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", csp);
		var_step_name.setType("");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("combo", combo);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("operand", operand);
		isApplicableMatch.registerObject("guard", guard);
		isApplicableMatch.registerObject("spec", spec);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("message", message);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("messageSend", messageSend);
		isApplicableMatch.registerObject("messageReceive", messageReceive);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_BWD(PerformRuleResult ruleresult, EObject step,
			EObject alt, EObject combo, EObject line, EObject stepToCombo,
			EObject operand, EObject alternative1ToOperand, EObject guard,
			EObject spec, EObject altFlow, EObject altFlowToOperand,
			EObject useCase, EObject useCaseToInteraction, EObject flow,
			EObject message, EObject interaction, EObject stepToMessage,
			EObject messageSend, EObject messageReceive, EObject actor,
			EObject actorToLine) {
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_10(
			EMoflonEdge _edge_stepAlternative) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_926 = null;
		NormalStep __DEC_alt_stepAlternative_335018 = null;
		Flow __DEC_step_steps_453232 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_778368 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_778368 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		AlternativeFlowAlternative alt = null;
		UseCase useCase = null;
		Flow flow = null;
		Actor actor = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_stepAlternative is really bound
			JavaSDM.ensure(_edge_stepAlternative != null);
			// bind object
			_TmpObject = _edge_stepAlternative.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer()
					: null;

			// check object flow is really bound
			JavaSDM.ensure(flow != null);

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_stepAlternative.getTrg();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			_TmpObject = alt.getRef();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check link stepAlternative from alt to step
			JavaSDM.ensure(step.equals(alt.eContainer()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_altFlow_flows_926 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
							.eContainer() : null;

					// check object __DEC_altFlow_flows_926 is really bound
					JavaSDM.ensure(__DEC_altFlow_flows_926 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_altFlow_flows_926.getFlows().contains(
							altFlow));

					// check isomorphic binding between objects __DEC_altFlow_flows_926 and useCase 
					JavaSDM.ensure(!__DEC_altFlow_flows_926.equals(useCase));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_alt_stepAlternative_335018 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
							.eContainer() : null;

					// check object __DEC_alt_stepAlternative_335018 is really bound
					JavaSDM.ensure(__DEC_alt_stepAlternative_335018 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_alt_stepAlternative_335018
							.getStepAlternative().contains(alt));

					// check isomorphic binding between objects __DEC_alt_stepAlternative_335018 and step 
					JavaSDM.ensure(!__DEC_alt_stepAlternative_335018
							.equals(step));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_453232 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_453232 is really bound
					JavaSDM.ensure(__DEC_step_steps_453232 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_453232.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_453232 and altFlow 
					JavaSDM.ensure(!__DEC_step_steps_453232.equals(altFlow));

					// check isomorphic binding between objects __DEC_step_steps_453232 and flow 
					JavaSDM.ensure(!__DEC_step_steps_453232.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link ref from altFlow to __DEC_altFlow_ref_778368
					fujaba__Success = false;

					fujaba__IterAltFlowTo__DEC_altFlow_ref_778368 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(altFlow,
											AlternativeFlowAlternative.class,
											"ref")).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterAltFlowTo__DEC_altFlow_ref_778368
									.hasNext()) {
						try {
							__DEC_altFlow_ref_778368 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_778368
									.next();

							// check object __DEC_altFlow_ref_778368 is really bound
							JavaSDM.ensure(__DEC_altFlow_ref_778368 != null);
							// check isomorphic binding between objects __DEC_altFlow_ref_778368 and alt 
							JavaSDM.ensure(!__DEC_altFlow_ref_778368
									.equals(alt));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_stepAlternative is really bound
				JavaSDM.ensure(_edge_stepAlternative != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link ref from alt to altFlow
				JavaSDM.ensure(altFlow.equals(alt.getRef()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link flows from altFlow to useCase
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(altFlow, UseCase.class,
								"$eContainer").contains(useCase)));

				// check link src from _edge_stepAlternative to step
				JavaSDM.ensure(step.equals(_edge_stepAlternative.getSrc()));

				// check link stepAlternative from alt to step
				JavaSDM.ensure(step.equals(alt.eContainer()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link steps from step to altFlow
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(step, AlternativeFlow.class,
								"$eContainer").contains(altFlow)));

				// check link trg from _edge_stepAlternative to alt
				JavaSDM.ensure(alt.equals(_edge_stepAlternative.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, step, alt,
						altFlow, useCase, flow, actor);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_11(
			EMoflonEdge _edge_ref) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_699242 = null;
		NormalStep __DEC_alt_stepAlternative_438179 = null;
		Flow __DEC_step_steps_894541 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_7111 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_7111 = null;
		Match match = null;
		UseCase useCase = null;
		Flow flow = null;
		Actor actor = null;
		NormalStep step = null;
		AlternativeFlow altFlow = null;
		AlternativeFlowAlternative alt = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_ref is really bound
			JavaSDM.ensure(_edge_ref != null);
			// bind object
			_TmpObject = _edge_ref.getSrc();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			_TmpObject = alt.getRef();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// bind object
			step = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
					.eContainer() : null;

			// check object step is really bound
			JavaSDM.ensure(step != null);

			// check if contained via correct reference
			JavaSDM.ensure(step.getStepAlternative().contains(alt));

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer()
					: null;

			// check object flow is really bound
			JavaSDM.ensure(flow != null);

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// check link trg from _edge_ref to altFlow
			JavaSDM.ensure(altFlow.equals(_edge_ref.getTrg()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_altFlow_flows_699242 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
							.eContainer() : null;

					// check object __DEC_altFlow_flows_699242 is really bound
					JavaSDM.ensure(__DEC_altFlow_flows_699242 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_altFlow_flows_699242.getFlows()
							.contains(altFlow));

					// check isomorphic binding between objects __DEC_altFlow_flows_699242 and useCase 
					JavaSDM.ensure(!__DEC_altFlow_flows_699242.equals(useCase));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_alt_stepAlternative_438179 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
							.eContainer() : null;

					// check object __DEC_alt_stepAlternative_438179 is really bound
					JavaSDM.ensure(__DEC_alt_stepAlternative_438179 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_alt_stepAlternative_438179
							.getStepAlternative().contains(alt));

					// check isomorphic binding between objects __DEC_alt_stepAlternative_438179 and step 
					JavaSDM.ensure(!__DEC_alt_stepAlternative_438179
							.equals(step));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_894541 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_894541 is really bound
					JavaSDM.ensure(__DEC_step_steps_894541 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_894541.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_894541 and altFlow 
					JavaSDM.ensure(!__DEC_step_steps_894541.equals(altFlow));

					// check isomorphic binding between objects __DEC_step_steps_894541 and flow 
					JavaSDM.ensure(!__DEC_step_steps_894541.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link ref from altFlow to __DEC_altFlow_ref_7111
					fujaba__Success = false;

					fujaba__IterAltFlowTo__DEC_altFlow_ref_7111 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(altFlow,
											AlternativeFlowAlternative.class,
											"ref")).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterAltFlowTo__DEC_altFlow_ref_7111
									.hasNext()) {
						try {
							__DEC_altFlow_ref_7111 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_7111
									.next();

							// check object __DEC_altFlow_ref_7111 is really bound
							JavaSDM.ensure(__DEC_altFlow_ref_7111 != null);
							// check isomorphic binding between objects __DEC_altFlow_ref_7111 and alt 
							JavaSDM.ensure(!__DEC_altFlow_ref_7111.equals(alt));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_ref is really bound
				JavaSDM.ensure(_edge_ref != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link ref from alt to altFlow
				JavaSDM.ensure(altFlow.equals(alt.getRef()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link flows from altFlow to useCase
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(altFlow, UseCase.class,
								"$eContainer").contains(useCase)));

				// check link src from _edge_ref to alt
				JavaSDM.ensure(alt.equals(_edge_ref.getSrc()));

				// check link stepAlternative from alt to step
				JavaSDM.ensure(step.equals(alt.eContainer()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link steps from step to altFlow
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(step, AlternativeFlow.class,
								"$eContainer").contains(altFlow)));

				// check link trg from _edge_ref to altFlow
				JavaSDM.ensure(altFlow.equals(_edge_ref.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, step, alt,
						altFlow, useCase, flow, actor);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_38(
			EMoflonEdge _edge_operand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_838342 = null;
		InteractionOperand __DEC_combo_fragment_794278 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_468653 = null;
		InteractionOperand __DEC_messageReceive_fragment_156710 = null;
		Interaction __DEC_messageSend_enclosingInteraction_448832 = null;
		InteractionOperand __DEC_messageSend_fragment_827865 = null;
		Interaction __DEC_operand_enclosingInteraction_956573 = null;
		InteractionOperand __DEC_operand_fragment_738141 = null;
		InteractionOperand __DEC_guard_guard_247949 = null;
		CombinedFragment __DEC_operand_operand_1416 = null;
		Constraint __DEC_spec_specification_461854 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_144606 = null;
		Message __DEC_messageReceive_receiveEvent_144606 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_241646 = null;
		Message __DEC_messageSend_receiveEvent_241646 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_854079 = null;
		Message __DEC_messageReceive_sendEvent_854079 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_214759 = null;
		Message __DEC_messageSend_sendEvent_214759 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_122748 = null;
		MessageEnd __DEC_message_message_122748 = null;
		Match match = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterComboToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_operand is really bound
			JavaSDM.ensure(_edge_operand != null);
			// bind object
			_TmpObject = _edge_operand.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_operand.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// check link operand from operand to combo
			JavaSDM.ensure(combo.equals(operand.eContainer()));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// iterate to-many link covered from combo to line
			fujaba__Success = false;

			fujaba__IterComboToLine = new ArrayList(combo.getCovered())
					.iterator();

			while (fujaba__IterComboToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterComboToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from operand to line
					JavaSDM.ensure(operand.getCovered().contains(line));

					// iterate to-many link covered from line to messageReceive
					fujaba__Success = false;

					fujaba__IterLineToMessageReceive = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// bind object
							_TmpObject = message.getSendEvent();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_838342 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_838342 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_838342 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_838342 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_838342
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_794278 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_794278 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_794278 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_794278 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_794278
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_468653 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_468653 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_468653 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_468653 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_468653
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_156710 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_156710 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_156710 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_156710 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_156710
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_448832 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_448832 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_448832 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_448832 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_448832
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_827865 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_827865 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_827865 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_827865 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_827865
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_956573 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_956573 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_956573 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_956573 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_956573
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_738141 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_738141 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_738141 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_738141 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_738141
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_247949 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_247949 is really bound
									JavaSDM.ensure(__DEC_guard_guard_247949 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_247949
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_247949 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_247949
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_1416 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_1416 is really bound
									JavaSDM.ensure(__DEC_operand_operand_1416 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_1416
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_1416 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_1416
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_461854 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_461854 is really bound
									JavaSDM.ensure(__DEC_spec_specification_461854 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_461854
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_461854 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_461854
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_144606
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_144606 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_144606
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_144606 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_144606
													.next();

											// check object __DEC_messageReceive_receiveEvent_144606 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_144606 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_144606 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_144606
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_241646
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_241646 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_241646
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_241646 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_241646
													.next();

											// check object __DEC_messageSend_receiveEvent_241646 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_241646 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_241646 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_241646
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_854079
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_854079 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_854079
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_854079 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_854079
													.next();

											// check object __DEC_messageReceive_sendEvent_854079 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_854079 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_854079 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_854079
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_214759
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_214759 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_214759
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_214759 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_214759
													.next();

											// check object __DEC_messageSend_sendEvent_214759 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_214759 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_214759 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_214759
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_122748
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_122748 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_122748
													.hasNext()) {
										try {
											__DEC_message_message_122748 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_122748
													.next();

											// check object __DEC_message_message_122748 is really bound
											JavaSDM.ensure(__DEC_message_message_122748 != null);
											// check isomorphic binding between objects __DEC_message_message_122748 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_122748
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_122748 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_122748
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_operand is really bound
								JavaSDM.ensure(_edge_operand != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_operand to combo
								JavaSDM.ensure(combo.equals(_edge_operand
										.getSrc()));

								// check link trg from _edge_operand to operand
								JavaSDM.ensure(operand.equals(_edge_operand
										.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_39(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_111589 = null;
		InteractionOperand __DEC_combo_fragment_350321 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_704386 = null;
		InteractionOperand __DEC_messageReceive_fragment_269607 = null;
		Interaction __DEC_messageSend_enclosingInteraction_92519 = null;
		InteractionOperand __DEC_messageSend_fragment_5762 = null;
		Interaction __DEC_operand_enclosingInteraction_65562 = null;
		InteractionOperand __DEC_operand_fragment_552128 = null;
		InteractionOperand __DEC_guard_guard_969788 = null;
		CombinedFragment __DEC_operand_operand_806568 = null;
		Constraint __DEC_spec_specification_765204 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_290335 = null;
		Message __DEC_messageReceive_receiveEvent_290335 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_55269 = null;
		Message __DEC_messageSend_receiveEvent_55269 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_235023 = null;
		Message __DEC_messageReceive_sendEvent_235023 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_192050 = null;
		Message __DEC_messageSend_sendEvent_192050 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_847597 = null;
		MessageEnd __DEC_message_message_847597 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterComboToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// check link covered from line to combo
			JavaSDM.ensure(line.getCoveredBy().contains(combo));

			// iterate to-many link covered from line to messageReceive
			fujaba__Success = false;

			fujaba__IterLineToMessageReceive = new ArrayList(
					line.getCoveredBy()).iterator();

			while (fujaba__IterLineToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageReceive.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageReceive.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// bind object
					_TmpObject = message.getSendEvent();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link message from messageSend to message
					JavaSDM.ensure(message.equals(messageSend.getMessage()));

					// iterate to-many link operand from combo to operand
					fujaba__Success = false;

					fujaba__IterComboToOperand = new ArrayList(
							combo.getOperand()).iterator();

					while (fujaba__IterComboToOperand.hasNext()) {
						try {
							operand = (InteractionOperand) fujaba__IterComboToOperand
									.next();

							// check object operand is really bound
							JavaSDM.ensure(operand != null);
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// check link covered from operand to line
							JavaSDM.ensure(operand.getCovered().contains(line));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_111589 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_111589 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_111589 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_111589 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_111589
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_350321 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_350321 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_350321 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_350321 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_350321
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_704386 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_704386 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_704386 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_704386 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_704386
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_269607 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_269607 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_269607 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_269607 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_269607
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_92519 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_92519 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_92519 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_92519 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_92519
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_5762 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_5762 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_5762 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_5762 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_5762
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_65562 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_65562 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_65562 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_65562 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_65562
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_552128 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_552128 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_552128 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_552128 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_552128
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_969788 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_969788 is really bound
									JavaSDM.ensure(__DEC_guard_guard_969788 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_969788
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_969788 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_969788
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_806568 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_806568 is really bound
									JavaSDM.ensure(__DEC_operand_operand_806568 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_806568
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_806568 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_806568
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_765204 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_765204 is really bound
									JavaSDM.ensure(__DEC_spec_specification_765204 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_765204
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_765204 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_765204
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_290335
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_290335 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_290335
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_290335 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_290335
													.next();

											// check object __DEC_messageReceive_receiveEvent_290335 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_290335 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_290335 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_290335
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_55269
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_55269 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_55269
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_55269 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_55269
													.next();

											// check object __DEC_messageSend_receiveEvent_55269 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_55269 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_55269 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_55269
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_235023
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_235023 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_235023
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_235023 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_235023
													.next();

											// check object __DEC_messageReceive_sendEvent_235023 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_235023 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_235023 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_235023
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_192050
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_192050 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_192050
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_192050 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_192050
													.next();

											// check object __DEC_messageSend_sendEvent_192050 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_192050 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_192050 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_192050
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_847597
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_847597 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_847597
													.hasNext()) {
										try {
											__DEC_message_message_847597 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_847597
													.next();

											// check object __DEC_message_message_847597 is really bound
											JavaSDM.ensure(__DEC_message_message_847597 != null);
											// check isomorphic binding between objects __DEC_message_message_847597 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_847597
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_847597 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_847597
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_coveredBy is really bound
								JavaSDM.ensure(_edge_coveredBy != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_coveredBy to line
								JavaSDM.ensure(line.equals(_edge_coveredBy
										.getSrc()));

								// check link trg from _edge_coveredBy to combo
								JavaSDM.ensure(combo.equals(_edge_coveredBy
										.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_40(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_150078 = null;
		InteractionOperand __DEC_combo_fragment_538214 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_77207 = null;
		InteractionOperand __DEC_messageReceive_fragment_991304 = null;
		Interaction __DEC_messageSend_enclosingInteraction_738498 = null;
		InteractionOperand __DEC_messageSend_fragment_660388 = null;
		Interaction __DEC_operand_enclosingInteraction_214340 = null;
		InteractionOperand __DEC_operand_fragment_976852 = null;
		InteractionOperand __DEC_guard_guard_926383 = null;
		CombinedFragment __DEC_operand_operand_927668 = null;
		Constraint __DEC_spec_specification_599575 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_145170 = null;
		Message __DEC_messageReceive_receiveEvent_145170 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_516313 = null;
		Message __DEC_messageSend_receiveEvent_516313 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_745859 = null;
		Message __DEC_messageReceive_sendEvent_745859 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_935476 = null;
		Message __DEC_messageSend_sendEvent_935476 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_278681 = null;
		MessageEnd __DEC_message_message_278681 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterComboToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterComboTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Lifeline line = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from line to combo
			JavaSDM.ensure(line.getCoveredBy().contains(combo));

			// iterate to-many link covered from line to messageReceive
			fujaba__Success = false;

			fujaba__IterLineToMessageReceive = new ArrayList(
					line.getCoveredBy()).iterator();

			while (fujaba__IterLineToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageReceive.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageReceive.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// bind object
					_TmpObject = message.getSendEvent();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link message from messageSend to message
					JavaSDM.ensure(message.equals(messageSend.getMessage()));

					// iterate to-many link trg from combo to _edge_coveredBy
					fujaba__Success = false;

					fujaba__IterComboTo_edge_coveredBy = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(combo,
											EMoflonEdge.class, "trg"))
							.iterator();

					while (fujaba__IterComboTo_edge_coveredBy.hasNext()) {
						try {
							_edge_coveredBy = (EMoflonEdge) fujaba__IterComboTo_edge_coveredBy
									.next();

							// check object _edge_coveredBy is really bound
							JavaSDM.ensure(_edge_coveredBy != null);
							// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
							JavaSDM.ensure(!_edge_coveredBy
									.equals(_edge_covered));

							// check link src from _edge_coveredBy to line
							JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

							// iterate to-many link operand from combo to operand
							fujaba__Success = false;

							fujaba__IterComboToOperand = new ArrayList(
									combo.getOperand()).iterator();

							while (fujaba__IterComboToOperand.hasNext()) {
								try {
									operand = (InteractionOperand) fujaba__IterComboToOperand
											.next();

									// check object operand is really bound
									JavaSDM.ensure(operand != null);
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// check link covered from operand to line
									JavaSDM.ensure(operand.getCovered()
											.contains(line));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_150078 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_150078 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_150078 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_150078 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_150078
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_538214 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_538214 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_538214 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_538214 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_538214
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_77207 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_77207 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_77207 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_77207 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_77207
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_991304 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_991304 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_991304 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_991304 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_991304
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_738498 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_738498 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_738498 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_738498 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_738498
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_660388 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_660388 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_660388 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_660388 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_660388
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_214340 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_214340 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_214340 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_214340 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_214340
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_976852 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_976852 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_976852 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_976852 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_976852
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_926383 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_926383 is really bound
											JavaSDM.ensure(__DEC_guard_guard_926383 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_926383
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_926383 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_926383
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_927668 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_927668 is really bound
											JavaSDM.ensure(__DEC_operand_operand_927668 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_927668
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_927668 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_927668
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_599575 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_599575 is really bound
											JavaSDM.ensure(__DEC_spec_specification_599575 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_599575
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_599575 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_599575
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_145170
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_145170 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_145170
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_145170 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_145170
															.next();

													// check object __DEC_messageReceive_receiveEvent_145170 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_145170 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_145170 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_145170
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_516313
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_516313 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_516313
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_516313 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_516313
															.next();

													// check object __DEC_messageSend_receiveEvent_516313 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_516313 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_516313 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_516313
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_745859
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_745859 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_745859
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_745859 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_745859
															.next();

													// check object __DEC_messageReceive_sendEvent_745859 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_745859 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_745859 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_745859
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_935476
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_935476 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_935476
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_935476 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_935476
															.next();

													// check object __DEC_messageSend_sendEvent_935476 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_935476 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_935476 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_935476
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_278681
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_278681 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_278681
															.hasNext()) {
												try {
													__DEC_message_message_278681 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_278681
															.next();

													// check object __DEC_message_message_278681 is really bound
													JavaSDM.ensure(__DEC_message_message_278681 != null);
													// check isomorphic binding between objects __DEC_message_message_278681 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_278681
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_278681 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_278681
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_covered is really bound
										JavaSDM.ensure(_edge_covered != null);
										// check object _edge_coveredBy is really bound
										JavaSDM.ensure(_edge_coveredBy != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
										JavaSDM.ensure(!_edge_coveredBy
												.equals(_edge_covered));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_covered to combo
										JavaSDM.ensure(combo
												.equals(_edge_covered.getSrc()));

										// check link src from _edge_coveredBy to line
										JavaSDM.ensure(line
												.equals(_edge_coveredBy
														.getSrc()));

										// check link trg from _edge_covered to line
										JavaSDM.ensure(line
												.equals(_edge_covered.getTrg()));

										// check link trg from _edge_coveredBy to combo
										JavaSDM.ensure(combo
												.equals(_edge_coveredBy
														.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_41(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_314021 = null;
		InteractionOperand __DEC_combo_fragment_213049 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_967507 = null;
		InteractionOperand __DEC_messageReceive_fragment_229808 = null;
		Interaction __DEC_messageSend_enclosingInteraction_117528 = null;
		InteractionOperand __DEC_messageSend_fragment_297190 = null;
		Interaction __DEC_operand_enclosingInteraction_769418 = null;
		InteractionOperand __DEC_operand_fragment_2975 = null;
		InteractionOperand __DEC_guard_guard_978567 = null;
		CombinedFragment __DEC_operand_operand_253104 = null;
		Constraint __DEC_spec_specification_883789 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_762753 = null;
		Message __DEC_messageReceive_receiveEvent_762753 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_104229 = null;
		Message __DEC_messageSend_receiveEvent_104229 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_906439 = null;
		Message __DEC_messageReceive_sendEvent_906439 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_611528 = null;
		Message __DEC_messageSend_sendEvent_611528 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_537274 = null;
		MessageEnd __DEC_message_message_537274 = null;
		Match match = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link covered from line to combo
			JavaSDM.ensure(line.getCoveredBy().contains(combo));

			// check link covered from operand to line
			JavaSDM.ensure(operand.getCovered().contains(line));

			// iterate to-many link covered from line to messageReceive
			fujaba__Success = false;

			fujaba__IterLineToMessageReceive = new ArrayList(
					line.getCoveredBy()).iterator();

			while (fujaba__IterLineToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageReceive.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageReceive.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// bind object
					_TmpObject = message.getSendEvent();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link message from messageSend to message
					JavaSDM.ensure(message.equals(messageSend.getMessage()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_combo_enclosingInteraction_314021 = combo
									.getEnclosingInteraction();

							// check object __DEC_combo_enclosingInteraction_314021 is really bound
							JavaSDM.ensure(__DEC_combo_enclosingInteraction_314021 != null);

							// check isomorphic binding between objects __DEC_combo_enclosingInteraction_314021 and interaction 
							JavaSDM.ensure(!__DEC_combo_enclosingInteraction_314021
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_combo_fragment_213049 = combo
									.getEnclosingOperand();

							// check object __DEC_combo_fragment_213049 is really bound
							JavaSDM.ensure(__DEC_combo_fragment_213049 != null);

							// check isomorphic binding between objects __DEC_combo_fragment_213049 and operand 
							JavaSDM.ensure(!__DEC_combo_fragment_213049
									.equals(operand));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_967507 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_967507 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_967507 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_967507 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_967507
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_fragment_229808 = messageReceive
									.getEnclosingOperand();

							// check object __DEC_messageReceive_fragment_229808 is really bound
							JavaSDM.ensure(__DEC_messageReceive_fragment_229808 != null);

							// check isomorphic binding between objects __DEC_messageReceive_fragment_229808 and operand 
							JavaSDM.ensure(!__DEC_messageReceive_fragment_229808
									.equals(operand));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_117528 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_117528 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_117528 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_117528 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_117528
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_fragment_297190 = messageSend
									.getEnclosingOperand();

							// check object __DEC_messageSend_fragment_297190 is really bound
							JavaSDM.ensure(__DEC_messageSend_fragment_297190 != null);

							// check isomorphic binding between objects __DEC_messageSend_fragment_297190 and operand 
							JavaSDM.ensure(!__DEC_messageSend_fragment_297190
									.equals(operand));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_operand_enclosingInteraction_769418 = operand
									.getEnclosingInteraction();

							// check object __DEC_operand_enclosingInteraction_769418 is really bound
							JavaSDM.ensure(__DEC_operand_enclosingInteraction_769418 != null);

							// check isomorphic binding between objects __DEC_operand_enclosingInteraction_769418 and interaction 
							JavaSDM.ensure(!__DEC_operand_enclosingInteraction_769418
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_operand_fragment_2975 = operand
									.getEnclosingOperand();

							// check object __DEC_operand_fragment_2975 is really bound
							JavaSDM.ensure(__DEC_operand_fragment_2975 != null);

							// check isomorphic binding between objects __DEC_operand_fragment_2975 and operand 
							JavaSDM.ensure(!__DEC_operand_fragment_2975
									.equals(operand));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// negative check for link packagedElement from guard
						JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(guard,
										ModalSequenceDiagram.Package.class,
										"packagedElement").size() == 0);
						// negative check for link packagedElement from spec
						JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(spec,
										ModalSequenceDiagram.Package.class,
										"packagedElement").size() == 0);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_guard_guard_978567 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
									.eContainer() : null;

							// check object __DEC_guard_guard_978567 is really bound
							JavaSDM.ensure(__DEC_guard_guard_978567 != null);

							// check if contained via correct reference
							JavaSDM.ensure(guard
									.equals(__DEC_guard_guard_978567.getGuard()));

							// check isomorphic binding between objects __DEC_guard_guard_978567 and operand 
							JavaSDM.ensure(!__DEC_guard_guard_978567
									.equals(operand));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_operand_operand_253104 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
									.eContainer() : null;

							// check object __DEC_operand_operand_253104 is really bound
							JavaSDM.ensure(__DEC_operand_operand_253104 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_operand_operand_253104
									.getOperand().contains(operand));

							// check isomorphic binding between objects __DEC_operand_operand_253104 and combo 
							JavaSDM.ensure(!__DEC_operand_operand_253104
									.equals(combo));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_spec_specification_883789 = spec.eContainer() instanceof Constraint ? (Constraint) spec
									.eContainer() : null;

							// check object __DEC_spec_specification_883789 is really bound
							JavaSDM.ensure(__DEC_spec_specification_883789 != null);

							// check if contained via correct reference
							JavaSDM.ensure(spec
									.equals(__DEC_spec_specification_883789
											.getSpecification()));

							// check isomorphic binding between objects __DEC_spec_specification_883789 and guard 
							JavaSDM.ensure(!__DEC_spec_specification_883789
									.equals(guard));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_762753
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_762753 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_762753
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_762753 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_762753
											.next();

									// check object __DEC_messageReceive_receiveEvent_762753 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_762753 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_762753 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_762753
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_104229
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_104229 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_104229
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_104229 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_104229
											.next();

									// check object __DEC_messageSend_receiveEvent_104229 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_104229 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_104229 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_104229
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_906439
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_906439 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_906439
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_906439 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_906439
											.next();

									// check object __DEC_messageReceive_sendEvent_906439 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_906439 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_906439 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_906439
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_611528
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_611528 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_611528
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_611528 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_611528
											.next();

									// check object __DEC_messageSend_sendEvent_611528 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_611528 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_611528 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_611528
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_537274
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_537274 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_537274
											.hasNext()) {
								try {
									__DEC_message_message_537274 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_537274
											.next();

									// check object __DEC_message_message_537274 is really bound
									JavaSDM.ensure(__DEC_message_message_537274 != null);
									// check isomorphic binding between objects __DEC_message_message_537274 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_537274
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_537274 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_537274
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check link fragment from operand to operand
						JavaSDM.ensure(!(operand.equals(operand
								.getEnclosingOperand())));

						// check link fragment from operand to operand
						JavaSDM.ensure(!(operand.equals(operand
								.getEnclosingOperand())));

						// check object _edge_coveredBy is really bound
						JavaSDM.ensure(_edge_coveredBy != null);
						// check object combo is really bound
						JavaSDM.ensure(combo != null);
						// check object guard is really bound
						JavaSDM.ensure(guard != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check object operand is really bound
						JavaSDM.ensure(operand != null);
						// check object spec is really bound
						JavaSDM.ensure(spec != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from combo to interaction
						JavaSDM.ensure(!(interaction.equals(combo
								.getEnclosingInteraction())));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link fragment from operand to interaction
						JavaSDM.ensure(!(interaction.equals(operand
								.getEnclosingInteraction())));

						// check link fragment from combo to operand
						JavaSDM.ensure(!(operand.equals(combo
								.getEnclosingOperand())));

						// check link fragment from messageReceive to operand
						JavaSDM.ensure(!(operand.equals(messageReceive
								.getEnclosingOperand())));

						// check link fragment from messageSend to operand
						JavaSDM.ensure(!(operand.equals(messageSend
								.getEnclosingOperand())));

						// check link guard from operand to guard
						JavaSDM.ensure(guard.equals(operand.getGuard()));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link operand from operand to combo
						JavaSDM.ensure(combo.equals(operand.eContainer()));

						// check link specification from spec to guard
						JavaSDM.ensure(guard.equals(spec.eContainer()));

						// check link src from _edge_coveredBy to line
						JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

						// check link trg from _edge_coveredBy to operand
						JavaSDM.ensure(operand.equals(_edge_coveredBy.getTrg()));

						// check link covered from line to combo
						JavaSDM.ensure(line.getCoveredBy().contains(combo));

						// check link covered from messageReceive to line
						JavaSDM.ensure(messageReceive.getCovered().contains(
								line));

						// check link covered from operand to line
						JavaSDM.ensure(operand.getCovered().contains(line));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match, combo,
								line, operand, guard, spec, message,
								interaction, messageSend, messageReceive);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_42(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_186649 = null;
		InteractionOperand __DEC_combo_fragment_538323 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_477255 = null;
		InteractionOperand __DEC_messageReceive_fragment_533869 = null;
		Interaction __DEC_messageSend_enclosingInteraction_503328 = null;
		InteractionOperand __DEC_messageSend_fragment_778155 = null;
		Interaction __DEC_operand_enclosingInteraction_574310 = null;
		InteractionOperand __DEC_operand_fragment_191839 = null;
		InteractionOperand __DEC_guard_guard_492631 = null;
		CombinedFragment __DEC_operand_operand_73729 = null;
		Constraint __DEC_spec_specification_264274 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_888011 = null;
		Message __DEC_messageReceive_receiveEvent_888011 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_605521 = null;
		Message __DEC_messageSend_receiveEvent_605521 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_770080 = null;
		Message __DEC_messageReceive_sendEvent_770080 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_972335 = null;
		Message __DEC_messageSend_sendEvent_972335 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_28526 = null;
		MessageEnd __DEC_message_message_28526 = null;
		Match match = null;
		Iterator fujaba__IterOperandTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link covered from line to combo
			JavaSDM.ensure(line.getCoveredBy().contains(combo));

			// check link covered from operand to line
			JavaSDM.ensure(operand.getCovered().contains(line));

			// iterate to-many link covered from line to messageReceive
			fujaba__Success = false;

			fujaba__IterLineToMessageReceive = new ArrayList(
					line.getCoveredBy()).iterator();

			while (fujaba__IterLineToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageReceive.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageReceive.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// bind object
					_TmpObject = message.getSendEvent();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link message from messageSend to message
					JavaSDM.ensure(message.equals(messageSend.getMessage()));

					// iterate to-many link trg from operand to _edge_coveredBy
					fujaba__Success = false;

					fujaba__IterOperandTo_edge_coveredBy = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(operand,
											EMoflonEdge.class, "trg"))
							.iterator();

					while (fujaba__IterOperandTo_edge_coveredBy.hasNext()) {
						try {
							_edge_coveredBy = (EMoflonEdge) fujaba__IterOperandTo_edge_coveredBy
									.next();

							// check object _edge_coveredBy is really bound
							JavaSDM.ensure(_edge_coveredBy != null);
							// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
							JavaSDM.ensure(!_edge_coveredBy
									.equals(_edge_covered));

							// check link src from _edge_coveredBy to line
							JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_186649 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_186649 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_186649 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_186649 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_186649
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_538323 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_538323 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_538323 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_538323 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_538323
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_477255 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_477255 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_477255 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_477255 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_477255
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_533869 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_533869 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_533869 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_533869 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_533869
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_503328 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_503328 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_503328 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_503328 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_503328
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_778155 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_778155 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_778155 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_778155 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_778155
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_574310 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_574310 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_574310 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_574310 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_574310
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_191839 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_191839 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_191839 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_191839 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_191839
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_492631 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_492631 is really bound
									JavaSDM.ensure(__DEC_guard_guard_492631 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_492631
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_492631 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_492631
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_73729 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_73729 is really bound
									JavaSDM.ensure(__DEC_operand_operand_73729 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_73729
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_73729 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_73729
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_264274 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_264274 is really bound
									JavaSDM.ensure(__DEC_spec_specification_264274 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_264274
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_264274 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_264274
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_888011
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_888011 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_888011
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_888011 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_888011
													.next();

											// check object __DEC_messageReceive_receiveEvent_888011 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_888011 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_888011 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_888011
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_605521
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_605521 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_605521
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_605521 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_605521
													.next();

											// check object __DEC_messageSend_receiveEvent_605521 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_605521 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_605521 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_605521
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_770080
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_770080 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_770080
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_770080 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_770080
													.next();

											// check object __DEC_messageReceive_sendEvent_770080 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_770080 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_770080 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_770080
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_972335
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_972335 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_972335
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_972335 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_972335
													.next();

											// check object __DEC_messageSend_sendEvent_972335 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_972335 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_972335 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_972335
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_28526
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_28526 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_28526
													.hasNext()) {
										try {
											__DEC_message_message_28526 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_28526
													.next();

											// check object __DEC_message_message_28526 is really bound
											JavaSDM.ensure(__DEC_message_message_28526 != null);
											// check isomorphic binding between objects __DEC_message_message_28526 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_28526
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_28526 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_28526
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_covered is really bound
								JavaSDM.ensure(_edge_covered != null);
								// check object _edge_coveredBy is really bound
								JavaSDM.ensure(_edge_coveredBy != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
								JavaSDM.ensure(!_edge_coveredBy
										.equals(_edge_covered));

								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_covered to operand
								JavaSDM.ensure(operand.equals(_edge_covered
										.getSrc()));

								// check link src from _edge_coveredBy to line
								JavaSDM.ensure(line.equals(_edge_coveredBy
										.getSrc()));

								// check link trg from _edge_covered to line
								JavaSDM.ensure(line.equals(_edge_covered
										.getTrg()));

								// check link trg from _edge_coveredBy to operand
								JavaSDM.ensure(operand.equals(_edge_coveredBy
										.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_43(
			EMoflonEdge _edge_guard) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_876788 = null;
		InteractionOperand __DEC_combo_fragment_327643 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_893459 = null;
		InteractionOperand __DEC_messageReceive_fragment_276590 = null;
		Interaction __DEC_messageSend_enclosingInteraction_255934 = null;
		InteractionOperand __DEC_messageSend_fragment_97473 = null;
		Interaction __DEC_operand_enclosingInteraction_126502 = null;
		InteractionOperand __DEC_operand_fragment_239501 = null;
		InteractionOperand __DEC_guard_guard_911007 = null;
		CombinedFragment __DEC_operand_operand_651473 = null;
		Constraint __DEC_spec_specification_379584 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_330756 = null;
		Message __DEC_messageReceive_receiveEvent_330756 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_966498 = null;
		Message __DEC_messageSend_receiveEvent_966498 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_615676 = null;
		Message __DEC_messageReceive_sendEvent_615676 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_53030 = null;
		Message __DEC_messageSend_sendEvent_53030 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_217128 = null;
		MessageEnd __DEC_message_message_217128 = null;
		Match match = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_guard is really bound
			JavaSDM.ensure(_edge_guard != null);
			// bind object
			_TmpObject = _edge_guard.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link trg from _edge_guard to guard
			JavaSDM.ensure(guard.equals(_edge_guard.getTrg()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from line to combo
					JavaSDM.ensure(line.getCoveredBy().contains(combo));

					// iterate to-many link covered from line to messageReceive
					fujaba__Success = false;

					fujaba__IterLineToMessageReceive = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// bind object
							_TmpObject = message.getSendEvent();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_876788 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_876788 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_876788 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_876788 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_876788
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_327643 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_327643 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_327643 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_327643 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_327643
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_893459 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_893459 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_893459 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_893459 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_893459
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_276590 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_276590 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_276590 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_276590 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_276590
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_255934 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_255934 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_255934 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_255934 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_255934
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_97473 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_97473 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_97473 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_97473 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_97473
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_126502 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_126502 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_126502 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_126502 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_126502
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_239501 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_239501 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_239501 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_239501 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_239501
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_911007 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_911007 is really bound
									JavaSDM.ensure(__DEC_guard_guard_911007 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_911007
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_911007 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_911007
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_651473 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_651473 is really bound
									JavaSDM.ensure(__DEC_operand_operand_651473 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_651473
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_651473 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_651473
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_379584 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_379584 is really bound
									JavaSDM.ensure(__DEC_spec_specification_379584 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_379584
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_379584 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_379584
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_330756
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_330756 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_330756
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_330756 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_330756
													.next();

											// check object __DEC_messageReceive_receiveEvent_330756 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_330756 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_330756 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_330756
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_966498
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_966498 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_966498
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_966498 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_966498
													.next();

											// check object __DEC_messageSend_receiveEvent_966498 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_966498 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_966498 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_966498
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_615676
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_615676 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_615676
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_615676 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_615676
													.next();

											// check object __DEC_messageReceive_sendEvent_615676 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_615676 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_615676 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_615676
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_53030
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_53030 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_53030
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_53030 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_53030
													.next();

											// check object __DEC_messageSend_sendEvent_53030 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_53030 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_53030 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_53030
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_217128
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_217128 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_217128
													.hasNext()) {
										try {
											__DEC_message_message_217128 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_217128
													.next();

											// check object __DEC_message_message_217128 is really bound
											JavaSDM.ensure(__DEC_message_message_217128 != null);
											// check isomorphic binding between objects __DEC_message_message_217128 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_217128
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_217128 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_217128
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_guard is really bound
								JavaSDM.ensure(_edge_guard != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_guard to operand
								JavaSDM.ensure(operand.equals(_edge_guard
										.getSrc()));

								// check link trg from _edge_guard to guard
								JavaSDM.ensure(guard.equals(_edge_guard
										.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_44(
			EMoflonEdge _edge_specification) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_605500 = null;
		InteractionOperand __DEC_combo_fragment_117357 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_82624 = null;
		InteractionOperand __DEC_messageReceive_fragment_823577 = null;
		Interaction __DEC_messageSend_enclosingInteraction_237515 = null;
		InteractionOperand __DEC_messageSend_fragment_667687 = null;
		Interaction __DEC_operand_enclosingInteraction_98056 = null;
		InteractionOperand __DEC_operand_fragment_660037 = null;
		InteractionOperand __DEC_guard_guard_861421 = null;
		CombinedFragment __DEC_operand_operand_781996 = null;
		Constraint __DEC_spec_specification_61011 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_657656 = null;
		Message __DEC_messageReceive_receiveEvent_657656 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_468353 = null;
		Message __DEC_messageSend_receiveEvent_468353 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_54911 = null;
		Message __DEC_messageReceive_sendEvent_54911 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_840529 = null;
		Message __DEC_messageSend_sendEvent_840529 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_829403 = null;
		MessageEnd __DEC_message_message_829403 = null;
		Match match = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionOperand operand = null;
		InteractionConstraint guard = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_specification is really bound
			JavaSDM.ensure(_edge_specification != null);
			// bind object
			_TmpObject = _edge_specification.getSrc();

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;

			// bind object
			operand = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
					.eContainer() : null;

			// check object operand is really bound
			JavaSDM.ensure(operand != null);

			// check if contained via correct reference
			JavaSDM.ensure(guard.equals(operand.getGuard()));

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = _edge_specification.getTrg();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link specification from spec to guard
			JavaSDM.ensure(guard.equals(spec.eContainer()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from line to combo
					JavaSDM.ensure(line.getCoveredBy().contains(combo));

					// iterate to-many link covered from line to messageReceive
					fujaba__Success = false;

					fujaba__IterLineToMessageReceive = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// bind object
							_TmpObject = message.getSendEvent();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_605500 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_605500 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_605500 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_605500 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_605500
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_117357 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_117357 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_117357 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_117357 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_117357
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_82624 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_82624 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_82624 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_82624 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_82624
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_823577 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_823577 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_823577 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_823577 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_823577
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_237515 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_237515 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_237515 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_237515 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_237515
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_667687 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_667687 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_667687 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_667687 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_667687
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_98056 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_98056 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_98056 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_98056 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_98056
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_660037 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_660037 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_660037 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_660037 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_660037
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_861421 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_861421 is really bound
									JavaSDM.ensure(__DEC_guard_guard_861421 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_861421
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_861421 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_861421
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_781996 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_781996 is really bound
									JavaSDM.ensure(__DEC_operand_operand_781996 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_781996
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_781996 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_781996
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_61011 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_61011 is really bound
									JavaSDM.ensure(__DEC_spec_specification_61011 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_61011
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_61011 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_61011
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_657656
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_657656 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_657656
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_657656 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_657656
													.next();

											// check object __DEC_messageReceive_receiveEvent_657656 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_657656 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_657656 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_657656
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_468353
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_468353 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_468353
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_468353 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_468353
													.next();

											// check object __DEC_messageSend_receiveEvent_468353 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_468353 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_468353 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_468353
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_54911
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_54911 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_54911
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_54911 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_54911
													.next();

											// check object __DEC_messageReceive_sendEvent_54911 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_54911 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_54911 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_54911
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_840529
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_840529 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_840529
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_840529 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_840529
													.next();

											// check object __DEC_messageSend_sendEvent_840529 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_840529 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_840529 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_840529
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_829403
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_829403 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_829403
													.hasNext()) {
										try {
											__DEC_message_message_829403 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_829403
													.next();

											// check object __DEC_message_message_829403 is really bound
											JavaSDM.ensure(__DEC_message_message_829403 != null);
											// check isomorphic binding between objects __DEC_message_message_829403 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_829403
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_829403 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_829403
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_specification is really bound
								JavaSDM.ensure(_edge_specification != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_specification to guard
								JavaSDM.ensure(guard.equals(_edge_specification
										.getSrc()));

								// check link trg from _edge_specification to spec
								JavaSDM.ensure(spec.equals(_edge_specification
										.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_12(
			EMoflonEdge _edge_steps) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_766497 = null;
		NormalStep __DEC_alt_stepAlternative_226013 = null;
		Flow __DEC_step_steps_549293 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_977868 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_977868 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		Actor actor = null;
		NormalStep step = null;
		UseCase useCase = null;
		Flow flow = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_steps is really bound
			JavaSDM.ensure(_edge_steps != null);
			// bind object
			_TmpObject = _edge_steps.getSrc();

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof Flow);
			flow = (Flow) _TmpObject;

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_steps.getTrg();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// check link steps from step to flow
			JavaSDM.ensure(flow.equals(step.eContainer()));

			// iterate to-many link stepAlternative from step to alt
			fujaba__Success = false;

			fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative())
					.iterator();

			while (fujaba__IterStepToAlt.hasNext()) {
				try {
					_TmpObject = fujaba__IterStepToAlt.next();

					// ensure correct type and really bound of object alt
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
					alt = (AlternativeFlowAlternative) _TmpObject;
					// bind object
					_TmpObject = alt.getRef();

					// ensure correct type and really bound of object altFlow
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
					altFlow = (AlternativeFlow) _TmpObject;

					// check isomorphic binding between objects flow and altFlow 
					JavaSDM.ensure(!flow.equals(altFlow));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_766497 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_766497 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_766497 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_766497
									.getFlows().contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_766497 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_766497
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_226013 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_226013 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_226013 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_226013
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_226013 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_226013
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_549293 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_549293 is really bound
							JavaSDM.ensure(__DEC_step_steps_549293 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_549293.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_549293 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_549293
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_549293 and flow 
							JavaSDM.ensure(!__DEC_step_steps_549293
									.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_977868
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_977868 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_977868
											.hasNext()) {
								try {
									__DEC_altFlow_ref_977868 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_977868
											.next();

									// check object __DEC_altFlow_ref_977868 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_977868 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_977868 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_977868
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_steps is really bound
						JavaSDM.ensure(_edge_steps != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_steps to flow
						JavaSDM.ensure(flow.equals(_edge_steps.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_steps to step
						JavaSDM.ensure(step.equals(_edge_steps.getTrg()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match, step,
								alt, altFlow, useCase, flow, actor);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_13(
			EMoflonEdge _edge_actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_399520 = null;
		NormalStep __DEC_alt_stepAlternative_92336 = null;
		Flow __DEC_step_steps_625154 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_404907 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_404907 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		UseCase useCase = null;
		Flow flow = null;
		Actor actor = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_actor is really bound
			JavaSDM.ensure(_edge_actor != null);
			// bind object
			_TmpObject = _edge_actor.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer()
					: null;

			// check object flow is really bound
			JavaSDM.ensure(flow != null);

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// check link trg from _edge_actor to actor
			JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

			// iterate to-many link stepAlternative from step to alt
			fujaba__Success = false;

			fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative())
					.iterator();

			while (fujaba__IterStepToAlt.hasNext()) {
				try {
					_TmpObject = fujaba__IterStepToAlt.next();

					// ensure correct type and really bound of object alt
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
					alt = (AlternativeFlowAlternative) _TmpObject;
					// bind object
					_TmpObject = alt.getRef();

					// ensure correct type and really bound of object altFlow
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
					altFlow = (AlternativeFlow) _TmpObject;

					// check isomorphic binding between objects flow and altFlow 
					JavaSDM.ensure(!flow.equals(altFlow));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_399520 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_399520 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_399520 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_399520
									.getFlows().contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_399520 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_399520
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_92336 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_92336 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_92336 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_92336
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_92336 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_92336
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_625154 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_625154 is really bound
							JavaSDM.ensure(__DEC_step_steps_625154 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_625154.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_625154 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_625154
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_625154 and flow 
							JavaSDM.ensure(!__DEC_step_steps_625154
									.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_404907
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_404907 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_404907
											.hasNext()) {
								try {
									__DEC_altFlow_ref_404907 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_404907
											.next();

									// check object __DEC_altFlow_ref_404907 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_404907 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_404907 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_404907
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_actor is really bound
						JavaSDM.ensure(_edge_actor != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_actor to step
						JavaSDM.ensure(step.equals(_edge_actor.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_actor to actor
						JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match, step,
								alt, altFlow, useCase, flow, actor);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_45(
			EMoflonEdge _edge_sendEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_673708 = null;
		InteractionOperand __DEC_combo_fragment_718771 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_188063 = null;
		InteractionOperand __DEC_messageReceive_fragment_289470 = null;
		Interaction __DEC_messageSend_enclosingInteraction_809683 = null;
		InteractionOperand __DEC_messageSend_fragment_500683 = null;
		Interaction __DEC_operand_enclosingInteraction_121105 = null;
		InteractionOperand __DEC_operand_fragment_364794 = null;
		InteractionOperand __DEC_guard_guard_758741 = null;
		CombinedFragment __DEC_operand_operand_259082 = null;
		Constraint __DEC_spec_specification_558263 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_125766 = null;
		Message __DEC_messageReceive_receiveEvent_125766 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_271534 = null;
		Message __DEC_messageSend_receiveEvent_271534 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_431712 = null;
		Message __DEC_messageReceive_sendEvent_431712 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_694712 = null;
		Message __DEC_messageSend_sendEvent_694712 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_978812 = null;
		MessageEnd __DEC_message_message_978812 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_sendEvent is really bound
			JavaSDM.ensure(_edge_sendEvent != null);
			// bind object
			_TmpObject = _edge_sendEvent.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_sendEvent to messageSend
			JavaSDM.ensure(messageSend.equals(_edge_sendEvent.getTrg()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_673708 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_673708 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_673708 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_673708 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_673708
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_718771 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_718771 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_718771 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_718771 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_718771
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_188063 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_188063 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_188063 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_188063 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_188063
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_289470 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_289470 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_289470 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_289470 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_289470
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_809683 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_809683 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_809683 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_809683 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_809683
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_500683 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_500683 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_500683 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_500683 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_500683
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_121105 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_121105 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_121105 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_121105 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_121105
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_364794 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_364794 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_364794 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_364794 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_364794
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_758741 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_758741 is really bound
											JavaSDM.ensure(__DEC_guard_guard_758741 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_758741
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_758741 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_758741
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_259082 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_259082 is really bound
											JavaSDM.ensure(__DEC_operand_operand_259082 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_259082
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_259082 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_259082
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_558263 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_558263 is really bound
											JavaSDM.ensure(__DEC_spec_specification_558263 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_558263
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_558263 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_558263
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_125766
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_125766 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_125766
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_125766 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_125766
															.next();

													// check object __DEC_messageReceive_receiveEvent_125766 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_125766 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_125766 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_125766
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_271534
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_271534 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_271534
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_271534 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_271534
															.next();

													// check object __DEC_messageSend_receiveEvent_271534 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_271534 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_271534 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_271534
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_431712
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_431712 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_431712
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_431712 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_431712
															.next();

													// check object __DEC_messageReceive_sendEvent_431712 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_431712 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_431712 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_431712
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_694712
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_694712 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_694712
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_694712 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_694712
															.next();

													// check object __DEC_messageSend_sendEvent_694712 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_694712 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_694712 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_694712
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_978812
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_978812 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_978812
															.hasNext()) {
												try {
													__DEC_message_message_978812 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_978812
															.next();

													// check object __DEC_message_message_978812 is really bound
													JavaSDM.ensure(__DEC_message_message_978812 != null);
													// check isomorphic binding between objects __DEC_message_message_978812 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_978812
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_978812 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_978812
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_sendEvent is really bound
										JavaSDM.ensure(_edge_sendEvent != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_sendEvent to message
										JavaSDM.ensure(message
												.equals(_edge_sendEvent
														.getSrc()));

										// check link trg from _edge_sendEvent to messageSend
										JavaSDM.ensure(messageSend
												.equals(_edge_sendEvent
														.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_46(
			EMoflonEdge _edge_receiveEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_525423 = null;
		InteractionOperand __DEC_combo_fragment_642649 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_822357 = null;
		InteractionOperand __DEC_messageReceive_fragment_46477 = null;
		Interaction __DEC_messageSend_enclosingInteraction_294054 = null;
		InteractionOperand __DEC_messageSend_fragment_72292 = null;
		Interaction __DEC_operand_enclosingInteraction_104785 = null;
		InteractionOperand __DEC_operand_fragment_781524 = null;
		InteractionOperand __DEC_guard_guard_795765 = null;
		CombinedFragment __DEC_operand_operand_600595 = null;
		Constraint __DEC_spec_specification_404731 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_665495 = null;
		Message __DEC_messageReceive_receiveEvent_665495 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490873 = null;
		Message __DEC_messageSend_receiveEvent_490873 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_416774 = null;
		Message __DEC_messageReceive_sendEvent_416774 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_996585 = null;
		Message __DEC_messageSend_sendEvent_996585 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_386804 = null;
		MessageEnd __DEC_message_message_386804 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_receiveEvent is really bound
			JavaSDM.ensure(_edge_receiveEvent != null);
			// bind object
			_TmpObject = _edge_receiveEvent.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link src from _edge_receiveEvent to message
			JavaSDM.ensure(message.equals(_edge_receiveEvent.getSrc()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_525423 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_525423 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_525423 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_525423 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_525423
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_642649 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_642649 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_642649 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_642649 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_642649
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_822357 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_822357 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_822357 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_822357 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_822357
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_46477 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_46477 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_46477 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_46477 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_46477
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_294054 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_294054 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_294054 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_294054 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_294054
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_72292 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_72292 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_72292 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_72292 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_72292
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_104785 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_104785 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_104785 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_104785 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_104785
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_781524 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_781524 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_781524 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_781524 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_781524
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_795765 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_795765 is really bound
											JavaSDM.ensure(__DEC_guard_guard_795765 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_795765
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_795765 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_795765
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_600595 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_600595 is really bound
											JavaSDM.ensure(__DEC_operand_operand_600595 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_600595
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_600595 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_600595
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_404731 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_404731 is really bound
											JavaSDM.ensure(__DEC_spec_specification_404731 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_404731
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_404731 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_404731
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_665495
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_665495 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_665495
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_665495 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_665495
															.next();

													// check object __DEC_messageReceive_receiveEvent_665495 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_665495 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_665495 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_665495
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_490873
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490873 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490873
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_490873 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490873
															.next();

													// check object __DEC_messageSend_receiveEvent_490873 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_490873 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_490873 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_490873
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_416774
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_416774 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_416774
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_416774 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_416774
															.next();

													// check object __DEC_messageReceive_sendEvent_416774 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_416774 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_416774 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_416774
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_996585
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_996585 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_996585
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_996585 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_996585
															.next();

													// check object __DEC_messageSend_sendEvent_996585 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_996585 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_996585 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_996585
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_386804
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_386804 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_386804
															.hasNext()) {
												try {
													__DEC_message_message_386804 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_386804
															.next();

													// check object __DEC_message_message_386804 is really bound
													JavaSDM.ensure(__DEC_message_message_386804 != null);
													// check isomorphic binding between objects __DEC_message_message_386804 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_386804
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_386804 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_386804
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_receiveEvent is really bound
										JavaSDM.ensure(_edge_receiveEvent != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_receiveEvent to message
										JavaSDM.ensure(message
												.equals(_edge_receiveEvent
														.getSrc()));

										// check link trg from _edge_receiveEvent to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(_edge_receiveEvent
														.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_47(
			EMoflonEdge _edge_interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_311330 = null;
		InteractionOperand __DEC_combo_fragment_450886 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_762417 = null;
		InteractionOperand __DEC_messageReceive_fragment_170303 = null;
		Interaction __DEC_messageSend_enclosingInteraction_910334 = null;
		InteractionOperand __DEC_messageSend_fragment_904915 = null;
		Interaction __DEC_operand_enclosingInteraction_375040 = null;
		InteractionOperand __DEC_operand_fragment_570848 = null;
		InteractionOperand __DEC_guard_guard_35641 = null;
		CombinedFragment __DEC_operand_operand_407639 = null;
		Constraint __DEC_spec_specification_930955 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_775663 = null;
		Message __DEC_messageReceive_receiveEvent_775663 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_119724 = null;
		Message __DEC_messageSend_receiveEvent_119724 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_720775 = null;
		Message __DEC_messageReceive_sendEvent_720775 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_136614 = null;
		Message __DEC_messageSend_sendEvent_136614 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_27913 = null;
		MessageEnd __DEC_message_message_27913 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterInteractionToLine = null;
		Lifeline line = null;
		Interaction interaction = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_interaction is really bound
			JavaSDM.ensure(_edge_interaction != null);
			// bind object
			_TmpObject = _edge_interaction.getTrg();

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;

			// iterate to-many link lifeline from interaction to line
			fujaba__Success = false;

			fujaba__IterInteractionToLine = new ArrayList(
					interaction.getLifeline()).iterator();

			while (fujaba__IterInteractionToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterInteractionToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to messageReceive
							fujaba__Success = false;

							fujaba__IterLineToMessageReceive = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToMessageReceive.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToMessageReceive
											.next();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageReceive.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link receiveEvent from message to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(message.getReceiveEvent()));

									// bind object
									_TmpObject = message.getSendEvent();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;

									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link message from messageSend to message
									JavaSDM.ensure(message.equals(messageSend
											.getMessage()));

									// check link src from _edge_interaction to message
									JavaSDM.ensure(message
											.equals(_edge_interaction.getSrc()));

									// iterate to-many link covered from line to operand
									fujaba__Success = false;

									fujaba__IterLineToOperand = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToOperand.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// check link operand from operand to combo
											JavaSDM.ensure(combo.equals(operand
													.eContainer()));

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_311330 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_311330 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_311330 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_311330 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_311330
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_450886 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_450886 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_450886 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_450886 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_450886
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_762417 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_762417 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_762417 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_762417 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_762417
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_170303 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_170303 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_170303 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_170303 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_170303
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_910334 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_910334 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_910334 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_910334 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_910334
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_904915 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_904915 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_904915 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_904915 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_904915
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_375040 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_375040 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_375040 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_375040 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_375040
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_570848 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_570848 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_570848 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_570848 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_570848
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_35641 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_35641 is really bound
													JavaSDM.ensure(__DEC_guard_guard_35641 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_35641
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_35641 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_35641
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_407639 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_407639 is really bound
													JavaSDM.ensure(__DEC_operand_operand_407639 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_407639
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_407639 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_407639
															.equals(combo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_930955 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_930955 is really bound
													JavaSDM.ensure(__DEC_spec_specification_930955 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_930955
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_930955 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_930955
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_775663
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_775663 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_775663
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_775663 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_775663
																	.next();

															// check object __DEC_messageReceive_receiveEvent_775663 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_775663 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_775663 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_775663
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_119724
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_119724 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_119724
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_119724 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_119724
																	.next();

															// check object __DEC_messageSend_receiveEvent_119724 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_119724 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_119724 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_119724
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_720775
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_720775 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_720775
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_720775 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_720775
																	.next();

															// check object __DEC_messageReceive_sendEvent_720775 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_720775 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_720775 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_720775
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_136614
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_136614 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_136614
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_136614 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_136614
																	.next();

															// check object __DEC_messageSend_sendEvent_136614 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_136614 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_136614 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_136614
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_27913
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_27913 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_27913
																	.hasNext()) {
														try {
															__DEC_message_message_27913 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_27913
																	.next();

															// check object __DEC_message_message_27913 is really bound
															JavaSDM.ensure(__DEC_message_message_27913 != null);
															// check isomorphic binding between objects __DEC_message_message_27913 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_27913
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_27913 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_27913
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_interaction is really bound
												JavaSDM.ensure(_edge_interaction != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_interaction to message
												JavaSDM.ensure(message
														.equals(_edge_interaction
																.getSrc()));

												// check link trg from _edge_interaction to interaction
												JavaSDM.ensure(interaction
														.equals(_edge_interaction
																.getTrg()));

												// check link covered from line to combo
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(combo));

												// check link covered from messageReceive to line
												JavaSDM.ensure(messageReceive
														.getCovered().contains(
																line));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, combo,
																line, operand,
																guard, spec,
																message,
																interaction,
																messageSend,
																messageReceive);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_48(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_920537 = null;
		InteractionOperand __DEC_combo_fragment_871397 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_209343 = null;
		InteractionOperand __DEC_messageReceive_fragment_358869 = null;
		Interaction __DEC_messageSend_enclosingInteraction_810785 = null;
		InteractionOperand __DEC_messageSend_fragment_618472 = null;
		Interaction __DEC_operand_enclosingInteraction_533638 = null;
		InteractionOperand __DEC_operand_fragment_623389 = null;
		InteractionOperand __DEC_guard_guard_806099 = null;
		CombinedFragment __DEC_operand_operand_788183 = null;
		Constraint __DEC_spec_specification_5119 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_890683 = null;
		Message __DEC_messageReceive_receiveEvent_890683 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_874569 = null;
		Message __DEC_messageSend_receiveEvent_874569 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_355064 = null;
		Message __DEC_messageReceive_sendEvent_355064 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_402777 = null;
		Message __DEC_messageSend_sendEvent_402777 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_480130 = null;
		MessageEnd __DEC_message_message_480130 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterInteractionToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterInteractionTo_edge_interaction = null;
		EMoflonEdge _edge_interaction = null;
		Interaction interaction = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;

			// iterate to-many link trg from interaction to _edge_interaction
			fujaba__Success = false;

			fujaba__IterInteractionTo_edge_interaction = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(
							interaction, EMoflonEdge.class, "trg")).iterator();

			while (fujaba__IterInteractionTo_edge_interaction.hasNext()) {
				try {
					_edge_interaction = (EMoflonEdge) fujaba__IterInteractionTo_edge_interaction
							.next();

					// check object _edge_interaction is really bound
					JavaSDM.ensure(_edge_interaction != null);
					// check isomorphic binding between objects _edge_message and _edge_interaction 
					JavaSDM.ensure(!_edge_message.equals(_edge_interaction));

					// iterate to-many link lifeline from interaction to line
					fujaba__Success = false;

					fujaba__IterInteractionToLine = new ArrayList(
							interaction.getLifeline()).iterator();

					while (fujaba__IterInteractionToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterInteractionToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// iterate to-many link covered from line to combo
							fujaba__Success = false;

							fujaba__IterLineToCombo = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToCombo.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// iterate to-many link covered from line to messageReceive
									fujaba__Success = false;

									fujaba__IterLineToMessageReceive = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// bind object
											message = messageReceive
													.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// bind object
											_TmpObject = message.getSendEvent();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;

											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageSend to message
											JavaSDM.ensure(message
													.equals(messageSend
															.getMessage()));

											// check link src from _edge_interaction to message
											JavaSDM.ensure(message
													.equals(_edge_interaction
															.getSrc()));

											// check link trg from _edge_message to message
											JavaSDM.ensure(message
													.equals(_edge_message
															.getTrg()));

											// iterate to-many link covered from line to operand
											fujaba__Success = false;

											fujaba__IterLineToOperand = new ArrayList(
													line.getCoveredBy())
													.iterator();

											while (fujaba__IterLineToOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterLineToOperand
															.next();

													// ensure correct type and really bound of object operand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													operand = (InteractionOperand) _TmpObject;
													// bind object
													guard = operand.getGuard();

													// check object guard is really bound
													JavaSDM.ensure(guard != null);

													// check link operand from operand to combo
													JavaSDM.ensure(combo.equals(operand
															.eContainer()));

													// bind object
													_TmpObject = guard
															.getSpecification();

													// ensure correct type and really bound of object spec
													JavaSDM.ensure(_TmpObject instanceof LiteralString);
													spec = (LiteralString) _TmpObject;

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_920537 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_920537 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_920537 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_920537 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_920537
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_871397 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_871397 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_871397 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_871397 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_871397
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_209343 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_209343 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_209343 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_209343 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_209343
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_358869 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_358869 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_358869 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_358869 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_358869
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_810785 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_810785 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_810785 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_810785 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_810785
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_618472 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_618472 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_618472 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_618472 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_618472
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_533638 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_533638 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_533638 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_533638 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_533638
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_623389 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_623389 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_623389 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_623389 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_623389
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_806099 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_806099 is really bound
															JavaSDM.ensure(__DEC_guard_guard_806099 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_806099
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_806099 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_806099
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_788183 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_788183 is really bound
															JavaSDM.ensure(__DEC_operand_operand_788183 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_788183
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_788183 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_788183
																	.equals(combo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_5119 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_5119 is really bound
															JavaSDM.ensure(__DEC_spec_specification_5119 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_5119
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_5119 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_5119
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_890683
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_890683 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_890683
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_890683 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_890683
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_890683 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_890683 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_890683 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_890683
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_874569
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_874569 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_874569
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_874569 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_874569
																			.next();

																	// check object __DEC_messageSend_receiveEvent_874569 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_874569 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_874569 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_874569
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_355064
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_355064 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_355064
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_355064 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_355064
																			.next();

																	// check object __DEC_messageReceive_sendEvent_355064 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_355064 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_355064 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_355064
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_402777
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_402777 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_402777
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_402777 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_402777
																			.next();

																	// check object __DEC_messageSend_sendEvent_402777 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_402777 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_402777 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_402777
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_480130
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_480130 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_480130
																			.hasNext()) {
																try {
																	__DEC_message_message_480130 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_480130
																			.next();

																	// check object __DEC_message_message_480130 is really bound
																	JavaSDM.ensure(__DEC_message_message_480130 != null);
																	// check isomorphic binding between objects __DEC_message_message_480130 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_480130
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_480130 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_480130
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_interaction is really bound
														JavaSDM.ensure(_edge_interaction != null);
														// check object _edge_message is really bound
														JavaSDM.ensure(_edge_message != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_message and _edge_interaction 
														JavaSDM.ensure(!_edge_message
																.equals(_edge_interaction));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_interaction to message
														JavaSDM.ensure(message
																.equals(_edge_interaction
																		.getSrc()));

														// check link src from _edge_message to interaction
														JavaSDM.ensure(interaction
																.equals(_edge_message
																		.getSrc()));

														// check link trg from _edge_interaction to interaction
														JavaSDM.ensure(interaction
																.equals(_edge_interaction
																		.getTrg()));

														// check link trg from _edge_message to message
														JavaSDM.ensure(message
																.equals(_edge_message
																		.getTrg()));

														// check link covered from line to combo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(combo));

														// check link covered from messageReceive to line
														JavaSDM.ensure(messageReceive
																.getCovered()
																.contains(line));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		combo,
																		line,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction,
																		messageSend,
																		messageReceive);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_49(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_927900 = null;
		InteractionOperand __DEC_combo_fragment_843026 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_312758 = null;
		InteractionOperand __DEC_messageReceive_fragment_202417 = null;
		Interaction __DEC_messageSend_enclosingInteraction_58918 = null;
		InteractionOperand __DEC_messageSend_fragment_525177 = null;
		Interaction __DEC_operand_enclosingInteraction_390655 = null;
		InteractionOperand __DEC_operand_fragment_204420 = null;
		InteractionOperand __DEC_guard_guard_55872 = null;
		CombinedFragment __DEC_operand_operand_66513 = null;
		Constraint __DEC_spec_specification_517477 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_275057 = null;
		Message __DEC_messageReceive_receiveEvent_275057 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_772023 = null;
		Message __DEC_messageSend_receiveEvent_772023 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_613907 = null;
		Message __DEC_messageReceive_sendEvent_613907 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_756179 = null;
		Message __DEC_messageSend_sendEvent_756179 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_692846 = null;
		MessageEnd __DEC_message_message_692846 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link src from _edge_message to messageSend
			JavaSDM.ensure(messageSend.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_927900 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_927900 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_927900 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_927900 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_927900
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_843026 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_843026 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_843026 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_843026 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_843026
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_312758 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_312758 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_312758 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_312758 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_312758
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_202417 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_202417 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_202417 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_202417 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_202417
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_58918 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_58918 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_58918 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_58918 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_58918
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_525177 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_525177 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_525177 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_525177 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_525177
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_390655 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_390655 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_390655 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_390655 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_390655
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_204420 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_204420 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_204420 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_204420 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_204420
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_55872 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_55872 is really bound
											JavaSDM.ensure(__DEC_guard_guard_55872 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_55872
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_55872 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_55872
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_66513 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_66513 is really bound
											JavaSDM.ensure(__DEC_operand_operand_66513 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_66513
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_66513 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_66513
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_517477 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_517477 is really bound
											JavaSDM.ensure(__DEC_spec_specification_517477 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_517477
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_517477 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_517477
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_275057
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_275057 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_275057
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_275057 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_275057
															.next();

													// check object __DEC_messageReceive_receiveEvent_275057 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_275057 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_275057 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_275057
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_772023
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_772023 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_772023
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_772023 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_772023
															.next();

													// check object __DEC_messageSend_receiveEvent_772023 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_772023 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_772023 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_772023
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_613907
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_613907 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_613907
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_613907 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_613907
															.next();

													// check object __DEC_messageReceive_sendEvent_613907 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_613907 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_613907 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_613907
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_756179
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_756179 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_756179
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_756179 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_756179
															.next();

													// check object __DEC_messageSend_sendEvent_756179 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_756179 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_756179 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_756179
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_692846
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_692846 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_692846
															.hasNext()) {
												try {
													__DEC_message_message_692846 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_692846
															.next();

													// check object __DEC_message_message_692846 is really bound
													JavaSDM.ensure(__DEC_message_message_692846 != null);
													// check isomorphic binding between objects __DEC_message_message_692846 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_692846
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_692846 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_692846
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_message is really bound
										JavaSDM.ensure(_edge_message != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_message to messageSend
										JavaSDM.ensure(messageSend
												.equals(_edge_message.getSrc()));

										// check link trg from _edge_message to message
										JavaSDM.ensure(message
												.equals(_edge_message.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_50(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_637044 = null;
		InteractionOperand __DEC_combo_fragment_537685 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_529288 = null;
		InteractionOperand __DEC_messageReceive_fragment_960759 = null;
		Interaction __DEC_messageSend_enclosingInteraction_457170 = null;
		InteractionOperand __DEC_messageSend_fragment_723868 = null;
		Interaction __DEC_operand_enclosingInteraction_138665 = null;
		InteractionOperand __DEC_operand_fragment_138289 = null;
		InteractionOperand __DEC_guard_guard_685393 = null;
		CombinedFragment __DEC_operand_operand_857076 = null;
		Constraint __DEC_spec_specification_578304 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_516258 = null;
		Message __DEC_messageReceive_receiveEvent_516258 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_610438 = null;
		Message __DEC_messageSend_receiveEvent_610438 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_810938 = null;
		Message __DEC_messageReceive_sendEvent_810938 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_570793 = null;
		Message __DEC_messageSend_sendEvent_570793 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_787516 = null;
		MessageEnd __DEC_message_message_787516 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_message to message
			JavaSDM.ensure(message.equals(_edge_message.getTrg()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_637044 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_637044 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_637044 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_637044 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_637044
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_537685 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_537685 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_537685 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_537685 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_537685
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_529288 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_529288 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_529288 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_529288 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_529288
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_960759 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_960759 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_960759 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_960759 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_960759
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_457170 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_457170 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_457170 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_457170 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_457170
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_723868 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_723868 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_723868 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_723868 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_723868
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_138665 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_138665 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_138665 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_138665 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_138665
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_138289 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_138289 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_138289 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_138289 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_138289
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_685393 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_685393 is really bound
											JavaSDM.ensure(__DEC_guard_guard_685393 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_685393
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_685393 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_685393
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_857076 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_857076 is really bound
											JavaSDM.ensure(__DEC_operand_operand_857076 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_857076
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_857076 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_857076
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_578304 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_578304 is really bound
											JavaSDM.ensure(__DEC_spec_specification_578304 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_578304
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_578304 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_578304
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_516258
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_516258 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_516258
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_516258 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_516258
															.next();

													// check object __DEC_messageReceive_receiveEvent_516258 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_516258 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_516258 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_516258
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_610438
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_610438 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_610438
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_610438 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_610438
															.next();

													// check object __DEC_messageSend_receiveEvent_610438 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_610438 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_610438 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_610438
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_810938
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_810938 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_810938
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_810938 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_810938
															.next();

													// check object __DEC_messageReceive_sendEvent_810938 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_810938 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_810938 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_810938
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_570793
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_570793 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_570793
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_570793 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_570793
															.next();

													// check object __DEC_messageSend_sendEvent_570793 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_570793 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_570793 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_570793
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_787516
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_787516 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_787516
															.hasNext()) {
												try {
													__DEC_message_message_787516 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_787516
															.next();

													// check object __DEC_message_message_787516 is really bound
													JavaSDM.ensure(__DEC_message_message_787516 != null);
													// check isomorphic binding between objects __DEC_message_message_787516 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_787516
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_787516 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_787516
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_message is really bound
										JavaSDM.ensure(_edge_message != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(_edge_message.getSrc()));

										// check link trg from _edge_message to message
										JavaSDM.ensure(message
												.equals(_edge_message.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_51(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_358478 = null;
		InteractionOperand __DEC_combo_fragment_135089 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_646278 = null;
		InteractionOperand __DEC_messageReceive_fragment_163350 = null;
		Interaction __DEC_messageSend_enclosingInteraction_858617 = null;
		InteractionOperand __DEC_messageSend_fragment_979959 = null;
		Interaction __DEC_operand_enclosingInteraction_144270 = null;
		InteractionOperand __DEC_operand_fragment_926681 = null;
		InteractionOperand __DEC_guard_guard_712467 = null;
		CombinedFragment __DEC_operand_operand_39064 = null;
		Constraint __DEC_spec_specification_89553 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_604156 = null;
		Message __DEC_messageReceive_receiveEvent_604156 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_118370 = null;
		Message __DEC_messageSend_receiveEvent_118370 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_611711 = null;
		Message __DEC_messageReceive_sendEvent_611711 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_31950 = null;
		Message __DEC_messageSend_sendEvent_31950 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_980855 = null;
		MessageEnd __DEC_message_message_980855 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link message from message to interaction
			JavaSDM.ensure(interaction.equals(message.getInteraction()));

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link covered from messageReceive to line
			JavaSDM.ensure(messageReceive.getCovered().contains(line));

			// iterate to-many link covered from line to combo
			fujaba__Success = false;

			fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// check link operand from operand to combo
							JavaSDM.ensure(combo.equals(operand.eContainer()));

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_358478 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_358478 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_358478 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_358478 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_358478
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_135089 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_135089 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_135089 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_135089 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_135089
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_646278 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_646278 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_646278 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_646278 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_646278
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_163350 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_163350 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_163350 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_163350 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_163350
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_858617 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_858617 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_858617 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_858617 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_858617
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_979959 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_979959 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_979959 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_979959 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_979959
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_144270 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_144270 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_144270 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_144270 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_144270
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_926681 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_926681 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_926681 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_926681 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_926681
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_712467 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_712467 is really bound
									JavaSDM.ensure(__DEC_guard_guard_712467 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_712467
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_712467 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_712467
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_39064 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_39064 is really bound
									JavaSDM.ensure(__DEC_operand_operand_39064 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_39064
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_39064 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_39064
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_89553 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_89553 is really bound
									JavaSDM.ensure(__DEC_spec_specification_89553 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_89553
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_89553 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_89553
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_604156
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_604156 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_604156
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_604156 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_604156
													.next();

											// check object __DEC_messageReceive_receiveEvent_604156 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_604156 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_604156 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_604156
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_118370
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_118370 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_118370
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_118370 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_118370
													.next();

											// check object __DEC_messageSend_receiveEvent_118370 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_118370 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_118370 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_118370
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_611711
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_611711 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_611711
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_611711 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_611711
													.next();

											// check object __DEC_messageReceive_sendEvent_611711 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_611711 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_611711 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_611711
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_31950
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_31950 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_31950
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_31950 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_31950
													.next();

											// check object __DEC_messageSend_sendEvent_31950 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_31950 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_31950 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_31950
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_980855
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_980855 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_980855
													.hasNext()) {
										try {
											__DEC_message_message_980855 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_980855
													.next();

											// check object __DEC_message_message_980855 is really bound
											JavaSDM.ensure(__DEC_message_message_980855 != null);
											// check isomorphic binding between objects __DEC_message_message_980855 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_980855
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_980855 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_980855
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_coveredBy is really bound
								JavaSDM.ensure(_edge_coveredBy != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_coveredBy to line
								JavaSDM.ensure(line.equals(_edge_coveredBy
										.getSrc()));

								// check link trg from _edge_coveredBy to messageReceive
								JavaSDM.ensure(messageReceive
										.equals(_edge_coveredBy.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_52(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_509946 = null;
		InteractionOperand __DEC_combo_fragment_568860 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_425941 = null;
		InteractionOperand __DEC_messageReceive_fragment_108088 = null;
		Interaction __DEC_messageSend_enclosingInteraction_918789 = null;
		InteractionOperand __DEC_messageSend_fragment_695128 = null;
		Interaction __DEC_operand_enclosingInteraction_935623 = null;
		InteractionOperand __DEC_operand_fragment_371185 = null;
		InteractionOperand __DEC_guard_guard_187551 = null;
		CombinedFragment __DEC_operand_operand_291794 = null;
		Constraint __DEC_spec_specification_530469 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_678175 = null;
		Message __DEC_messageReceive_receiveEvent_678175 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_189328 = null;
		Message __DEC_messageSend_receiveEvent_189328 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_857513 = null;
		Message __DEC_messageReceive_sendEvent_857513 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_441535 = null;
		Message __DEC_messageSend_sendEvent_441535 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_435589 = null;
		MessageEnd __DEC_message_message_435589 = null;
		Match match = null;
		Iterator fujaba__IterLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from message to interaction
			JavaSDM.ensure(interaction.equals(message.getInteraction()));

			// check link covered from messageReceive to line
			JavaSDM.ensure(messageReceive.getCovered().contains(line));

			// iterate to-many link covered from line to combo
			fujaba__Success = false;

			fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// check link operand from operand to combo
							JavaSDM.ensure(combo.equals(operand.eContainer()));

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link src from line to _edge_coveredBy
							fujaba__Success = false;

							fujaba__IterLineTo_edge_coveredBy = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(line,
													EMoflonEdge.class, "src"))
									.iterator();

							while (fujaba__IterLineTo_edge_coveredBy.hasNext()) {
								try {
									_edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy
											.next();

									// check object _edge_coveredBy is really bound
									JavaSDM.ensure(_edge_coveredBy != null);
									// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
									JavaSDM.ensure(!_edge_coveredBy
											.equals(_edge_covered));

									// check link trg from _edge_coveredBy to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(_edge_coveredBy.getTrg()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_509946 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_509946 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_509946 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_509946 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_509946
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_568860 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_568860 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_568860 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_568860 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_568860
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_425941 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_425941 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_425941 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_425941 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_425941
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_108088 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_108088 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_108088 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_108088 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_108088
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_918789 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_918789 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_918789 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_918789 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_918789
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_695128 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_695128 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_695128 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_695128 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_695128
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_935623 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_935623 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_935623 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_935623 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_935623
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_371185 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_371185 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_371185 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_371185 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_371185
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_187551 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_187551 is really bound
											JavaSDM.ensure(__DEC_guard_guard_187551 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_187551
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_187551 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_187551
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_291794 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_291794 is really bound
											JavaSDM.ensure(__DEC_operand_operand_291794 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_291794
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_291794 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_291794
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_530469 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_530469 is really bound
											JavaSDM.ensure(__DEC_spec_specification_530469 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_530469
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_530469 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_530469
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_678175
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_678175 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_678175
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_678175 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_678175
															.next();

													// check object __DEC_messageReceive_receiveEvent_678175 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_678175 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_678175 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_678175
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_189328
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_189328 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_189328
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_189328 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_189328
															.next();

													// check object __DEC_messageSend_receiveEvent_189328 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_189328 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_189328 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_189328
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_857513
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_857513 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_857513
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_857513 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_857513
															.next();

													// check object __DEC_messageReceive_sendEvent_857513 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_857513 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_857513 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_857513
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_441535
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_441535 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_441535
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_441535 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_441535
															.next();

													// check object __DEC_messageSend_sendEvent_441535 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_441535 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_441535 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_441535
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_435589
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_435589 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_435589
															.hasNext()) {
												try {
													__DEC_message_message_435589 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_435589
															.next();

													// check object __DEC_message_message_435589 is really bound
													JavaSDM.ensure(__DEC_message_message_435589 != null);
													// check isomorphic binding between objects __DEC_message_message_435589 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_435589
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_435589 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_435589
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_covered is really bound
										JavaSDM.ensure(_edge_covered != null);
										// check object _edge_coveredBy is really bound
										JavaSDM.ensure(_edge_coveredBy != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
										JavaSDM.ensure(!_edge_coveredBy
												.equals(_edge_covered));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_covered to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(_edge_covered.getSrc()));

										// check link src from _edge_coveredBy to line
										JavaSDM.ensure(line
												.equals(_edge_coveredBy
														.getSrc()));

										// check link trg from _edge_covered to line
										JavaSDM.ensure(line
												.equals(_edge_covered.getTrg()));

										// check link trg from _edge_coveredBy to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(_edge_coveredBy
														.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match, UseCase useCase, Flow flow,
			NormalStep step, Actor actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __useCase_flows_flow = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_FWD(match, useCase, flow,
					step, actor));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// create object __flow_steps_step
				__flow_steps_step = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_actor_actor
				__step_actor_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __flow_steps_step
				__flow_steps_step.setName("steps");
				// assign attribute __step_actor_actor
				__step_actor_actor.setName("actor");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__flow_steps_step, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_actor_actor, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						step, "toBeTranslatedNodes");

				// create link
				__flow_steps_step.setSrc(flow);

				// create link
				__flow_steps_step.setTrg(step);

				// create link
				__step_actor_actor.setSrc(step);

				// create link
				__step_actor_actor.setTrg(actor);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// create object __useCase_flows_flow
				__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __useCase_flows_flow
				__useCase_flows_flow.setName("flows");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						useCase, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						actor, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						flow, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__useCase_flows_flow, "contextEdges");

				// create link
				__useCase_flows_flow.setSrc(useCase);

				// create link
				__useCase_flows_flow.setTrg(flow);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_FWD(match, useCase, flow, step, actor);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_FWD(Match match, UseCase useCase,
			Flow flow, NormalStep step, Actor actor) {
		match.registerObject("useCase", useCase);
		match.registerObject("flow", flow);
		match.registerObject("step", step);
		match.registerObject("actor", actor);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_FWD(Match match, UseCase useCase,
			Flow flow, NormalStep step, Actor actor) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals

		// Create attribute variables

		// Create explicit parameters

		// Create unbound variables

		// Create constraints

		// Solve CSP
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			Flow flow, NormalStep step, Interaction interaction, Lifeline line,
			Actor actor, ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals

		// Create attribute variables
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", true, csp);
		var_step_name.setValue(step.getName());
		var_step_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", csp);
		var_message_name.setType("");

		// Create constraints
		Eq eq = new Eq();

		csp.getConstraints().add(eq);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("step", step);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_FWD(PerformRuleResult ruleresult,
			EObject useCase, EObject useCaseToInteraction, EObject flow,
			EObject step, EObject message, EObject interaction,
			EObject stepToMessage, EObject messageSend, EObject messageReceive,
			EObject line, EObject actor, EObject actorToLine) {
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_BWD(Match match, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __line_coveredBy_messageReceive = null;
		EMoflonEdge __messageReceive_covered_line = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __line_interaction_interaction = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_BWD(match, message,
					interaction, messageSend, messageReceive, line));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// create object __line_coveredBy_messageReceive
				__line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_covered_line
				__messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_message_message
				__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_message_message
				__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_interaction_interaction
				__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_sendEvent_messageSend
				__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_message_message
				__interaction_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __message_sendEvent_messageSend
				__message_sendEvent_messageSend.setName("sendEvent");
				// assign attribute __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive.setName("receiveEvent");
				// assign attribute __message_interaction_interaction
				__message_interaction_interaction.setName("interaction");
				// assign attribute __interaction_message_message
				__interaction_message_message.setName("message");
				// assign attribute __messageSend_message_message
				__messageSend_message_message.setName("message");
				// assign attribute __messageReceive_message_message
				__messageReceive_message_message.setName("message");
				// assign attribute __line_coveredBy_messageReceive
				__line_coveredBy_messageReceive.setName("coveredBy");
				// assign attribute __messageReceive_covered_line
				__messageReceive_covered_line.setName("covered");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageSend, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						message, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_messageReceive, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageReceive_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil
						.addOppositeReference(match,
								__messageReceive_message_message,
								"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_interaction_interaction,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_sendEvent_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_receiveEvent_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageReceive, "toBeTranslatedNodes");

				// create link
				__interaction_message_message.setTrg(message);

				// create link
				__message_receiveEvent_messageReceive.setSrc(message);

				// create link
				__message_interaction_interaction.setSrc(message);

				// create link
				__message_sendEvent_messageSend.setSrc(message);

				// create link
				__messageReceive_message_message.setTrg(message);

				// create link
				__messageSend_message_message.setTrg(message);

				// create link
				__message_interaction_interaction.setTrg(interaction);

				// create link
				__interaction_message_message.setSrc(interaction);

				// create link
				__messageSend_message_message.setSrc(messageSend);

				// create link
				__message_sendEvent_messageSend.setTrg(messageSend);

				// create link
				__message_receiveEvent_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_message_message.setSrc(messageReceive);

				// create link
				__line_coveredBy_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_covered_line.setSrc(messageReceive);

				// create link
				__messageReceive_covered_line.setTrg(line);

				// create link
				__line_coveredBy_messageReceive.setSrc(line);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// create object __interaction_lifeline_line
				__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_interaction_interaction
				__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __line_interaction_interaction
				__line_interaction_interaction.setName("interaction");
				// assign attribute __interaction_lifeline_line
				__interaction_lifeline_line.setName("lifeline");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						line, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_lifeline_line, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_interaction_interaction, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						interaction, "contextNodes");

				// create link
				__interaction_lifeline_line.setSrc(interaction);

				// create link
				__line_interaction_interaction.setTrg(interaction);

				// create link
				__interaction_lifeline_line.setTrg(line);

				// create link
				__line_interaction_interaction.setSrc(line);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_BWD(match, message, interaction,
					messageSend, messageReceive, line);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_BWD(Match match, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line) {
		match.registerObject("message", message);
		match.registerObject("interaction", interaction);
		match.registerObject("messageSend", messageSend);
		match.registerObject("messageReceive", messageReceive);
		match.registerObject("line", line);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_BWD(Match match, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals

		// Create attribute variables

		// Create explicit parameters

		// Create unbound variables

		// Create constraints

		// Solve CSP
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			Flow flow, Message message, Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Actor actor, ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals

		// Create attribute variables
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", true, csp);
		var_message_name.setValue(message.getName());
		var_message_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", csp);
		var_step_name.setType("");

		// Create constraints
		Eq eq = new Eq();

		csp.getConstraints().add(eq);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("message", message);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("messageSend", messageSend);
		isApplicableMatch.registerObject("messageReceive", messageReceive);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_BWD(PerformRuleResult ruleresult,
			EObject useCase, EObject useCaseToInteraction, EObject flow,
			EObject step, EObject message, EObject interaction,
			EObject stepToMessage, EObject messageSend, EObject messageReceive,
			EObject line, EObject actor, EObject actorToLine) {
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_4(
			EMoflonEdge _edge_steps) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Flow __DEC_step_steps_178395 = null;
		Match match = null;
		Actor actor = null;
		NormalStep step = null;
		UseCase useCase = null;
		Flow flow = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_steps is really bound
			JavaSDM.ensure(_edge_steps != null);
			// bind object
			_TmpObject = _edge_steps.getSrc();

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof Flow);
			flow = (Flow) _TmpObject;

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_steps.getTrg();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// check link steps from step to flow
			JavaSDM.ensure(flow.equals(step.eContainer()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_178395 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_178395 is really bound
					JavaSDM.ensure(__DEC_step_steps_178395 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_178395.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_178395 and flow 
					JavaSDM.ensure(!__DEC_step_steps_178395.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_steps is really bound
				JavaSDM.ensure(_edge_steps != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link src from _edge_steps to flow
				JavaSDM.ensure(flow.equals(_edge_steps.getSrc()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link trg from _edge_steps to step
				JavaSDM.ensure(step.equals(_edge_steps.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, useCase, flow,
						step, actor);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_5(
			EMoflonEdge _edge_actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Flow __DEC_step_steps_126427 = null;
		Match match = null;
		UseCase useCase = null;
		Flow flow = null;
		Actor actor = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_actor is really bound
			JavaSDM.ensure(_edge_actor != null);
			// bind object
			_TmpObject = _edge_actor.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer()
					: null;

			// check object flow is really bound
			JavaSDM.ensure(flow != null);

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// check link trg from _edge_actor to actor
			JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_126427 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_126427 is really bound
					JavaSDM.ensure(__DEC_step_steps_126427 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_126427.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_126427 and flow 
					JavaSDM.ensure(!__DEC_step_steps_126427.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_actor is really bound
				JavaSDM.ensure(_edge_actor != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link src from _edge_actor to step
				JavaSDM.ensure(step.equals(_edge_actor.getSrc()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link trg from _edge_actor to actor
				JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, useCase, flow,
						step, actor);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_4(
			EMoflonEdge _edge_sendEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_418485 = null;
		Interaction __DEC_messageSend_enclosingInteraction_994376 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_671642 = null;
		Message __DEC_messageReceive_receiveEvent_671642 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_425158 = null;
		Message __DEC_messageSend_receiveEvent_425158 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_457521 = null;
		Message __DEC_messageReceive_sendEvent_457521 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_335539 = null;
		Message __DEC_messageSend_sendEvent_335539 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_375968 = null;
		MessageEnd __DEC_message_message_375968 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_sendEvent is really bound
			JavaSDM.ensure(_edge_sendEvent != null);
			// bind object
			_TmpObject = _edge_sendEvent.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link trg from _edge_sendEvent to messageSend
			JavaSDM.ensure(messageSend.equals(_edge_sendEvent.getTrg()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_418485 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_418485 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_418485 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_418485 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_418485
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_994376 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_994376 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_994376 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_994376 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_994376
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_671642
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_671642 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_671642
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_671642 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_671642
											.next();

									// check object __DEC_messageReceive_receiveEvent_671642 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_671642 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_671642 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_671642
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_425158
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_425158 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_425158
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_425158 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_425158
											.next();

									// check object __DEC_messageSend_receiveEvent_425158 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_425158 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_425158 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_425158
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_457521
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_457521 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_457521
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_457521 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_457521
											.next();

									// check object __DEC_messageReceive_sendEvent_457521 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_457521 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_457521 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_457521
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_335539
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_335539 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_335539
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_335539 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_335539
											.next();

									// check object __DEC_messageSend_sendEvent_335539 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_335539 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_335539 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_335539
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_375968
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_375968 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_375968
											.hasNext()) {
								try {
									__DEC_message_message_375968 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_375968
											.next();

									// check object __DEC_message_message_375968 is really bound
									JavaSDM.ensure(__DEC_message_message_375968 != null);
									// check isomorphic binding between objects __DEC_message_message_375968 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_375968
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_375968 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_375968
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_sendEvent is really bound
						JavaSDM.ensure(_edge_sendEvent != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_sendEvent to message
						JavaSDM.ensure(message.equals(_edge_sendEvent.getSrc()));

						// check link trg from _edge_sendEvent to messageSend
						JavaSDM.ensure(messageSend.equals(_edge_sendEvent
								.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_5(
			EMoflonEdge _edge_receiveEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_810553 = null;
		Interaction __DEC_messageSend_enclosingInteraction_433896 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_749647 = null;
		Message __DEC_messageReceive_receiveEvent_749647 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_278131 = null;
		Message __DEC_messageSend_receiveEvent_278131 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_655332 = null;
		Message __DEC_messageReceive_sendEvent_655332 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_34294 = null;
		Message __DEC_messageSend_sendEvent_34294 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_620675 = null;
		MessageEnd __DEC_message_message_620675 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_receiveEvent is really bound
			JavaSDM.ensure(_edge_receiveEvent != null);
			// bind object
			_TmpObject = _edge_receiveEvent.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link trg from _edge_receiveEvent to messageReceive
			JavaSDM.ensure(messageReceive.equals(_edge_receiveEvent.getTrg()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_810553 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_810553 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_810553 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_810553 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_810553
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_433896 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_433896 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_433896 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_433896 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_433896
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_749647
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_749647 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_749647
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_749647 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_749647
											.next();

									// check object __DEC_messageReceive_receiveEvent_749647 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_749647 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_749647 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_749647
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_278131
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_278131 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_278131
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_278131 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_278131
											.next();

									// check object __DEC_messageSend_receiveEvent_278131 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_278131 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_278131 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_278131
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_655332
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_655332 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_655332
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_655332 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_655332
											.next();

									// check object __DEC_messageReceive_sendEvent_655332 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_655332 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_655332 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_655332
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_34294
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_34294 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_34294
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_34294 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_34294
											.next();

									// check object __DEC_messageSend_sendEvent_34294 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_34294 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_34294 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_34294
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_620675
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_620675 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_620675
											.hasNext()) {
								try {
									__DEC_message_message_620675 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_620675
											.next();

									// check object __DEC_message_message_620675 is really bound
									JavaSDM.ensure(__DEC_message_message_620675 != null);
									// check isomorphic binding between objects __DEC_message_message_620675 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_620675
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_620675 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_620675
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_receiveEvent is really bound
						JavaSDM.ensure(_edge_receiveEvent != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_receiveEvent to message
						JavaSDM.ensure(message.equals(_edge_receiveEvent
								.getSrc()));

						// check link trg from _edge_receiveEvent to messageReceive
						JavaSDM.ensure(messageReceive.equals(_edge_receiveEvent
								.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_6(
			EMoflonEdge _edge_interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_17590 = null;
		Interaction __DEC_messageSend_enclosingInteraction_198678 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_596393 = null;
		Message __DEC_messageReceive_receiveEvent_596393 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_626973 = null;
		Message __DEC_messageSend_receiveEvent_626973 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_898503 = null;
		Message __DEC_messageReceive_sendEvent_898503 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_175081 = null;
		Message __DEC_messageSend_sendEvent_175081 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_435655 = null;
		MessageEnd __DEC_message_message_435655 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_interaction is really bound
			JavaSDM.ensure(_edge_interaction != null);
			// bind object
			_TmpObject = _edge_interaction.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_interaction to interaction
			JavaSDM.ensure(interaction.equals(_edge_interaction.getTrg()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_17590 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_17590 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_17590 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_17590 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_17590
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_198678 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_198678 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_198678 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_198678 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_198678
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_596393
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_596393 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_596393
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_596393 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_596393
											.next();

									// check object __DEC_messageReceive_receiveEvent_596393 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_596393 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_596393 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_596393
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_626973
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_626973 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_626973
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_626973 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_626973
											.next();

									// check object __DEC_messageSend_receiveEvent_626973 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_626973 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_626973 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_626973
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_898503
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_898503 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_898503
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_898503 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_898503
											.next();

									// check object __DEC_messageReceive_sendEvent_898503 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_898503 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_898503 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_898503
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_175081
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_175081 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_175081
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_175081 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_175081
											.next();

									// check object __DEC_messageSend_sendEvent_175081 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_175081 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_175081 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_175081
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_435655
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_435655 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_435655
											.hasNext()) {
								try {
									__DEC_message_message_435655 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_435655
											.next();

									// check object __DEC_message_message_435655 is really bound
									JavaSDM.ensure(__DEC_message_message_435655 != null);
									// check isomorphic binding between objects __DEC_message_message_435655 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_435655
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_435655 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_435655
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_interaction is really bound
						JavaSDM.ensure(_edge_interaction != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_interaction to message
						JavaSDM.ensure(message.equals(_edge_interaction
								.getSrc()));

						// check link trg from _edge_interaction to interaction
						JavaSDM.ensure(interaction.equals(_edge_interaction
								.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_7(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_593493 = null;
		Interaction __DEC_messageSend_enclosingInteraction_182504 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_761932 = null;
		Message __DEC_messageReceive_receiveEvent_761932 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_602587 = null;
		Message __DEC_messageSend_receiveEvent_602587 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_251347 = null;
		Message __DEC_messageReceive_sendEvent_251347 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147292 = null;
		Message __DEC_messageSend_sendEvent_147292 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_17196 = null;
		MessageEnd __DEC_message_message_17196 = null;
		Match match = null;
		Iterator fujaba__IterMessageTo_edge_interaction = null;
		EMoflonEdge _edge_interaction = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link src from _edge_message to interaction
			JavaSDM.ensure(interaction.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// iterate to-many link src from message to _edge_interaction
					fujaba__Success = false;

					fujaba__IterMessageTo_edge_interaction = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(message,
											EMoflonEdge.class, "src"))
							.iterator();

					while (fujaba__IterMessageTo_edge_interaction.hasNext()) {
						try {
							_edge_interaction = (EMoflonEdge) fujaba__IterMessageTo_edge_interaction
									.next();

							// check object _edge_interaction is really bound
							JavaSDM.ensure(_edge_interaction != null);
							// check isomorphic binding between objects _edge_message and _edge_interaction 
							JavaSDM.ensure(!_edge_message
									.equals(_edge_interaction));

							// check link trg from _edge_interaction to interaction
							JavaSDM.ensure(interaction.equals(_edge_interaction
									.getTrg()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// negative check for link fragment from messageReceive
								JavaSDM.ensure(messageReceive
										.getEnclosingOperand() == null);
								// negative check for link fragment from messageSend
								JavaSDM.ensure(messageSend
										.getEnclosingOperand() == null);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_593493 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_593493 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_593493 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_593493 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_593493
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_182504 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_182504 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_182504 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_182504 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_182504
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_761932
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_761932 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_761932
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_761932 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_761932
													.next();

											// check object __DEC_messageReceive_receiveEvent_761932 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_761932 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_761932 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_761932
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_602587
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_602587 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_602587
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_602587 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_602587
													.next();

											// check object __DEC_messageSend_receiveEvent_602587 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_602587 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_602587 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_602587
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_251347
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_251347 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_251347
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_251347 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_251347
													.next();

											// check object __DEC_messageReceive_sendEvent_251347 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_251347 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_251347 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_251347
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_147292
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147292 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147292
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_147292 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147292
													.next();

											// check object __DEC_messageSend_sendEvent_147292 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_147292 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_147292 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_147292
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_17196
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_17196 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_17196
													.hasNext()) {
										try {
											__DEC_message_message_17196 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_17196
													.next();

											// check object __DEC_message_message_17196 is really bound
											JavaSDM.ensure(__DEC_message_message_17196 != null);
											// check isomorphic binding between objects __DEC_message_message_17196 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_17196
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_17196 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_17196
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check object _edge_interaction is really bound
								JavaSDM.ensure(_edge_interaction != null);
								// check object _edge_message is really bound
								JavaSDM.ensure(_edge_message != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check isomorphic binding between objects _edge_message and _edge_interaction 
								JavaSDM.ensure(!_edge_message
										.equals(_edge_interaction));

								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link src from _edge_interaction to message
								JavaSDM.ensure(message.equals(_edge_interaction
										.getSrc()));

								// check link src from _edge_message to interaction
								JavaSDM.ensure(interaction.equals(_edge_message
										.getSrc()));

								// check link trg from _edge_interaction to interaction
								JavaSDM.ensure(interaction
										.equals(_edge_interaction.getTrg()));

								// check link trg from _edge_message to message
								JavaSDM.ensure(message.equals(_edge_message
										.getTrg()));

								// check link covered from line to messageReceive
								JavaSDM.ensure(line.getCoveredBy().contains(
										messageReceive));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										message, interaction, messageSend,
										messageReceive, line);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_8(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_567487 = null;
		Interaction __DEC_messageSend_enclosingInteraction_871348 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_92830 = null;
		Message __DEC_messageReceive_receiveEvent_92830 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_104350 = null;
		Message __DEC_messageSend_receiveEvent_104350 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_213021 = null;
		Message __DEC_messageReceive_sendEvent_213021 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_474744 = null;
		Message __DEC_messageSend_sendEvent_474744 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_766264 = null;
		MessageEnd __DEC_message_message_766264 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link src from _edge_message to messageSend
			JavaSDM.ensure(messageSend.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_567487 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_567487 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_567487 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_567487 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_567487
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_871348 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_871348 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_871348 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_871348 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_871348
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_92830
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_92830 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_92830
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_92830 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_92830
											.next();

									// check object __DEC_messageReceive_receiveEvent_92830 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_92830 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_92830 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_92830
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_104350
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_104350 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_104350
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_104350 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_104350
											.next();

									// check object __DEC_messageSend_receiveEvent_104350 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_104350 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_104350 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_104350
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_213021
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_213021 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_213021
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_213021 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_213021
											.next();

									// check object __DEC_messageReceive_sendEvent_213021 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_213021 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_213021 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_213021
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_474744
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_474744 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_474744
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_474744 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_474744
											.next();

									// check object __DEC_messageSend_sendEvent_474744 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_474744 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_474744 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_474744
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_766264
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_766264 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_766264
											.hasNext()) {
								try {
									__DEC_message_message_766264 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_766264
											.next();

									// check object __DEC_message_message_766264 is really bound
									JavaSDM.ensure(__DEC_message_message_766264 != null);
									// check isomorphic binding between objects __DEC_message_message_766264 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_766264
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_766264 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_766264
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_message is really bound
						JavaSDM.ensure(_edge_message != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_message to messageSend
						JavaSDM.ensure(messageSend.equals(_edge_message
								.getSrc()));

						// check link trg from _edge_message to message
						JavaSDM.ensure(message.equals(_edge_message.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_9(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_926079 = null;
		Interaction __DEC_messageSend_enclosingInteraction_226977 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_936631 = null;
		Message __DEC_messageReceive_receiveEvent_936631 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_409665 = null;
		Message __DEC_messageSend_receiveEvent_409665 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_832320 = null;
		Message __DEC_messageReceive_sendEvent_832320 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_125780 = null;
		Message __DEC_messageSend_sendEvent_125780 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_173905 = null;
		MessageEnd __DEC_message_message_173905 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link src from _edge_message to messageReceive
			JavaSDM.ensure(messageReceive.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_926079 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_926079 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_926079 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_926079 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_926079
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_226977 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_226977 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_226977 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_226977 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_226977
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_936631
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_936631 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_936631
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_936631 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_936631
											.next();

									// check object __DEC_messageReceive_receiveEvent_936631 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_936631 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_936631 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_936631
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_409665
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_409665 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_409665
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_409665 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_409665
											.next();

									// check object __DEC_messageSend_receiveEvent_409665 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_409665 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_409665 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_409665
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_832320
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_832320 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_832320
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_832320 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_832320
											.next();

									// check object __DEC_messageReceive_sendEvent_832320 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_832320 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_832320 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_832320
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_125780
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_125780 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_125780
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_125780 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_125780
											.next();

									// check object __DEC_messageSend_sendEvent_125780 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_125780 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_125780 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_125780
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_173905
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_173905 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_173905
											.hasNext()) {
								try {
									__DEC_message_message_173905 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_173905
											.next();

									// check object __DEC_message_message_173905 is really bound
									JavaSDM.ensure(__DEC_message_message_173905 != null);
									// check isomorphic binding between objects __DEC_message_message_173905 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_173905
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_173905 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_173905
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_message is really bound
						JavaSDM.ensure(_edge_message != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_message to messageReceive
						JavaSDM.ensure(messageReceive.equals(_edge_message
								.getSrc()));

						// check link trg from _edge_message to message
						JavaSDM.ensure(message.equals(_edge_message.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_10(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_186545 = null;
		Interaction __DEC_messageSend_enclosingInteraction_547043 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_909533 = null;
		Message __DEC_messageReceive_receiveEvent_909533 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_36185 = null;
		Message __DEC_messageSend_receiveEvent_36185 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_783910 = null;
		Message __DEC_messageReceive_sendEvent_783910 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_123670 = null;
		Message __DEC_messageSend_sendEvent_123670 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_498330 = null;
		MessageEnd __DEC_message_message_498330 = null;
		Match match = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link lifeline from line to interaction
			JavaSDM.ensure(interaction.equals(line.getInteraction()));

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link covered from line to messageReceive
			JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// negative check for link fragment from messageReceive
				JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
				// negative check for link fragment from messageSend
				JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_messageReceive_enclosingInteraction_186545 = messageReceive
							.getEnclosingInteraction();

					// check object __DEC_messageReceive_enclosingInteraction_186545 is really bound
					JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_186545 != null);

					// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_186545 and interaction 
					JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_186545
							.equals(interaction));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_messageSend_enclosingInteraction_547043 = messageSend
							.getEnclosingInteraction();

					// check object __DEC_messageSend_enclosingInteraction_547043 is really bound
					JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_547043 != null);

					// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_547043 and interaction 
					JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_547043
							.equals(interaction));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_909533
					fujaba__Success = false;

					fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_909533 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageReceive,
											Message.class, "receiveEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_909533
									.hasNext()) {
						try {
							__DEC_messageReceive_receiveEvent_909533 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_909533
									.next();

							// check object __DEC_messageReceive_receiveEvent_909533 is really bound
							JavaSDM.ensure(__DEC_messageReceive_receiveEvent_909533 != null);
							// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_909533 and message 
							JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_909533
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_36185
					fujaba__Success = false;

					fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_36185 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageSend,
											Message.class, "receiveEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_36185
									.hasNext()) {
						try {
							__DEC_messageSend_receiveEvent_36185 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_36185
									.next();

							// check object __DEC_messageSend_receiveEvent_36185 is really bound
							JavaSDM.ensure(__DEC_messageSend_receiveEvent_36185 != null);
							// check isomorphic binding between objects __DEC_messageSend_receiveEvent_36185 and message 
							JavaSDM.ensure(!__DEC_messageSend_receiveEvent_36185
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_783910
					fujaba__Success = false;

					fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_783910 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageReceive,
											Message.class, "sendEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_783910
									.hasNext()) {
						try {
							__DEC_messageReceive_sendEvent_783910 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_783910
									.next();

							// check object __DEC_messageReceive_sendEvent_783910 is really bound
							JavaSDM.ensure(__DEC_messageReceive_sendEvent_783910 != null);
							// check isomorphic binding between objects __DEC_messageReceive_sendEvent_783910 and message 
							JavaSDM.ensure(!__DEC_messageReceive_sendEvent_783910
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_123670
					fujaba__Success = false;

					fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_123670 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageSend,
											Message.class, "sendEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_123670
									.hasNext()) {
						try {
							__DEC_messageSend_sendEvent_123670 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_123670
									.next();

							// check object __DEC_messageSend_sendEvent_123670 is really bound
							JavaSDM.ensure(__DEC_messageSend_sendEvent_123670 != null);
							// check isomorphic binding between objects __DEC_messageSend_sendEvent_123670 and message 
							JavaSDM.ensure(!__DEC_messageSend_sendEvent_123670
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link message from message to __DEC_message_message_498330
					fujaba__Success = false;

					fujaba__IterMessageTo__DEC_message_message_498330 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(message,
											MessageEnd.class, "message"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageTo__DEC_message_message_498330
									.hasNext()) {
						try {
							__DEC_message_message_498330 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_498330
									.next();

							// check object __DEC_message_message_498330 is really bound
							JavaSDM.ensure(__DEC_message_message_498330 != null);
							// check isomorphic binding between objects __DEC_message_message_498330 and messageReceive 
							JavaSDM.ensure(!__DEC_message_message_498330
									.equals(messageReceive));

							// check isomorphic binding between objects __DEC_message_message_498330 and messageSend 
							JavaSDM.ensure(!__DEC_message_message_498330
									.equals(messageSend));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_coveredBy is really bound
				JavaSDM.ensure(_edge_coveredBy != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check link fragment from messageReceive to interaction
				JavaSDM.ensure(!(interaction.equals(messageReceive
						.getEnclosingInteraction())));

				// check link fragment from messageSend to interaction
				JavaSDM.ensure(!(interaction.equals(messageSend
						.getEnclosingInteraction())));

				// check link lifeline from line to interaction
				JavaSDM.ensure(interaction.equals(line.getInteraction()));

				// check link message from message to interaction
				JavaSDM.ensure(interaction.equals(message.getInteraction()));

				// check link message from messageReceive to message
				JavaSDM.ensure(message.equals(messageReceive.getMessage()));

				// check link message from messageSend to message
				JavaSDM.ensure(message.equals(messageSend.getMessage()));

				// check link receiveEvent from message to messageReceive
				JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

				// check link receiveEvent from message to messageSend
				JavaSDM.ensure(!(messageSend.equals(message.getReceiveEvent())));

				// check link sendEvent from message to messageSend
				JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

				// check link sendEvent from message to messageReceive
				JavaSDM.ensure(!(messageReceive.equals(message.getSendEvent())));

				// check link src from _edge_coveredBy to line
				JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

				// check link trg from _edge_coveredBy to messageReceive
				JavaSDM.ensure(messageReceive.equals(_edge_coveredBy.getTrg()));

				// check link covered from line to messageReceive
				JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_BWD(match, message,
						interaction, messageSend, messageReceive, line);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_BWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_11(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_575604 = null;
		Interaction __DEC_messageSend_enclosingInteraction_520538 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_232993 = null;
		Message __DEC_messageReceive_receiveEvent_232993 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_880112 = null;
		Message __DEC_messageSend_receiveEvent_880112 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_442795 = null;
		Message __DEC_messageReceive_sendEvent_442795 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_216276 = null;
		Message __DEC_messageSend_sendEvent_216276 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_925037 = null;
		MessageEnd __DEC_message_message_925037 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// check link lifeline from line to interaction
			JavaSDM.ensure(interaction.equals(line.getInteraction()));

			// check link covered from line to messageReceive
			JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

			// iterate to-many link trg from messageReceive to _edge_coveredBy
			fujaba__Success = false;

			fujaba__IterMessageReceiveTo_edge_coveredBy = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(
							messageReceive, EMoflonEdge.class, "trg"))
					.iterator();

			while (fujaba__IterMessageReceiveTo_edge_coveredBy.hasNext()) {
				try {
					_edge_coveredBy = (EMoflonEdge) fujaba__IterMessageReceiveTo_edge_coveredBy
							.next();

					// check object _edge_coveredBy is really bound
					JavaSDM.ensure(_edge_coveredBy != null);
					// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
					JavaSDM.ensure(!_edge_coveredBy.equals(_edge_covered));

					// check link src from _edge_coveredBy to line
					JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_575604 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_575604 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_575604 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_575604 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_575604
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_520538 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_520538 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_520538 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_520538 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_520538
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_232993
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_232993 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_232993
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_232993 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_232993
											.next();

									// check object __DEC_messageReceive_receiveEvent_232993 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_232993 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_232993 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_232993
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_880112
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_880112 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_880112
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_880112 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_880112
											.next();

									// check object __DEC_messageSend_receiveEvent_880112 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_880112 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_880112 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_880112
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_442795
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_442795 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_442795
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_442795 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_442795
											.next();

									// check object __DEC_messageReceive_sendEvent_442795 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_442795 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_442795 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_442795
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_216276
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_216276 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_216276
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_216276 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_216276
											.next();

									// check object __DEC_messageSend_sendEvent_216276 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_216276 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_216276 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_216276
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_925037
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_925037 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_925037
											.hasNext()) {
								try {
									__DEC_message_message_925037 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_925037
											.next();

									// check object __DEC_message_message_925037 is really bound
									JavaSDM.ensure(__DEC_message_message_925037 != null);
									// check isomorphic binding between objects __DEC_message_message_925037 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_925037
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_925037 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_925037
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_covered is really bound
						JavaSDM.ensure(_edge_covered != null);
						// check object _edge_coveredBy is really bound
						JavaSDM.ensure(_edge_coveredBy != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
						JavaSDM.ensure(!_edge_coveredBy.equals(_edge_covered));

						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_covered to messageReceive
						JavaSDM.ensure(messageReceive.equals(_edge_covered
								.getSrc()));

						// check link src from _edge_coveredBy to line
						JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

						// check link trg from _edge_covered to line
						JavaSDM.ensure(line.equals(_edge_covered.getTrg()));

						// check link trg from _edge_coveredBy to messageReceive
						JavaSDM.ensure(messageReceive.equals(_edge_coveredBy
								.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public int eDerivedOperationID(int baseOperationID, Class<?> baseClass) {
		if (baseClass == NormalStepToMessageRule.class) {
			switch (baseOperationID) {
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_FWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_NORMALSTEP_INTERACTION_LIFELINE_ACTOR_ACTORTOLIFELINE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_NORMALSTEP_INTERACTION_LIFELINE_ACTOR_ACTORTOLIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___CHECK_TYPES_FWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___PERFORM_BWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_BWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_ACTOR_ACTORTOLIFELINE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_ACTOR_ACTORTOLIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___CHECK_TYPES_BWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_4__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_4__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_5__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_5__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_4__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_4__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_5__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_5__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_6__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_6__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_7__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_7__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_8__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_8__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_9__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_9__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_10__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_10__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_11__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_11__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH;
			default:
				return -1;
			}
		}
		if (baseClass == AltStepToComboRule.class) {
			switch (baseOperationID) {
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_LIFELINE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_FLOW_INTERACTION_ACTOR_ACTORTOLIFELINE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_LIFELINE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_FLOW_INTERACTION_ACTOR_ACTORTOLIFELINE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_ACTOR_ACTORTOLIFELINE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_ACTOR_ACTORTOLIFELINE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_10__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_10__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_11__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_11__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_38__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_38__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_39__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_39__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_40__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_40__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_41__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_41__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_42__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_42__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_43__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_43__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_44__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_44__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_12__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_12__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_13__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_13__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_45__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_45__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_46__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_46__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_47__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_47__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_48__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_48__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_49__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_49__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_50__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_50__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_51__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_51__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_52__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_52__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH;
			default:
				return -1;
			}
		}
		if (baseClass == AltStepNFToComboRule.class) {
			switch (baseOperationID) {
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_LIFELINE_COMBINEDFRAGMENT_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_INTERACTION_ACTOR_ACTORTOLIFELINE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_LIFELINE_COMBINEDFRAGMENT_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_INTERACTION_ACTOR_ACTORTOLIFELINE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_MESSAGE_INTERACTION_ACTOR_ACTORTOLIFELINE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_MESSAGE_INTERACTION_ACTOR_ACTORTOLIFELINE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_53__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_53__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_54__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_54__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_55__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_55__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_56__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_56__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_57__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_57__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_58__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_58__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_59__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_59__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_60__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_60__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_61__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_61__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_62__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_62__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_14__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_14__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_15__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_15__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_63__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_63__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_64__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_64__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_65__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_65__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_66__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_66__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_67__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_67__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_16__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_16__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_17__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_17__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_68__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_68__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_69__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_69__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_70__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_70__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_71__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_71__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_72__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_72__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_73__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_73__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH;
			default:
				return -1;
			}
		}
		return super.eDerivedOperationID(baseOperationID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eInvoke(int operationID, EList<?> arguments)
			throws InvocationTargetException {
		switch (operationID) {
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_PACKAGEDECLARATION_ACTOR_ACTOR_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE:
			return isAppropriate_FWD((Match) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(NamedFlow) arguments.get(4),
					(NormalStep) arguments.get(5),
					(AlternativeFlowAlternative) arguments.get(6),
					(AlternativeFlow) arguments.get(7),
					(UseCase) arguments.get(8));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
			return perform_FWD((IsApplicableMatch) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH:
			return isApplicable_FWD((Match) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_PACKAGEDECLARATION_ACTOR_ACTOR_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE:
			registerObjectsToMatch_FWD((Match) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(NamedFlow) arguments.get(4),
					(NormalStep) arguments.get(5),
					(AlternativeFlowAlternative) arguments.get(6),
					(AlternativeFlow) arguments.get(7),
					(UseCase) arguments.get(8));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_PACKAGEDECLARATION_ACTOR_ACTOR_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE:
			return isAppropriate_solveCsp_FWD((Match) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(NamedFlow) arguments.get(4),
					(NormalStep) arguments.get(5),
					(AlternativeFlowAlternative) arguments.get(6),
					(AlternativeFlow) arguments.get(7),
					(UseCase) arguments.get(8));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP:
			return isAppropriate_checkCsp_FWD((CSP) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_PACKAGEDECLARATION_ACTOR_ACTOR_LIFELINE_ACTORTOLIFELINE_INTERACTIONOPERAND_INTERACTIONOPERAND_NAMEDFLOW_FLOWTOINTERACTIONFRAGMENT_LIFELINE_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_INTERACTION_ACTORTOLIFELINE:
			return isApplicable_solveCsp_FWD(
					(IsApplicableMatch) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(Lifeline) arguments.get(4),
					(ActorToLifeline) arguments.get(5),
					(InteractionOperand) arguments.get(6),
					(InteractionOperand) arguments.get(7),
					(NamedFlow) arguments.get(8),
					(FlowToInteractionFragment) arguments.get(9),
					(Lifeline) arguments.get(10),
					(NormalStep) arguments.get(11),
					(AlternativeFlowAlternative) arguments.get(12),
					(AlternativeFlow) arguments.get(13),
					(UseCase) arguments.get(14),
					(UseCaseToInteraction) arguments.get(15),
					(Interaction) arguments.get(16),
					(ActorToLifeline) arguments.get(17));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP:
			return isApplicable_checkCsp_FWD((CSP) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_FWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23), (EObject) arguments.get(24),
					(EObject) arguments.get(25), (EObject) arguments.get(26),
					(EObject) arguments.get(27), (EObject) arguments.get(28));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH:
			return checkTypes_FWD((Match) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_LIFELINE_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONOPERAND_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			return isAppropriate_BWD((Match) arguments.get(0),
					(Lifeline) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(CombinedFragment) arguments.get(3),
					(InteractionOperand) arguments.get(4),
					(InteractionOperand) arguments.get(5),
					(InteractionOperand) arguments.get(6),
					(MessageOccurrenceSpecification) arguments.get(7),
					(Lifeline) arguments.get(8),
					(InteractionConstraint) arguments.get(9),
					(LiteralString) arguments.get(10),
					(Message) arguments.get(11),
					(Interaction) arguments.get(12));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH:
			return perform_BWD((IsApplicableMatch) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH:
			return isApplicable_BWD((Match) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_LIFELINE_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONOPERAND_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			registerObjectsToMatch_BWD((Match) arguments.get(0),
					(Lifeline) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(CombinedFragment) arguments.get(3),
					(InteractionOperand) arguments.get(4),
					(InteractionOperand) arguments.get(5),
					(InteractionOperand) arguments.get(6),
					(MessageOccurrenceSpecification) arguments.get(7),
					(Lifeline) arguments.get(8),
					(InteractionConstraint) arguments.get(9),
					(LiteralString) arguments.get(10),
					(Message) arguments.get(11),
					(Interaction) arguments.get(12));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_LIFELINE_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONOPERAND_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			return isAppropriate_solveCsp_BWD((Match) arguments.get(0),
					(Lifeline) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(CombinedFragment) arguments.get(3),
					(InteractionOperand) arguments.get(4),
					(InteractionOperand) arguments.get(5),
					(InteractionOperand) arguments.get(6),
					(MessageOccurrenceSpecification) arguments.get(7),
					(Lifeline) arguments.get(8),
					(InteractionConstraint) arguments.get(9),
					(LiteralString) arguments.get(10),
					(Message) arguments.get(11),
					(Interaction) arguments.get(12));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP:
			return isAppropriate_checkCsp_BWD((CSP) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_PACKAGEDECLARATION_ACTOR_ACTOR_LIFELINE_ACTORTOLIFELINE_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONOPERAND_INTERACTIONOPERAND_NAMEDFLOW_FLOWTOINTERACTIONFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_MESSAGE_INTERACTION_ACTORTOLIFELINE:
			return isApplicable_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(Lifeline) arguments.get(4),
					(ActorToLifeline) arguments.get(5),
					(MessageOccurrenceSpecification) arguments.get(6),
					(CombinedFragment) arguments.get(7),
					(InteractionOperand) arguments.get(8),
					(InteractionOperand) arguments.get(9),
					(InteractionOperand) arguments.get(10),
					(NamedFlow) arguments.get(11),
					(FlowToInteractionFragment) arguments.get(12),
					(MessageOccurrenceSpecification) arguments.get(13),
					(Lifeline) arguments.get(14),
					(InteractionConstraint) arguments.get(15),
					(LiteralString) arguments.get(16),
					(UseCase) arguments.get(17),
					(UseCaseToInteraction) arguments.get(18),
					(Message) arguments.get(19),
					(Interaction) arguments.get(20),
					(ActorToLifeline) arguments.get(21));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP:
			return isApplicable_checkCsp_BWD((CSP) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_BWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23), (EObject) arguments.get(24),
					(EObject) arguments.get(25), (EObject) arguments.get(26),
					(EObject) arguments.get(27), (EObject) arguments.get(28));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH:
			return checkTypes_BWD((Match) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_250__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_250((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_251__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_251((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_252__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_252((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_253__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_253((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_254__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_254((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_255__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_255((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_256__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_256((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_257__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_257((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_258__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_258((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_259__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_259((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_260__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_260((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_261__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_261((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_262__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_262((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_263__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_263((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_264__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_264((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_265__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_265((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_50__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_50((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_51__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_51((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_266__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_266((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_267__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_267((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_268__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_268((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_269__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_269((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_52__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_52((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_53__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_53((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_270__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_270((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_271__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_271((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_272__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_272((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_273__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_273((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_274__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_274((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_275__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_275((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH:
			return checkAttributes_FWD((TripleMatch) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH:
			return checkAttributes_BWD((TripleMatch) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR:
			return isAppropriate_FWD((Match) arguments.get(0),
					(NamedFlow) arguments.get(1),
					(NormalStep) arguments.get(2),
					(AlternativeFlowAlternative) arguments.get(3),
					(AlternativeFlow) arguments.get(4),
					(UseCase) arguments.get(5), (Actor) arguments.get(6));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR:
			registerObjectsToMatch_FWD((Match) arguments.get(0),
					(NamedFlow) arguments.get(1),
					(NormalStep) arguments.get(2),
					(AlternativeFlowAlternative) arguments.get(3),
					(AlternativeFlow) arguments.get(4),
					(UseCase) arguments.get(5), (Actor) arguments.get(6));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR:
			return isAppropriate_solveCsp_FWD((Match) arguments.get(0),
					(NamedFlow) arguments.get(1),
					(NormalStep) arguments.get(2),
					(AlternativeFlowAlternative) arguments.get(3),
					(AlternativeFlow) arguments.get(4),
					(UseCase) arguments.get(5), (Actor) arguments.get(6));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_LIFELINE_COMBINEDFRAGMENT_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_INTERACTION_ACTOR_ACTORTOLIFELINE:
			return isApplicable_solveCsp_FWD(
					(IsApplicableMatch) arguments.get(0),
					(NamedFlow) arguments.get(1),
					(InteractionOperand) arguments.get(2),
					(FlowToInteractionFragment) arguments.get(3),
					(Lifeline) arguments.get(4),
					(CombinedFragment) arguments.get(5),
					(NormalStep) arguments.get(6),
					(AlternativeFlowAlternative) arguments.get(7),
					(AlternativeFlow) arguments.get(8),
					(UseCase) arguments.get(9),
					(UseCaseToInteraction) arguments.get(10),
					(Interaction) arguments.get(11), (Actor) arguments.get(12),
					(ActorToLifeline) arguments.get(13));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_FWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23), (EObject) arguments.get(24));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			return isAppropriate_BWD((Match) arguments.get(0),
					(InteractionOperand) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(Lifeline) arguments.get(4),
					(CombinedFragment) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(InteractionOperand) arguments.get(7),
					(InteractionConstraint) arguments.get(8),
					(LiteralString) arguments.get(9),
					(Message) arguments.get(10),
					(Interaction) arguments.get(11));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			registerObjectsToMatch_BWD((Match) arguments.get(0),
					(InteractionOperand) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(Lifeline) arguments.get(4),
					(CombinedFragment) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(InteractionOperand) arguments.get(7),
					(InteractionConstraint) arguments.get(8),
					(LiteralString) arguments.get(9),
					(Message) arguments.get(10),
					(Interaction) arguments.get(11));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			return isAppropriate_solveCsp_BWD((Match) arguments.get(0),
					(InteractionOperand) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(Lifeline) arguments.get(4),
					(CombinedFragment) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(InteractionOperand) arguments.get(7),
					(InteractionConstraint) arguments.get(8),
					(LiteralString) arguments.get(9),
					(Message) arguments.get(10),
					(Interaction) arguments.get(11));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_MESSAGE_INTERACTION_ACTOR_ACTORTOLIFELINE:
			return isApplicable_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(NamedFlow) arguments.get(1),
					(InteractionOperand) arguments.get(2),
					(FlowToInteractionFragment) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(MessageOccurrenceSpecification) arguments.get(5),
					(Lifeline) arguments.get(6),
					(CombinedFragment) arguments.get(7),
					(CombinedFragment) arguments.get(8),
					(InteractionOperand) arguments.get(9),
					(InteractionConstraint) arguments.get(10),
					(LiteralString) arguments.get(11),
					(UseCase) arguments.get(12),
					(UseCaseToInteraction) arguments.get(13),
					(Message) arguments.get(14),
					(Interaction) arguments.get(15), (Actor) arguments.get(16),
					(ActorToLifeline) arguments.get(17));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_BWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23), (EObject) arguments.get(24));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_53__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_53((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_54__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_54((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_55__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_55((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_56__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_56((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_57__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_57((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_58__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_58((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_59__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_59((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_60__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_60((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_61__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_61((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_62__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_62((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_14__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_14((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_15__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_15((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_63__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_63((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_64__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_64((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_65__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_65((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_66__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_66((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_67__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_67((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_16__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_16((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_17__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_17((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_68__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_68((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_69__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_69((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_70__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_70((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_71__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_71((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_72__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_72((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_73__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_73((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR:
			return isAppropriate_FWD((Match) arguments.get(0),
					(NormalStep) arguments.get(1),
					(AlternativeFlowAlternative) arguments.get(2),
					(AlternativeFlow) arguments.get(3),
					(UseCase) arguments.get(4), (Flow) arguments.get(5),
					(Actor) arguments.get(6));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR:
			registerObjectsToMatch_FWD((Match) arguments.get(0),
					(NormalStep) arguments.get(1),
					(AlternativeFlowAlternative) arguments.get(2),
					(AlternativeFlow) arguments.get(3),
					(UseCase) arguments.get(4), (Flow) arguments.get(5),
					(Actor) arguments.get(6));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR:
			return isAppropriate_solveCsp_FWD((Match) arguments.get(0),
					(NormalStep) arguments.get(1),
					(AlternativeFlowAlternative) arguments.get(2),
					(AlternativeFlow) arguments.get(3),
					(UseCase) arguments.get(4), (Flow) arguments.get(5),
					(Actor) arguments.get(6));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_LIFELINE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_FLOW_INTERACTION_ACTOR_ACTORTOLIFELINE:
			return isApplicable_solveCsp_FWD(
					(IsApplicableMatch) arguments.get(0),
					(NormalStep) arguments.get(1),
					(AlternativeFlowAlternative) arguments.get(2),
					(Lifeline) arguments.get(3),
					(AlternativeFlow) arguments.get(4),
					(UseCase) arguments.get(5),
					(UseCaseToInteraction) arguments.get(6),
					(Flow) arguments.get(7), (Interaction) arguments.get(8),
					(Actor) arguments.get(9),
					(ActorToLifeline) arguments.get(10));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_FWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
			return isAppropriate_BWD((Match) arguments.get(0),
					(CombinedFragment) arguments.get(1),
					(Lifeline) arguments.get(2),
					(InteractionOperand) arguments.get(3),
					(InteractionConstraint) arguments.get(4),
					(LiteralString) arguments.get(5),
					(Message) arguments.get(6), (Interaction) arguments.get(7),
					(MessageOccurrenceSpecification) arguments.get(8),
					(MessageOccurrenceSpecification) arguments.get(9));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
			registerObjectsToMatch_BWD((Match) arguments.get(0),
					(CombinedFragment) arguments.get(1),
					(Lifeline) arguments.get(2),
					(InteractionOperand) arguments.get(3),
					(InteractionConstraint) arguments.get(4),
					(LiteralString) arguments.get(5),
					(Message) arguments.get(6), (Interaction) arguments.get(7),
					(MessageOccurrenceSpecification) arguments.get(8),
					(MessageOccurrenceSpecification) arguments.get(9));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
			return isAppropriate_solveCsp_BWD((Match) arguments.get(0),
					(CombinedFragment) arguments.get(1),
					(Lifeline) arguments.get(2),
					(InteractionOperand) arguments.get(3),
					(InteractionConstraint) arguments.get(4),
					(LiteralString) arguments.get(5),
					(Message) arguments.get(6), (Interaction) arguments.get(7),
					(MessageOccurrenceSpecification) arguments.get(8),
					(MessageOccurrenceSpecification) arguments.get(9));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_ACTOR_ACTORTOLIFELINE:
			return isApplicable_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(CombinedFragment) arguments.get(1),
					(Lifeline) arguments.get(2),
					(InteractionOperand) arguments.get(3),
					(InteractionConstraint) arguments.get(4),
					(LiteralString) arguments.get(5),
					(UseCase) arguments.get(6),
					(UseCaseToInteraction) arguments.get(7),
					(Flow) arguments.get(8), (Message) arguments.get(9),
					(Interaction) arguments.get(10),
					(MessageOccurrenceSpecification) arguments.get(11),
					(MessageOccurrenceSpecification) arguments.get(12),
					(Actor) arguments.get(13),
					(ActorToLifeline) arguments.get(14));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_BWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_10__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_10((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_11__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_11((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_38__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_38((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_39__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_39((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_40__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_40((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_41__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_41((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_42__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_42((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_43__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_43((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_44__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_44((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_12__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_12((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_13__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_13((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_45__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_45((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_46__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_46((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_47__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_47((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_48__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_48((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_49__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_49((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_50__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_50((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_51__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_51((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_52__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_52((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
			return isAppropriate_FWD((Match) arguments.get(0),
					(UseCase) arguments.get(1), (Flow) arguments.get(2),
					(NormalStep) arguments.get(3), (Actor) arguments.get(4));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
			registerObjectsToMatch_FWD((Match) arguments.get(0),
					(UseCase) arguments.get(1), (Flow) arguments.get(2),
					(NormalStep) arguments.get(3), (Actor) arguments.get(4));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
			return isAppropriate_solveCsp_FWD((Match) arguments.get(0),
					(UseCase) arguments.get(1), (Flow) arguments.get(2),
					(NormalStep) arguments.get(3), (Actor) arguments.get(4));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_NORMALSTEP_INTERACTION_LIFELINE_ACTOR_ACTORTOLIFELINE:
			return isApplicable_solveCsp_FWD(
					(IsApplicableMatch) arguments.get(0),
					(UseCase) arguments.get(1),
					(UseCaseToInteraction) arguments.get(2),
					(Flow) arguments.get(3), (NormalStep) arguments.get(4),
					(Interaction) arguments.get(5),
					(Lifeline) arguments.get(6), (Actor) arguments.get(7),
					(ActorToLifeline) arguments.get(8));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_FWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
			return isAppropriate_BWD((Match) arguments.get(0),
					(Message) arguments.get(1), (Interaction) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(Lifeline) arguments.get(5));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
			registerObjectsToMatch_BWD((Match) arguments.get(0),
					(Message) arguments.get(1), (Interaction) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(Lifeline) arguments.get(5));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
			return isAppropriate_solveCsp_BWD((Match) arguments.get(0),
					(Message) arguments.get(1), (Interaction) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(Lifeline) arguments.get(5));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_ACTOR_ACTORTOLIFELINE:
			return isApplicable_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(UseCase) arguments.get(1),
					(UseCaseToInteraction) arguments.get(2),
					(Flow) arguments.get(3), (Message) arguments.get(4),
					(Interaction) arguments.get(5),
					(MessageOccurrenceSpecification) arguments.get(6),
					(MessageOccurrenceSpecification) arguments.get(7),
					(Lifeline) arguments.get(8), (Actor) arguments.get(9),
					(ActorToLifeline) arguments.get(10));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_BWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_4__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_4((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_5__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_5((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_4__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_4((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_5__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_5((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_6__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_6((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_7__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_7((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_8__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_8((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_9__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_9((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_10__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_10((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_11__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_11((EMoflonEdge) arguments
					.get(0));
		}
		return super.eInvoke(operationID, arguments);
	}
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} //AltUserStepNFToComboRuleImpl
