/**
 */
package UseCaseToModalSequenceDiagramIntegration.Rules.impl;

import ModalSequenceDiagram.CombinedFragment;
import ModalSequenceDiagram.Constraint;
import ModalSequenceDiagram.Interaction;
import ModalSequenceDiagram.InteractionConstraint;
import ModalSequenceDiagram.InteractionOperand;
import ModalSequenceDiagram.Lifeline;
import ModalSequenceDiagram.LiteralString;
import ModalSequenceDiagram.Message;
import ModalSequenceDiagram.MessageEnd;
import ModalSequenceDiagram.MessageOccurrenceSpecification;
import ModalSequenceDiagram.ModalSequenceDiagramFactory;
import ModalSequenceDiagram.Model;

import TGGLanguage.modelgenerator.RuleEntryContainer;
import TGGLanguage.modelgenerator.RuleEntryList;

import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.ModelgeneratorRuleResult;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import TGGRuntime.impl.AbstractRuleImpl;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NamedFlow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import UseCaseToModalSequenceDiagramIntegration.ActorToLifeline;
import UseCaseToModalSequenceDiagramIntegration.FlowToInteractionFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToMessage;
import UseCaseToModalSequenceDiagramIntegration.PackageDeclarationToPackage;

import UseCaseToModalSequenceDiagramIntegration.Rules.NormalStepToMessageRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.RulesPackage;
import UseCaseToModalSequenceDiagramIntegration.Rules.StepToCombinedFragmentRule;

import UseCaseToModalSequenceDiagramIntegration.StepAlternativeToInteractionOperand;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToInteraction;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToModalSequenceDiagramIntegrationFactory;
import UseCaseToModalSequenceDiagramIntegration.UseCasesModelToModel;

import de.upb.tools.sdm.*;

import java.lang.reflect.InvocationTargetException;

import java.util.*;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
import org.moflon.csp.*;
import csp.constraints.*;
import TGGLanguage.csp.*;

// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Step To Combined Fragment Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * </p>
 *
 * @generated
 */
public class StepToCombinedFragmentRuleImpl extends AbstractRuleImpl implements
		StepToCombinedFragmentRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StepToCombinedFragmentRuleImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return RulesPackage.eINSTANCE.getStepToCombinedFragmentRule();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow,
			UseCase useCase, Flow flow, Actor actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge __useCase_flows_flow = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_FWD(match, step, alt,
					altFlow, useCase, flow, actor));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __step_stepAlternative_alt
				__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __flow_steps_step
				__flow_steps_step = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_actor_actor
				__step_actor_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __alt_ref_altFlow
				__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __step_stepAlternative_alt
				__step_stepAlternative_alt.setName("stepAlternative");
				// assign attribute __alt_ref_altFlow
				__alt_ref_altFlow.setName("ref");
				// assign attribute __flow_steps_step
				__flow_steps_step.setName("steps");
				// assign attribute __step_actor_actor
				__step_actor_actor.setName("actor");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_stepAlternative_alt, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__flow_steps_step, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_actor_actor, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__alt_ref_altFlow, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match, alt,
						"toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						altFlow, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						step, "toBeTranslatedNodes");

				// create link
				__step_stepAlternative_alt.setSrc(step);

				// create link
				__step_actor_actor.setSrc(step);

				// create link
				__flow_steps_step.setTrg(step);

				// create link
				__alt_ref_altFlow.setSrc(alt);

				// create link
				__step_stepAlternative_alt.setTrg(alt);

				// create link
				__alt_ref_altFlow.setTrg(altFlow);

				// create link
				__flow_steps_step.setSrc(flow);

				// create link
				__step_actor_actor.setTrg(actor);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __useCase_flows_flow
				__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __useCase_flows_flow
				__useCase_flows_flow.setName("flows");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						flow, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						actor, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						useCase, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__useCase_flows_flow, "contextEdges");

				// create link
				__useCase_flows_flow.setSrc(useCase);

				// create link
				__useCase_flows_flow.setTrg(flow);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_FWD(match, step, alt, altFlow, useCase,
					flow, actor);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_FWD(Match match) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass eClass = null;
		Iterator fujaba__IterEClassToPerformOperation = null;
		EOperation performOperation = null;
		IsApplicableRuleResult ruleresult = null;
		Actor actor = null;
		AlternativeFlowAlternative alt = null;
		AlternativeFlow altFlow = null;
		Flow flow = null;
		NormalStep step = null;
		UseCase useCase = null;
		IsApplicableMatch isApplicableMatch = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __line_interaction_interaction = null;
		EMoflonEdge __actorToLine_target_line = null;
		EMoflonEdge __useCaseToInteraction_source_useCase = null;
		EMoflonEdge __useCase_flows_flow = null;
		EMoflonEdge __useCaseToInteraction_target_interaction = null;
		EMoflonEdge __actorToLine_source_actor = null;
		CSP csp = null;
		Interaction interaction = null;
		Iterator fujaba__IterUseCaseToUseCaseToInteraction = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Lifeline line = null;
		Iterator fujaba__IterActorToActorToLine = null;
		ActorToLifeline actorToLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from eClass to performOperation
			fujaba__Success = false;

			fujaba__IterEClassToPerformOperation = eClass.getEOperations()
					.iterator();

			while (!(fujaba__Success)
					&& fujaba__IterEClassToPerformOperation.hasNext()) {
				try {
					performOperation = (EOperation) fujaba__IterEClassToPerformOperation
							.next();

					// check object performOperation is really bound
					JavaSDM.ensure(performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							performOperation.getName(), "perform_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE
					.createIsApplicableRuleResult();

			// assign attribute ruleresult
			ruleresult.setSuccess(false);
			// assign attribute ruleresult
			ruleresult.setRule("StepToCombinedFragmentRule");

			// create link
			ruleresult.setPerformOperation(performOperation);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'core match'
		try {
			fujaba__Success = false;

			_TmpObject = (match.getObject("actor"));

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;
			_TmpObject = (match.getObject("alt"));

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;
			_TmpObject = (match.getObject("altFlow"));

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;
			_TmpObject = (match.getObject("flow"));

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof Flow);
			flow = (Flow) _TmpObject;
			_TmpObject = (match.getObject("step"));

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;
			_TmpObject = (match.getObject("useCase"));

			// ensure correct type and really bound of object useCase
			JavaSDM.ensure(_TmpObject instanceof UseCase);
			useCase = (UseCase) _TmpObject;
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// iterate to-many link source from actor to actorToLine
			fujaba__Success = false;

			fujaba__IterActorToActorToLine = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(actor,
							ActorToLifeline.class, "source")).iterator();

			while (fujaba__IterActorToActorToLine.hasNext()) {
				try {
					actorToLine = (ActorToLifeline) fujaba__IterActorToActorToLine
							.next();

					// check object actorToLine is really bound
					JavaSDM.ensure(actorToLine != null);
					// bind object
					line = actorToLine.getTarget();

					// check object line is really bound
					JavaSDM.ensure(line != null);

					// iterate to-many link source from useCase to useCaseToInteraction
					fujaba__Success = false;

					fujaba__IterUseCaseToUseCaseToInteraction = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(useCase,
											UseCaseToInteraction.class,
											"source")).iterator();

					while (fujaba__IterUseCaseToUseCaseToInteraction.hasNext()) {
						try {
							useCaseToInteraction = (UseCaseToInteraction) fujaba__IterUseCaseToUseCaseToInteraction
									.next();

							// check object useCaseToInteraction is really bound
							JavaSDM.ensure(useCaseToInteraction != null);
							// bind object
							interaction = useCaseToInteraction.getTarget();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// story node 'find context'
							try {
								fujaba__Success = false;

								// check object actor is really bound
								JavaSDM.ensure(actor != null);
								// check object actorToLine is really bound
								JavaSDM.ensure(actorToLine != null);
								// check object alt is really bound
								JavaSDM.ensure(alt != null);
								// check object altFlow is really bound
								JavaSDM.ensure(altFlow != null);
								// check object flow is really bound
								JavaSDM.ensure(flow != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object step is really bound
								JavaSDM.ensure(step != null);
								// check object useCase is really bound
								JavaSDM.ensure(useCase != null);
								// check object useCaseToInteraction is really bound
								JavaSDM.ensure(useCaseToInteraction != null);
								// check isomorphic binding between objects flow and altFlow 
								JavaSDM.ensure(!flow.equals(altFlow));

								// check link actor from step to actor
								JavaSDM.ensure(actor.equals(step.getActor()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link ref from alt to altFlow
								JavaSDM.ensure(altFlow.equals(alt.getRef()));

								// check link flows from flow to useCase
								JavaSDM.ensure(useCase.equals(flow.eContainer()));

								// check link source from actorToLine to actor
								JavaSDM.ensure(actor.equals(actorToLine
										.getSource()));

								// check link source from useCaseToInteraction to useCase
								JavaSDM.ensure(useCase
										.equals(useCaseToInteraction
												.getSource()));

								// check link stepAlternative from alt to step
								JavaSDM.ensure(step.equals(alt.eContainer()));

								// check link steps from step to flow
								JavaSDM.ensure(flow.equals(step.eContainer()));

								// check link target from actorToLine to line
								JavaSDM.ensure(line.equals(actorToLine
										.getTarget()));

								// check link target from useCaseToInteraction to interaction
								JavaSDM.ensure(interaction
										.equals(useCaseToInteraction
												.getTarget()));

								// create object isApplicableMatch
								isApplicableMatch = TGGRuntimeFactory.eINSTANCE
										.createIsApplicableMatch();

								// create object __step_stepAlternative_alt
								__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __flow_steps_step
								__flow_steps_step = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __step_actor_actor
								__step_actor_actor = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __alt_ref_altFlow
								__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __interaction_lifeline_line
								__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __line_interaction_interaction
								__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __actorToLine_target_line
								__actorToLine_target_line = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __useCaseToInteraction_source_useCase
								__useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __useCase_flows_flow
								__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __useCaseToInteraction_target_interaction
								__useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __actorToLine_source_actor
								__actorToLine_source_actor = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// assign attribute __step_stepAlternative_alt
								__step_stepAlternative_alt
										.setName("stepAlternative");
								// assign attribute __alt_ref_altFlow
								__alt_ref_altFlow.setName("ref");
								// assign attribute __useCase_flows_flow
								__useCase_flows_flow.setName("flows");
								// assign attribute __useCaseToInteraction_source_useCase
								__useCaseToInteraction_source_useCase
										.setName("source");
								// assign attribute __useCaseToInteraction_target_interaction
								__useCaseToInteraction_target_interaction
										.setName("target");
								// assign attribute __flow_steps_step
								__flow_steps_step.setName("steps");
								// assign attribute __step_actor_actor
								__step_actor_actor.setName("actor");
								// assign attribute __line_interaction_interaction
								__line_interaction_interaction
										.setName("interaction");
								// assign attribute __interaction_lifeline_line
								__interaction_lifeline_line.setName("lifeline");
								// assign attribute __actorToLine_source_actor
								__actorToLine_source_actor.setName("source");
								// assign attribute __actorToLine_target_line
								__actorToLine_target_line.setName("target");

								// create link
								isApplicableMatch.getAllContextElements().add(
										step);

								// create link
								__step_stepAlternative_alt.setSrc(step);

								// create link
								__flow_steps_step.setTrg(step);

								// create link
								__step_actor_actor.setSrc(step);

								// create link
								isApplicableMatch.getAllContextElements().add(
										alt);

								// create link
								__alt_ref_altFlow.setSrc(alt);

								// create link
								__step_stepAlternative_alt.setTrg(alt);

								// create link
								__alt_ref_altFlow.setTrg(altFlow);

								// create link
								isApplicableMatch.getAllContextElements().add(
										altFlow);

								// create link
								__interaction_lifeline_line.setTrg(line);

								// create link
								__line_interaction_interaction.setSrc(line);

								// create link
								isApplicableMatch.getAllContextElements().add(
										line);

								// create link
								__actorToLine_target_line.setTrg(line);

								// create link
								isApplicableMatch.getAllContextElements().add(
										useCase);

								// create link
								__useCaseToInteraction_source_useCase
										.setTrg(useCase);

								// create link
								__useCase_flows_flow.setSrc(useCase);

								// create link
								__useCaseToInteraction_source_useCase
										.setSrc(useCaseToInteraction);

								// create link
								isApplicableMatch.getAllContextElements().add(
										useCaseToInteraction);

								// create link
								__useCaseToInteraction_target_interaction
										.setSrc(useCaseToInteraction);

								// create link
								isApplicableMatch.getAllContextElements().add(
										flow);

								// create link
								__useCase_flows_flow.setTrg(flow);

								// create link
								__flow_steps_step.setSrc(flow);

								// create link
								__interaction_lifeline_line.setSrc(interaction);

								// create link
								__useCaseToInteraction_target_interaction
										.setTrg(interaction);

								// create link
								isApplicableMatch.getAllContextElements().add(
										interaction);

								// create link
								__line_interaction_interaction
										.setTrg(interaction);

								// create link
								isApplicableMatch.getAllContextElements().add(
										actor);

								// create link
								__actorToLine_source_actor.setTrg(actor);

								// create link
								__step_actor_actor.setTrg(actor);

								// create link
								__actorToLine_source_actor.setSrc(actorToLine);

								// create link
								isApplicableMatch.getAllContextElements().add(
										actorToLine);

								// create link
								__actorToLine_target_line.setSrc(actorToLine);

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__step_actor_actor,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__actorToLine_source_actor,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__useCase_flows_flow,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__alt_ref_altFlow,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__actorToLine_target_line,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__useCaseToInteraction_source_useCase,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__useCaseToInteraction_target_interaction,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__interaction_lifeline_line,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__step_stepAlternative_alt,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__line_interaction_interaction,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__flow_steps_step,
												"allContextElements");
								// story node 'solve CSP'
								try {
									fujaba__Success = false;

									_TmpObject = (this
											.isApplicable_solveCsp_FWD(
													isApplicableMatch, step,
													alt, altFlow, line,
													useCase,
													useCaseToInteraction, flow,
													interaction, actor,
													actorToLine));

									// ensure correct type and really bound of object csp
									JavaSDM.ensure(_TmpObject instanceof CSP);
									csp = (CSP) _TmpObject;
									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								// statement node 'check CSP'
								fujaba__Success = this
										.isApplicable_checkCsp_FWD(csp);
								if (fujaba__Success) {
									// story node 'add match to rule result'
									try {
										fujaba__Success = false;

										// check object isApplicableMatch is really bound
										JavaSDM.ensure(isApplicableMatch != null);
										// check object ruleresult is really bound
										JavaSDM.ensure(ruleresult != null);
										// assign attribute ruleresult
										ruleresult.setSuccess(true);
										// assign attribute isApplicableMatch
										isApplicableMatch
												.setRuleName("StepToCombinedFragmentRule");

										// create link
										isApplicableMatch
												.setIsApplicableRuleResult(ruleresult);

										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		Actor actor = null;
		ActorToLifeline actorToLine = null;
		AlternativeFlowAlternative alt = null;
		AlternativeFlow altFlow = null;
		Flow flow = null;
		Interaction interaction = null;
		Lifeline line = null;
		NormalStep step = null;
		UseCase useCase = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Iterator fujaba__IterIsApplicableMatchToCsp = null;
		CSP csp = null;
		NormalStepToCombinedFragment stepToCombo = null;
		NormalStepToMessage stepToMessage = null;
		StepAlternativeToInteractionOperand alternative1ToOperand = null;
		CombinedFragment combo = null;
		InteractionOperand operand = null;
		InteractionConstraint guard = null;
		LiteralString spec = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		PerformRuleResult ruleresult = null;
		EMoflonEdge messageReceive__message__message = null;
		EMoflonEdge guard__specification__spec = null;
		EMoflonEdge operand__guard__guard = null;
		EMoflonEdge operand__covered__line = null;
		EMoflonEdge messageSend__message__message = null;
		EMoflonEdge stepToMessage__source__step = null;
		EMoflonEdge message__receiveEvent__messageReceive = null;
		EMoflonEdge line__coveredBy__messageSend = null;
		EMoflonEdge combo__operand__operand = null;
		EMoflonEdge line__coveredBy__operand = null;
		EMoflonEdge line__coveredBy__combo = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge line__coveredBy__messageReceive = null;
		EMoflonEdge alternative1ToOperand__target__operand = null;
		EMoflonEdge messageReceive__covered__line = null;
		EMoflonEdge message__interaction__interaction = null;
		EMoflonEdge alternative1ToOperand__source__alt = null;
		EMoflonEdge stepToCombo__target__combo = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge stepToCombo__source__step = null;
		EMoflonEdge combo__covered__line = null;
		EMoflonEdge interaction__message__message = null;
		EMoflonEdge messageSend__covered__line = null;
		EMoflonEdge message__sendEvent__messageSend = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge stepToMessage__target__message = null;

		// story node 'perform transformation'
		try {
			fujaba__Success = false;

			_TmpObject = (isApplicableMatch.getObject("actor"));

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("actorToLine"));

			// ensure correct type and really bound of object actorToLine
			JavaSDM.ensure(_TmpObject instanceof ActorToLifeline);
			actorToLine = (ActorToLifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("alt"));

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("altFlow"));

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flow"));

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof Flow);
			flow = (Flow) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("interaction"));

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("line"));

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("step"));

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCase"));

			// ensure correct type and really bound of object useCase
			JavaSDM.ensure(_TmpObject instanceof UseCase);
			useCase = (UseCase) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCaseToInteraction"));

			// ensure correct type and really bound of object useCaseToInteraction
			JavaSDM.ensure(_TmpObject instanceof UseCaseToInteraction);
			useCaseToInteraction = (UseCaseToInteraction) _TmpObject;
			// check object isApplicableMatch is really bound
			JavaSDM.ensure(isApplicableMatch != null);
			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// iterate to-many link attributeInfo from isApplicableMatch to csp
			fujaba__Success = false;

			fujaba__IterIsApplicableMatchToCsp = isApplicableMatch
					.getAttributeInfo().iterator();

			while (!(fujaba__Success)
					&& fujaba__IterIsApplicableMatchToCsp.hasNext()) {
				try {
					_TmpObject = fujaba__IterIsApplicableMatchToCsp.next();

					// ensure correct type and really bound of object csp
					JavaSDM.ensure(_TmpObject instanceof CSP);
					csp = (CSP) _TmpObject;

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			if (!fujaba__Success) {
				fujaba__Success = true;
				csp = null;
			}
			// create object stepToCombo
			stepToCombo = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToCombinedFragment();

			// create object stepToMessage
			stepToMessage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToMessage();

			// create object alternative1ToOperand
			alternative1ToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createStepAlternativeToInteractionOperand();

			// create object combo
			combo = ModalSequenceDiagramFactory.eINSTANCE
					.createCombinedFragment();

			// create object operand
			operand = ModalSequenceDiagramFactory.eINSTANCE
					.createInteractionOperand();

			// create object guard
			guard = ModalSequenceDiagramFactory.eINSTANCE
					.createInteractionConstraint();

			// create object spec
			spec = ModalSequenceDiagramFactory.eINSTANCE.createLiteralString();

			// create object messageSend
			messageSend = ModalSequenceDiagramFactory.eINSTANCE
					.createMessageOccurrenceSpecification();

			// create object messageReceive
			messageReceive = ModalSequenceDiagramFactory.eINSTANCE
					.createMessageOccurrenceSpecification();

			// create object message
			message = ModalSequenceDiagramFactory.eINSTANCE.createMessage();

			// assign attribute combo
			combo.setInteractionOperator((ModalSequenceDiagram.InteractionOperatorKind) csp
					.getAttributeVariable("combo", "interactionOperator")
					.getValue());
			// assign attribute guard
			guard.setName((java.lang.String) csp.getAttributeVariable("guard",
					"name").getValue());
			// assign attribute spec
			spec.setValue((java.lang.String) csp.getAttributeVariable("spec",
					"value").getValue());
			// assign attribute message
			message.setName((java.lang.String) csp.getAttributeVariable(
					"message", "name").getValue());

			// create link
			stepToCombo.setSource(step);

			// create link
			stepToMessage.setSource(step);

			// create link
			alternative1ToOperand.setSource(alt);

			// create link
			combo.getOperand().add(operand); // add link

			// create link
			line.getCoveredBy().add(combo);

			// create link
			stepToCombo.setTarget(combo);

			// create link
			operand.setGuard(guard); // add link to one

			// create link
			line.getCoveredBy().add(operand);

			// create link
			alternative1ToOperand.setTarget(operand);

			// create link
			guard.setSpecification(spec); // add link to one

			// create link
			messageSend.getCovered().add(line);

			// create link
			messageReceive.getCovered().add(line);

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(message,
					messageReceive, "receiveEvent");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(message,
					messageSend, "sendEvent");

			// create link
			messageReceive.setMessage(message);

			// create link
			messageSend.setMessage(message);

			// create link
			stepToMessage.setTarget(message);

			// create link
			interaction.getMessage().add(message);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'collect translated elements'
		try {
			fujaba__Success = false;

			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object stepToMessage is really bound
			JavaSDM.ensure(stepToMessage != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alt, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlow, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					guard, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					spec, "createdElements");
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'bookkeeping for edges'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object actorToLine is really bound
			JavaSDM.ensure(actorToLine != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object ruleresult is really bound
			JavaSDM.ensure(ruleresult != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object stepToMessage is really bound
			JavaSDM.ensure(stepToMessage != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check object useCaseToInteraction is really bound
			JavaSDM.ensure(useCaseToInteraction != null);
			// check isomorphic binding between objects actorToLine and actor 
			JavaSDM.ensure(!actorToLine.equals(actor));

			// check isomorphic binding between objects alt and actor 
			JavaSDM.ensure(!alt.equals(actor));

			// check isomorphic binding between objects altFlow and actor 
			JavaSDM.ensure(!altFlow.equals(actor));

			// check isomorphic binding between objects alternative1ToOperand and actor 
			JavaSDM.ensure(!alternative1ToOperand.equals(actor));

			// check isomorphic binding between objects combo and actor 
			JavaSDM.ensure(!combo.equals(actor));

			// check isomorphic binding between objects flow and actor 
			JavaSDM.ensure(!flow.equals(actor));

			// check isomorphic binding between objects guard and actor 
			JavaSDM.ensure(!guard.equals(actor));

			// check isomorphic binding between objects interaction and actor 
			JavaSDM.ensure(!interaction.equals(actor));

			// check isomorphic binding between objects line and actor 
			JavaSDM.ensure(!line.equals(actor));

			// check isomorphic binding between objects message and actor 
			JavaSDM.ensure(!message.equals(actor));

			// check isomorphic binding between objects messageReceive and actor 
			JavaSDM.ensure(!messageReceive.equals(actor));

			// check isomorphic binding between objects messageSend and actor 
			JavaSDM.ensure(!messageSend.equals(actor));

			// check isomorphic binding between objects operand and actor 
			JavaSDM.ensure(!operand.equals(actor));

			// check isomorphic binding between objects spec and actor 
			JavaSDM.ensure(!spec.equals(actor));

			// check isomorphic binding between objects step and actor 
			JavaSDM.ensure(!step.equals(actor));

			// check isomorphic binding between objects stepToCombo and actor 
			JavaSDM.ensure(!stepToCombo.equals(actor));

			// check isomorphic binding between objects stepToMessage and actor 
			JavaSDM.ensure(!stepToMessage.equals(actor));

			// check isomorphic binding between objects useCase and actor 
			JavaSDM.ensure(!useCase.equals(actor));

			// check isomorphic binding between objects useCaseToInteraction and actor 
			JavaSDM.ensure(!useCaseToInteraction.equals(actor));

			// check isomorphic binding between objects alt and actorToLine 
			JavaSDM.ensure(!alt.equals(actorToLine));

			// check isomorphic binding between objects altFlow and actorToLine 
			JavaSDM.ensure(!altFlow.equals(actorToLine));

			// check isomorphic binding between objects alternative1ToOperand and actorToLine 
			JavaSDM.ensure(!alternative1ToOperand.equals(actorToLine));

			// check isomorphic binding between objects combo and actorToLine 
			JavaSDM.ensure(!combo.equals(actorToLine));

			// check isomorphic binding between objects flow and actorToLine 
			JavaSDM.ensure(!flow.equals(actorToLine));

			// check isomorphic binding between objects guard and actorToLine 
			JavaSDM.ensure(!guard.equals(actorToLine));

			// check isomorphic binding between objects interaction and actorToLine 
			JavaSDM.ensure(!interaction.equals(actorToLine));

			// check isomorphic binding between objects line and actorToLine 
			JavaSDM.ensure(!line.equals(actorToLine));

			// check isomorphic binding between objects message and actorToLine 
			JavaSDM.ensure(!message.equals(actorToLine));

			// check isomorphic binding between objects messageReceive and actorToLine 
			JavaSDM.ensure(!messageReceive.equals(actorToLine));

			// check isomorphic binding between objects messageSend and actorToLine 
			JavaSDM.ensure(!messageSend.equals(actorToLine));

			// check isomorphic binding between objects operand and actorToLine 
			JavaSDM.ensure(!operand.equals(actorToLine));

			// check isomorphic binding between objects spec and actorToLine 
			JavaSDM.ensure(!spec.equals(actorToLine));

			// check isomorphic binding between objects step and actorToLine 
			JavaSDM.ensure(!step.equals(actorToLine));

			// check isomorphic binding between objects stepToCombo and actorToLine 
			JavaSDM.ensure(!stepToCombo.equals(actorToLine));

			// check isomorphic binding between objects stepToMessage and actorToLine 
			JavaSDM.ensure(!stepToMessage.equals(actorToLine));

			// check isomorphic binding between objects useCase and actorToLine 
			JavaSDM.ensure(!useCase.equals(actorToLine));

			// check isomorphic binding between objects useCaseToInteraction and actorToLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(actorToLine));

			// check isomorphic binding between objects altFlow and alt 
			JavaSDM.ensure(!altFlow.equals(alt));

			// check isomorphic binding between objects alternative1ToOperand and alt 
			JavaSDM.ensure(!alternative1ToOperand.equals(alt));

			// check isomorphic binding between objects combo and alt 
			JavaSDM.ensure(!combo.equals(alt));

			// check isomorphic binding between objects flow and alt 
			JavaSDM.ensure(!flow.equals(alt));

			// check isomorphic binding between objects guard and alt 
			JavaSDM.ensure(!guard.equals(alt));

			// check isomorphic binding between objects interaction and alt 
			JavaSDM.ensure(!interaction.equals(alt));

			// check isomorphic binding between objects line and alt 
			JavaSDM.ensure(!line.equals(alt));

			// check isomorphic binding between objects message and alt 
			JavaSDM.ensure(!message.equals(alt));

			// check isomorphic binding between objects messageReceive and alt 
			JavaSDM.ensure(!messageReceive.equals(alt));

			// check isomorphic binding between objects messageSend and alt 
			JavaSDM.ensure(!messageSend.equals(alt));

			// check isomorphic binding between objects operand and alt 
			JavaSDM.ensure(!operand.equals(alt));

			// check isomorphic binding between objects spec and alt 
			JavaSDM.ensure(!spec.equals(alt));

			// check isomorphic binding between objects step and alt 
			JavaSDM.ensure(!step.equals(alt));

			// check isomorphic binding between objects stepToCombo and alt 
			JavaSDM.ensure(!stepToCombo.equals(alt));

			// check isomorphic binding between objects stepToMessage and alt 
			JavaSDM.ensure(!stepToMessage.equals(alt));

			// check isomorphic binding between objects useCase and alt 
			JavaSDM.ensure(!useCase.equals(alt));

			// check isomorphic binding between objects useCaseToInteraction and alt 
			JavaSDM.ensure(!useCaseToInteraction.equals(alt));

			// check isomorphic binding between objects alternative1ToOperand and altFlow 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlow));

			// check isomorphic binding between objects combo and altFlow 
			JavaSDM.ensure(!combo.equals(altFlow));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check isomorphic binding between objects guard and altFlow 
			JavaSDM.ensure(!guard.equals(altFlow));

			// check isomorphic binding between objects interaction and altFlow 
			JavaSDM.ensure(!interaction.equals(altFlow));

			// check isomorphic binding between objects line and altFlow 
			JavaSDM.ensure(!line.equals(altFlow));

			// check isomorphic binding between objects message and altFlow 
			JavaSDM.ensure(!message.equals(altFlow));

			// check isomorphic binding between objects messageReceive and altFlow 
			JavaSDM.ensure(!messageReceive.equals(altFlow));

			// check isomorphic binding between objects messageSend and altFlow 
			JavaSDM.ensure(!messageSend.equals(altFlow));

			// check isomorphic binding between objects operand and altFlow 
			JavaSDM.ensure(!operand.equals(altFlow));

			// check isomorphic binding between objects spec and altFlow 
			JavaSDM.ensure(!spec.equals(altFlow));

			// check isomorphic binding between objects step and altFlow 
			JavaSDM.ensure(!step.equals(altFlow));

			// check isomorphic binding between objects stepToCombo and altFlow 
			JavaSDM.ensure(!stepToCombo.equals(altFlow));

			// check isomorphic binding between objects stepToMessage and altFlow 
			JavaSDM.ensure(!stepToMessage.equals(altFlow));

			// check isomorphic binding between objects useCase and altFlow 
			JavaSDM.ensure(!useCase.equals(altFlow));

			// check isomorphic binding between objects useCaseToInteraction and altFlow 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlow));

			// check isomorphic binding between objects combo and alternative1ToOperand 
			JavaSDM.ensure(!combo.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and alternative1ToOperand 
			JavaSDM.ensure(!flow.equals(alternative1ToOperand));

			// check isomorphic binding between objects guard and alternative1ToOperand 
			JavaSDM.ensure(!guard.equals(alternative1ToOperand));

			// check isomorphic binding between objects interaction and alternative1ToOperand 
			JavaSDM.ensure(!interaction.equals(alternative1ToOperand));

			// check isomorphic binding between objects line and alternative1ToOperand 
			JavaSDM.ensure(!line.equals(alternative1ToOperand));

			// check isomorphic binding between objects message and alternative1ToOperand 
			JavaSDM.ensure(!message.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageReceive and alternative1ToOperand 
			JavaSDM.ensure(!messageReceive.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageSend and alternative1ToOperand 
			JavaSDM.ensure(!messageSend.equals(alternative1ToOperand));

			// check isomorphic binding between objects operand and alternative1ToOperand 
			JavaSDM.ensure(!operand.equals(alternative1ToOperand));

			// check isomorphic binding between objects spec and alternative1ToOperand 
			JavaSDM.ensure(!spec.equals(alternative1ToOperand));

			// check isomorphic binding between objects step and alternative1ToOperand 
			JavaSDM.ensure(!step.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToCombo and alternative1ToOperand 
			JavaSDM.ensure(!stepToCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToMessage and alternative1ToOperand 
			JavaSDM.ensure(!stepToMessage.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCase and alternative1ToOperand 
			JavaSDM.ensure(!useCase.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCaseToInteraction and alternative1ToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and combo 
			JavaSDM.ensure(!flow.equals(combo));

			// check isomorphic binding between objects guard and combo 
			JavaSDM.ensure(!guard.equals(combo));

			// check isomorphic binding between objects interaction and combo 
			JavaSDM.ensure(!interaction.equals(combo));

			// check isomorphic binding between objects line and combo 
			JavaSDM.ensure(!line.equals(combo));

			// check isomorphic binding between objects message and combo 
			JavaSDM.ensure(!message.equals(combo));

			// check isomorphic binding between objects messageReceive and combo 
			JavaSDM.ensure(!messageReceive.equals(combo));

			// check isomorphic binding between objects messageSend and combo 
			JavaSDM.ensure(!messageSend.equals(combo));

			// check isomorphic binding between objects operand and combo 
			JavaSDM.ensure(!operand.equals(combo));

			// check isomorphic binding between objects spec and combo 
			JavaSDM.ensure(!spec.equals(combo));

			// check isomorphic binding between objects step and combo 
			JavaSDM.ensure(!step.equals(combo));

			// check isomorphic binding between objects stepToCombo and combo 
			JavaSDM.ensure(!stepToCombo.equals(combo));

			// check isomorphic binding between objects stepToMessage and combo 
			JavaSDM.ensure(!stepToMessage.equals(combo));

			// check isomorphic binding between objects useCase and combo 
			JavaSDM.ensure(!useCase.equals(combo));

			// check isomorphic binding between objects useCaseToInteraction and combo 
			JavaSDM.ensure(!useCaseToInteraction.equals(combo));

			// check isomorphic binding between objects guard and flow 
			JavaSDM.ensure(!guard.equals(flow));

			// check isomorphic binding between objects interaction and flow 
			JavaSDM.ensure(!interaction.equals(flow));

			// check isomorphic binding between objects line and flow 
			JavaSDM.ensure(!line.equals(flow));

			// check isomorphic binding between objects message and flow 
			JavaSDM.ensure(!message.equals(flow));

			// check isomorphic binding between objects messageReceive and flow 
			JavaSDM.ensure(!messageReceive.equals(flow));

			// check isomorphic binding between objects messageSend and flow 
			JavaSDM.ensure(!messageSend.equals(flow));

			// check isomorphic binding between objects operand and flow 
			JavaSDM.ensure(!operand.equals(flow));

			// check isomorphic binding between objects spec and flow 
			JavaSDM.ensure(!spec.equals(flow));

			// check isomorphic binding between objects step and flow 
			JavaSDM.ensure(!step.equals(flow));

			// check isomorphic binding between objects stepToCombo and flow 
			JavaSDM.ensure(!stepToCombo.equals(flow));

			// check isomorphic binding between objects stepToMessage and flow 
			JavaSDM.ensure(!stepToMessage.equals(flow));

			// check isomorphic binding between objects useCase and flow 
			JavaSDM.ensure(!useCase.equals(flow));

			// check isomorphic binding between objects useCaseToInteraction and flow 
			JavaSDM.ensure(!useCaseToInteraction.equals(flow));

			// check isomorphic binding between objects interaction and guard 
			JavaSDM.ensure(!interaction.equals(guard));

			// check isomorphic binding between objects line and guard 
			JavaSDM.ensure(!line.equals(guard));

			// check isomorphic binding between objects message and guard 
			JavaSDM.ensure(!message.equals(guard));

			// check isomorphic binding between objects messageReceive and guard 
			JavaSDM.ensure(!messageReceive.equals(guard));

			// check isomorphic binding between objects messageSend and guard 
			JavaSDM.ensure(!messageSend.equals(guard));

			// check isomorphic binding between objects operand and guard 
			JavaSDM.ensure(!operand.equals(guard));

			// check isomorphic binding between objects spec and guard 
			JavaSDM.ensure(!spec.equals(guard));

			// check isomorphic binding between objects step and guard 
			JavaSDM.ensure(!step.equals(guard));

			// check isomorphic binding between objects stepToCombo and guard 
			JavaSDM.ensure(!stepToCombo.equals(guard));

			// check isomorphic binding between objects stepToMessage and guard 
			JavaSDM.ensure(!stepToMessage.equals(guard));

			// check isomorphic binding between objects useCase and guard 
			JavaSDM.ensure(!useCase.equals(guard));

			// check isomorphic binding between objects useCaseToInteraction and guard 
			JavaSDM.ensure(!useCaseToInteraction.equals(guard));

			// check isomorphic binding between objects line and interaction 
			JavaSDM.ensure(!line.equals(interaction));

			// check isomorphic binding between objects message and interaction 
			JavaSDM.ensure(!message.equals(interaction));

			// check isomorphic binding between objects messageReceive and interaction 
			JavaSDM.ensure(!messageReceive.equals(interaction));

			// check isomorphic binding between objects messageSend and interaction 
			JavaSDM.ensure(!messageSend.equals(interaction));

			// check isomorphic binding between objects operand and interaction 
			JavaSDM.ensure(!operand.equals(interaction));

			// check isomorphic binding between objects spec and interaction 
			JavaSDM.ensure(!spec.equals(interaction));

			// check isomorphic binding between objects step and interaction 
			JavaSDM.ensure(!step.equals(interaction));

			// check isomorphic binding between objects stepToCombo and interaction 
			JavaSDM.ensure(!stepToCombo.equals(interaction));

			// check isomorphic binding between objects stepToMessage and interaction 
			JavaSDM.ensure(!stepToMessage.equals(interaction));

			// check isomorphic binding between objects useCase and interaction 
			JavaSDM.ensure(!useCase.equals(interaction));

			// check isomorphic binding between objects useCaseToInteraction and interaction 
			JavaSDM.ensure(!useCaseToInteraction.equals(interaction));

			// check isomorphic binding between objects message and line 
			JavaSDM.ensure(!message.equals(line));

			// check isomorphic binding between objects messageReceive and line 
			JavaSDM.ensure(!messageReceive.equals(line));

			// check isomorphic binding between objects messageSend and line 
			JavaSDM.ensure(!messageSend.equals(line));

			// check isomorphic binding between objects operand and line 
			JavaSDM.ensure(!operand.equals(line));

			// check isomorphic binding between objects spec and line 
			JavaSDM.ensure(!spec.equals(line));

			// check isomorphic binding between objects step and line 
			JavaSDM.ensure(!step.equals(line));

			// check isomorphic binding between objects stepToCombo and line 
			JavaSDM.ensure(!stepToCombo.equals(line));

			// check isomorphic binding between objects stepToMessage and line 
			JavaSDM.ensure(!stepToMessage.equals(line));

			// check isomorphic binding between objects useCase and line 
			JavaSDM.ensure(!useCase.equals(line));

			// check isomorphic binding between objects useCaseToInteraction and line 
			JavaSDM.ensure(!useCaseToInteraction.equals(line));

			// check isomorphic binding between objects messageReceive and message 
			JavaSDM.ensure(!messageReceive.equals(message));

			// check isomorphic binding between objects messageSend and message 
			JavaSDM.ensure(!messageSend.equals(message));

			// check isomorphic binding between objects operand and message 
			JavaSDM.ensure(!operand.equals(message));

			// check isomorphic binding between objects spec and message 
			JavaSDM.ensure(!spec.equals(message));

			// check isomorphic binding between objects step and message 
			JavaSDM.ensure(!step.equals(message));

			// check isomorphic binding between objects stepToCombo and message 
			JavaSDM.ensure(!stepToCombo.equals(message));

			// check isomorphic binding between objects stepToMessage and message 
			JavaSDM.ensure(!stepToMessage.equals(message));

			// check isomorphic binding between objects useCase and message 
			JavaSDM.ensure(!useCase.equals(message));

			// check isomorphic binding between objects useCaseToInteraction and message 
			JavaSDM.ensure(!useCaseToInteraction.equals(message));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects operand and messageReceive 
			JavaSDM.ensure(!operand.equals(messageReceive));

			// check isomorphic binding between objects spec and messageReceive 
			JavaSDM.ensure(!spec.equals(messageReceive));

			// check isomorphic binding between objects step and messageReceive 
			JavaSDM.ensure(!step.equals(messageReceive));

			// check isomorphic binding between objects stepToCombo and messageReceive 
			JavaSDM.ensure(!stepToCombo.equals(messageReceive));

			// check isomorphic binding between objects stepToMessage and messageReceive 
			JavaSDM.ensure(!stepToMessage.equals(messageReceive));

			// check isomorphic binding between objects useCase and messageReceive 
			JavaSDM.ensure(!useCase.equals(messageReceive));

			// check isomorphic binding between objects useCaseToInteraction and messageReceive 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageReceive));

			// check isomorphic binding between objects operand and messageSend 
			JavaSDM.ensure(!operand.equals(messageSend));

			// check isomorphic binding between objects spec and messageSend 
			JavaSDM.ensure(!spec.equals(messageSend));

			// check isomorphic binding between objects step and messageSend 
			JavaSDM.ensure(!step.equals(messageSend));

			// check isomorphic binding between objects stepToCombo and messageSend 
			JavaSDM.ensure(!stepToCombo.equals(messageSend));

			// check isomorphic binding between objects stepToMessage and messageSend 
			JavaSDM.ensure(!stepToMessage.equals(messageSend));

			// check isomorphic binding between objects useCase and messageSend 
			JavaSDM.ensure(!useCase.equals(messageSend));

			// check isomorphic binding between objects useCaseToInteraction and messageSend 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageSend));

			// check isomorphic binding between objects spec and operand 
			JavaSDM.ensure(!spec.equals(operand));

			// check isomorphic binding between objects step and operand 
			JavaSDM.ensure(!step.equals(operand));

			// check isomorphic binding between objects stepToCombo and operand 
			JavaSDM.ensure(!stepToCombo.equals(operand));

			// check isomorphic binding between objects stepToMessage and operand 
			JavaSDM.ensure(!stepToMessage.equals(operand));

			// check isomorphic binding between objects useCase and operand 
			JavaSDM.ensure(!useCase.equals(operand));

			// check isomorphic binding between objects useCaseToInteraction and operand 
			JavaSDM.ensure(!useCaseToInteraction.equals(operand));

			// check isomorphic binding between objects step and spec 
			JavaSDM.ensure(!step.equals(spec));

			// check isomorphic binding between objects stepToCombo and spec 
			JavaSDM.ensure(!stepToCombo.equals(spec));

			// check isomorphic binding between objects stepToMessage and spec 
			JavaSDM.ensure(!stepToMessage.equals(spec));

			// check isomorphic binding between objects useCase and spec 
			JavaSDM.ensure(!useCase.equals(spec));

			// check isomorphic binding between objects useCaseToInteraction and spec 
			JavaSDM.ensure(!useCaseToInteraction.equals(spec));

			// check isomorphic binding between objects stepToCombo and step 
			JavaSDM.ensure(!stepToCombo.equals(step));

			// check isomorphic binding between objects stepToMessage and step 
			JavaSDM.ensure(!stepToMessage.equals(step));

			// check isomorphic binding between objects useCase and step 
			JavaSDM.ensure(!useCase.equals(step));

			// check isomorphic binding between objects useCaseToInteraction and step 
			JavaSDM.ensure(!useCaseToInteraction.equals(step));

			// check isomorphic binding between objects stepToMessage and stepToCombo 
			JavaSDM.ensure(!stepToMessage.equals(stepToCombo));

			// check isomorphic binding between objects useCase and stepToCombo 
			JavaSDM.ensure(!useCase.equals(stepToCombo));

			// check isomorphic binding between objects useCaseToInteraction and stepToCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToCombo));

			// check isomorphic binding between objects useCase and stepToMessage 
			JavaSDM.ensure(!useCase.equals(stepToMessage));

			// check isomorphic binding between objects useCaseToInteraction and stepToMessage 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToMessage));

			// check isomorphic binding between objects useCaseToInteraction and useCase 
			JavaSDM.ensure(!useCaseToInteraction.equals(useCase));

			// create object messageReceive__message__message
			messageReceive__message__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object guard__specification__spec
			guard__specification__spec = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object operand__guard__guard
			operand__guard__guard = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object operand__covered__line
			operand__covered__line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object messageSend__message__message
			messageSend__message__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToMessage__source__step
			stepToMessage__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object message__receiveEvent__messageReceive
			message__receiveEvent__messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object line__coveredBy__messageSend
			line__coveredBy__messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object combo__operand__operand
			combo__operand__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object line__coveredBy__operand
			line__coveredBy__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object line__coveredBy__combo
			line__coveredBy__combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __step_actor_actor
			__step_actor_actor = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object line__coveredBy__messageReceive
			line__coveredBy__messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object messageReceive__covered__line
			messageReceive__covered__line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object message__interaction__interaction
			message__interaction__interaction = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToCombo__target__combo
			stepToCombo__target__combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __flow_steps_step
			__flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object stepToCombo__source__step
			stepToCombo__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object combo__covered__line
			combo__covered__line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object interaction__message__message
			interaction__message__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object messageSend__covered__line
			messageSend__covered__line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object message__sendEvent__messageSend
			message__sendEvent__messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __alt_ref_altFlow
			__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object __step_stepAlternative_alt
			__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToMessage__target__message
			stepToMessage__target__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// assign attribute ruleresult
			ruleresult.setRuleName("StepToCombinedFragmentRule");
			// assign attribute __step_stepAlternative_alt
			__step_stepAlternative_alt.setName("stepAlternative");
			// assign attribute __alt_ref_altFlow
			__alt_ref_altFlow.setName("ref");
			// assign attribute combo__operand__operand
			combo__operand__operand.setName("operand");
			// assign attribute line__coveredBy__combo
			line__coveredBy__combo.setName("coveredBy");
			// assign attribute combo__covered__line
			combo__covered__line.setName("covered");
			// assign attribute stepToCombo__source__step
			stepToCombo__source__step.setName("source");
			// assign attribute stepToCombo__target__combo
			stepToCombo__target__combo.setName("target");
			// assign attribute operand__guard__guard
			operand__guard__guard.setName("guard");
			// assign attribute line__coveredBy__operand
			line__coveredBy__operand.setName("coveredBy");
			// assign attribute operand__covered__line
			operand__covered__line.setName("covered");
			// assign attribute alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt.setName("source");
			// assign attribute alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand.setName("target");
			// assign attribute guard__specification__spec
			guard__specification__spec.setName("specification");
			// assign attribute __flow_steps_step
			__flow_steps_step.setName("steps");
			// assign attribute __step_actor_actor
			__step_actor_actor.setName("actor");
			// assign attribute message__sendEvent__messageSend
			message__sendEvent__messageSend.setName("sendEvent");
			// assign attribute message__receiveEvent__messageReceive
			message__receiveEvent__messageReceive.setName("receiveEvent");
			// assign attribute message__interaction__interaction
			message__interaction__interaction.setName("interaction");
			// assign attribute interaction__message__message
			interaction__message__message.setName("message");
			// assign attribute stepToMessage__source__step
			stepToMessage__source__step.setName("source");
			// assign attribute stepToMessage__target__message
			stepToMessage__target__message.setName("target");
			// assign attribute messageSend__message__message
			messageSend__message__message.setName("message");
			// assign attribute line__coveredBy__messageSend
			line__coveredBy__messageSend.setName("coveredBy");
			// assign attribute messageSend__covered__line
			messageSend__covered__line.setName("covered");
			// assign attribute messageReceive__message__message
			messageReceive__message__message.setName("message");
			// assign attribute line__coveredBy__messageReceive
			line__coveredBy__messageReceive.setName("coveredBy");
			// assign attribute messageReceive__covered__line
			messageReceive__covered__line.setName("covered");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive__message__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					guard__specification__spec, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand__guard__guard, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand__covered__line, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend__message__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage__source__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message__receiveEvent__messageReceive, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					line__coveredBy__messageSend, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo__operand__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					line__coveredBy__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					line__coveredBy__combo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__step_actor_actor, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					line__coveredBy__messageReceive, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive__covered__line, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message__interaction__interaction, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__source__alt, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__target__combo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__flow_steps_step, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__source__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo__covered__line, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					interaction__message__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend__covered__line, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message__sendEvent__messageSend, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__alt_ref_altFlow, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__step_stepAlternative_alt, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage__target__message, "createdEdges");

			// create link
			__step_actor_actor.setSrc(step);

			// create link
			__flow_steps_step.setTrg(step);

			// create link
			__step_stepAlternative_alt.setSrc(step);

			// create link
			stepToCombo__source__step.setTrg(step);

			// create link
			stepToMessage__source__step.setTrg(step);

			// create link
			__step_stepAlternative_alt.setTrg(alt);

			// create link
			__alt_ref_altFlow.setSrc(alt);

			// create link
			alternative1ToOperand__source__alt.setTrg(alt);

			// create link
			combo__covered__line.setSrc(combo);

			// create link
			stepToCombo__target__combo.setTrg(combo);

			// create link
			line__coveredBy__combo.setTrg(combo);

			// create link
			combo__operand__operand.setSrc(combo);

			// create link
			stepToCombo__target__combo.setSrc(stepToCombo);

			// create link
			stepToCombo__source__step.setSrc(stepToCombo);

			// create link
			line__coveredBy__operand.setTrg(operand);

			// create link
			combo__operand__operand.setTrg(operand);

			// create link
			operand__covered__line.setSrc(operand);

			// create link
			alternative1ToOperand__target__operand.setTrg(operand);

			// create link
			operand__guard__guard.setSrc(operand);

			// create link
			alternative1ToOperand__target__operand
					.setSrc(alternative1ToOperand);

			// create link
			alternative1ToOperand__source__alt.setSrc(alternative1ToOperand);

			// create link
			operand__guard__guard.setTrg(guard);

			// create link
			guard__specification__spec.setSrc(guard);

			// create link
			guard__specification__spec.setTrg(spec);

			// create link
			__alt_ref_altFlow.setTrg(altFlow);

			// create link
			messageSend__covered__line.setTrg(line);

			// create link
			combo__covered__line.setTrg(line);

			// create link
			line__coveredBy__combo.setSrc(line);

			// create link
			messageReceive__covered__line.setTrg(line);

			// create link
			line__coveredBy__operand.setSrc(line);

			// create link
			line__coveredBy__messageReceive.setSrc(line);

			// create link
			operand__covered__line.setTrg(line);

			// create link
			line__coveredBy__messageSend.setSrc(line);

			// create link
			__flow_steps_step.setSrc(flow);

			// create link
			stepToMessage__target__message.setTrg(message);

			// create link
			message__receiveEvent__messageReceive.setSrc(message);

			// create link
			message__interaction__interaction.setSrc(message);

			// create link
			messageSend__message__message.setTrg(message);

			// create link
			message__sendEvent__messageSend.setSrc(message);

			// create link
			messageReceive__message__message.setTrg(message);

			// create link
			interaction__message__message.setTrg(message);

			// create link
			interaction__message__message.setSrc(interaction);

			// create link
			message__interaction__interaction.setTrg(interaction);

			// create link
			stepToMessage__target__message.setSrc(stepToMessage);

			// create link
			stepToMessage__source__step.setSrc(stepToMessage);

			// create link
			line__coveredBy__messageSend.setTrg(messageSend);

			// create link
			messageSend__covered__line.setSrc(messageSend);

			// create link
			messageSend__message__message.setSrc(messageSend);

			// create link
			message__sendEvent__messageSend.setTrg(messageSend);

			// create link
			messageReceive__message__message.setSrc(messageReceive);

			// create link
			line__coveredBy__messageReceive.setTrg(messageReceive);

			// create link
			messageReceive__covered__line.setSrc(messageReceive);

			// create link
			message__receiveEvent__messageReceive.setTrg(messageReceive);

			// create link
			__step_actor_actor.setTrg(actor);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'perform postprocessing'
		// No post processing method found
		// statement node 'register objects'
		this.registerObjects_FWD(ruleresult, step, alt, combo, stepToCombo,
				operand, alternative1ToOperand, guard, spec, altFlow, line,
				useCase, useCaseToInteraction, flow, message, interaction,
				stepToMessage, messageSend, messageReceive, actor, actorToLine);
		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_FWD(Match match, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow,
			UseCase useCase, Flow flow, Actor actor) {
		match.registerObject("step", step);
		match.registerObject("alt", alt);
		match.registerObject("altFlow", altFlow);
		match.registerObject("useCase", useCase);
		match.registerObject("flow", flow);
		match.registerObject("actor", actor);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_FWD(Match match, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow,
			UseCase useCase, Flow flow, Actor actor) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals

		// Create attribute variables

		// Create explicit parameters

		// Create unbound variables

		// Create constraints

		// Solve CSP
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_checkCsp_FWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, Lifeline line, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Flow flow,
			Interaction interaction, Actor actor, ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", true, csp);
		var_altFlow_name.setValue(altFlow.getName());
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", true, csp);
		var_alt_condition.setValue(alt.getCondition());
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", true, csp);
		var_step_name.setValue(step.getName());
		var_step_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", csp);
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", csp);
		var_spec_value.setType("");
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", csp);
		var_combo_interactionOperator.setType("EObject");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", csp);
		var_message_name.setType("");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		EqInterOperKind eqInterOperKind = new EqInterOperKind();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eqInterOperKind);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("step", step);
		isApplicableMatch.registerObject("alt", alt);
		isApplicableMatch.registerObject("altFlow", altFlow);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isApplicable_checkCsp_FWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_FWD(PerformRuleResult ruleresult, EObject step,
			EObject alt, EObject combo, EObject stepToCombo, EObject operand,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject line, EObject useCase,
			EObject useCaseToInteraction, EObject flow, EObject message,
			EObject interaction, EObject stepToMessage, EObject messageSend,
			EObject messageReceive, EObject actor, EObject actorToLine) {
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkTypes_FWD(Match match) {
		return true
				&& match.getObject("step")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getNormalStep())
				&& match.getObject("alt")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getAlternativeFlowAlternative())
				&& match.getObject("altFlow")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getAlternativeFlow());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_BWD(Match match, CombinedFragment combo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, Lifeline line, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __line_coveredBy_messageSend = null;
		EMoflonEdge __combo_operand_operand = null;
		EMoflonEdge __combo_covered_line = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __line_coveredBy_messageReceive = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __messageReceive_covered_line = null;
		EMoflonEdge __messageSend_covered_line = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __line_coveredBy_combo = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __line_interaction_interaction = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_BWD(match, combo,
					operand, guard, spec, line, message, interaction,
					messageSend, messageReceive));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// create object __line_coveredBy_messageSend
				__line_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_operand_operand
				__combo_operand_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_covered_line
				__combo_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_interaction_interaction
				__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __guard_specification_spec
				__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_messageReceive
				__line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_operand
				__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_sendEvent_messageSend
				__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_message_message
				__interaction_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_message_message
				__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_guard_guard
				__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_message_message
				__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_covered_line
				__messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_covered_line
				__messageSend_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_covered_line
				__operand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_combo
				__line_coveredBy_combo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __combo_operand_operand
				__combo_operand_operand.setName("operand");
				// assign attribute __line_coveredBy_combo
				__line_coveredBy_combo.setName("coveredBy");
				// assign attribute __combo_covered_line
				__combo_covered_line.setName("covered");
				// assign attribute __operand_guard_guard
				__operand_guard_guard.setName("guard");
				// assign attribute __line_coveredBy_operand
				__line_coveredBy_operand.setName("coveredBy");
				// assign attribute __operand_covered_line
				__operand_covered_line.setName("covered");
				// assign attribute __guard_specification_spec
				__guard_specification_spec.setName("specification");
				// assign attribute __message_sendEvent_messageSend
				__message_sendEvent_messageSend.setName("sendEvent");
				// assign attribute __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive.setName("receiveEvent");
				// assign attribute __message_interaction_interaction
				__message_interaction_interaction.setName("interaction");
				// assign attribute __interaction_message_message
				__interaction_message_message.setName("message");
				// assign attribute __messageSend_message_message
				__messageSend_message_message.setName("message");
				// assign attribute __line_coveredBy_messageSend
				__line_coveredBy_messageSend.setName("coveredBy");
				// assign attribute __messageSend_covered_line
				__messageSend_covered_line.setName("covered");
				// assign attribute __messageReceive_message_message
				__messageReceive_message_message.setName("message");
				// assign attribute __line_coveredBy_messageReceive
				__line_coveredBy_messageReceive.setName("coveredBy");
				// assign attribute __messageReceive_covered_line
				__messageReceive_covered_line.setName("covered");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_operand_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_interaction_interaction,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__guard_specification_spec, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_messageReceive, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						operand, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						spec, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_sendEvent_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil
						.addOppositeReference(match,
								__messageReceive_message_message,
								"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_guard_guard, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						combo, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageSend, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						message, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageReceive_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						guard, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_receiveEvent_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_combo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageReceive, "toBeTranslatedNodes");

				// create link
				__combo_covered_line.setSrc(combo);

				// create link
				__combo_operand_operand.setSrc(combo);

				// create link
				__line_coveredBy_combo.setTrg(combo);

				// create link
				__operand_guard_guard.setSrc(operand);

				// create link
				__operand_covered_line.setSrc(operand);

				// create link
				__combo_operand_operand.setTrg(operand);

				// create link
				__line_coveredBy_operand.setTrg(operand);

				// create link
				__operand_guard_guard.setTrg(guard);

				// create link
				__guard_specification_spec.setSrc(guard);

				// create link
				__guard_specification_spec.setTrg(spec);

				// create link
				__line_coveredBy_messageReceive.setSrc(line);

				// create link
				__line_coveredBy_messageSend.setSrc(line);

				// create link
				__combo_covered_line.setTrg(line);

				// create link
				__messageReceive_covered_line.setTrg(line);

				// create link
				__messageSend_covered_line.setTrg(line);

				// create link
				__line_coveredBy_combo.setSrc(line);

				// create link
				__line_coveredBy_operand.setSrc(line);

				// create link
				__operand_covered_line.setTrg(line);

				// create link
				__messageSend_message_message.setTrg(message);

				// create link
				__message_interaction_interaction.setSrc(message);

				// create link
				__messageReceive_message_message.setTrg(message);

				// create link
				__message_sendEvent_messageSend.setSrc(message);

				// create link
				__message_receiveEvent_messageReceive.setSrc(message);

				// create link
				__interaction_message_message.setTrg(message);

				// create link
				__interaction_message_message.setSrc(interaction);

				// create link
				__message_interaction_interaction.setTrg(interaction);

				// create link
				__messageSend_message_message.setSrc(messageSend);

				// create link
				__message_sendEvent_messageSend.setTrg(messageSend);

				// create link
				__messageSend_covered_line.setSrc(messageSend);

				// create link
				__line_coveredBy_messageSend.setTrg(messageSend);

				// create link
				__line_coveredBy_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_message_message.setSrc(messageReceive);

				// create link
				__message_receiveEvent_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_covered_line.setSrc(messageReceive);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// create object __interaction_lifeline_line
				__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_interaction_interaction
				__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __line_interaction_interaction
				__line_interaction_interaction.setName("interaction");
				// assign attribute __interaction_lifeline_line
				__interaction_lifeline_line.setName("lifeline");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_lifeline_line, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						line, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_interaction_interaction, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						interaction, "contextNodes");

				// create link
				__interaction_lifeline_line.setTrg(line);

				// create link
				__line_interaction_interaction.setSrc(line);

				// create link
				__line_interaction_interaction.setTrg(interaction);

				// create link
				__interaction_lifeline_line.setSrc(interaction);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_BWD(match, combo, operand, guard, spec,
					line, message, interaction, messageSend, messageReceive);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_BWD(Match match) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass eClass = null;
		Iterator fujaba__IterEClassToPerformOperation = null;
		EOperation performOperation = null;
		IsApplicableRuleResult ruleresult = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Interaction interaction = null;
		Lifeline line = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand operand = null;
		LiteralString spec = null;
		EMoflonEdge __combo_covered_line = null;
		IsApplicableMatch isApplicableMatch = null;
		EMoflonEdge __combo_operand_operand = null;
		EMoflonEdge __line_coveredBy_combo = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __line_coveredBy_messageSend = null;
		EMoflonEdge __messageReceive_covered_line = null;
		EMoflonEdge __line_interaction_interaction = null;
		EMoflonEdge __line_coveredBy_messageReceive = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __actorToLine_target_line = null;
		EMoflonEdge __messageSend_covered_line = null;
		EMoflonEdge __useCaseToInteraction_source_useCase = null;
		EMoflonEdge __useCase_flows_flow = null;
		EMoflonEdge __useCaseToInteraction_target_interaction = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __actorToLine_source_actor = null;
		CSP csp = null;
		Iterator fujaba__IterUseCaseToFlow = null;
		Flow flow = null;
		UseCase useCase = null;
		Iterator fujaba__IterInteractionToUseCaseToInteraction = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Actor actor = null;
		Iterator fujaba__IterLineToActorToLine = null;
		ActorToLifeline actorToLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from eClass to performOperation
			fujaba__Success = false;

			fujaba__IterEClassToPerformOperation = eClass.getEOperations()
					.iterator();

			while (!(fujaba__Success)
					&& fujaba__IterEClassToPerformOperation.hasNext()) {
				try {
					performOperation = (EOperation) fujaba__IterEClassToPerformOperation
							.next();

					// check object performOperation is really bound
					JavaSDM.ensure(performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							performOperation.getName(), "perform_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE
					.createIsApplicableRuleResult();

			// assign attribute ruleresult
			ruleresult.setSuccess(false);
			// assign attribute ruleresult
			ruleresult.setRule("StepToCombinedFragmentRule");

			// create link
			ruleresult.setPerformOperation(performOperation);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'core match'
		try {
			fujaba__Success = false;

			_TmpObject = (match.getObject("combo"));

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;
			_TmpObject = (match.getObject("guard"));

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;
			_TmpObject = (match.getObject("interaction"));

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;
			_TmpObject = (match.getObject("line"));

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;
			_TmpObject = (match.getObject("message"));

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;
			_TmpObject = (match.getObject("messageReceive"));

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (match.getObject("messageSend"));

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (match.getObject("operand"));

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;
			_TmpObject = (match.getObject("spec"));

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// iterate to-many link target from line to actorToLine
			fujaba__Success = false;

			fujaba__IterLineToActorToLine = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(line,
							ActorToLifeline.class, "target")).iterator();

			while (fujaba__IterLineToActorToLine.hasNext()) {
				try {
					actorToLine = (ActorToLifeline) fujaba__IterLineToActorToLine
							.next();

					// check object actorToLine is really bound
					JavaSDM.ensure(actorToLine != null);
					// bind object
					actor = actorToLine.getSource();

					// check object actor is really bound
					JavaSDM.ensure(actor != null);

					// iterate to-many link target from interaction to useCaseToInteraction
					fujaba__Success = false;

					fujaba__IterInteractionToUseCaseToInteraction = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(interaction,
											UseCaseToInteraction.class,
											"target")).iterator();

					while (fujaba__IterInteractionToUseCaseToInteraction
							.hasNext()) {
						try {
							useCaseToInteraction = (UseCaseToInteraction) fujaba__IterInteractionToUseCaseToInteraction
									.next();

							// check object useCaseToInteraction is really bound
							JavaSDM.ensure(useCaseToInteraction != null);
							// bind object
							useCase = useCaseToInteraction.getSource();

							// check object useCase is really bound
							JavaSDM.ensure(useCase != null);

							// story node 'find context'
							try {
								fujaba__Success = false;

								// check object actor is really bound
								JavaSDM.ensure(actor != null);
								// check object actorToLine is really bound
								JavaSDM.ensure(actorToLine != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check object useCase is really bound
								JavaSDM.ensure(useCase != null);
								// check object useCaseToInteraction is really bound
								JavaSDM.ensure(useCaseToInteraction != null);
								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link source from actorToLine to actor
								JavaSDM.ensure(actor.equals(actorToLine
										.getSource()));

								// check link source from useCaseToInteraction to useCase
								JavaSDM.ensure(useCase
										.equals(useCaseToInteraction
												.getSource()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link target from actorToLine to line
								JavaSDM.ensure(line.equals(actorToLine
										.getTarget()));

								// check link target from useCaseToInteraction to interaction
								JavaSDM.ensure(interaction
										.equals(useCaseToInteraction
												.getTarget()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from messageSend to line
								JavaSDM.ensure(messageSend.getCovered()
										.contains(line));

								// check link covered from line to operand
								JavaSDM.ensure(line.getCoveredBy().contains(
										operand));

								// iterate to-many link flows from useCase to flow
								fujaba__Success = false;

								fujaba__IterUseCaseToFlow = new ArrayList(
										useCase.getFlows()).iterator();

								while (fujaba__IterUseCaseToFlow.hasNext()) {
									try {
										flow = (Flow) fujaba__IterUseCaseToFlow
												.next();

										// check object flow is really bound
										JavaSDM.ensure(flow != null);
										// create object __combo_covered_line
										__combo_covered_line = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object isApplicableMatch
										isApplicableMatch = TGGRuntimeFactory.eINSTANCE
												.createIsApplicableMatch();

										// create object __combo_operand_operand
										__combo_operand_operand = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __line_coveredBy_combo
										__line_coveredBy_combo = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __operand_guard_guard
										__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __operand_covered_line
										__operand_covered_line = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __line_coveredBy_operand
										__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __guard_specification_spec
										__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __line_coveredBy_messageSend
										__line_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __messageReceive_covered_line
										__messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __line_interaction_interaction
										__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __line_coveredBy_messageReceive
										__line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __interaction_lifeline_line
										__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __actorToLine_target_line
										__actorToLine_target_line = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __messageSend_covered_line
										__messageSend_covered_line = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __useCaseToInteraction_source_useCase
										__useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __useCase_flows_flow
										__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __useCaseToInteraction_target_interaction
										__useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __message_interaction_interaction
										__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __messageReceive_message_message
										__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __messageSend_message_message
										__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __message_sendEvent_messageSend
										__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __interaction_message_message
										__interaction_message_message = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __message_receiveEvent_messageReceive
										__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __actorToLine_source_actor
										__actorToLine_source_actor = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// assign attribute __combo_operand_operand
										__combo_operand_operand
												.setName("operand");
										// assign attribute __line_coveredBy_combo
										__line_coveredBy_combo
												.setName("coveredBy");
										// assign attribute __combo_covered_line
										__combo_covered_line.setName("covered");
										// assign attribute __operand_guard_guard
										__operand_guard_guard.setName("guard");
										// assign attribute __line_coveredBy_operand
										__line_coveredBy_operand
												.setName("coveredBy");
										// assign attribute __operand_covered_line
										__operand_covered_line
												.setName("covered");
										// assign attribute __guard_specification_spec
										__guard_specification_spec
												.setName("specification");
										// assign attribute __useCase_flows_flow
										__useCase_flows_flow.setName("flows");
										// assign attribute __useCaseToInteraction_source_useCase
										__useCaseToInteraction_source_useCase
												.setName("source");
										// assign attribute __useCaseToInteraction_target_interaction
										__useCaseToInteraction_target_interaction
												.setName("target");
										// assign attribute __message_sendEvent_messageSend
										__message_sendEvent_messageSend
												.setName("sendEvent");
										// assign attribute __message_receiveEvent_messageReceive
										__message_receiveEvent_messageReceive
												.setName("receiveEvent");
										// assign attribute __message_interaction_interaction
										__message_interaction_interaction
												.setName("interaction");
										// assign attribute __interaction_message_message
										__interaction_message_message
												.setName("message");
										// assign attribute __line_interaction_interaction
										__line_interaction_interaction
												.setName("interaction");
										// assign attribute __interaction_lifeline_line
										__interaction_lifeline_line
												.setName("lifeline");
										// assign attribute __messageSend_message_message
										__messageSend_message_message
												.setName("message");
										// assign attribute __line_coveredBy_messageSend
										__line_coveredBy_messageSend
												.setName("coveredBy");
										// assign attribute __messageSend_covered_line
										__messageSend_covered_line
												.setName("covered");
										// assign attribute __messageReceive_message_message
										__messageReceive_message_message
												.setName("message");
										// assign attribute __line_coveredBy_messageReceive
										__line_coveredBy_messageReceive
												.setName("coveredBy");
										// assign attribute __messageReceive_covered_line
										__messageReceive_covered_line
												.setName("covered");
										// assign attribute __actorToLine_source_actor
										__actorToLine_source_actor
												.setName("source");
										// assign attribute __actorToLine_target_line
										__actorToLine_target_line
												.setName("target");

										// create link
										__combo_covered_line.setSrc(combo);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														combo);

										// create link
										__combo_operand_operand.setSrc(combo);

										// create link
										__line_coveredBy_combo.setTrg(combo);

										// create link
										__operand_guard_guard.setSrc(operand);

										// create link
										__operand_covered_line.setSrc(operand);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														operand);

										// create link
										__combo_operand_operand.setTrg(operand);

										// create link
										__line_coveredBy_operand
												.setTrg(operand);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														guard);

										// create link
										__guard_specification_spec
												.setSrc(guard);

										// create link
										__operand_guard_guard.setTrg(guard);

										// create link
										__guard_specification_spec.setTrg(spec);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														spec);

										// create link
										__operand_covered_line.setTrg(line);

										// create link
										__line_coveredBy_messageSend
												.setSrc(line);

										// create link
										__messageReceive_covered_line
												.setTrg(line);

										// create link
										__line_coveredBy_operand.setSrc(line);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														line);

										// create link
										__line_interaction_interaction
												.setSrc(line);

										// create link
										__combo_covered_line.setTrg(line);

										// create link
										__line_coveredBy_combo.setSrc(line);

										// create link
										__line_coveredBy_messageReceive
												.setSrc(line);

										// create link
										__interaction_lifeline_line
												.setTrg(line);

										// create link
										__actorToLine_target_line.setTrg(line);

										// create link
										__messageSend_covered_line.setTrg(line);

										// create link
										__useCaseToInteraction_source_useCase
												.setTrg(useCase);

										// create link
										__useCase_flows_flow.setSrc(useCase);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														useCase);

										// create link
										__useCaseToInteraction_target_interaction
												.setSrc(useCaseToInteraction);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														useCaseToInteraction);

										// create link
										__useCaseToInteraction_source_useCase
												.setSrc(useCaseToInteraction);

										// create link
										__useCase_flows_flow.setTrg(flow);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														flow);

										// create link
										__message_interaction_interaction
												.setSrc(message);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														message);

										// create link
										__messageReceive_message_message
												.setTrg(message);

										// create link
										__messageSend_message_message
												.setTrg(message);

										// create link
										__message_sendEvent_messageSend
												.setSrc(message);

										// create link
										__interaction_message_message
												.setTrg(message);

										// create link
										__message_receiveEvent_messageReceive
												.setSrc(message);

										// create link
										__message_interaction_interaction
												.setTrg(interaction);

										// create link
										__interaction_message_message
												.setSrc(interaction);

										// create link
										__line_interaction_interaction
												.setTrg(interaction);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														interaction);

										// create link
										__useCaseToInteraction_target_interaction
												.setTrg(interaction);

										// create link
										__interaction_lifeline_line
												.setSrc(interaction);

										// create link
										__line_coveredBy_messageSend
												.setTrg(messageSend);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														messageSend);

										// create link
										__message_sendEvent_messageSend
												.setTrg(messageSend);

										// create link
										__messageSend_message_message
												.setSrc(messageSend);

										// create link
										__messageSend_covered_line
												.setSrc(messageSend);

										// create link
										__message_receiveEvent_messageReceive
												.setTrg(messageReceive);

										// create link
										__line_coveredBy_messageReceive
												.setTrg(messageReceive);

										// create link
										__messageReceive_covered_line
												.setSrc(messageReceive);

										// create link
										__messageReceive_message_message
												.setSrc(messageReceive);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														messageReceive);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														actor);

										// create link
										__actorToLine_source_actor
												.setTrg(actor);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														actorToLine);

										// create link
										__actorToLine_source_actor
												.setSrc(actorToLine);

										// create link
										__actorToLine_target_line
												.setSrc(actorToLine);

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__operand_guard_guard,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__message_receiveEvent_messageReceive,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__interaction_lifeline_line,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__useCaseToInteraction_source_useCase,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__message_interaction_interaction,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__line_coveredBy_combo,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__messageSend_message_message,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__actorToLine_target_line,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__line_interaction_interaction,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__message_sendEvent_messageSend,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__useCase_flows_flow,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__interaction_message_message,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__combo_covered_line,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__messageReceive_message_message,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__useCaseToInteraction_target_interaction,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__messageReceive_covered_line,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__operand_covered_line,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__messageSend_covered_line,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__actorToLine_source_actor,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__combo_operand_operand,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__line_coveredBy_messageReceive,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__line_coveredBy_messageSend,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__line_coveredBy_operand,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__guard_specification_spec,
														"allContextElements");
										// story node 'solve CSP'
										try {
											fujaba__Success = false;

											_TmpObject = (this
													.isApplicable_solveCsp_BWD(
															isApplicableMatch,
															combo,
															operand,
															guard,
															spec,
															line,
															useCase,
															useCaseToInteraction,
															flow, message,
															interaction,
															messageSend,
															messageReceive,
															actor, actorToLine));

											// ensure correct type and really bound of object csp
											JavaSDM.ensure(_TmpObject instanceof CSP);
											csp = (CSP) _TmpObject;
											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										// statement node 'check CSP'
										fujaba__Success = this
												.isApplicable_checkCsp_BWD(csp);
										if (fujaba__Success) {
											// story node 'add match to rule result'
											try {
												fujaba__Success = false;

												// check object isApplicableMatch is really bound
												JavaSDM.ensure(isApplicableMatch != null);
												// check object ruleresult is really bound
												JavaSDM.ensure(ruleresult != null);
												// assign attribute ruleresult
												ruleresult.setSuccess(true);
												// assign attribute isApplicableMatch
												isApplicableMatch
														.setRuleName("StepToCombinedFragmentRule");

												// create link
												isApplicableMatch
														.setIsApplicableRuleResult(ruleresult);

												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

										} else {

										}

										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}
								}
								JavaSDM.ensure(fujaba__Success);
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		Actor actor = null;
		ActorToLifeline actorToLine = null;
		CombinedFragment combo = null;
		Flow flow = null;
		InteractionConstraint guard = null;
		Interaction interaction = null;
		Lifeline line = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand operand = null;
		LiteralString spec = null;
		UseCase useCase = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Iterator fujaba__IterIsApplicableMatchToCsp = null;
		CSP csp = null;
		NormalStep step = null;
		AlternativeFlowAlternative alt = null;
		NormalStepToMessage stepToMessage = null;
		NormalStepToCombinedFragment stepToCombo = null;
		AlternativeFlow altFlow = null;
		StepAlternativeToInteractionOperand alternative1ToOperand = null;
		PerformRuleResult ruleresult = null;
		EMoflonEdge stepToCombo__target__combo = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge alternative1ToOperand__source__alt = null;
		EMoflonEdge step__stepAlternative__alt = null;
		EMoflonEdge stepToMessage__source__step = null;
		EMoflonEdge __messageSend_covered_line = null;
		EMoflonEdge __line_coveredBy_combo = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __combo_covered_line = null;
		EMoflonEdge alternative1ToOperand__target__operand = null;
		EMoflonEdge __line_coveredBy_messageSend = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __line_coveredBy_messageReceive = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge alt__ref__altFlow = null;
		EMoflonEdge __messageReceive_covered_line = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge flow__steps__step = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge step__actor__actor = null;
		EMoflonEdge stepToMessage__target__message = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __combo_operand_operand = null;
		EMoflonEdge stepToCombo__source__step = null;

		// story node 'perform transformation'
		try {
			fujaba__Success = false;

			_TmpObject = (isApplicableMatch.getObject("actor"));

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("actorToLine"));

			// ensure correct type and really bound of object actorToLine
			JavaSDM.ensure(_TmpObject instanceof ActorToLifeline);
			actorToLine = (ActorToLifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("combo"));

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flow"));

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof Flow);
			flow = (Flow) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("guard"));

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("interaction"));

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("line"));

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("message"));

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("messageReceive"));

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("messageSend"));

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("operand"));

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("spec"));

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCase"));

			// ensure correct type and really bound of object useCase
			JavaSDM.ensure(_TmpObject instanceof UseCase);
			useCase = (UseCase) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCaseToInteraction"));

			// ensure correct type and really bound of object useCaseToInteraction
			JavaSDM.ensure(_TmpObject instanceof UseCaseToInteraction);
			useCaseToInteraction = (UseCaseToInteraction) _TmpObject;
			// check object isApplicableMatch is really bound
			JavaSDM.ensure(isApplicableMatch != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// iterate to-many link attributeInfo from isApplicableMatch to csp
			fujaba__Success = false;

			fujaba__IterIsApplicableMatchToCsp = isApplicableMatch
					.getAttributeInfo().iterator();

			while (!(fujaba__Success)
					&& fujaba__IterIsApplicableMatchToCsp.hasNext()) {
				try {
					_TmpObject = fujaba__IterIsApplicableMatchToCsp.next();

					// ensure correct type and really bound of object csp
					JavaSDM.ensure(_TmpObject instanceof CSP);
					csp = (CSP) _TmpObject;

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			if (!fujaba__Success) {
				fujaba__Success = true;
				csp = null;
			}
			// create object step
			step = UseCaseDSLFactory.eINSTANCE.createNormalStep();

			// create object alt
			alt = UseCaseDSLFactory.eINSTANCE
					.createAlternativeFlowAlternative();

			// create object stepToMessage
			stepToMessage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToMessage();

			// create object stepToCombo
			stepToCombo = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToCombinedFragment();

			// create object altFlow
			altFlow = UseCaseDSLFactory.eINSTANCE.createAlternativeFlow();

			// create object alternative1ToOperand
			alternative1ToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createStepAlternativeToInteractionOperand();

			// assign attribute step
			step.setName((java.lang.String) csp.getAttributeVariable("step",
					"name").getValue());
			// assign attribute alt
			alt.setCondition((java.lang.String) csp.getAttributeVariable("alt",
					"condition").getValue());
			// assign attribute altFlow
			altFlow.setName((java.lang.String) csp.getAttributeVariable(
					"altFlow", "name").getValue());

			// create link
			stepToMessage.setTarget(message);

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(step, actor,
					"actor");

			// create link
			step.getStepAlternative().add(alt); // add link

			// create link
			flow.getSteps().add(step);

			// create link
			stepToMessage.setSource(step);

			// create link
			stepToCombo.setSource(step);

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(alt, altFlow,
					"ref");

			// create link
			alternative1ToOperand.setSource(alt);

			// create link
			stepToCombo.setTarget(combo);

			// create link
			alternative1ToOperand.setTarget(operand);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'collect translated elements'
		try {
			fujaba__Success = false;

			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object stepToMessage is really bound
			JavaSDM.ensure(stepToMessage != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alt, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlow, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					spec, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					guard, "translatedElements");
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'bookkeeping for edges'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object actorToLine is really bound
			JavaSDM.ensure(actorToLine != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object ruleresult is really bound
			JavaSDM.ensure(ruleresult != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object stepToMessage is really bound
			JavaSDM.ensure(stepToMessage != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check object useCaseToInteraction is really bound
			JavaSDM.ensure(useCaseToInteraction != null);
			// check isomorphic binding between objects actorToLine and actor 
			JavaSDM.ensure(!actorToLine.equals(actor));

			// check isomorphic binding between objects alt and actor 
			JavaSDM.ensure(!alt.equals(actor));

			// check isomorphic binding between objects altFlow and actor 
			JavaSDM.ensure(!altFlow.equals(actor));

			// check isomorphic binding between objects alternative1ToOperand and actor 
			JavaSDM.ensure(!alternative1ToOperand.equals(actor));

			// check isomorphic binding between objects combo and actor 
			JavaSDM.ensure(!combo.equals(actor));

			// check isomorphic binding between objects flow and actor 
			JavaSDM.ensure(!flow.equals(actor));

			// check isomorphic binding between objects guard and actor 
			JavaSDM.ensure(!guard.equals(actor));

			// check isomorphic binding between objects interaction and actor 
			JavaSDM.ensure(!interaction.equals(actor));

			// check isomorphic binding between objects line and actor 
			JavaSDM.ensure(!line.equals(actor));

			// check isomorphic binding between objects message and actor 
			JavaSDM.ensure(!message.equals(actor));

			// check isomorphic binding between objects messageReceive and actor 
			JavaSDM.ensure(!messageReceive.equals(actor));

			// check isomorphic binding between objects messageSend and actor 
			JavaSDM.ensure(!messageSend.equals(actor));

			// check isomorphic binding between objects operand and actor 
			JavaSDM.ensure(!operand.equals(actor));

			// check isomorphic binding between objects spec and actor 
			JavaSDM.ensure(!spec.equals(actor));

			// check isomorphic binding between objects step and actor 
			JavaSDM.ensure(!step.equals(actor));

			// check isomorphic binding between objects stepToCombo and actor 
			JavaSDM.ensure(!stepToCombo.equals(actor));

			// check isomorphic binding between objects stepToMessage and actor 
			JavaSDM.ensure(!stepToMessage.equals(actor));

			// check isomorphic binding between objects useCase and actor 
			JavaSDM.ensure(!useCase.equals(actor));

			// check isomorphic binding between objects useCaseToInteraction and actor 
			JavaSDM.ensure(!useCaseToInteraction.equals(actor));

			// check isomorphic binding between objects alt and actorToLine 
			JavaSDM.ensure(!alt.equals(actorToLine));

			// check isomorphic binding between objects altFlow and actorToLine 
			JavaSDM.ensure(!altFlow.equals(actorToLine));

			// check isomorphic binding between objects alternative1ToOperand and actorToLine 
			JavaSDM.ensure(!alternative1ToOperand.equals(actorToLine));

			// check isomorphic binding between objects combo and actorToLine 
			JavaSDM.ensure(!combo.equals(actorToLine));

			// check isomorphic binding between objects flow and actorToLine 
			JavaSDM.ensure(!flow.equals(actorToLine));

			// check isomorphic binding between objects guard and actorToLine 
			JavaSDM.ensure(!guard.equals(actorToLine));

			// check isomorphic binding between objects interaction and actorToLine 
			JavaSDM.ensure(!interaction.equals(actorToLine));

			// check isomorphic binding between objects line and actorToLine 
			JavaSDM.ensure(!line.equals(actorToLine));

			// check isomorphic binding between objects message and actorToLine 
			JavaSDM.ensure(!message.equals(actorToLine));

			// check isomorphic binding between objects messageReceive and actorToLine 
			JavaSDM.ensure(!messageReceive.equals(actorToLine));

			// check isomorphic binding between objects messageSend and actorToLine 
			JavaSDM.ensure(!messageSend.equals(actorToLine));

			// check isomorphic binding between objects operand and actorToLine 
			JavaSDM.ensure(!operand.equals(actorToLine));

			// check isomorphic binding between objects spec and actorToLine 
			JavaSDM.ensure(!spec.equals(actorToLine));

			// check isomorphic binding between objects step and actorToLine 
			JavaSDM.ensure(!step.equals(actorToLine));

			// check isomorphic binding between objects stepToCombo and actorToLine 
			JavaSDM.ensure(!stepToCombo.equals(actorToLine));

			// check isomorphic binding between objects stepToMessage and actorToLine 
			JavaSDM.ensure(!stepToMessage.equals(actorToLine));

			// check isomorphic binding between objects useCase and actorToLine 
			JavaSDM.ensure(!useCase.equals(actorToLine));

			// check isomorphic binding between objects useCaseToInteraction and actorToLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(actorToLine));

			// check isomorphic binding between objects altFlow and alt 
			JavaSDM.ensure(!altFlow.equals(alt));

			// check isomorphic binding between objects alternative1ToOperand and alt 
			JavaSDM.ensure(!alternative1ToOperand.equals(alt));

			// check isomorphic binding between objects combo and alt 
			JavaSDM.ensure(!combo.equals(alt));

			// check isomorphic binding between objects flow and alt 
			JavaSDM.ensure(!flow.equals(alt));

			// check isomorphic binding between objects guard and alt 
			JavaSDM.ensure(!guard.equals(alt));

			// check isomorphic binding between objects interaction and alt 
			JavaSDM.ensure(!interaction.equals(alt));

			// check isomorphic binding between objects line and alt 
			JavaSDM.ensure(!line.equals(alt));

			// check isomorphic binding between objects message and alt 
			JavaSDM.ensure(!message.equals(alt));

			// check isomorphic binding between objects messageReceive and alt 
			JavaSDM.ensure(!messageReceive.equals(alt));

			// check isomorphic binding between objects messageSend and alt 
			JavaSDM.ensure(!messageSend.equals(alt));

			// check isomorphic binding between objects operand and alt 
			JavaSDM.ensure(!operand.equals(alt));

			// check isomorphic binding between objects spec and alt 
			JavaSDM.ensure(!spec.equals(alt));

			// check isomorphic binding between objects step and alt 
			JavaSDM.ensure(!step.equals(alt));

			// check isomorphic binding between objects stepToCombo and alt 
			JavaSDM.ensure(!stepToCombo.equals(alt));

			// check isomorphic binding between objects stepToMessage and alt 
			JavaSDM.ensure(!stepToMessage.equals(alt));

			// check isomorphic binding between objects useCase and alt 
			JavaSDM.ensure(!useCase.equals(alt));

			// check isomorphic binding between objects useCaseToInteraction and alt 
			JavaSDM.ensure(!useCaseToInteraction.equals(alt));

			// check isomorphic binding between objects alternative1ToOperand and altFlow 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlow));

			// check isomorphic binding between objects combo and altFlow 
			JavaSDM.ensure(!combo.equals(altFlow));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check isomorphic binding between objects guard and altFlow 
			JavaSDM.ensure(!guard.equals(altFlow));

			// check isomorphic binding between objects interaction and altFlow 
			JavaSDM.ensure(!interaction.equals(altFlow));

			// check isomorphic binding between objects line and altFlow 
			JavaSDM.ensure(!line.equals(altFlow));

			// check isomorphic binding between objects message and altFlow 
			JavaSDM.ensure(!message.equals(altFlow));

			// check isomorphic binding between objects messageReceive and altFlow 
			JavaSDM.ensure(!messageReceive.equals(altFlow));

			// check isomorphic binding between objects messageSend and altFlow 
			JavaSDM.ensure(!messageSend.equals(altFlow));

			// check isomorphic binding between objects operand and altFlow 
			JavaSDM.ensure(!operand.equals(altFlow));

			// check isomorphic binding between objects spec and altFlow 
			JavaSDM.ensure(!spec.equals(altFlow));

			// check isomorphic binding between objects step and altFlow 
			JavaSDM.ensure(!step.equals(altFlow));

			// check isomorphic binding between objects stepToCombo and altFlow 
			JavaSDM.ensure(!stepToCombo.equals(altFlow));

			// check isomorphic binding between objects stepToMessage and altFlow 
			JavaSDM.ensure(!stepToMessage.equals(altFlow));

			// check isomorphic binding between objects useCase and altFlow 
			JavaSDM.ensure(!useCase.equals(altFlow));

			// check isomorphic binding between objects useCaseToInteraction and altFlow 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlow));

			// check isomorphic binding between objects combo and alternative1ToOperand 
			JavaSDM.ensure(!combo.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and alternative1ToOperand 
			JavaSDM.ensure(!flow.equals(alternative1ToOperand));

			// check isomorphic binding between objects guard and alternative1ToOperand 
			JavaSDM.ensure(!guard.equals(alternative1ToOperand));

			// check isomorphic binding between objects interaction and alternative1ToOperand 
			JavaSDM.ensure(!interaction.equals(alternative1ToOperand));

			// check isomorphic binding between objects line and alternative1ToOperand 
			JavaSDM.ensure(!line.equals(alternative1ToOperand));

			// check isomorphic binding between objects message and alternative1ToOperand 
			JavaSDM.ensure(!message.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageReceive and alternative1ToOperand 
			JavaSDM.ensure(!messageReceive.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageSend and alternative1ToOperand 
			JavaSDM.ensure(!messageSend.equals(alternative1ToOperand));

			// check isomorphic binding between objects operand and alternative1ToOperand 
			JavaSDM.ensure(!operand.equals(alternative1ToOperand));

			// check isomorphic binding between objects spec and alternative1ToOperand 
			JavaSDM.ensure(!spec.equals(alternative1ToOperand));

			// check isomorphic binding between objects step and alternative1ToOperand 
			JavaSDM.ensure(!step.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToCombo and alternative1ToOperand 
			JavaSDM.ensure(!stepToCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToMessage and alternative1ToOperand 
			JavaSDM.ensure(!stepToMessage.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCase and alternative1ToOperand 
			JavaSDM.ensure(!useCase.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCaseToInteraction and alternative1ToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and combo 
			JavaSDM.ensure(!flow.equals(combo));

			// check isomorphic binding between objects guard and combo 
			JavaSDM.ensure(!guard.equals(combo));

			// check isomorphic binding between objects interaction and combo 
			JavaSDM.ensure(!interaction.equals(combo));

			// check isomorphic binding between objects line and combo 
			JavaSDM.ensure(!line.equals(combo));

			// check isomorphic binding between objects message and combo 
			JavaSDM.ensure(!message.equals(combo));

			// check isomorphic binding between objects messageReceive and combo 
			JavaSDM.ensure(!messageReceive.equals(combo));

			// check isomorphic binding between objects messageSend and combo 
			JavaSDM.ensure(!messageSend.equals(combo));

			// check isomorphic binding between objects operand and combo 
			JavaSDM.ensure(!operand.equals(combo));

			// check isomorphic binding between objects spec and combo 
			JavaSDM.ensure(!spec.equals(combo));

			// check isomorphic binding between objects step and combo 
			JavaSDM.ensure(!step.equals(combo));

			// check isomorphic binding between objects stepToCombo and combo 
			JavaSDM.ensure(!stepToCombo.equals(combo));

			// check isomorphic binding between objects stepToMessage and combo 
			JavaSDM.ensure(!stepToMessage.equals(combo));

			// check isomorphic binding between objects useCase and combo 
			JavaSDM.ensure(!useCase.equals(combo));

			// check isomorphic binding between objects useCaseToInteraction and combo 
			JavaSDM.ensure(!useCaseToInteraction.equals(combo));

			// check isomorphic binding between objects guard and flow 
			JavaSDM.ensure(!guard.equals(flow));

			// check isomorphic binding between objects interaction and flow 
			JavaSDM.ensure(!interaction.equals(flow));

			// check isomorphic binding between objects line and flow 
			JavaSDM.ensure(!line.equals(flow));

			// check isomorphic binding between objects message and flow 
			JavaSDM.ensure(!message.equals(flow));

			// check isomorphic binding between objects messageReceive and flow 
			JavaSDM.ensure(!messageReceive.equals(flow));

			// check isomorphic binding between objects messageSend and flow 
			JavaSDM.ensure(!messageSend.equals(flow));

			// check isomorphic binding between objects operand and flow 
			JavaSDM.ensure(!operand.equals(flow));

			// check isomorphic binding between objects spec and flow 
			JavaSDM.ensure(!spec.equals(flow));

			// check isomorphic binding between objects step and flow 
			JavaSDM.ensure(!step.equals(flow));

			// check isomorphic binding between objects stepToCombo and flow 
			JavaSDM.ensure(!stepToCombo.equals(flow));

			// check isomorphic binding between objects stepToMessage and flow 
			JavaSDM.ensure(!stepToMessage.equals(flow));

			// check isomorphic binding between objects useCase and flow 
			JavaSDM.ensure(!useCase.equals(flow));

			// check isomorphic binding between objects useCaseToInteraction and flow 
			JavaSDM.ensure(!useCaseToInteraction.equals(flow));

			// check isomorphic binding between objects interaction and guard 
			JavaSDM.ensure(!interaction.equals(guard));

			// check isomorphic binding between objects line and guard 
			JavaSDM.ensure(!line.equals(guard));

			// check isomorphic binding between objects message and guard 
			JavaSDM.ensure(!message.equals(guard));

			// check isomorphic binding between objects messageReceive and guard 
			JavaSDM.ensure(!messageReceive.equals(guard));

			// check isomorphic binding between objects messageSend and guard 
			JavaSDM.ensure(!messageSend.equals(guard));

			// check isomorphic binding between objects operand and guard 
			JavaSDM.ensure(!operand.equals(guard));

			// check isomorphic binding between objects spec and guard 
			JavaSDM.ensure(!spec.equals(guard));

			// check isomorphic binding between objects step and guard 
			JavaSDM.ensure(!step.equals(guard));

			// check isomorphic binding between objects stepToCombo and guard 
			JavaSDM.ensure(!stepToCombo.equals(guard));

			// check isomorphic binding between objects stepToMessage and guard 
			JavaSDM.ensure(!stepToMessage.equals(guard));

			// check isomorphic binding between objects useCase and guard 
			JavaSDM.ensure(!useCase.equals(guard));

			// check isomorphic binding between objects useCaseToInteraction and guard 
			JavaSDM.ensure(!useCaseToInteraction.equals(guard));

			// check isomorphic binding between objects line and interaction 
			JavaSDM.ensure(!line.equals(interaction));

			// check isomorphic binding between objects message and interaction 
			JavaSDM.ensure(!message.equals(interaction));

			// check isomorphic binding between objects messageReceive and interaction 
			JavaSDM.ensure(!messageReceive.equals(interaction));

			// check isomorphic binding between objects messageSend and interaction 
			JavaSDM.ensure(!messageSend.equals(interaction));

			// check isomorphic binding between objects operand and interaction 
			JavaSDM.ensure(!operand.equals(interaction));

			// check isomorphic binding between objects spec and interaction 
			JavaSDM.ensure(!spec.equals(interaction));

			// check isomorphic binding between objects step and interaction 
			JavaSDM.ensure(!step.equals(interaction));

			// check isomorphic binding between objects stepToCombo and interaction 
			JavaSDM.ensure(!stepToCombo.equals(interaction));

			// check isomorphic binding between objects stepToMessage and interaction 
			JavaSDM.ensure(!stepToMessage.equals(interaction));

			// check isomorphic binding between objects useCase and interaction 
			JavaSDM.ensure(!useCase.equals(interaction));

			// check isomorphic binding between objects useCaseToInteraction and interaction 
			JavaSDM.ensure(!useCaseToInteraction.equals(interaction));

			// check isomorphic binding between objects message and line 
			JavaSDM.ensure(!message.equals(line));

			// check isomorphic binding between objects messageReceive and line 
			JavaSDM.ensure(!messageReceive.equals(line));

			// check isomorphic binding between objects messageSend and line 
			JavaSDM.ensure(!messageSend.equals(line));

			// check isomorphic binding between objects operand and line 
			JavaSDM.ensure(!operand.equals(line));

			// check isomorphic binding between objects spec and line 
			JavaSDM.ensure(!spec.equals(line));

			// check isomorphic binding between objects step and line 
			JavaSDM.ensure(!step.equals(line));

			// check isomorphic binding between objects stepToCombo and line 
			JavaSDM.ensure(!stepToCombo.equals(line));

			// check isomorphic binding between objects stepToMessage and line 
			JavaSDM.ensure(!stepToMessage.equals(line));

			// check isomorphic binding between objects useCase and line 
			JavaSDM.ensure(!useCase.equals(line));

			// check isomorphic binding between objects useCaseToInteraction and line 
			JavaSDM.ensure(!useCaseToInteraction.equals(line));

			// check isomorphic binding between objects messageReceive and message 
			JavaSDM.ensure(!messageReceive.equals(message));

			// check isomorphic binding between objects messageSend and message 
			JavaSDM.ensure(!messageSend.equals(message));

			// check isomorphic binding between objects operand and message 
			JavaSDM.ensure(!operand.equals(message));

			// check isomorphic binding between objects spec and message 
			JavaSDM.ensure(!spec.equals(message));

			// check isomorphic binding between objects step and message 
			JavaSDM.ensure(!step.equals(message));

			// check isomorphic binding between objects stepToCombo and message 
			JavaSDM.ensure(!stepToCombo.equals(message));

			// check isomorphic binding between objects stepToMessage and message 
			JavaSDM.ensure(!stepToMessage.equals(message));

			// check isomorphic binding between objects useCase and message 
			JavaSDM.ensure(!useCase.equals(message));

			// check isomorphic binding between objects useCaseToInteraction and message 
			JavaSDM.ensure(!useCaseToInteraction.equals(message));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects operand and messageReceive 
			JavaSDM.ensure(!operand.equals(messageReceive));

			// check isomorphic binding between objects spec and messageReceive 
			JavaSDM.ensure(!spec.equals(messageReceive));

			// check isomorphic binding between objects step and messageReceive 
			JavaSDM.ensure(!step.equals(messageReceive));

			// check isomorphic binding between objects stepToCombo and messageReceive 
			JavaSDM.ensure(!stepToCombo.equals(messageReceive));

			// check isomorphic binding between objects stepToMessage and messageReceive 
			JavaSDM.ensure(!stepToMessage.equals(messageReceive));

			// check isomorphic binding between objects useCase and messageReceive 
			JavaSDM.ensure(!useCase.equals(messageReceive));

			// check isomorphic binding between objects useCaseToInteraction and messageReceive 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageReceive));

			// check isomorphic binding between objects operand and messageSend 
			JavaSDM.ensure(!operand.equals(messageSend));

			// check isomorphic binding between objects spec and messageSend 
			JavaSDM.ensure(!spec.equals(messageSend));

			// check isomorphic binding between objects step and messageSend 
			JavaSDM.ensure(!step.equals(messageSend));

			// check isomorphic binding between objects stepToCombo and messageSend 
			JavaSDM.ensure(!stepToCombo.equals(messageSend));

			// check isomorphic binding between objects stepToMessage and messageSend 
			JavaSDM.ensure(!stepToMessage.equals(messageSend));

			// check isomorphic binding between objects useCase and messageSend 
			JavaSDM.ensure(!useCase.equals(messageSend));

			// check isomorphic binding between objects useCaseToInteraction and messageSend 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageSend));

			// check isomorphic binding between objects spec and operand 
			JavaSDM.ensure(!spec.equals(operand));

			// check isomorphic binding between objects step and operand 
			JavaSDM.ensure(!step.equals(operand));

			// check isomorphic binding between objects stepToCombo and operand 
			JavaSDM.ensure(!stepToCombo.equals(operand));

			// check isomorphic binding between objects stepToMessage and operand 
			JavaSDM.ensure(!stepToMessage.equals(operand));

			// check isomorphic binding between objects useCase and operand 
			JavaSDM.ensure(!useCase.equals(operand));

			// check isomorphic binding between objects useCaseToInteraction and operand 
			JavaSDM.ensure(!useCaseToInteraction.equals(operand));

			// check isomorphic binding between objects step and spec 
			JavaSDM.ensure(!step.equals(spec));

			// check isomorphic binding between objects stepToCombo and spec 
			JavaSDM.ensure(!stepToCombo.equals(spec));

			// check isomorphic binding between objects stepToMessage and spec 
			JavaSDM.ensure(!stepToMessage.equals(spec));

			// check isomorphic binding between objects useCase and spec 
			JavaSDM.ensure(!useCase.equals(spec));

			// check isomorphic binding between objects useCaseToInteraction and spec 
			JavaSDM.ensure(!useCaseToInteraction.equals(spec));

			// check isomorphic binding between objects stepToCombo and step 
			JavaSDM.ensure(!stepToCombo.equals(step));

			// check isomorphic binding between objects stepToMessage and step 
			JavaSDM.ensure(!stepToMessage.equals(step));

			// check isomorphic binding between objects useCase and step 
			JavaSDM.ensure(!useCase.equals(step));

			// check isomorphic binding between objects useCaseToInteraction and step 
			JavaSDM.ensure(!useCaseToInteraction.equals(step));

			// check isomorphic binding between objects stepToMessage and stepToCombo 
			JavaSDM.ensure(!stepToMessage.equals(stepToCombo));

			// check isomorphic binding between objects useCase and stepToCombo 
			JavaSDM.ensure(!useCase.equals(stepToCombo));

			// check isomorphic binding between objects useCaseToInteraction and stepToCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToCombo));

			// check isomorphic binding between objects useCase and stepToMessage 
			JavaSDM.ensure(!useCase.equals(stepToMessage));

			// check isomorphic binding between objects useCaseToInteraction and stepToMessage 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToMessage));

			// check isomorphic binding between objects useCaseToInteraction and useCase 
			JavaSDM.ensure(!useCaseToInteraction.equals(useCase));

			// create object stepToCombo__target__combo
			stepToCombo__target__combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __operand_covered_line
			__operand_covered_line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object step__stepAlternative__alt
			step__stepAlternative__alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToMessage__source__step
			stepToMessage__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __messageSend_covered_line
			__messageSend_covered_line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __line_coveredBy_combo
			__line_coveredBy_combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __message_interaction_interaction
			__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __combo_covered_line
			__combo_covered_line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __line_coveredBy_messageSend
			__line_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __messageSend_message_message
			__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __line_coveredBy_messageReceive
			__line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __operand_guard_guard
			__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alt__ref__altFlow
			alt__ref__altFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object __messageReceive_covered_line
			__messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __line_coveredBy_operand
			__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __interaction_message_message
			__interaction_message_message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object flow__steps__step
			flow__steps__step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object __guard_specification_spec
			__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __message_receiveEvent_messageReceive
			__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object step__actor__actor
			step__actor__actor = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToMessage__target__message
			stepToMessage__target__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __messageReceive_message_message
			__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __message_sendEvent_messageSend
			__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __combo_operand_operand
			__combo_operand_operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToCombo__source__step
			stepToCombo__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// assign attribute ruleresult
			ruleresult.setRuleName("StepToCombinedFragmentRule");
			// assign attribute step__stepAlternative__alt
			step__stepAlternative__alt.setName("stepAlternative");
			// assign attribute alt__ref__altFlow
			alt__ref__altFlow.setName("ref");
			// assign attribute __combo_operand_operand
			__combo_operand_operand.setName("operand");
			// assign attribute __line_coveredBy_combo
			__line_coveredBy_combo.setName("coveredBy");
			// assign attribute __combo_covered_line
			__combo_covered_line.setName("covered");
			// assign attribute stepToCombo__source__step
			stepToCombo__source__step.setName("source");
			// assign attribute stepToCombo__target__combo
			stepToCombo__target__combo.setName("target");
			// assign attribute __operand_guard_guard
			__operand_guard_guard.setName("guard");
			// assign attribute __line_coveredBy_operand
			__line_coveredBy_operand.setName("coveredBy");
			// assign attribute __operand_covered_line
			__operand_covered_line.setName("covered");
			// assign attribute alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt.setName("source");
			// assign attribute alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand.setName("target");
			// assign attribute __guard_specification_spec
			__guard_specification_spec.setName("specification");
			// assign attribute flow__steps__step
			flow__steps__step.setName("steps");
			// assign attribute step__actor__actor
			step__actor__actor.setName("actor");
			// assign attribute __message_sendEvent_messageSend
			__message_sendEvent_messageSend.setName("sendEvent");
			// assign attribute __message_receiveEvent_messageReceive
			__message_receiveEvent_messageReceive.setName("receiveEvent");
			// assign attribute __message_interaction_interaction
			__message_interaction_interaction.setName("interaction");
			// assign attribute __interaction_message_message
			__interaction_message_message.setName("message");
			// assign attribute stepToMessage__source__step
			stepToMessage__source__step.setName("source");
			// assign attribute stepToMessage__target__message
			stepToMessage__target__message.setName("target");
			// assign attribute __messageSend_message_message
			__messageSend_message_message.setName("message");
			// assign attribute __line_coveredBy_messageSend
			__line_coveredBy_messageSend.setName("coveredBy");
			// assign attribute __messageSend_covered_line
			__messageSend_covered_line.setName("covered");
			// assign attribute __messageReceive_message_message
			__messageReceive_message_message.setName("message");
			// assign attribute __line_coveredBy_messageReceive
			__line_coveredBy_messageReceive.setName("coveredBy");
			// assign attribute __messageReceive_covered_line
			__messageReceive_covered_line.setName("covered");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__target__combo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__operand_covered_line, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__source__alt, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step__stepAlternative__alt, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage__source__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageSend_covered_line, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__line_coveredBy_combo, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__message_interaction_interaction, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__combo_covered_line, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__line_coveredBy_messageSend, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageSend_message_message, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__line_coveredBy_messageReceive, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__operand_guard_guard, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alt__ref__altFlow, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageReceive_covered_line, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__line_coveredBy_operand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__interaction_message_message, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					flow__steps__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__guard_specification_spec, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__message_receiveEvent_messageReceive, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step__actor__actor, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage__target__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageReceive_message_message, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__message_sendEvent_messageSend, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__combo_operand_operand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__source__step, "createdEdges");

			// create link
			step__stepAlternative__alt.setSrc(step);

			// create link
			stepToMessage__source__step.setTrg(step);

			// create link
			flow__steps__step.setTrg(step);

			// create link
			step__actor__actor.setSrc(step);

			// create link
			stepToCombo__source__step.setTrg(step);

			// create link
			step__stepAlternative__alt.setTrg(alt);

			// create link
			alt__ref__altFlow.setSrc(alt);

			// create link
			alternative1ToOperand__source__alt.setTrg(alt);

			// create link
			stepToCombo__target__combo.setTrg(combo);

			// create link
			__combo_covered_line.setSrc(combo);

			// create link
			__combo_operand_operand.setSrc(combo);

			// create link
			__line_coveredBy_combo.setTrg(combo);

			// create link
			stepToCombo__target__combo.setSrc(stepToCombo);

			// create link
			stepToCombo__source__step.setSrc(stepToCombo);

			// create link
			__line_coveredBy_operand.setTrg(operand);

			// create link
			__operand_guard_guard.setSrc(operand);

			// create link
			__operand_covered_line.setSrc(operand);

			// create link
			__combo_operand_operand.setTrg(operand);

			// create link
			alternative1ToOperand__target__operand.setTrg(operand);

			// create link
			alternative1ToOperand__source__alt.setSrc(alternative1ToOperand);

			// create link
			alternative1ToOperand__target__operand
					.setSrc(alternative1ToOperand);

			// create link
			__operand_guard_guard.setTrg(guard);

			// create link
			__guard_specification_spec.setSrc(guard);

			// create link
			__guard_specification_spec.setTrg(spec);

			// create link
			alt__ref__altFlow.setTrg(altFlow);

			// create link
			__messageSend_covered_line.setTrg(line);

			// create link
			__operand_covered_line.setTrg(line);

			// create link
			__line_coveredBy_operand.setSrc(line);

			// create link
			__line_coveredBy_messageSend.setSrc(line);

			// create link
			__line_coveredBy_messageReceive.setSrc(line);

			// create link
			__line_coveredBy_combo.setSrc(line);

			// create link
			__messageReceive_covered_line.setTrg(line);

			// create link
			__combo_covered_line.setTrg(line);

			// create link
			flow__steps__step.setSrc(flow);

			// create link
			stepToMessage__target__message.setTrg(message);

			// create link
			__message_sendEvent_messageSend.setSrc(message);

			// create link
			__interaction_message_message.setTrg(message);

			// create link
			__message_receiveEvent_messageReceive.setSrc(message);

			// create link
			__messageReceive_message_message.setTrg(message);

			// create link
			__message_interaction_interaction.setSrc(message);

			// create link
			__messageSend_message_message.setTrg(message);

			// create link
			__message_interaction_interaction.setTrg(interaction);

			// create link
			__interaction_message_message.setSrc(interaction);

			// create link
			stepToMessage__target__message.setSrc(stepToMessage);

			// create link
			stepToMessage__source__step.setSrc(stepToMessage);

			// create link
			__messageSend_covered_line.setSrc(messageSend);

			// create link
			__message_sendEvent_messageSend.setTrg(messageSend);

			// create link
			__messageSend_message_message.setSrc(messageSend);

			// create link
			__line_coveredBy_messageSend.setTrg(messageSend);

			// create link
			__messageReceive_message_message.setSrc(messageReceive);

			// create link
			__line_coveredBy_messageReceive.setTrg(messageReceive);

			// create link
			__message_receiveEvent_messageReceive.setTrg(messageReceive);

			// create link
			__messageReceive_covered_line.setSrc(messageReceive);

			// create link
			step__actor__actor.setTrg(actor);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'perform postprocessing'
		// No post processing method found
		// statement node 'register objects'
		this.registerObjects_BWD(ruleresult, step, alt, combo, stepToCombo,
				operand, alternative1ToOperand, guard, spec, altFlow, line,
				useCase, useCaseToInteraction, flow, message, interaction,
				stepToMessage, messageSend, messageReceive, actor, actorToLine);
		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_BWD(Match match, CombinedFragment combo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, Lifeline line, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive) {
		match.registerObject("combo", combo);
		match.registerObject("operand", operand);
		match.registerObject("guard", guard);
		match.registerObject("spec", spec);
		match.registerObject("line", line);
		match.registerObject("message", message);
		match.registerObject("interaction", interaction);
		match.registerObject("messageSend", messageSend);
		match.registerObject("messageReceive", messageReceive);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_BWD(Match match, CombinedFragment combo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, Lifeline line, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", true, csp);
		var_combo_interactionOperator.setValue(combo.getInteractionOperator());
		var_combo_interactionOperator.setType("EObject");

		// Create explicit parameters

		// Create unbound variables

		// Create constraints
		EqInterOperKind eqInterOperKind = new EqInterOperKind();

		csp.getConstraints().add(eqInterOperKind);

		// Solve CSP
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_checkCsp_BWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			CombinedFragment combo, InteractionOperand operand,
			InteractionConstraint guard, LiteralString spec, Lifeline line,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			Flow flow, Message message, Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Actor actor,
			ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals

		// Create attribute variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", true, csp);
		var_guard_name.setValue(guard.getName());
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", true, csp);
		var_spec_value.setValue(spec.getValue());
		var_spec_value.setType("");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", true, csp);
		var_message_name.setValue(message.getName());
		var_message_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", csp);
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", csp);
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", csp);
		var_step_name.setType("");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("combo", combo);
		isApplicableMatch.registerObject("operand", operand);
		isApplicableMatch.registerObject("guard", guard);
		isApplicableMatch.registerObject("spec", spec);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("message", message);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("messageSend", messageSend);
		isApplicableMatch.registerObject("messageReceive", messageReceive);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isApplicable_checkCsp_BWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_BWD(PerformRuleResult ruleresult, EObject step,
			EObject alt, EObject combo, EObject stepToCombo, EObject operand,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject line, EObject useCase,
			EObject useCaseToInteraction, EObject flow, EObject message,
			EObject interaction, EObject stepToMessage, EObject messageSend,
			EObject messageReceive, EObject actor, EObject actorToLine) {
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkTypes_BWD(Match match) {
		return true
				&& match.getObject("combo")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getCombinedFragment())
				&& match.getObject("operand")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getInteractionOperand())
				&& match.getObject("guard")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getInteractionConstraint())
				&& match.getObject("spec")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getLiteralString())
				&& match.getObject("message")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getMessage())
				&& match.getObject("messageSend")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getMessageOccurrenceSpecification())
				&& match.getObject("messageReceive")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getMessageOccurrenceSpecification());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_10(
			EMoflonEdge _edge_stepAlternative) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_303996 = null;
		NormalStep __DEC_alt_stepAlternative_363159 = null;
		Flow __DEC_step_steps_210968 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_310165 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_310165 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		AlternativeFlowAlternative alt = null;
		UseCase useCase = null;
		Flow flow = null;
		Actor actor = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_stepAlternative is really bound
			JavaSDM.ensure(_edge_stepAlternative != null);
			// bind object
			_TmpObject = _edge_stepAlternative.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer()
					: null;

			// check object flow is really bound
			JavaSDM.ensure(flow != null);

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_stepAlternative.getTrg();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			_TmpObject = alt.getRef();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check link stepAlternative from alt to step
			JavaSDM.ensure(step.equals(alt.eContainer()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_altFlow_flows_303996 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
							.eContainer() : null;

					// check object __DEC_altFlow_flows_303996 is really bound
					JavaSDM.ensure(__DEC_altFlow_flows_303996 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_altFlow_flows_303996.getFlows()
							.contains(altFlow));

					// check isomorphic binding between objects __DEC_altFlow_flows_303996 and useCase 
					JavaSDM.ensure(!__DEC_altFlow_flows_303996.equals(useCase));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_alt_stepAlternative_363159 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
							.eContainer() : null;

					// check object __DEC_alt_stepAlternative_363159 is really bound
					JavaSDM.ensure(__DEC_alt_stepAlternative_363159 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_alt_stepAlternative_363159
							.getStepAlternative().contains(alt));

					// check isomorphic binding between objects __DEC_alt_stepAlternative_363159 and step 
					JavaSDM.ensure(!__DEC_alt_stepAlternative_363159
							.equals(step));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_210968 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_210968 is really bound
					JavaSDM.ensure(__DEC_step_steps_210968 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_210968.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_210968 and altFlow 
					JavaSDM.ensure(!__DEC_step_steps_210968.equals(altFlow));

					// check isomorphic binding between objects __DEC_step_steps_210968 and flow 
					JavaSDM.ensure(!__DEC_step_steps_210968.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link ref from altFlow to __DEC_altFlow_ref_310165
					fujaba__Success = false;

					fujaba__IterAltFlowTo__DEC_altFlow_ref_310165 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(altFlow,
											AlternativeFlowAlternative.class,
											"ref")).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterAltFlowTo__DEC_altFlow_ref_310165
									.hasNext()) {
						try {
							__DEC_altFlow_ref_310165 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_310165
									.next();

							// check object __DEC_altFlow_ref_310165 is really bound
							JavaSDM.ensure(__DEC_altFlow_ref_310165 != null);
							// check isomorphic binding between objects __DEC_altFlow_ref_310165 and alt 
							JavaSDM.ensure(!__DEC_altFlow_ref_310165
									.equals(alt));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_stepAlternative is really bound
				JavaSDM.ensure(_edge_stepAlternative != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link ref from alt to altFlow
				JavaSDM.ensure(altFlow.equals(alt.getRef()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link flows from altFlow to useCase
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(altFlow, UseCase.class,
								"$eContainer").contains(useCase)));

				// check link src from _edge_stepAlternative to step
				JavaSDM.ensure(step.equals(_edge_stepAlternative.getSrc()));

				// check link stepAlternative from alt to step
				JavaSDM.ensure(step.equals(alt.eContainer()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link steps from step to altFlow
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(step, AlternativeFlow.class,
								"$eContainer").contains(altFlow)));

				// check link trg from _edge_stepAlternative to alt
				JavaSDM.ensure(alt.equals(_edge_stepAlternative.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, step, alt,
						altFlow, useCase, flow, actor);
				if (fujaba__Success) {
					// statement node ''
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_11(
			EMoflonEdge _edge_ref) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_226224 = null;
		NormalStep __DEC_alt_stepAlternative_528005 = null;
		Flow __DEC_step_steps_984445 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_387215 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_387215 = null;
		Match match = null;
		UseCase useCase = null;
		Flow flow = null;
		Actor actor = null;
		NormalStep step = null;
		AlternativeFlow altFlow = null;
		AlternativeFlowAlternative alt = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_ref is really bound
			JavaSDM.ensure(_edge_ref != null);
			// bind object
			_TmpObject = _edge_ref.getSrc();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			_TmpObject = alt.getRef();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// bind object
			step = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
					.eContainer() : null;

			// check object step is really bound
			JavaSDM.ensure(step != null);

			// check if contained via correct reference
			JavaSDM.ensure(step.getStepAlternative().contains(alt));

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer()
					: null;

			// check object flow is really bound
			JavaSDM.ensure(flow != null);

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// check link trg from _edge_ref to altFlow
			JavaSDM.ensure(altFlow.equals(_edge_ref.getTrg()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_altFlow_flows_226224 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
							.eContainer() : null;

					// check object __DEC_altFlow_flows_226224 is really bound
					JavaSDM.ensure(__DEC_altFlow_flows_226224 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_altFlow_flows_226224.getFlows()
							.contains(altFlow));

					// check isomorphic binding between objects __DEC_altFlow_flows_226224 and useCase 
					JavaSDM.ensure(!__DEC_altFlow_flows_226224.equals(useCase));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_alt_stepAlternative_528005 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
							.eContainer() : null;

					// check object __DEC_alt_stepAlternative_528005 is really bound
					JavaSDM.ensure(__DEC_alt_stepAlternative_528005 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_alt_stepAlternative_528005
							.getStepAlternative().contains(alt));

					// check isomorphic binding between objects __DEC_alt_stepAlternative_528005 and step 
					JavaSDM.ensure(!__DEC_alt_stepAlternative_528005
							.equals(step));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_984445 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_984445 is really bound
					JavaSDM.ensure(__DEC_step_steps_984445 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_984445.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_984445 and altFlow 
					JavaSDM.ensure(!__DEC_step_steps_984445.equals(altFlow));

					// check isomorphic binding between objects __DEC_step_steps_984445 and flow 
					JavaSDM.ensure(!__DEC_step_steps_984445.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link ref from altFlow to __DEC_altFlow_ref_387215
					fujaba__Success = false;

					fujaba__IterAltFlowTo__DEC_altFlow_ref_387215 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(altFlow,
											AlternativeFlowAlternative.class,
											"ref")).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterAltFlowTo__DEC_altFlow_ref_387215
									.hasNext()) {
						try {
							__DEC_altFlow_ref_387215 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_387215
									.next();

							// check object __DEC_altFlow_ref_387215 is really bound
							JavaSDM.ensure(__DEC_altFlow_ref_387215 != null);
							// check isomorphic binding between objects __DEC_altFlow_ref_387215 and alt 
							JavaSDM.ensure(!__DEC_altFlow_ref_387215
									.equals(alt));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_ref is really bound
				JavaSDM.ensure(_edge_ref != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link ref from alt to altFlow
				JavaSDM.ensure(altFlow.equals(alt.getRef()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link flows from altFlow to useCase
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(altFlow, UseCase.class,
								"$eContainer").contains(useCase)));

				// check link src from _edge_ref to alt
				JavaSDM.ensure(alt.equals(_edge_ref.getSrc()));

				// check link stepAlternative from alt to step
				JavaSDM.ensure(step.equals(alt.eContainer()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link steps from step to altFlow
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(step, AlternativeFlow.class,
								"$eContainer").contains(altFlow)));

				// check link trg from _edge_ref to altFlow
				JavaSDM.ensure(altFlow.equals(_edge_ref.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, step, alt,
						altFlow, useCase, flow, actor);
				if (fujaba__Success) {
					// statement node ''
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_42(
			EMoflonEdge _edge_operand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_676942 = null;
		InteractionOperand __DEC_combo_fragment_961194 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_91065 = null;
		InteractionOperand __DEC_messageReceive_fragment_131336 = null;
		Interaction __DEC_messageSend_enclosingInteraction_187226 = null;
		InteractionOperand __DEC_messageSend_fragment_300839 = null;
		Interaction __DEC_operand_enclosingInteraction_244356 = null;
		InteractionOperand __DEC_operand_fragment_630114 = null;
		InteractionOperand __DEC_guard_guard_336881 = null;
		CombinedFragment __DEC_operand_operand_732815 = null;
		Constraint __DEC_spec_specification_621327 = null;
		Iterator fujaba__IterComboTo__DEC_combo_coveredBy_329917 = null;
		Lifeline __DEC_combo_coveredBy_329917 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_209667 = null;
		Lifeline __DEC_messageReceive_coveredBy_209667 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_467706 = null;
		Lifeline __DEC_messageSend_coveredBy_467706 = null;
		Iterator fujaba__IterOperandTo__DEC_operand_coveredBy_327492 = null;
		Lifeline __DEC_operand_coveredBy_327492 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_550779 = null;
		Message __DEC_messageReceive_receiveEvent_550779 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_692897 = null;
		Message __DEC_messageSend_receiveEvent_692897 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_989838 = null;
		Message __DEC_messageReceive_sendEvent_989838 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_94491 = null;
		Message __DEC_messageSend_sendEvent_94491 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_788659 = null;
		MessageEnd __DEC_message_message_788659 = null;
		Match match = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterComboToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_operand is really bound
			JavaSDM.ensure(_edge_operand != null);
			// bind object
			_TmpObject = _edge_operand.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_operand.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// check link operand from operand to combo
			JavaSDM.ensure(combo.equals(operand.eContainer()));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// iterate to-many link covered from combo to line
			fujaba__Success = false;

			fujaba__IterComboToLine = new ArrayList(combo.getCovered())
					.iterator();

			while (fujaba__IterComboToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterComboToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from line to operand
					JavaSDM.ensure(line.getCoveredBy().contains(operand));

					// iterate to-many link covered from line to messageReceive
					fujaba__Success = false;

					fujaba__IterLineToMessageReceive = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// iterate to-many link covered from line to messageSend
							fujaba__Success = false;

							fujaba__IterLineToMessageSend = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link message from messageSend to message
									JavaSDM.ensure(message.equals(messageSend
											.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_676942 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_676942 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_676942 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_676942 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_676942
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_961194 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_961194 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_961194 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_961194 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_961194
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_91065 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_91065 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_91065 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_91065 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_91065
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_131336 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_131336 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_131336 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_131336 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_131336
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_187226 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_187226 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_187226 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_187226 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_187226
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_300839 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_300839 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_300839 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_300839 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_300839
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_244356 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_244356 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_244356 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_244356 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_244356
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_630114 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_630114 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_630114 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_630114 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_630114
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_336881 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_336881 is really bound
											JavaSDM.ensure(__DEC_guard_guard_336881 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_336881
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_336881 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_336881
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_732815 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_732815 is really bound
											JavaSDM.ensure(__DEC_operand_operand_732815 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_732815
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_732815 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_732815
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_621327 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_621327 is really bound
											JavaSDM.ensure(__DEC_spec_specification_621327 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_621327
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_621327 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_621327
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from combo to __DEC_combo_coveredBy_329917
											fujaba__Success = false;

											fujaba__IterComboTo__DEC_combo_coveredBy_329917 = new ArrayList(
													combo.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterComboTo__DEC_combo_coveredBy_329917
															.hasNext()) {
												try {
													__DEC_combo_coveredBy_329917 = (Lifeline) fujaba__IterComboTo__DEC_combo_coveredBy_329917
															.next();

													// check object __DEC_combo_coveredBy_329917 is really bound
													JavaSDM.ensure(__DEC_combo_coveredBy_329917 != null);
													// check isomorphic binding between objects __DEC_combo_coveredBy_329917 and line 
													JavaSDM.ensure(!__DEC_combo_coveredBy_329917
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_209667
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_209667 = new ArrayList(
													messageReceive.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_209667
															.hasNext()) {
												try {
													__DEC_messageReceive_coveredBy_209667 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_209667
															.next();

													// check object __DEC_messageReceive_coveredBy_209667 is really bound
													JavaSDM.ensure(__DEC_messageReceive_coveredBy_209667 != null);
													// check isomorphic binding between objects __DEC_messageReceive_coveredBy_209667 and line 
													JavaSDM.ensure(!__DEC_messageReceive_coveredBy_209667
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_467706
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_467706 = new ArrayList(
													messageSend.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_467706
															.hasNext()) {
												try {
													__DEC_messageSend_coveredBy_467706 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_467706
															.next();

													// check object __DEC_messageSend_coveredBy_467706 is really bound
													JavaSDM.ensure(__DEC_messageSend_coveredBy_467706 != null);
													// check isomorphic binding between objects __DEC_messageSend_coveredBy_467706 and line 
													JavaSDM.ensure(!__DEC_messageSend_coveredBy_467706
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from operand to __DEC_operand_coveredBy_327492
											fujaba__Success = false;

											fujaba__IterOperandTo__DEC_operand_coveredBy_327492 = new ArrayList(
													operand.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterOperandTo__DEC_operand_coveredBy_327492
															.hasNext()) {
												try {
													__DEC_operand_coveredBy_327492 = (Lifeline) fujaba__IterOperandTo__DEC_operand_coveredBy_327492
															.next();

													// check object __DEC_operand_coveredBy_327492 is really bound
													JavaSDM.ensure(__DEC_operand_coveredBy_327492 != null);
													// check isomorphic binding between objects __DEC_operand_coveredBy_327492 and line 
													JavaSDM.ensure(!__DEC_operand_coveredBy_327492
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_550779
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_550779 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_550779
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_550779 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_550779
															.next();

													// check object __DEC_messageReceive_receiveEvent_550779 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_550779 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_550779 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_550779
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_692897
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_692897 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_692897
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_692897 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_692897
															.next();

													// check object __DEC_messageSend_receiveEvent_692897 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_692897 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_692897 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_692897
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_989838
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_989838 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_989838
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_989838 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_989838
															.next();

													// check object __DEC_messageReceive_sendEvent_989838 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_989838 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_989838 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_989838
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_94491
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_94491 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_94491
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_94491 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_94491
															.next();

													// check object __DEC_messageSend_sendEvent_94491 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_94491 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_94491 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_94491
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_788659
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_788659 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_788659
															.hasNext()) {
												try {
													__DEC_message_message_788659 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_788659
															.next();

													// check object __DEC_message_message_788659 is really bound
													JavaSDM.ensure(__DEC_message_message_788659 != null);
													// check isomorphic binding between objects __DEC_message_message_788659 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_788659
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_788659 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_788659
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_operand is really bound
										JavaSDM.ensure(_edge_operand != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_operand to combo
										JavaSDM.ensure(combo
												.equals(_edge_operand.getSrc()));

										// check link trg from _edge_operand to operand
										JavaSDM.ensure(operand
												.equals(_edge_operand.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from line to operand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(operand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, operand, guard,
														spec, line, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node ''
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_43(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_189689 = null;
		InteractionOperand __DEC_combo_fragment_232294 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_805089 = null;
		InteractionOperand __DEC_messageReceive_fragment_119650 = null;
		Interaction __DEC_messageSend_enclosingInteraction_680701 = null;
		InteractionOperand __DEC_messageSend_fragment_324987 = null;
		Interaction __DEC_operand_enclosingInteraction_466477 = null;
		InteractionOperand __DEC_operand_fragment_359384 = null;
		InteractionOperand __DEC_guard_guard_811436 = null;
		CombinedFragment __DEC_operand_operand_606116 = null;
		Constraint __DEC_spec_specification_637519 = null;
		Iterator fujaba__IterComboTo__DEC_combo_coveredBy_80244 = null;
		Lifeline __DEC_combo_coveredBy_80244 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_655534 = null;
		Lifeline __DEC_messageReceive_coveredBy_655534 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_63928 = null;
		Lifeline __DEC_messageSend_coveredBy_63928 = null;
		Iterator fujaba__IterOperandTo__DEC_operand_coveredBy_688645 = null;
		Lifeline __DEC_operand_coveredBy_688645 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_710049 = null;
		Message __DEC_messageReceive_receiveEvent_710049 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_767174 = null;
		Message __DEC_messageSend_receiveEvent_767174 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_603231 = null;
		Message __DEC_messageReceive_sendEvent_603231 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_79937 = null;
		Message __DEC_messageSend_sendEvent_79937 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_302992 = null;
		MessageEnd __DEC_message_message_302992 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterComboToOperand = null;
		InteractionOperand operand = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// check link covered from line to combo
			JavaSDM.ensure(line.getCoveredBy().contains(combo));

			// iterate to-many link covered from line to messageSend
			fujaba__Success = false;

			fujaba__IterLineToMessageSend = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToMessageSend.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageSend.next();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;
					// iterate to-many link covered from line to messageReceive
					fujaba__Success = false;

					fujaba__IterLineToMessageReceive = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// iterate to-many link operand from combo to operand
							fujaba__Success = false;

							fujaba__IterComboToOperand = new ArrayList(
									combo.getOperand()).iterator();

							while (fujaba__IterComboToOperand.hasNext()) {
								try {
									operand = (InteractionOperand) fujaba__IterComboToOperand
											.next();

									// check object operand is really bound
									JavaSDM.ensure(operand != null);
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// check link covered from line to operand
									JavaSDM.ensure(line.getCoveredBy()
											.contains(operand));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_189689 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_189689 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_189689 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_189689 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_189689
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_232294 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_232294 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_232294 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_232294 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_232294
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_805089 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_805089 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_805089 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_805089 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_805089
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_119650 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_119650 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_119650 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_119650 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_119650
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_680701 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_680701 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_680701 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_680701 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_680701
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_324987 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_324987 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_324987 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_324987 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_324987
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_466477 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_466477 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_466477 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_466477 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_466477
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_359384 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_359384 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_359384 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_359384 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_359384
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_811436 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_811436 is really bound
											JavaSDM.ensure(__DEC_guard_guard_811436 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_811436
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_811436 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_811436
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_606116 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_606116 is really bound
											JavaSDM.ensure(__DEC_operand_operand_606116 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_606116
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_606116 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_606116
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_637519 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_637519 is really bound
											JavaSDM.ensure(__DEC_spec_specification_637519 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_637519
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_637519 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_637519
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from combo to __DEC_combo_coveredBy_80244
											fujaba__Success = false;

											fujaba__IterComboTo__DEC_combo_coveredBy_80244 = new ArrayList(
													combo.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterComboTo__DEC_combo_coveredBy_80244
															.hasNext()) {
												try {
													__DEC_combo_coveredBy_80244 = (Lifeline) fujaba__IterComboTo__DEC_combo_coveredBy_80244
															.next();

													// check object __DEC_combo_coveredBy_80244 is really bound
													JavaSDM.ensure(__DEC_combo_coveredBy_80244 != null);
													// check isomorphic binding between objects __DEC_combo_coveredBy_80244 and line 
													JavaSDM.ensure(!__DEC_combo_coveredBy_80244
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_655534
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_655534 = new ArrayList(
													messageReceive.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_655534
															.hasNext()) {
												try {
													__DEC_messageReceive_coveredBy_655534 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_655534
															.next();

													// check object __DEC_messageReceive_coveredBy_655534 is really bound
													JavaSDM.ensure(__DEC_messageReceive_coveredBy_655534 != null);
													// check isomorphic binding between objects __DEC_messageReceive_coveredBy_655534 and line 
													JavaSDM.ensure(!__DEC_messageReceive_coveredBy_655534
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_63928
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_63928 = new ArrayList(
													messageSend.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_63928
															.hasNext()) {
												try {
													__DEC_messageSend_coveredBy_63928 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_63928
															.next();

													// check object __DEC_messageSend_coveredBy_63928 is really bound
													JavaSDM.ensure(__DEC_messageSend_coveredBy_63928 != null);
													// check isomorphic binding between objects __DEC_messageSend_coveredBy_63928 and line 
													JavaSDM.ensure(!__DEC_messageSend_coveredBy_63928
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from operand to __DEC_operand_coveredBy_688645
											fujaba__Success = false;

											fujaba__IterOperandTo__DEC_operand_coveredBy_688645 = new ArrayList(
													operand.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterOperandTo__DEC_operand_coveredBy_688645
															.hasNext()) {
												try {
													__DEC_operand_coveredBy_688645 = (Lifeline) fujaba__IterOperandTo__DEC_operand_coveredBy_688645
															.next();

													// check object __DEC_operand_coveredBy_688645 is really bound
													JavaSDM.ensure(__DEC_operand_coveredBy_688645 != null);
													// check isomorphic binding between objects __DEC_operand_coveredBy_688645 and line 
													JavaSDM.ensure(!__DEC_operand_coveredBy_688645
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_710049
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_710049 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_710049
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_710049 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_710049
															.next();

													// check object __DEC_messageReceive_receiveEvent_710049 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_710049 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_710049 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_710049
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_767174
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_767174 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_767174
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_767174 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_767174
															.next();

													// check object __DEC_messageSend_receiveEvent_767174 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_767174 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_767174 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_767174
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_603231
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_603231 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_603231
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_603231 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_603231
															.next();

													// check object __DEC_messageReceive_sendEvent_603231 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_603231 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_603231 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_603231
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_79937
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_79937 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_79937
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_79937 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_79937
															.next();

													// check object __DEC_messageSend_sendEvent_79937 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_79937 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_79937 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_79937
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_302992
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_302992 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_302992
															.hasNext()) {
												try {
													__DEC_message_message_302992 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_302992
															.next();

													// check object __DEC_message_message_302992 is really bound
													JavaSDM.ensure(__DEC_message_message_302992 != null);
													// check isomorphic binding between objects __DEC_message_message_302992 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_302992
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_302992 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_302992
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_coveredBy is really bound
										JavaSDM.ensure(_edge_coveredBy != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_coveredBy to line
										JavaSDM.ensure(line
												.equals(_edge_coveredBy
														.getSrc()));

										// check link trg from _edge_coveredBy to combo
										JavaSDM.ensure(combo
												.equals(_edge_coveredBy
														.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from line to operand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(operand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, operand, guard,
														spec, line, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node ''
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_44(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_879720 = null;
		InteractionOperand __DEC_combo_fragment_633606 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_588073 = null;
		InteractionOperand __DEC_messageReceive_fragment_119320 = null;
		Interaction __DEC_messageSend_enclosingInteraction_530719 = null;
		InteractionOperand __DEC_messageSend_fragment_268424 = null;
		Interaction __DEC_operand_enclosingInteraction_88094 = null;
		InteractionOperand __DEC_operand_fragment_280071 = null;
		InteractionOperand __DEC_guard_guard_53720 = null;
		CombinedFragment __DEC_operand_operand_446704 = null;
		Constraint __DEC_spec_specification_540679 = null;
		Iterator fujaba__IterComboTo__DEC_combo_coveredBy_477768 = null;
		Lifeline __DEC_combo_coveredBy_477768 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_147794 = null;
		Lifeline __DEC_messageReceive_coveredBy_147794 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_79241 = null;
		Lifeline __DEC_messageSend_coveredBy_79241 = null;
		Iterator fujaba__IterOperandTo__DEC_operand_coveredBy_591070 = null;
		Lifeline __DEC_operand_coveredBy_591070 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_387746 = null;
		Message __DEC_messageReceive_receiveEvent_387746 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_253291 = null;
		Message __DEC_messageSend_receiveEvent_253291 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_158549 = null;
		Message __DEC_messageReceive_sendEvent_158549 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_658828 = null;
		Message __DEC_messageSend_sendEvent_658828 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_736027 = null;
		MessageEnd __DEC_message_message_736027 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterComboToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterComboTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Lifeline line = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from line to combo
			JavaSDM.ensure(line.getCoveredBy().contains(combo));

			// iterate to-many link covered from line to messageReceive
			fujaba__Success = false;

			fujaba__IterLineToMessageReceive = new ArrayList(
					line.getCoveredBy()).iterator();

			while (fujaba__IterLineToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageReceive.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageReceive.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// iterate to-many link covered from line to messageSend
					fujaba__Success = false;

					fujaba__IterLineToMessageSend = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageSend.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// iterate to-many link trg from combo to _edge_coveredBy
							fujaba__Success = false;

							fujaba__IterComboTo_edge_coveredBy = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(combo,
													EMoflonEdge.class, "trg"))
									.iterator();

							while (fujaba__IterComboTo_edge_coveredBy.hasNext()) {
								try {
									_edge_coveredBy = (EMoflonEdge) fujaba__IterComboTo_edge_coveredBy
											.next();

									// check object _edge_coveredBy is really bound
									JavaSDM.ensure(_edge_coveredBy != null);
									// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
									JavaSDM.ensure(!_edge_coveredBy
											.equals(_edge_covered));

									// check link src from _edge_coveredBy to line
									JavaSDM.ensure(line.equals(_edge_coveredBy
											.getSrc()));

									// iterate to-many link operand from combo to operand
									fujaba__Success = false;

									fujaba__IterComboToOperand = new ArrayList(
											combo.getOperand()).iterator();

									while (fujaba__IterComboToOperand.hasNext()) {
										try {
											operand = (InteractionOperand) fujaba__IterComboToOperand
													.next();

											// check object operand is really bound
											JavaSDM.ensure(operand != null);
											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// check link covered from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_879720 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_879720 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_879720 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_879720 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_879720
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_633606 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_633606 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_633606 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_633606 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_633606
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_588073 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_588073 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_588073 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_588073 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_588073
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_119320 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_119320 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_119320 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_119320 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_119320
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_530719 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_530719 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_530719 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_530719 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_530719
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_268424 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_268424 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_268424 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_268424 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_268424
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_88094 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_88094 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_88094 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_88094 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_88094
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_280071 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_280071 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_280071 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_280071 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_280071
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_53720 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_53720 is really bound
													JavaSDM.ensure(__DEC_guard_guard_53720 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_53720
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_53720 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_53720
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_446704 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_446704 is really bound
													JavaSDM.ensure(__DEC_operand_operand_446704 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_446704
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_446704 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_446704
															.equals(combo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_540679 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_540679 is really bound
													JavaSDM.ensure(__DEC_spec_specification_540679 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_540679
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_540679 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_540679
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from combo to __DEC_combo_coveredBy_477768
													fujaba__Success = false;

													fujaba__IterComboTo__DEC_combo_coveredBy_477768 = new ArrayList(
															combo.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterComboTo__DEC_combo_coveredBy_477768
																	.hasNext()) {
														try {
															__DEC_combo_coveredBy_477768 = (Lifeline) fujaba__IterComboTo__DEC_combo_coveredBy_477768
																	.next();

															// check object __DEC_combo_coveredBy_477768 is really bound
															JavaSDM.ensure(__DEC_combo_coveredBy_477768 != null);
															// check isomorphic binding between objects __DEC_combo_coveredBy_477768 and line 
															JavaSDM.ensure(!__DEC_combo_coveredBy_477768
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_147794
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_147794 = new ArrayList(
															messageReceive
																	.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_147794
																	.hasNext()) {
														try {
															__DEC_messageReceive_coveredBy_147794 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_147794
																	.next();

															// check object __DEC_messageReceive_coveredBy_147794 is really bound
															JavaSDM.ensure(__DEC_messageReceive_coveredBy_147794 != null);
															// check isomorphic binding between objects __DEC_messageReceive_coveredBy_147794 and line 
															JavaSDM.ensure(!__DEC_messageReceive_coveredBy_147794
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_79241
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_79241 = new ArrayList(
															messageSend
																	.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_79241
																	.hasNext()) {
														try {
															__DEC_messageSend_coveredBy_79241 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_79241
																	.next();

															// check object __DEC_messageSend_coveredBy_79241 is really bound
															JavaSDM.ensure(__DEC_messageSend_coveredBy_79241 != null);
															// check isomorphic binding between objects __DEC_messageSend_coveredBy_79241 and line 
															JavaSDM.ensure(!__DEC_messageSend_coveredBy_79241
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from operand to __DEC_operand_coveredBy_591070
													fujaba__Success = false;

													fujaba__IterOperandTo__DEC_operand_coveredBy_591070 = new ArrayList(
															operand.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterOperandTo__DEC_operand_coveredBy_591070
																	.hasNext()) {
														try {
															__DEC_operand_coveredBy_591070 = (Lifeline) fujaba__IterOperandTo__DEC_operand_coveredBy_591070
																	.next();

															// check object __DEC_operand_coveredBy_591070 is really bound
															JavaSDM.ensure(__DEC_operand_coveredBy_591070 != null);
															// check isomorphic binding between objects __DEC_operand_coveredBy_591070 and line 
															JavaSDM.ensure(!__DEC_operand_coveredBy_591070
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_387746
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_387746 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_387746
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_387746 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_387746
																	.next();

															// check object __DEC_messageReceive_receiveEvent_387746 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_387746 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_387746 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_387746
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_253291
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_253291 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_253291
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_253291 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_253291
																	.next();

															// check object __DEC_messageSend_receiveEvent_253291 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_253291 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_253291 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_253291
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_158549
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_158549 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_158549
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_158549 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_158549
																	.next();

															// check object __DEC_messageReceive_sendEvent_158549 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_158549 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_158549 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_158549
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_658828
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_658828 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_658828
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_658828 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_658828
																	.next();

															// check object __DEC_messageSend_sendEvent_658828 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_658828 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_658828 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_658828
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_736027
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_736027 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_736027
																	.hasNext()) {
														try {
															__DEC_message_message_736027 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_736027
																	.next();

															// check object __DEC_message_message_736027 is really bound
															JavaSDM.ensure(__DEC_message_message_736027 != null);
															// check isomorphic binding between objects __DEC_message_message_736027 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_736027
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_736027 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_736027
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_covered is really bound
												JavaSDM.ensure(_edge_covered != null);
												// check object _edge_coveredBy is really bound
												JavaSDM.ensure(_edge_coveredBy != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
												JavaSDM.ensure(!_edge_coveredBy
														.equals(_edge_covered));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_covered to combo
												JavaSDM.ensure(combo
														.equals(_edge_covered
																.getSrc()));

												// check link src from _edge_coveredBy to line
												JavaSDM.ensure(line
														.equals(_edge_coveredBy
																.getSrc()));

												// check link trg from _edge_covered to line
												JavaSDM.ensure(line
														.equals(_edge_covered
																.getTrg()));

												// check link trg from _edge_coveredBy to combo
												JavaSDM.ensure(combo
														.equals(_edge_coveredBy
																.getTrg()));

												// check link covered from line to combo
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(combo));

												// check link covered from messageReceive to line
												JavaSDM.ensure(messageReceive
														.getCovered().contains(
																line));

												// check link covered from messageSend to line
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																line));

												// check link covered from line to operand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(operand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, combo,
																operand, guard,
																spec, line,
																message,
																interaction,
																messageSend,
																messageReceive);
												if (fujaba__Success) {
													// statement node ''
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_45(
			EMoflonEdge _edge_guard) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_269539 = null;
		InteractionOperand __DEC_combo_fragment_247227 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_954340 = null;
		InteractionOperand __DEC_messageReceive_fragment_471713 = null;
		Interaction __DEC_messageSend_enclosingInteraction_648616 = null;
		InteractionOperand __DEC_messageSend_fragment_449884 = null;
		Interaction __DEC_operand_enclosingInteraction_96571 = null;
		InteractionOperand __DEC_operand_fragment_98354 = null;
		InteractionOperand __DEC_guard_guard_423605 = null;
		CombinedFragment __DEC_operand_operand_510325 = null;
		Constraint __DEC_spec_specification_712861 = null;
		Iterator fujaba__IterComboTo__DEC_combo_coveredBy_291616 = null;
		Lifeline __DEC_combo_coveredBy_291616 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_172961 = null;
		Lifeline __DEC_messageReceive_coveredBy_172961 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_45149 = null;
		Lifeline __DEC_messageSend_coveredBy_45149 = null;
		Iterator fujaba__IterOperandTo__DEC_operand_coveredBy_687610 = null;
		Lifeline __DEC_operand_coveredBy_687610 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_656873 = null;
		Message __DEC_messageReceive_receiveEvent_656873 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_100156 = null;
		Message __DEC_messageSend_receiveEvent_100156 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_522231 = null;
		Message __DEC_messageReceive_sendEvent_522231 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_819286 = null;
		Message __DEC_messageSend_sendEvent_819286 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_563864 = null;
		MessageEnd __DEC_message_message_563864 = null;
		Match match = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_guard is really bound
			JavaSDM.ensure(_edge_guard != null);
			// bind object
			_TmpObject = _edge_guard.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link trg from _edge_guard to guard
			JavaSDM.ensure(guard.equals(_edge_guard.getTrg()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from line to combo
					JavaSDM.ensure(line.getCoveredBy().contains(combo));

					// iterate to-many link covered from line to messageReceive
					fujaba__Success = false;

					fujaba__IterLineToMessageReceive = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// iterate to-many link covered from line to messageSend
							fujaba__Success = false;

							fujaba__IterLineToMessageSend = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link receiveEvent from message to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(message.getReceiveEvent()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_269539 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_269539 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_269539 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_269539 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_269539
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_247227 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_247227 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_247227 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_247227 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_247227
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_954340 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_954340 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_954340 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_954340 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_954340
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_471713 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_471713 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_471713 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_471713 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_471713
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_648616 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_648616 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_648616 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_648616 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_648616
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_449884 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_449884 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_449884 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_449884 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_449884
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_96571 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_96571 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_96571 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_96571 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_96571
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_98354 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_98354 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_98354 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_98354 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_98354
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_423605 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_423605 is really bound
											JavaSDM.ensure(__DEC_guard_guard_423605 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_423605
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_423605 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_423605
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_510325 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_510325 is really bound
											JavaSDM.ensure(__DEC_operand_operand_510325 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_510325
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_510325 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_510325
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_712861 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_712861 is really bound
											JavaSDM.ensure(__DEC_spec_specification_712861 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_712861
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_712861 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_712861
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from combo to __DEC_combo_coveredBy_291616
											fujaba__Success = false;

											fujaba__IterComboTo__DEC_combo_coveredBy_291616 = new ArrayList(
													combo.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterComboTo__DEC_combo_coveredBy_291616
															.hasNext()) {
												try {
													__DEC_combo_coveredBy_291616 = (Lifeline) fujaba__IterComboTo__DEC_combo_coveredBy_291616
															.next();

													// check object __DEC_combo_coveredBy_291616 is really bound
													JavaSDM.ensure(__DEC_combo_coveredBy_291616 != null);
													// check isomorphic binding between objects __DEC_combo_coveredBy_291616 and line 
													JavaSDM.ensure(!__DEC_combo_coveredBy_291616
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_172961
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_172961 = new ArrayList(
													messageReceive.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_172961
															.hasNext()) {
												try {
													__DEC_messageReceive_coveredBy_172961 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_172961
															.next();

													// check object __DEC_messageReceive_coveredBy_172961 is really bound
													JavaSDM.ensure(__DEC_messageReceive_coveredBy_172961 != null);
													// check isomorphic binding between objects __DEC_messageReceive_coveredBy_172961 and line 
													JavaSDM.ensure(!__DEC_messageReceive_coveredBy_172961
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_45149
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_45149 = new ArrayList(
													messageSend.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_45149
															.hasNext()) {
												try {
													__DEC_messageSend_coveredBy_45149 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_45149
															.next();

													// check object __DEC_messageSend_coveredBy_45149 is really bound
													JavaSDM.ensure(__DEC_messageSend_coveredBy_45149 != null);
													// check isomorphic binding between objects __DEC_messageSend_coveredBy_45149 and line 
													JavaSDM.ensure(!__DEC_messageSend_coveredBy_45149
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from operand to __DEC_operand_coveredBy_687610
											fujaba__Success = false;

											fujaba__IterOperandTo__DEC_operand_coveredBy_687610 = new ArrayList(
													operand.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterOperandTo__DEC_operand_coveredBy_687610
															.hasNext()) {
												try {
													__DEC_operand_coveredBy_687610 = (Lifeline) fujaba__IterOperandTo__DEC_operand_coveredBy_687610
															.next();

													// check object __DEC_operand_coveredBy_687610 is really bound
													JavaSDM.ensure(__DEC_operand_coveredBy_687610 != null);
													// check isomorphic binding between objects __DEC_operand_coveredBy_687610 and line 
													JavaSDM.ensure(!__DEC_operand_coveredBy_687610
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_656873
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_656873 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_656873
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_656873 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_656873
															.next();

													// check object __DEC_messageReceive_receiveEvent_656873 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_656873 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_656873 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_656873
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_100156
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_100156 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_100156
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_100156 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_100156
															.next();

													// check object __DEC_messageSend_receiveEvent_100156 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_100156 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_100156 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_100156
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_522231
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_522231 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_522231
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_522231 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_522231
															.next();

													// check object __DEC_messageReceive_sendEvent_522231 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_522231 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_522231 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_522231
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_819286
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_819286 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_819286
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_819286 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_819286
															.next();

													// check object __DEC_messageSend_sendEvent_819286 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_819286 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_819286 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_819286
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_563864
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_563864 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_563864
															.hasNext()) {
												try {
													__DEC_message_message_563864 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_563864
															.next();

													// check object __DEC_message_message_563864 is really bound
													JavaSDM.ensure(__DEC_message_message_563864 != null);
													// check isomorphic binding between objects __DEC_message_message_563864 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_563864
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_563864 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_563864
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_guard is really bound
										JavaSDM.ensure(_edge_guard != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_guard to operand
										JavaSDM.ensure(operand
												.equals(_edge_guard.getSrc()));

										// check link trg from _edge_guard to guard
										JavaSDM.ensure(guard.equals(_edge_guard
												.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from line to operand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(operand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, operand, guard,
														spec, line, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node ''
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_46(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_178448 = null;
		InteractionOperand __DEC_combo_fragment_711848 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_215522 = null;
		InteractionOperand __DEC_messageReceive_fragment_307370 = null;
		Interaction __DEC_messageSend_enclosingInteraction_25824 = null;
		InteractionOperand __DEC_messageSend_fragment_770404 = null;
		Interaction __DEC_operand_enclosingInteraction_187486 = null;
		InteractionOperand __DEC_operand_fragment_424847 = null;
		InteractionOperand __DEC_guard_guard_942868 = null;
		CombinedFragment __DEC_operand_operand_925395 = null;
		Constraint __DEC_spec_specification_660119 = null;
		Iterator fujaba__IterComboTo__DEC_combo_coveredBy_868735 = null;
		Lifeline __DEC_combo_coveredBy_868735 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_833230 = null;
		Lifeline __DEC_messageReceive_coveredBy_833230 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_230691 = null;
		Lifeline __DEC_messageSend_coveredBy_230691 = null;
		Iterator fujaba__IterOperandTo__DEC_operand_coveredBy_438565 = null;
		Lifeline __DEC_operand_coveredBy_438565 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_819947 = null;
		Message __DEC_messageReceive_receiveEvent_819947 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_526011 = null;
		Message __DEC_messageSend_receiveEvent_526011 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_708426 = null;
		Message __DEC_messageReceive_sendEvent_708426 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_724224 = null;
		Message __DEC_messageSend_sendEvent_724224 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_914053 = null;
		MessageEnd __DEC_message_message_914053 = null;
		Match match = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link covered from line to combo
			JavaSDM.ensure(line.getCoveredBy().contains(combo));

			// check link covered from line to operand
			JavaSDM.ensure(line.getCoveredBy().contains(operand));

			// iterate to-many link covered from line to messageReceive
			fujaba__Success = false;

			fujaba__IterLineToMessageReceive = new ArrayList(
					line.getCoveredBy()).iterator();

			while (fujaba__IterLineToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageReceive.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageReceive.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// iterate to-many link covered from line to messageSend
					fujaba__Success = false;

					fujaba__IterLineToMessageSend = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageSend.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_178448 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_178448 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_178448 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_178448 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_178448
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_711848 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_711848 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_711848 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_711848 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_711848
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_215522 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_215522 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_215522 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_215522 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_215522
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_307370 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_307370 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_307370 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_307370 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_307370
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_25824 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_25824 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_25824 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_25824 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_25824
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_770404 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_770404 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_770404 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_770404 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_770404
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_187486 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_187486 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_187486 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_187486 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_187486
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_424847 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_424847 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_424847 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_424847 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_424847
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_942868 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_942868 is really bound
									JavaSDM.ensure(__DEC_guard_guard_942868 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_942868
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_942868 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_942868
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_925395 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_925395 is really bound
									JavaSDM.ensure(__DEC_operand_operand_925395 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_925395
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_925395 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_925395
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_660119 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_660119 is really bound
									JavaSDM.ensure(__DEC_spec_specification_660119 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_660119
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_660119 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_660119
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link covered from combo to __DEC_combo_coveredBy_868735
									fujaba__Success = false;

									fujaba__IterComboTo__DEC_combo_coveredBy_868735 = new ArrayList(
											combo.getCovered()).iterator();

									while (!(fujaba__Success)
											&& fujaba__IterComboTo__DEC_combo_coveredBy_868735
													.hasNext()) {
										try {
											__DEC_combo_coveredBy_868735 = (Lifeline) fujaba__IterComboTo__DEC_combo_coveredBy_868735
													.next();

											// check object __DEC_combo_coveredBy_868735 is really bound
											JavaSDM.ensure(__DEC_combo_coveredBy_868735 != null);
											// check isomorphic binding between objects __DEC_combo_coveredBy_868735 and line 
											JavaSDM.ensure(!__DEC_combo_coveredBy_868735
													.equals(line));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_833230
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_833230 = new ArrayList(
											messageReceive.getCovered())
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_833230
													.hasNext()) {
										try {
											__DEC_messageReceive_coveredBy_833230 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_833230
													.next();

											// check object __DEC_messageReceive_coveredBy_833230 is really bound
											JavaSDM.ensure(__DEC_messageReceive_coveredBy_833230 != null);
											// check isomorphic binding between objects __DEC_messageReceive_coveredBy_833230 and line 
											JavaSDM.ensure(!__DEC_messageReceive_coveredBy_833230
													.equals(line));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_230691
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_230691 = new ArrayList(
											messageSend.getCovered())
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_230691
													.hasNext()) {
										try {
											__DEC_messageSend_coveredBy_230691 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_230691
													.next();

											// check object __DEC_messageSend_coveredBy_230691 is really bound
											JavaSDM.ensure(__DEC_messageSend_coveredBy_230691 != null);
											// check isomorphic binding between objects __DEC_messageSend_coveredBy_230691 and line 
											JavaSDM.ensure(!__DEC_messageSend_coveredBy_230691
													.equals(line));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link covered from operand to __DEC_operand_coveredBy_438565
									fujaba__Success = false;

									fujaba__IterOperandTo__DEC_operand_coveredBy_438565 = new ArrayList(
											operand.getCovered()).iterator();

									while (!(fujaba__Success)
											&& fujaba__IterOperandTo__DEC_operand_coveredBy_438565
													.hasNext()) {
										try {
											__DEC_operand_coveredBy_438565 = (Lifeline) fujaba__IterOperandTo__DEC_operand_coveredBy_438565
													.next();

											// check object __DEC_operand_coveredBy_438565 is really bound
											JavaSDM.ensure(__DEC_operand_coveredBy_438565 != null);
											// check isomorphic binding between objects __DEC_operand_coveredBy_438565 and line 
											JavaSDM.ensure(!__DEC_operand_coveredBy_438565
													.equals(line));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_819947
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_819947 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_819947
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_819947 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_819947
													.next();

											// check object __DEC_messageReceive_receiveEvent_819947 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_819947 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_819947 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_819947
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_526011
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_526011 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_526011
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_526011 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_526011
													.next();

											// check object __DEC_messageSend_receiveEvent_526011 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_526011 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_526011 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_526011
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_708426
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_708426 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_708426
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_708426 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_708426
													.next();

											// check object __DEC_messageReceive_sendEvent_708426 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_708426 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_708426 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_708426
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_724224
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_724224 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_724224
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_724224 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_724224
													.next();

											// check object __DEC_messageSend_sendEvent_724224 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_724224 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_724224 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_724224
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_914053
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_914053 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_914053
													.hasNext()) {
										try {
											__DEC_message_message_914053 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_914053
													.next();

											// check object __DEC_message_message_914053 is really bound
											JavaSDM.ensure(__DEC_message_message_914053 != null);
											// check isomorphic binding between objects __DEC_message_message_914053 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_914053
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_914053 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_914053
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_coveredBy is really bound
								JavaSDM.ensure(_edge_coveredBy != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_coveredBy to line
								JavaSDM.ensure(line.equals(_edge_coveredBy
										.getSrc()));

								// check link trg from _edge_coveredBy to operand
								JavaSDM.ensure(operand.equals(_edge_coveredBy
										.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from messageSend to line
								JavaSDM.ensure(messageSend.getCovered()
										.contains(line));

								// check link covered from line to operand
								JavaSDM.ensure(line.getCoveredBy().contains(
										operand));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, operand, guard, spec, line,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node ''
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_47(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_843928 = null;
		InteractionOperand __DEC_combo_fragment_878682 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_613146 = null;
		InteractionOperand __DEC_messageReceive_fragment_515996 = null;
		Interaction __DEC_messageSend_enclosingInteraction_478957 = null;
		InteractionOperand __DEC_messageSend_fragment_672616 = null;
		Interaction __DEC_operand_enclosingInteraction_332541 = null;
		InteractionOperand __DEC_operand_fragment_434756 = null;
		InteractionOperand __DEC_guard_guard_949807 = null;
		CombinedFragment __DEC_operand_operand_705135 = null;
		Constraint __DEC_spec_specification_687036 = null;
		Iterator fujaba__IterComboTo__DEC_combo_coveredBy_967116 = null;
		Lifeline __DEC_combo_coveredBy_967116 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_552877 = null;
		Lifeline __DEC_messageReceive_coveredBy_552877 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_640386 = null;
		Lifeline __DEC_messageSend_coveredBy_640386 = null;
		Iterator fujaba__IterOperandTo__DEC_operand_coveredBy_609715 = null;
		Lifeline __DEC_operand_coveredBy_609715 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_112283 = null;
		Message __DEC_messageReceive_receiveEvent_112283 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_463772 = null;
		Message __DEC_messageSend_receiveEvent_463772 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_904482 = null;
		Message __DEC_messageReceive_sendEvent_904482 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_600301 = null;
		Message __DEC_messageSend_sendEvent_600301 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_326033 = null;
		MessageEnd __DEC_message_message_326033 = null;
		Match match = null;
		Iterator fujaba__IterOperandTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Lifeline line = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from line to combo
			JavaSDM.ensure(line.getCoveredBy().contains(combo));

			// check link covered from line to operand
			JavaSDM.ensure(line.getCoveredBy().contains(operand));

			// iterate to-many link covered from line to messageReceive
			fujaba__Success = false;

			fujaba__IterLineToMessageReceive = new ArrayList(
					line.getCoveredBy()).iterator();

			while (fujaba__IterLineToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageReceive.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// iterate to-many link covered from line to messageSend
					fujaba__Success = false;

					fujaba__IterLineToMessageSend = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageSend.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// bind object
							message = messageSend.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// iterate to-many link trg from operand to _edge_coveredBy
							fujaba__Success = false;

							fujaba__IterOperandTo_edge_coveredBy = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(operand,
													EMoflonEdge.class, "trg"))
									.iterator();

							while (fujaba__IterOperandTo_edge_coveredBy
									.hasNext()) {
								try {
									_edge_coveredBy = (EMoflonEdge) fujaba__IterOperandTo_edge_coveredBy
											.next();

									// check object _edge_coveredBy is really bound
									JavaSDM.ensure(_edge_coveredBy != null);
									// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
									JavaSDM.ensure(!_edge_coveredBy
											.equals(_edge_covered));

									// check link src from _edge_coveredBy to line
									JavaSDM.ensure(line.equals(_edge_coveredBy
											.getSrc()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_843928 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_843928 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_843928 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_843928 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_843928
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_878682 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_878682 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_878682 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_878682 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_878682
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_613146 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_613146 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_613146 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_613146 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_613146
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_515996 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_515996 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_515996 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_515996 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_515996
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_478957 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_478957 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_478957 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_478957 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_478957
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_672616 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_672616 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_672616 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_672616 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_672616
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_332541 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_332541 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_332541 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_332541 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_332541
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_434756 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_434756 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_434756 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_434756 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_434756
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_949807 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_949807 is really bound
											JavaSDM.ensure(__DEC_guard_guard_949807 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_949807
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_949807 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_949807
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_705135 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_705135 is really bound
											JavaSDM.ensure(__DEC_operand_operand_705135 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_705135
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_705135 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_705135
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_687036 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_687036 is really bound
											JavaSDM.ensure(__DEC_spec_specification_687036 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_687036
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_687036 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_687036
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from combo to __DEC_combo_coveredBy_967116
											fujaba__Success = false;

											fujaba__IterComboTo__DEC_combo_coveredBy_967116 = new ArrayList(
													combo.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterComboTo__DEC_combo_coveredBy_967116
															.hasNext()) {
												try {
													__DEC_combo_coveredBy_967116 = (Lifeline) fujaba__IterComboTo__DEC_combo_coveredBy_967116
															.next();

													// check object __DEC_combo_coveredBy_967116 is really bound
													JavaSDM.ensure(__DEC_combo_coveredBy_967116 != null);
													// check isomorphic binding between objects __DEC_combo_coveredBy_967116 and line 
													JavaSDM.ensure(!__DEC_combo_coveredBy_967116
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_552877
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_552877 = new ArrayList(
													messageReceive.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_552877
															.hasNext()) {
												try {
													__DEC_messageReceive_coveredBy_552877 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_552877
															.next();

													// check object __DEC_messageReceive_coveredBy_552877 is really bound
													JavaSDM.ensure(__DEC_messageReceive_coveredBy_552877 != null);
													// check isomorphic binding between objects __DEC_messageReceive_coveredBy_552877 and line 
													JavaSDM.ensure(!__DEC_messageReceive_coveredBy_552877
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_640386
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_640386 = new ArrayList(
													messageSend.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_640386
															.hasNext()) {
												try {
													__DEC_messageSend_coveredBy_640386 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_640386
															.next();

													// check object __DEC_messageSend_coveredBy_640386 is really bound
													JavaSDM.ensure(__DEC_messageSend_coveredBy_640386 != null);
													// check isomorphic binding between objects __DEC_messageSend_coveredBy_640386 and line 
													JavaSDM.ensure(!__DEC_messageSend_coveredBy_640386
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from operand to __DEC_operand_coveredBy_609715
											fujaba__Success = false;

											fujaba__IterOperandTo__DEC_operand_coveredBy_609715 = new ArrayList(
													operand.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterOperandTo__DEC_operand_coveredBy_609715
															.hasNext()) {
												try {
													__DEC_operand_coveredBy_609715 = (Lifeline) fujaba__IterOperandTo__DEC_operand_coveredBy_609715
															.next();

													// check object __DEC_operand_coveredBy_609715 is really bound
													JavaSDM.ensure(__DEC_operand_coveredBy_609715 != null);
													// check isomorphic binding between objects __DEC_operand_coveredBy_609715 and line 
													JavaSDM.ensure(!__DEC_operand_coveredBy_609715
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_112283
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_112283 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_112283
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_112283 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_112283
															.next();

													// check object __DEC_messageReceive_receiveEvent_112283 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_112283 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_112283 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_112283
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_463772
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_463772 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_463772
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_463772 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_463772
															.next();

													// check object __DEC_messageSend_receiveEvent_463772 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_463772 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_463772 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_463772
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_904482
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_904482 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_904482
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_904482 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_904482
															.next();

													// check object __DEC_messageReceive_sendEvent_904482 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_904482 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_904482 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_904482
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_600301
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_600301 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_600301
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_600301 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_600301
															.next();

													// check object __DEC_messageSend_sendEvent_600301 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_600301 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_600301 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_600301
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_326033
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_326033 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_326033
															.hasNext()) {
												try {
													__DEC_message_message_326033 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_326033
															.next();

													// check object __DEC_message_message_326033 is really bound
													JavaSDM.ensure(__DEC_message_message_326033 != null);
													// check isomorphic binding between objects __DEC_message_message_326033 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_326033
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_326033 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_326033
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_covered is really bound
										JavaSDM.ensure(_edge_covered != null);
										// check object _edge_coveredBy is really bound
										JavaSDM.ensure(_edge_coveredBy != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
										JavaSDM.ensure(!_edge_coveredBy
												.equals(_edge_covered));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_covered to operand
										JavaSDM.ensure(operand
												.equals(_edge_covered.getSrc()));

										// check link src from _edge_coveredBy to line
										JavaSDM.ensure(line
												.equals(_edge_coveredBy
														.getSrc()));

										// check link trg from _edge_covered to line
										JavaSDM.ensure(line
												.equals(_edge_covered.getTrg()));

										// check link trg from _edge_coveredBy to operand
										JavaSDM.ensure(operand
												.equals(_edge_coveredBy
														.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from line to operand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(operand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, operand, guard,
														spec, line, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node ''
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_48(
			EMoflonEdge _edge_specification) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_617772 = null;
		InteractionOperand __DEC_combo_fragment_766579 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_152908 = null;
		InteractionOperand __DEC_messageReceive_fragment_308261 = null;
		Interaction __DEC_messageSend_enclosingInteraction_205738 = null;
		InteractionOperand __DEC_messageSend_fragment_669836 = null;
		Interaction __DEC_operand_enclosingInteraction_374537 = null;
		InteractionOperand __DEC_operand_fragment_298861 = null;
		InteractionOperand __DEC_guard_guard_711971 = null;
		CombinedFragment __DEC_operand_operand_341095 = null;
		Constraint __DEC_spec_specification_981890 = null;
		Iterator fujaba__IterComboTo__DEC_combo_coveredBy_521978 = null;
		Lifeline __DEC_combo_coveredBy_521978 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_238834 = null;
		Lifeline __DEC_messageReceive_coveredBy_238834 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_412951 = null;
		Lifeline __DEC_messageSend_coveredBy_412951 = null;
		Iterator fujaba__IterOperandTo__DEC_operand_coveredBy_398787 = null;
		Lifeline __DEC_operand_coveredBy_398787 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_375437 = null;
		Message __DEC_messageReceive_receiveEvent_375437 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_122210 = null;
		Message __DEC_messageSend_receiveEvent_122210 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_655906 = null;
		Message __DEC_messageReceive_sendEvent_655906 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_301048 = null;
		Message __DEC_messageSend_sendEvent_301048 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_566128 = null;
		MessageEnd __DEC_message_message_566128 = null;
		Match match = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionOperand operand = null;
		InteractionConstraint guard = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_specification is really bound
			JavaSDM.ensure(_edge_specification != null);
			// bind object
			_TmpObject = _edge_specification.getSrc();

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;

			// bind object
			operand = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
					.eContainer() : null;

			// check object operand is really bound
			JavaSDM.ensure(operand != null);

			// check if contained via correct reference
			JavaSDM.ensure(guard.equals(operand.getGuard()));

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = _edge_specification.getTrg();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link specification from spec to guard
			JavaSDM.ensure(guard.equals(spec.eContainer()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from line to combo
					JavaSDM.ensure(line.getCoveredBy().contains(combo));

					// iterate to-many link covered from line to messageReceive
					fujaba__Success = false;

					fujaba__IterLineToMessageReceive = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// iterate to-many link covered from line to messageSend
							fujaba__Success = false;

							fujaba__IterLineToMessageSend = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link receiveEvent from message to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(message.getReceiveEvent()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_617772 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_617772 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_617772 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_617772 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_617772
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_766579 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_766579 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_766579 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_766579 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_766579
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_152908 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_152908 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_152908 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_152908 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_152908
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_308261 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_308261 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_308261 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_308261 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_308261
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_205738 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_205738 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_205738 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_205738 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_205738
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_669836 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_669836 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_669836 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_669836 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_669836
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_374537 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_374537 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_374537 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_374537 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_374537
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_298861 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_298861 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_298861 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_298861 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_298861
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_711971 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_711971 is really bound
											JavaSDM.ensure(__DEC_guard_guard_711971 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_711971
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_711971 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_711971
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_341095 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_341095 is really bound
											JavaSDM.ensure(__DEC_operand_operand_341095 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_341095
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_341095 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_341095
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_981890 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_981890 is really bound
											JavaSDM.ensure(__DEC_spec_specification_981890 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_981890
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_981890 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_981890
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from combo to __DEC_combo_coveredBy_521978
											fujaba__Success = false;

											fujaba__IterComboTo__DEC_combo_coveredBy_521978 = new ArrayList(
													combo.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterComboTo__DEC_combo_coveredBy_521978
															.hasNext()) {
												try {
													__DEC_combo_coveredBy_521978 = (Lifeline) fujaba__IterComboTo__DEC_combo_coveredBy_521978
															.next();

													// check object __DEC_combo_coveredBy_521978 is really bound
													JavaSDM.ensure(__DEC_combo_coveredBy_521978 != null);
													// check isomorphic binding between objects __DEC_combo_coveredBy_521978 and line 
													JavaSDM.ensure(!__DEC_combo_coveredBy_521978
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_238834
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_238834 = new ArrayList(
													messageReceive.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_238834
															.hasNext()) {
												try {
													__DEC_messageReceive_coveredBy_238834 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_238834
															.next();

													// check object __DEC_messageReceive_coveredBy_238834 is really bound
													JavaSDM.ensure(__DEC_messageReceive_coveredBy_238834 != null);
													// check isomorphic binding between objects __DEC_messageReceive_coveredBy_238834 and line 
													JavaSDM.ensure(!__DEC_messageReceive_coveredBy_238834
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_412951
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_412951 = new ArrayList(
													messageSend.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_412951
															.hasNext()) {
												try {
													__DEC_messageSend_coveredBy_412951 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_412951
															.next();

													// check object __DEC_messageSend_coveredBy_412951 is really bound
													JavaSDM.ensure(__DEC_messageSend_coveredBy_412951 != null);
													// check isomorphic binding between objects __DEC_messageSend_coveredBy_412951 and line 
													JavaSDM.ensure(!__DEC_messageSend_coveredBy_412951
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from operand to __DEC_operand_coveredBy_398787
											fujaba__Success = false;

											fujaba__IterOperandTo__DEC_operand_coveredBy_398787 = new ArrayList(
													operand.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterOperandTo__DEC_operand_coveredBy_398787
															.hasNext()) {
												try {
													__DEC_operand_coveredBy_398787 = (Lifeline) fujaba__IterOperandTo__DEC_operand_coveredBy_398787
															.next();

													// check object __DEC_operand_coveredBy_398787 is really bound
													JavaSDM.ensure(__DEC_operand_coveredBy_398787 != null);
													// check isomorphic binding between objects __DEC_operand_coveredBy_398787 and line 
													JavaSDM.ensure(!__DEC_operand_coveredBy_398787
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_375437
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_375437 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_375437
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_375437 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_375437
															.next();

													// check object __DEC_messageReceive_receiveEvent_375437 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_375437 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_375437 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_375437
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_122210
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_122210 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_122210
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_122210 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_122210
															.next();

													// check object __DEC_messageSend_receiveEvent_122210 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_122210 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_122210 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_122210
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_655906
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_655906 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_655906
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_655906 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_655906
															.next();

													// check object __DEC_messageReceive_sendEvent_655906 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_655906 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_655906 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_655906
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_301048
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_301048 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_301048
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_301048 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_301048
															.next();

													// check object __DEC_messageSend_sendEvent_301048 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_301048 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_301048 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_301048
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_566128
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_566128 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_566128
															.hasNext()) {
												try {
													__DEC_message_message_566128 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_566128
															.next();

													// check object __DEC_message_message_566128 is really bound
													JavaSDM.ensure(__DEC_message_message_566128 != null);
													// check isomorphic binding between objects __DEC_message_message_566128 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_566128
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_566128 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_566128
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_specification is really bound
										JavaSDM.ensure(_edge_specification != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_specification to guard
										JavaSDM.ensure(guard
												.equals(_edge_specification
														.getSrc()));

										// check link trg from _edge_specification to spec
										JavaSDM.ensure(spec
												.equals(_edge_specification
														.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from line to operand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(operand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, operand, guard,
														spec, line, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node ''
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_12(
			EMoflonEdge _edge_steps) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_7012 = null;
		NormalStep __DEC_alt_stepAlternative_483240 = null;
		Flow __DEC_step_steps_822578 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_375847 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_375847 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		Actor actor = null;
		NormalStep step = null;
		UseCase useCase = null;
		Flow flow = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_steps is really bound
			JavaSDM.ensure(_edge_steps != null);
			// bind object
			_TmpObject = _edge_steps.getSrc();

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof Flow);
			flow = (Flow) _TmpObject;

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_steps.getTrg();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// check link steps from step to flow
			JavaSDM.ensure(flow.equals(step.eContainer()));

			// iterate to-many link stepAlternative from step to alt
			fujaba__Success = false;

			fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative())
					.iterator();

			while (fujaba__IterStepToAlt.hasNext()) {
				try {
					_TmpObject = fujaba__IterStepToAlt.next();

					// ensure correct type and really bound of object alt
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
					alt = (AlternativeFlowAlternative) _TmpObject;
					// bind object
					_TmpObject = alt.getRef();

					// ensure correct type and really bound of object altFlow
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
					altFlow = (AlternativeFlow) _TmpObject;

					// check isomorphic binding between objects flow and altFlow 
					JavaSDM.ensure(!flow.equals(altFlow));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_7012 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_7012 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_7012 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_7012.getFlows()
									.contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_7012 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_7012
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_483240 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_483240 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_483240 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_483240
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_483240 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_483240
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_822578 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_822578 is really bound
							JavaSDM.ensure(__DEC_step_steps_822578 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_822578.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_822578 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_822578
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_822578 and flow 
							JavaSDM.ensure(!__DEC_step_steps_822578
									.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_375847
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_375847 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_375847
											.hasNext()) {
								try {
									__DEC_altFlow_ref_375847 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_375847
											.next();

									// check object __DEC_altFlow_ref_375847 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_375847 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_375847 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_375847
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_steps is really bound
						JavaSDM.ensure(_edge_steps != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_steps to flow
						JavaSDM.ensure(flow.equals(_edge_steps.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_steps to step
						JavaSDM.ensure(step.equals(_edge_steps.getTrg()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match, step,
								alt, altFlow, useCase, flow, actor);
						if (fujaba__Success) {
							// statement node ''
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_13(
			EMoflonEdge _edge_actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_520422 = null;
		NormalStep __DEC_alt_stepAlternative_517051 = null;
		Flow __DEC_step_steps_456428 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_521057 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_521057 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		UseCase useCase = null;
		Flow flow = null;
		Actor actor = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_actor is really bound
			JavaSDM.ensure(_edge_actor != null);
			// bind object
			_TmpObject = _edge_actor.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer()
					: null;

			// check object flow is really bound
			JavaSDM.ensure(flow != null);

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// check link trg from _edge_actor to actor
			JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

			// iterate to-many link stepAlternative from step to alt
			fujaba__Success = false;

			fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative())
					.iterator();

			while (fujaba__IterStepToAlt.hasNext()) {
				try {
					_TmpObject = fujaba__IterStepToAlt.next();

					// ensure correct type and really bound of object alt
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
					alt = (AlternativeFlowAlternative) _TmpObject;
					// bind object
					_TmpObject = alt.getRef();

					// ensure correct type and really bound of object altFlow
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
					altFlow = (AlternativeFlow) _TmpObject;

					// check isomorphic binding between objects flow and altFlow 
					JavaSDM.ensure(!flow.equals(altFlow));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_520422 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_520422 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_520422 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_520422
									.getFlows().contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_520422 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_520422
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_517051 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_517051 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_517051 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_517051
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_517051 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_517051
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_456428 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_456428 is really bound
							JavaSDM.ensure(__DEC_step_steps_456428 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_456428.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_456428 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_456428
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_456428 and flow 
							JavaSDM.ensure(!__DEC_step_steps_456428
									.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_521057
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_521057 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_521057
											.hasNext()) {
								try {
									__DEC_altFlow_ref_521057 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_521057
											.next();

									// check object __DEC_altFlow_ref_521057 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_521057 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_521057 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_521057
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_actor is really bound
						JavaSDM.ensure(_edge_actor != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_actor to step
						JavaSDM.ensure(step.equals(_edge_actor.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_actor to actor
						JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match, step,
								alt, altFlow, useCase, flow, actor);
						if (fujaba__Success) {
							// statement node ''
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_49(
			EMoflonEdge _edge_sendEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_413345 = null;
		InteractionOperand __DEC_combo_fragment_336221 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_49619 = null;
		InteractionOperand __DEC_messageReceive_fragment_157164 = null;
		Interaction __DEC_messageSend_enclosingInteraction_848614 = null;
		InteractionOperand __DEC_messageSend_fragment_725228 = null;
		Interaction __DEC_operand_enclosingInteraction_343851 = null;
		InteractionOperand __DEC_operand_fragment_680594 = null;
		InteractionOperand __DEC_guard_guard_682683 = null;
		CombinedFragment __DEC_operand_operand_352406 = null;
		Constraint __DEC_spec_specification_3515 = null;
		Iterator fujaba__IterComboTo__DEC_combo_coveredBy_956488 = null;
		Lifeline __DEC_combo_coveredBy_956488 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_351489 = null;
		Lifeline __DEC_messageReceive_coveredBy_351489 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_112100 = null;
		Lifeline __DEC_messageSend_coveredBy_112100 = null;
		Iterator fujaba__IterOperandTo__DEC_operand_coveredBy_851944 = null;
		Lifeline __DEC_operand_coveredBy_851944 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_384012 = null;
		Message __DEC_messageReceive_receiveEvent_384012 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_99404 = null;
		Message __DEC_messageSend_receiveEvent_99404 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_209055 = null;
		Message __DEC_messageReceive_sendEvent_209055 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_670988 = null;
		Message __DEC_messageSend_sendEvent_670988 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_497268 = null;
		MessageEnd __DEC_message_message_497268 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Iterator fujaba__IterMessageSendToLine = null;
		Lifeline line = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_sendEvent is really bound
			JavaSDM.ensure(_edge_sendEvent != null);
			// bind object
			_TmpObject = _edge_sendEvent.getTrg();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// check link src from _edge_sendEvent to message
			JavaSDM.ensure(message.equals(_edge_sendEvent.getSrc()));

			// iterate to-many link covered from messageSend to line
			fujaba__Success = false;

			fujaba__IterMessageSendToLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageSendToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to messageReceive
							fujaba__Success = false;

							fujaba__IterLineToMessageReceive = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToMessageReceive.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToMessageReceive
											.next();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;
									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link receiveEvent from message to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(message.getReceiveEvent()));

									// iterate to-many link covered from line to operand
									fujaba__Success = false;

									fujaba__IterLineToOperand = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToOperand.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// check link operand from operand to combo
											JavaSDM.ensure(combo.equals(operand
													.eContainer()));

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_413345 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_413345 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_413345 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_413345 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_413345
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_336221 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_336221 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_336221 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_336221 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_336221
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_49619 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_49619 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_49619 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_49619 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_49619
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_157164 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_157164 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_157164 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_157164 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_157164
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_848614 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_848614 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_848614 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_848614 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_848614
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_725228 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_725228 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_725228 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_725228 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_725228
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_343851 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_343851 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_343851 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_343851 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_343851
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_680594 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_680594 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_680594 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_680594 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_680594
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_682683 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_682683 is really bound
													JavaSDM.ensure(__DEC_guard_guard_682683 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_682683
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_682683 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_682683
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_352406 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_352406 is really bound
													JavaSDM.ensure(__DEC_operand_operand_352406 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_352406
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_352406 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_352406
															.equals(combo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_3515 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_3515 is really bound
													JavaSDM.ensure(__DEC_spec_specification_3515 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_3515
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_3515 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_3515
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from combo to __DEC_combo_coveredBy_956488
													fujaba__Success = false;

													fujaba__IterComboTo__DEC_combo_coveredBy_956488 = new ArrayList(
															combo.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterComboTo__DEC_combo_coveredBy_956488
																	.hasNext()) {
														try {
															__DEC_combo_coveredBy_956488 = (Lifeline) fujaba__IterComboTo__DEC_combo_coveredBy_956488
																	.next();

															// check object __DEC_combo_coveredBy_956488 is really bound
															JavaSDM.ensure(__DEC_combo_coveredBy_956488 != null);
															// check isomorphic binding between objects __DEC_combo_coveredBy_956488 and line 
															JavaSDM.ensure(!__DEC_combo_coveredBy_956488
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_351489
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_351489 = new ArrayList(
															messageReceive
																	.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_351489
																	.hasNext()) {
														try {
															__DEC_messageReceive_coveredBy_351489 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_351489
																	.next();

															// check object __DEC_messageReceive_coveredBy_351489 is really bound
															JavaSDM.ensure(__DEC_messageReceive_coveredBy_351489 != null);
															// check isomorphic binding between objects __DEC_messageReceive_coveredBy_351489 and line 
															JavaSDM.ensure(!__DEC_messageReceive_coveredBy_351489
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_112100
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_112100 = new ArrayList(
															messageSend
																	.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_112100
																	.hasNext()) {
														try {
															__DEC_messageSend_coveredBy_112100 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_112100
																	.next();

															// check object __DEC_messageSend_coveredBy_112100 is really bound
															JavaSDM.ensure(__DEC_messageSend_coveredBy_112100 != null);
															// check isomorphic binding between objects __DEC_messageSend_coveredBy_112100 and line 
															JavaSDM.ensure(!__DEC_messageSend_coveredBy_112100
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from operand to __DEC_operand_coveredBy_851944
													fujaba__Success = false;

													fujaba__IterOperandTo__DEC_operand_coveredBy_851944 = new ArrayList(
															operand.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterOperandTo__DEC_operand_coveredBy_851944
																	.hasNext()) {
														try {
															__DEC_operand_coveredBy_851944 = (Lifeline) fujaba__IterOperandTo__DEC_operand_coveredBy_851944
																	.next();

															// check object __DEC_operand_coveredBy_851944 is really bound
															JavaSDM.ensure(__DEC_operand_coveredBy_851944 != null);
															// check isomorphic binding between objects __DEC_operand_coveredBy_851944 and line 
															JavaSDM.ensure(!__DEC_operand_coveredBy_851944
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_384012
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_384012 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_384012
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_384012 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_384012
																	.next();

															// check object __DEC_messageReceive_receiveEvent_384012 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_384012 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_384012 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_384012
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_99404
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_99404 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_99404
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_99404 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_99404
																	.next();

															// check object __DEC_messageSend_receiveEvent_99404 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_99404 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_99404 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_99404
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_209055
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_209055 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_209055
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_209055 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_209055
																	.next();

															// check object __DEC_messageReceive_sendEvent_209055 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_209055 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_209055 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_209055
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_670988
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_670988 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_670988
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_670988 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_670988
																	.next();

															// check object __DEC_messageSend_sendEvent_670988 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_670988 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_670988 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_670988
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_497268
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_497268 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_497268
																	.hasNext()) {
														try {
															__DEC_message_message_497268 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_497268
																	.next();

															// check object __DEC_message_message_497268 is really bound
															JavaSDM.ensure(__DEC_message_message_497268 != null);
															// check isomorphic binding between objects __DEC_message_message_497268 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_497268
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_497268 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_497268
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_sendEvent is really bound
												JavaSDM.ensure(_edge_sendEvent != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_sendEvent to message
												JavaSDM.ensure(message
														.equals(_edge_sendEvent
																.getSrc()));

												// check link trg from _edge_sendEvent to messageSend
												JavaSDM.ensure(messageSend
														.equals(_edge_sendEvent
																.getTrg()));

												// check link covered from line to combo
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(combo));

												// check link covered from messageReceive to line
												JavaSDM.ensure(messageReceive
														.getCovered().contains(
																line));

												// check link covered from messageSend to line
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																line));

												// check link covered from line to operand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(operand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, combo,
																operand, guard,
																spec, line,
																message,
																interaction,
																messageSend,
																messageReceive);
												if (fujaba__Success) {
													// statement node ''
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_50(
			EMoflonEdge _edge_receiveEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_168432 = null;
		InteractionOperand __DEC_combo_fragment_688345 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_742731 = null;
		InteractionOperand __DEC_messageReceive_fragment_710967 = null;
		Interaction __DEC_messageSend_enclosingInteraction_555617 = null;
		InteractionOperand __DEC_messageSend_fragment_20777 = null;
		Interaction __DEC_operand_enclosingInteraction_575656 = null;
		InteractionOperand __DEC_operand_fragment_77082 = null;
		InteractionOperand __DEC_guard_guard_501627 = null;
		CombinedFragment __DEC_operand_operand_940960 = null;
		Constraint __DEC_spec_specification_719219 = null;
		Iterator fujaba__IterComboTo__DEC_combo_coveredBy_220101 = null;
		Lifeline __DEC_combo_coveredBy_220101 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_116219 = null;
		Lifeline __DEC_messageReceive_coveredBy_116219 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_536932 = null;
		Lifeline __DEC_messageSend_coveredBy_536932 = null;
		Iterator fujaba__IterOperandTo__DEC_operand_coveredBy_190101 = null;
		Lifeline __DEC_operand_coveredBy_190101 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_155082 = null;
		Message __DEC_messageReceive_receiveEvent_155082 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_611168 = null;
		Message __DEC_messageSend_receiveEvent_611168 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_995217 = null;
		Message __DEC_messageReceive_sendEvent_995217 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_15159 = null;
		Message __DEC_messageSend_sendEvent_15159 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_514480 = null;
		MessageEnd __DEC_message_message_514480 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_receiveEvent is really bound
			JavaSDM.ensure(_edge_receiveEvent != null);
			// bind object
			_TmpObject = _edge_receiveEvent.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// check link src from _edge_receiveEvent to message
			JavaSDM.ensure(message.equals(_edge_receiveEvent.getSrc()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to messageSend
							fujaba__Success = false;

							fujaba__IterLineToMessageSend = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link message from messageSend to message
									JavaSDM.ensure(message.equals(messageSend
											.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// iterate to-many link covered from line to operand
									fujaba__Success = false;

									fujaba__IterLineToOperand = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToOperand.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// check link operand from operand to combo
											JavaSDM.ensure(combo.equals(operand
													.eContainer()));

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_168432 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_168432 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_168432 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_168432 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_168432
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_688345 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_688345 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_688345 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_688345 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_688345
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_742731 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_742731 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_742731 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_742731 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_742731
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_710967 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_710967 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_710967 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_710967 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_710967
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_555617 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_555617 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_555617 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_555617 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_555617
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_20777 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_20777 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_20777 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_20777 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_20777
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_575656 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_575656 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_575656 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_575656 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_575656
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_77082 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_77082 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_77082 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_77082 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_77082
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_501627 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_501627 is really bound
													JavaSDM.ensure(__DEC_guard_guard_501627 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_501627
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_501627 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_501627
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_940960 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_940960 is really bound
													JavaSDM.ensure(__DEC_operand_operand_940960 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_940960
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_940960 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_940960
															.equals(combo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_719219 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_719219 is really bound
													JavaSDM.ensure(__DEC_spec_specification_719219 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_719219
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_719219 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_719219
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from combo to __DEC_combo_coveredBy_220101
													fujaba__Success = false;

													fujaba__IterComboTo__DEC_combo_coveredBy_220101 = new ArrayList(
															combo.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterComboTo__DEC_combo_coveredBy_220101
																	.hasNext()) {
														try {
															__DEC_combo_coveredBy_220101 = (Lifeline) fujaba__IterComboTo__DEC_combo_coveredBy_220101
																	.next();

															// check object __DEC_combo_coveredBy_220101 is really bound
															JavaSDM.ensure(__DEC_combo_coveredBy_220101 != null);
															// check isomorphic binding between objects __DEC_combo_coveredBy_220101 and line 
															JavaSDM.ensure(!__DEC_combo_coveredBy_220101
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_116219
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_116219 = new ArrayList(
															messageReceive
																	.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_116219
																	.hasNext()) {
														try {
															__DEC_messageReceive_coveredBy_116219 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_116219
																	.next();

															// check object __DEC_messageReceive_coveredBy_116219 is really bound
															JavaSDM.ensure(__DEC_messageReceive_coveredBy_116219 != null);
															// check isomorphic binding between objects __DEC_messageReceive_coveredBy_116219 and line 
															JavaSDM.ensure(!__DEC_messageReceive_coveredBy_116219
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_536932
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_536932 = new ArrayList(
															messageSend
																	.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_536932
																	.hasNext()) {
														try {
															__DEC_messageSend_coveredBy_536932 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_536932
																	.next();

															// check object __DEC_messageSend_coveredBy_536932 is really bound
															JavaSDM.ensure(__DEC_messageSend_coveredBy_536932 != null);
															// check isomorphic binding between objects __DEC_messageSend_coveredBy_536932 and line 
															JavaSDM.ensure(!__DEC_messageSend_coveredBy_536932
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from operand to __DEC_operand_coveredBy_190101
													fujaba__Success = false;

													fujaba__IterOperandTo__DEC_operand_coveredBy_190101 = new ArrayList(
															operand.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterOperandTo__DEC_operand_coveredBy_190101
																	.hasNext()) {
														try {
															__DEC_operand_coveredBy_190101 = (Lifeline) fujaba__IterOperandTo__DEC_operand_coveredBy_190101
																	.next();

															// check object __DEC_operand_coveredBy_190101 is really bound
															JavaSDM.ensure(__DEC_operand_coveredBy_190101 != null);
															// check isomorphic binding between objects __DEC_operand_coveredBy_190101 and line 
															JavaSDM.ensure(!__DEC_operand_coveredBy_190101
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_155082
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_155082 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_155082
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_155082 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_155082
																	.next();

															// check object __DEC_messageReceive_receiveEvent_155082 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_155082 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_155082 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_155082
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_611168
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_611168 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_611168
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_611168 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_611168
																	.next();

															// check object __DEC_messageSend_receiveEvent_611168 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_611168 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_611168 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_611168
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_995217
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_995217 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_995217
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_995217 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_995217
																	.next();

															// check object __DEC_messageReceive_sendEvent_995217 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_995217 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_995217 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_995217
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_15159
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_15159 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_15159
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_15159 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_15159
																	.next();

															// check object __DEC_messageSend_sendEvent_15159 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_15159 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_15159 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_15159
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_514480
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_514480 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_514480
																	.hasNext()) {
														try {
															__DEC_message_message_514480 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_514480
																	.next();

															// check object __DEC_message_message_514480 is really bound
															JavaSDM.ensure(__DEC_message_message_514480 != null);
															// check isomorphic binding between objects __DEC_message_message_514480 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_514480
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_514480 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_514480
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_receiveEvent is really bound
												JavaSDM.ensure(_edge_receiveEvent != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_receiveEvent to message
												JavaSDM.ensure(message
														.equals(_edge_receiveEvent
																.getSrc()));

												// check link trg from _edge_receiveEvent to messageReceive
												JavaSDM.ensure(messageReceive
														.equals(_edge_receiveEvent
																.getTrg()));

												// check link covered from line to combo
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(combo));

												// check link covered from messageReceive to line
												JavaSDM.ensure(messageReceive
														.getCovered().contains(
																line));

												// check link covered from messageSend to line
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																line));

												// check link covered from line to operand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(operand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, combo,
																operand, guard,
																spec, line,
																message,
																interaction,
																messageSend,
																messageReceive);
												if (fujaba__Success) {
													// statement node ''
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_51(
			EMoflonEdge _edge_interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_469790 = null;
		InteractionOperand __DEC_combo_fragment_853607 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_699432 = null;
		InteractionOperand __DEC_messageReceive_fragment_581216 = null;
		Interaction __DEC_messageSend_enclosingInteraction_289669 = null;
		InteractionOperand __DEC_messageSend_fragment_651619 = null;
		Interaction __DEC_operand_enclosingInteraction_518391 = null;
		InteractionOperand __DEC_operand_fragment_604328 = null;
		InteractionOperand __DEC_guard_guard_909927 = null;
		CombinedFragment __DEC_operand_operand_569730 = null;
		Constraint __DEC_spec_specification_694110 = null;
		Iterator fujaba__IterComboTo__DEC_combo_coveredBy_255355 = null;
		Lifeline __DEC_combo_coveredBy_255355 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_457430 = null;
		Lifeline __DEC_messageReceive_coveredBy_457430 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_699151 = null;
		Lifeline __DEC_messageSend_coveredBy_699151 = null;
		Iterator fujaba__IterOperandTo__DEC_operand_coveredBy_565145 = null;
		Lifeline __DEC_operand_coveredBy_565145 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_954241 = null;
		Message __DEC_messageReceive_receiveEvent_954241 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_705295 = null;
		Message __DEC_messageSend_receiveEvent_705295 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_530351 = null;
		Message __DEC_messageReceive_sendEvent_530351 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_166834 = null;
		Message __DEC_messageSend_sendEvent_166834 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_489598 = null;
		MessageEnd __DEC_message_message_489598 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterInteractionToLine = null;
		Lifeline line = null;
		Interaction interaction = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_interaction is really bound
			JavaSDM.ensure(_edge_interaction != null);
			// bind object
			_TmpObject = _edge_interaction.getTrg();

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;

			// iterate to-many link lifeline from interaction to line
			fujaba__Success = false;

			fujaba__IterInteractionToLine = new ArrayList(
					interaction.getLifeline()).iterator();

			while (fujaba__IterInteractionToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterInteractionToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to messageReceive
							fujaba__Success = false;

							fujaba__IterLineToMessageReceive = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToMessageReceive.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToMessageReceive
											.next();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageReceive.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link receiveEvent from message to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(message.getReceiveEvent()));

									// check link src from _edge_interaction to message
									JavaSDM.ensure(message
											.equals(_edge_interaction.getSrc()));

									// iterate to-many link covered from line to messageSend
									fujaba__Success = false;

									fujaba__IterLineToMessageSend = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageSend to message
											JavaSDM.ensure(message
													.equals(messageSend
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// iterate to-many link covered from line to operand
											fujaba__Success = false;

											fujaba__IterLineToOperand = new ArrayList(
													line.getCoveredBy())
													.iterator();

											while (fujaba__IterLineToOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterLineToOperand
															.next();

													// ensure correct type and really bound of object operand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													operand = (InteractionOperand) _TmpObject;
													// bind object
													guard = operand.getGuard();

													// check object guard is really bound
													JavaSDM.ensure(guard != null);

													// check link operand from operand to combo
													JavaSDM.ensure(combo.equals(operand
															.eContainer()));

													// bind object
													_TmpObject = guard
															.getSpecification();

													// ensure correct type and really bound of object spec
													JavaSDM.ensure(_TmpObject instanceof LiteralString);
													spec = (LiteralString) _TmpObject;

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_469790 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_469790 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_469790 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_469790 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_469790
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_853607 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_853607 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_853607 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_853607 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_853607
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_699432 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_699432 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_699432 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_699432 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_699432
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_581216 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_581216 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_581216 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_581216 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_581216
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_289669 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_289669 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_289669 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_289669 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_289669
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_651619 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_651619 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_651619 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_651619 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_651619
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_518391 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_518391 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_518391 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_518391 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_518391
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_604328 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_604328 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_604328 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_604328 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_604328
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_909927 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_909927 is really bound
															JavaSDM.ensure(__DEC_guard_guard_909927 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_909927
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_909927 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_909927
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_569730 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_569730 is really bound
															JavaSDM.ensure(__DEC_operand_operand_569730 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_569730
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_569730 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_569730
																	.equals(combo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_694110 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_694110 is really bound
															JavaSDM.ensure(__DEC_spec_specification_694110 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_694110
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_694110 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_694110
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link covered from combo to __DEC_combo_coveredBy_255355
															fujaba__Success = false;

															fujaba__IterComboTo__DEC_combo_coveredBy_255355 = new ArrayList(
																	combo.getCovered())
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterComboTo__DEC_combo_coveredBy_255355
																			.hasNext()) {
																try {
																	__DEC_combo_coveredBy_255355 = (Lifeline) fujaba__IterComboTo__DEC_combo_coveredBy_255355
																			.next();

																	// check object __DEC_combo_coveredBy_255355 is really bound
																	JavaSDM.ensure(__DEC_combo_coveredBy_255355 != null);
																	// check isomorphic binding between objects __DEC_combo_coveredBy_255355 and line 
																	JavaSDM.ensure(!__DEC_combo_coveredBy_255355
																			.equals(line));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_457430
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_457430 = new ArrayList(
																	messageReceive
																			.getCovered())
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_457430
																			.hasNext()) {
																try {
																	__DEC_messageReceive_coveredBy_457430 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_457430
																			.next();

																	// check object __DEC_messageReceive_coveredBy_457430 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_coveredBy_457430 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_coveredBy_457430 and line 
																	JavaSDM.ensure(!__DEC_messageReceive_coveredBy_457430
																			.equals(line));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_699151
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_699151 = new ArrayList(
																	messageSend
																			.getCovered())
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_699151
																			.hasNext()) {
																try {
																	__DEC_messageSend_coveredBy_699151 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_699151
																			.next();

																	// check object __DEC_messageSend_coveredBy_699151 is really bound
																	JavaSDM.ensure(__DEC_messageSend_coveredBy_699151 != null);
																	// check isomorphic binding between objects __DEC_messageSend_coveredBy_699151 and line 
																	JavaSDM.ensure(!__DEC_messageSend_coveredBy_699151
																			.equals(line));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link covered from operand to __DEC_operand_coveredBy_565145
															fujaba__Success = false;

															fujaba__IterOperandTo__DEC_operand_coveredBy_565145 = new ArrayList(
																	operand.getCovered())
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterOperandTo__DEC_operand_coveredBy_565145
																			.hasNext()) {
																try {
																	__DEC_operand_coveredBy_565145 = (Lifeline) fujaba__IterOperandTo__DEC_operand_coveredBy_565145
																			.next();

																	// check object __DEC_operand_coveredBy_565145 is really bound
																	JavaSDM.ensure(__DEC_operand_coveredBy_565145 != null);
																	// check isomorphic binding between objects __DEC_operand_coveredBy_565145 and line 
																	JavaSDM.ensure(!__DEC_operand_coveredBy_565145
																			.equals(line));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_954241
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_954241 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_954241
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_954241 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_954241
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_954241 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_954241 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_954241 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_954241
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_705295
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_705295 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_705295
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_705295 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_705295
																			.next();

																	// check object __DEC_messageSend_receiveEvent_705295 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_705295 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_705295 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_705295
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_530351
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_530351 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_530351
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_530351 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_530351
																			.next();

																	// check object __DEC_messageReceive_sendEvent_530351 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_530351 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_530351 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_530351
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_166834
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_166834 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_166834
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_166834 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_166834
																			.next();

																	// check object __DEC_messageSend_sendEvent_166834 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_166834 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_166834 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_166834
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_489598
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_489598 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_489598
																			.hasNext()) {
																try {
																	__DEC_message_message_489598 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_489598
																			.next();

																	// check object __DEC_message_message_489598 is really bound
																	JavaSDM.ensure(__DEC_message_message_489598 != null);
																	// check isomorphic binding between objects __DEC_message_message_489598 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_489598
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_489598 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_489598
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_interaction is really bound
														JavaSDM.ensure(_edge_interaction != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_interaction to message
														JavaSDM.ensure(message
																.equals(_edge_interaction
																		.getSrc()));

														// check link trg from _edge_interaction to interaction
														JavaSDM.ensure(interaction
																.equals(_edge_interaction
																		.getTrg()));

														// check link covered from line to combo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(combo));

														// check link covered from messageReceive to line
														JavaSDM.ensure(messageReceive
																.getCovered()
																.contains(line));

														// check link covered from messageSend to line
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(line));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		combo,
																		operand,
																		guard,
																		spec,
																		line,
																		message,
																		interaction,
																		messageSend,
																		messageReceive);
														if (fujaba__Success) {
															// statement node ''
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_52(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_911900 = null;
		InteractionOperand __DEC_combo_fragment_260051 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_906874 = null;
		InteractionOperand __DEC_messageReceive_fragment_119923 = null;
		Interaction __DEC_messageSend_enclosingInteraction_710351 = null;
		InteractionOperand __DEC_messageSend_fragment_188170 = null;
		Interaction __DEC_operand_enclosingInteraction_43377 = null;
		InteractionOperand __DEC_operand_fragment_817857 = null;
		InteractionOperand __DEC_guard_guard_485941 = null;
		CombinedFragment __DEC_operand_operand_311684 = null;
		Constraint __DEC_spec_specification_576513 = null;
		Iterator fujaba__IterComboTo__DEC_combo_coveredBy_824128 = null;
		Lifeline __DEC_combo_coveredBy_824128 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_899274 = null;
		Lifeline __DEC_messageReceive_coveredBy_899274 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_682190 = null;
		Lifeline __DEC_messageSend_coveredBy_682190 = null;
		Iterator fujaba__IterOperandTo__DEC_operand_coveredBy_147443 = null;
		Lifeline __DEC_operand_coveredBy_147443 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_316764 = null;
		Message __DEC_messageReceive_receiveEvent_316764 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_814762 = null;
		Message __DEC_messageSend_receiveEvent_814762 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_406605 = null;
		Message __DEC_messageReceive_sendEvent_406605 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_653130 = null;
		Message __DEC_messageSend_sendEvent_653130 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_619717 = null;
		MessageEnd __DEC_message_message_619717 = null;
		Match match = null;
		Iterator fujaba__IterInteractionTo_edge_interaction = null;
		EMoflonEdge _edge_interaction = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterInteractionToLine = null;
		Lifeline line = null;
		Interaction interaction = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;

			// iterate to-many link lifeline from interaction to line
			fujaba__Success = false;

			fujaba__IterInteractionToLine = new ArrayList(
					interaction.getLifeline()).iterator();

			while (fujaba__IterInteractionToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterInteractionToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to messageReceive
							fujaba__Success = false;

							fujaba__IterLineToMessageReceive = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToMessageReceive.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToMessageReceive
											.next();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;
									// iterate to-many link covered from line to messageSend
									fujaba__Success = false;

									fujaba__IterLineToMessageSend = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// check link trg from _edge_message to message
											JavaSDM.ensure(message
													.equals(_edge_message
															.getTrg()));

											// iterate to-many link covered from line to operand
											fujaba__Success = false;

											fujaba__IterLineToOperand = new ArrayList(
													line.getCoveredBy())
													.iterator();

											while (fujaba__IterLineToOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterLineToOperand
															.next();

													// ensure correct type and really bound of object operand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													operand = (InteractionOperand) _TmpObject;
													// bind object
													guard = operand.getGuard();

													// check object guard is really bound
													JavaSDM.ensure(guard != null);

													// check link operand from operand to combo
													JavaSDM.ensure(combo.equals(operand
															.eContainer()));

													// bind object
													_TmpObject = guard
															.getSpecification();

													// ensure correct type and really bound of object spec
													JavaSDM.ensure(_TmpObject instanceof LiteralString);
													spec = (LiteralString) _TmpObject;

													// iterate to-many link trg from interaction to _edge_interaction
													fujaba__Success = false;

													fujaba__IterInteractionTo_edge_interaction = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			interaction,
																			EMoflonEdge.class,
																			"trg"))
															.iterator();

													while (fujaba__IterInteractionTo_edge_interaction
															.hasNext()) {
														try {
															_edge_interaction = (EMoflonEdge) fujaba__IterInteractionTo_edge_interaction
																	.next();

															// check object _edge_interaction is really bound
															JavaSDM.ensure(_edge_interaction != null);
															// check isomorphic binding between objects _edge_message and _edge_interaction 
															JavaSDM.ensure(!_edge_message
																	.equals(_edge_interaction));

															// check link src from _edge_interaction to message
															JavaSDM.ensure(message
																	.equals(_edge_interaction
																			.getSrc()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_911900 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_911900 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_911900 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_911900 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_911900
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_260051 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_260051 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_260051 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_260051 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_260051
																			.equals(operand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_906874 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_906874 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_906874 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_906874 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_906874
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_119923 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_119923 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_119923 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_119923 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_119923
																			.equals(operand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_710351 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_710351 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_710351 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_710351 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_710351
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_188170 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_188170 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_188170 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_188170 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_188170
																			.equals(operand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_43377 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_43377 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_43377 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_43377 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_43377
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_817857 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_817857 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_817857 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_817857 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_817857
																			.equals(operand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_485941 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_485941 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_485941 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_485941
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_485941 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_485941
																			.equals(operand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_311684 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_311684 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_311684 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_311684
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_311684 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_311684
																			.equals(combo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_576513 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_576513 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_576513 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_576513
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_576513 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_576513
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link covered from combo to __DEC_combo_coveredBy_824128
																	fujaba__Success = false;

																	fujaba__IterComboTo__DEC_combo_coveredBy_824128 = new ArrayList(
																			combo.getCovered())
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterComboTo__DEC_combo_coveredBy_824128
																					.hasNext()) {
																		try {
																			__DEC_combo_coveredBy_824128 = (Lifeline) fujaba__IterComboTo__DEC_combo_coveredBy_824128
																					.next();

																			// check object __DEC_combo_coveredBy_824128 is really bound
																			JavaSDM.ensure(__DEC_combo_coveredBy_824128 != null);
																			// check isomorphic binding between objects __DEC_combo_coveredBy_824128 and line 
																			JavaSDM.ensure(!__DEC_combo_coveredBy_824128
																					.equals(line));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_899274
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_899274 = new ArrayList(
																			messageReceive
																					.getCovered())
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_899274
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_coveredBy_899274 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_899274
																					.next();

																			// check object __DEC_messageReceive_coveredBy_899274 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_coveredBy_899274 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_coveredBy_899274 and line 
																			JavaSDM.ensure(!__DEC_messageReceive_coveredBy_899274
																					.equals(line));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_682190
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_682190 = new ArrayList(
																			messageSend
																					.getCovered())
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_682190
																					.hasNext()) {
																		try {
																			__DEC_messageSend_coveredBy_682190 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_682190
																					.next();

																			// check object __DEC_messageSend_coveredBy_682190 is really bound
																			JavaSDM.ensure(__DEC_messageSend_coveredBy_682190 != null);
																			// check isomorphic binding between objects __DEC_messageSend_coveredBy_682190 and line 
																			JavaSDM.ensure(!__DEC_messageSend_coveredBy_682190
																					.equals(line));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link covered from operand to __DEC_operand_coveredBy_147443
																	fujaba__Success = false;

																	fujaba__IterOperandTo__DEC_operand_coveredBy_147443 = new ArrayList(
																			operand.getCovered())
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterOperandTo__DEC_operand_coveredBy_147443
																					.hasNext()) {
																		try {
																			__DEC_operand_coveredBy_147443 = (Lifeline) fujaba__IterOperandTo__DEC_operand_coveredBy_147443
																					.next();

																			// check object __DEC_operand_coveredBy_147443 is really bound
																			JavaSDM.ensure(__DEC_operand_coveredBy_147443 != null);
																			// check isomorphic binding between objects __DEC_operand_coveredBy_147443 and line 
																			JavaSDM.ensure(!__DEC_operand_coveredBy_147443
																					.equals(line));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_316764
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_316764 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_316764
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_316764 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_316764
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_316764 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_316764 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_316764 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_316764
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_814762
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_814762 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_814762
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_814762 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_814762
																					.next();

																			// check object __DEC_messageSend_receiveEvent_814762 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_814762 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_814762 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_814762
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_406605
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_406605 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_406605
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_406605 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_406605
																					.next();

																			// check object __DEC_messageReceive_sendEvent_406605 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_406605 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_406605 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_406605
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_653130
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_653130 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_653130
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_653130 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_653130
																					.next();

																			// check object __DEC_messageSend_sendEvent_653130 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_653130 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_653130 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_653130
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_619717
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_619717 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_619717
																					.hasNext()) {
																		try {
																			__DEC_message_message_619717 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_619717
																					.next();

																			// check object __DEC_message_message_619717 is really bound
																			JavaSDM.ensure(__DEC_message_message_619717 != null);
																			// check isomorphic binding between objects __DEC_message_message_619717 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_619717
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_619717 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_619717
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_interaction is really bound
																JavaSDM.ensure(_edge_interaction != null);
																// check object _edge_message is really bound
																JavaSDM.ensure(_edge_message != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check isomorphic binding between objects _edge_message and _edge_interaction 
																JavaSDM.ensure(!_edge_message
																		.equals(_edge_interaction));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(combo
																		.equals(operand
																				.eContainer()));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_interaction to message
																JavaSDM.ensure(message
																		.equals(_edge_interaction
																				.getSrc()));

																// check link src from _edge_message to interaction
																JavaSDM.ensure(interaction
																		.equals(_edge_message
																				.getSrc()));

																// check link trg from _edge_interaction to interaction
																JavaSDM.ensure(interaction
																		.equals(_edge_interaction
																				.getTrg()));

																// check link trg from _edge_message to message
																JavaSDM.ensure(message
																		.equals(_edge_message
																				.getTrg()));

																// check link covered from line to combo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				combo));

																// check link covered from messageReceive to line
																JavaSDM.ensure(messageReceive
																		.getCovered()
																		.contains(
																				line));

																// check link covered from messageSend to line
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				line));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				combo,
																				operand,
																				guard,
																				spec,
																				line,
																				message,
																				interaction,
																				messageSend,
																				messageReceive);
																if (fujaba__Success) {
																	// statement node ''
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_53(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_542315 = null;
		InteractionOperand __DEC_combo_fragment_556277 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_760300 = null;
		InteractionOperand __DEC_messageReceive_fragment_336686 = null;
		Interaction __DEC_messageSend_enclosingInteraction_967376 = null;
		InteractionOperand __DEC_messageSend_fragment_268317 = null;
		Interaction __DEC_operand_enclosingInteraction_547858 = null;
		InteractionOperand __DEC_operand_fragment_623170 = null;
		InteractionOperand __DEC_guard_guard_617741 = null;
		CombinedFragment __DEC_operand_operand_204143 = null;
		Constraint __DEC_spec_specification_752700 = null;
		Iterator fujaba__IterComboTo__DEC_combo_coveredBy_600828 = null;
		Lifeline __DEC_combo_coveredBy_600828 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_321102 = null;
		Lifeline __DEC_messageReceive_coveredBy_321102 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_535084 = null;
		Lifeline __DEC_messageSend_coveredBy_535084 = null;
		Iterator fujaba__IterOperandTo__DEC_operand_coveredBy_564664 = null;
		Lifeline __DEC_operand_coveredBy_564664 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_148588 = null;
		Message __DEC_messageReceive_receiveEvent_148588 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_573646 = null;
		Message __DEC_messageSend_receiveEvent_573646 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_621656 = null;
		Message __DEC_messageReceive_sendEvent_621656 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_827955 = null;
		Message __DEC_messageSend_sendEvent_827955 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_134107 = null;
		MessageEnd __DEC_message_message_134107 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Iterator fujaba__IterMessageSendToLine = null;
		Lifeline line = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// check link trg from _edge_message to message
			JavaSDM.ensure(message.equals(_edge_message.getTrg()));

			// iterate to-many link covered from messageSend to line
			fujaba__Success = false;

			fujaba__IterMessageSendToLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageSendToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to messageReceive
							fujaba__Success = false;

							fujaba__IterLineToMessageReceive = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToMessageReceive.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToMessageReceive
											.next();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;
									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link receiveEvent from message to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(message.getReceiveEvent()));

									// iterate to-many link covered from line to operand
									fujaba__Success = false;

									fujaba__IterLineToOperand = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToOperand.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// check link operand from operand to combo
											JavaSDM.ensure(combo.equals(operand
													.eContainer()));

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_542315 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_542315 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_542315 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_542315 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_542315
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_556277 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_556277 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_556277 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_556277 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_556277
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_760300 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_760300 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_760300 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_760300 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_760300
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_336686 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_336686 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_336686 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_336686 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_336686
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_967376 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_967376 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_967376 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_967376 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_967376
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_268317 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_268317 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_268317 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_268317 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_268317
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_547858 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_547858 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_547858 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_547858 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_547858
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_623170 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_623170 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_623170 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_623170 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_623170
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_617741 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_617741 is really bound
													JavaSDM.ensure(__DEC_guard_guard_617741 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_617741
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_617741 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_617741
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_204143 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_204143 is really bound
													JavaSDM.ensure(__DEC_operand_operand_204143 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_204143
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_204143 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_204143
															.equals(combo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_752700 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_752700 is really bound
													JavaSDM.ensure(__DEC_spec_specification_752700 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_752700
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_752700 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_752700
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from combo to __DEC_combo_coveredBy_600828
													fujaba__Success = false;

													fujaba__IterComboTo__DEC_combo_coveredBy_600828 = new ArrayList(
															combo.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterComboTo__DEC_combo_coveredBy_600828
																	.hasNext()) {
														try {
															__DEC_combo_coveredBy_600828 = (Lifeline) fujaba__IterComboTo__DEC_combo_coveredBy_600828
																	.next();

															// check object __DEC_combo_coveredBy_600828 is really bound
															JavaSDM.ensure(__DEC_combo_coveredBy_600828 != null);
															// check isomorphic binding between objects __DEC_combo_coveredBy_600828 and line 
															JavaSDM.ensure(!__DEC_combo_coveredBy_600828
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_321102
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_321102 = new ArrayList(
															messageReceive
																	.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_321102
																	.hasNext()) {
														try {
															__DEC_messageReceive_coveredBy_321102 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_321102
																	.next();

															// check object __DEC_messageReceive_coveredBy_321102 is really bound
															JavaSDM.ensure(__DEC_messageReceive_coveredBy_321102 != null);
															// check isomorphic binding between objects __DEC_messageReceive_coveredBy_321102 and line 
															JavaSDM.ensure(!__DEC_messageReceive_coveredBy_321102
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_535084
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_535084 = new ArrayList(
															messageSend
																	.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_535084
																	.hasNext()) {
														try {
															__DEC_messageSend_coveredBy_535084 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_535084
																	.next();

															// check object __DEC_messageSend_coveredBy_535084 is really bound
															JavaSDM.ensure(__DEC_messageSend_coveredBy_535084 != null);
															// check isomorphic binding between objects __DEC_messageSend_coveredBy_535084 and line 
															JavaSDM.ensure(!__DEC_messageSend_coveredBy_535084
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from operand to __DEC_operand_coveredBy_564664
													fujaba__Success = false;

													fujaba__IterOperandTo__DEC_operand_coveredBy_564664 = new ArrayList(
															operand.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterOperandTo__DEC_operand_coveredBy_564664
																	.hasNext()) {
														try {
															__DEC_operand_coveredBy_564664 = (Lifeline) fujaba__IterOperandTo__DEC_operand_coveredBy_564664
																	.next();

															// check object __DEC_operand_coveredBy_564664 is really bound
															JavaSDM.ensure(__DEC_operand_coveredBy_564664 != null);
															// check isomorphic binding between objects __DEC_operand_coveredBy_564664 and line 
															JavaSDM.ensure(!__DEC_operand_coveredBy_564664
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_148588
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_148588 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_148588
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_148588 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_148588
																	.next();

															// check object __DEC_messageReceive_receiveEvent_148588 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_148588 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_148588 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_148588
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_573646
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_573646 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_573646
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_573646 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_573646
																	.next();

															// check object __DEC_messageSend_receiveEvent_573646 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_573646 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_573646 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_573646
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_621656
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_621656 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_621656
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_621656 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_621656
																	.next();

															// check object __DEC_messageReceive_sendEvent_621656 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_621656 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_621656 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_621656
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_827955
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_827955 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_827955
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_827955 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_827955
																	.next();

															// check object __DEC_messageSend_sendEvent_827955 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_827955 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_827955 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_827955
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_134107
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_134107 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_134107
																	.hasNext()) {
														try {
															__DEC_message_message_134107 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_134107
																	.next();

															// check object __DEC_message_message_134107 is really bound
															JavaSDM.ensure(__DEC_message_message_134107 != null);
															// check isomorphic binding between objects __DEC_message_message_134107 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_134107
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_134107 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_134107
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_message is really bound
												JavaSDM.ensure(_edge_message != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_message to messageSend
												JavaSDM.ensure(messageSend
														.equals(_edge_message
																.getSrc()));

												// check link trg from _edge_message to message
												JavaSDM.ensure(message
														.equals(_edge_message
																.getTrg()));

												// check link covered from line to combo
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(combo));

												// check link covered from messageReceive to line
												JavaSDM.ensure(messageReceive
														.getCovered().contains(
																line));

												// check link covered from messageSend to line
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																line));

												// check link covered from line to operand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(operand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, combo,
																operand, guard,
																spec, line,
																message,
																interaction,
																messageSend,
																messageReceive);
												if (fujaba__Success) {
													// statement node ''
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_54(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_494504 = null;
		InteractionOperand __DEC_combo_fragment_392594 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_247453 = null;
		InteractionOperand __DEC_messageReceive_fragment_364158 = null;
		Interaction __DEC_messageSend_enclosingInteraction_475579 = null;
		InteractionOperand __DEC_messageSend_fragment_867565 = null;
		Interaction __DEC_operand_enclosingInteraction_368031 = null;
		InteractionOperand __DEC_operand_fragment_979904 = null;
		InteractionOperand __DEC_guard_guard_584179 = null;
		CombinedFragment __DEC_operand_operand_898460 = null;
		Constraint __DEC_spec_specification_748967 = null;
		Iterator fujaba__IterComboTo__DEC_combo_coveredBy_721642 = null;
		Lifeline __DEC_combo_coveredBy_721642 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_837531 = null;
		Lifeline __DEC_messageReceive_coveredBy_837531 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_159301 = null;
		Lifeline __DEC_messageSend_coveredBy_159301 = null;
		Iterator fujaba__IterOperandTo__DEC_operand_coveredBy_106421 = null;
		Lifeline __DEC_operand_coveredBy_106421 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_457188 = null;
		Message __DEC_messageReceive_receiveEvent_457188 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_617949 = null;
		Message __DEC_messageSend_receiveEvent_617949 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_271663 = null;
		Message __DEC_messageReceive_sendEvent_271663 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_6639 = null;
		Message __DEC_messageSend_sendEvent_6639 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_135197 = null;
		MessageEnd __DEC_message_message_135197 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link message from message to interaction
			JavaSDM.ensure(interaction.equals(message.getInteraction()));

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// check link covered from messageSend to line
			JavaSDM.ensure(messageSend.getCovered().contains(line));

			// iterate to-many link covered from line to combo
			fujaba__Success = false;

			fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from line to messageReceive
					fujaba__Success = false;

					fujaba__IterLineToMessageReceive = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_494504 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_494504 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_494504 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_494504 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_494504
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_392594 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_392594 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_392594 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_392594 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_392594
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_247453 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_247453 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_247453 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_247453 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_247453
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_364158 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_364158 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_364158 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_364158 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_364158
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_475579 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_475579 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_475579 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_475579 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_475579
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_867565 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_867565 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_867565 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_867565 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_867565
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_368031 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_368031 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_368031 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_368031 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_368031
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_979904 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_979904 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_979904 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_979904 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_979904
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_584179 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_584179 is really bound
											JavaSDM.ensure(__DEC_guard_guard_584179 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_584179
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_584179 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_584179
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_898460 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_898460 is really bound
											JavaSDM.ensure(__DEC_operand_operand_898460 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_898460
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_898460 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_898460
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_748967 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_748967 is really bound
											JavaSDM.ensure(__DEC_spec_specification_748967 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_748967
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_748967 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_748967
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from combo to __DEC_combo_coveredBy_721642
											fujaba__Success = false;

											fujaba__IterComboTo__DEC_combo_coveredBy_721642 = new ArrayList(
													combo.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterComboTo__DEC_combo_coveredBy_721642
															.hasNext()) {
												try {
													__DEC_combo_coveredBy_721642 = (Lifeline) fujaba__IterComboTo__DEC_combo_coveredBy_721642
															.next();

													// check object __DEC_combo_coveredBy_721642 is really bound
													JavaSDM.ensure(__DEC_combo_coveredBy_721642 != null);
													// check isomorphic binding between objects __DEC_combo_coveredBy_721642 and line 
													JavaSDM.ensure(!__DEC_combo_coveredBy_721642
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_837531
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_837531 = new ArrayList(
													messageReceive.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_837531
															.hasNext()) {
												try {
													__DEC_messageReceive_coveredBy_837531 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_837531
															.next();

													// check object __DEC_messageReceive_coveredBy_837531 is really bound
													JavaSDM.ensure(__DEC_messageReceive_coveredBy_837531 != null);
													// check isomorphic binding between objects __DEC_messageReceive_coveredBy_837531 and line 
													JavaSDM.ensure(!__DEC_messageReceive_coveredBy_837531
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_159301
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_159301 = new ArrayList(
													messageSend.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_159301
															.hasNext()) {
												try {
													__DEC_messageSend_coveredBy_159301 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_159301
															.next();

													// check object __DEC_messageSend_coveredBy_159301 is really bound
													JavaSDM.ensure(__DEC_messageSend_coveredBy_159301 != null);
													// check isomorphic binding between objects __DEC_messageSend_coveredBy_159301 and line 
													JavaSDM.ensure(!__DEC_messageSend_coveredBy_159301
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from operand to __DEC_operand_coveredBy_106421
											fujaba__Success = false;

											fujaba__IterOperandTo__DEC_operand_coveredBy_106421 = new ArrayList(
													operand.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterOperandTo__DEC_operand_coveredBy_106421
															.hasNext()) {
												try {
													__DEC_operand_coveredBy_106421 = (Lifeline) fujaba__IterOperandTo__DEC_operand_coveredBy_106421
															.next();

													// check object __DEC_operand_coveredBy_106421 is really bound
													JavaSDM.ensure(__DEC_operand_coveredBy_106421 != null);
													// check isomorphic binding between objects __DEC_operand_coveredBy_106421 and line 
													JavaSDM.ensure(!__DEC_operand_coveredBy_106421
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_457188
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_457188 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_457188
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_457188 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_457188
															.next();

													// check object __DEC_messageReceive_receiveEvent_457188 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_457188 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_457188 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_457188
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_617949
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_617949 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_617949
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_617949 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_617949
															.next();

													// check object __DEC_messageSend_receiveEvent_617949 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_617949 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_617949 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_617949
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_271663
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_271663 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_271663
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_271663 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_271663
															.next();

													// check object __DEC_messageReceive_sendEvent_271663 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_271663 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_271663 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_271663
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_6639
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_6639 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_6639
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_6639 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_6639
															.next();

													// check object __DEC_messageSend_sendEvent_6639 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_6639 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_6639 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_6639
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_135197
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_135197 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_135197
															.hasNext()) {
												try {
													__DEC_message_message_135197 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_135197
															.next();

													// check object __DEC_message_message_135197 is really bound
													JavaSDM.ensure(__DEC_message_message_135197 != null);
													// check isomorphic binding between objects __DEC_message_message_135197 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_135197
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_135197 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_135197
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_coveredBy is really bound
										JavaSDM.ensure(_edge_coveredBy != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_coveredBy to line
										JavaSDM.ensure(line
												.equals(_edge_coveredBy
														.getSrc()));

										// check link trg from _edge_coveredBy to messageSend
										JavaSDM.ensure(messageSend
												.equals(_edge_coveredBy
														.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from line to operand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(operand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, operand, guard,
														spec, line, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node ''
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_55(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_45830 = null;
		InteractionOperand __DEC_combo_fragment_25282 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_859475 = null;
		InteractionOperand __DEC_messageReceive_fragment_955507 = null;
		Interaction __DEC_messageSend_enclosingInteraction_425950 = null;
		InteractionOperand __DEC_messageSend_fragment_900129 = null;
		Interaction __DEC_operand_enclosingInteraction_40430 = null;
		InteractionOperand __DEC_operand_fragment_210258 = null;
		InteractionOperand __DEC_guard_guard_196602 = null;
		CombinedFragment __DEC_operand_operand_149946 = null;
		Constraint __DEC_spec_specification_924823 = null;
		Iterator fujaba__IterComboTo__DEC_combo_coveredBy_17227 = null;
		Lifeline __DEC_combo_coveredBy_17227 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_533800 = null;
		Lifeline __DEC_messageReceive_coveredBy_533800 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_315779 = null;
		Lifeline __DEC_messageSend_coveredBy_315779 = null;
		Iterator fujaba__IterOperandTo__DEC_operand_coveredBy_921458 = null;
		Lifeline __DEC_operand_coveredBy_921458 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_646029 = null;
		Message __DEC_messageReceive_receiveEvent_646029 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_651944 = null;
		Message __DEC_messageSend_receiveEvent_651944 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_411895 = null;
		Message __DEC_messageReceive_sendEvent_411895 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_728852 = null;
		Message __DEC_messageSend_sendEvent_728852 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_445474 = null;
		MessageEnd __DEC_message_message_445474 = null;
		Match match = null;
		Iterator fujaba__IterLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from messageSend to line
			JavaSDM.ensure(messageSend.getCovered().contains(line));

			// iterate to-many link covered from line to combo
			fujaba__Success = false;

			fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from line to messageReceive
					fujaba__Success = false;

					fujaba__IterLineToMessageReceive = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link src from line to _edge_coveredBy
									fujaba__Success = false;

									fujaba__IterLineTo_edge_coveredBy = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(line,
															EMoflonEdge.class,
															"src")).iterator();

									while (fujaba__IterLineTo_edge_coveredBy
											.hasNext()) {
										try {
											_edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy
													.next();

											// check object _edge_coveredBy is really bound
											JavaSDM.ensure(_edge_coveredBy != null);
											// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
											JavaSDM.ensure(!_edge_coveredBy
													.equals(_edge_covered));

											// check link trg from _edge_coveredBy to messageSend
											JavaSDM.ensure(messageSend
													.equals(_edge_coveredBy
															.getTrg()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_45830 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_45830 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_45830 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_45830 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_45830
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_25282 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_25282 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_25282 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_25282 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_25282
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_859475 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_859475 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_859475 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_859475 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_859475
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_955507 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_955507 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_955507 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_955507 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_955507
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_425950 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_425950 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_425950 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_425950 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_425950
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_900129 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_900129 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_900129 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_900129 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_900129
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_40430 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_40430 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_40430 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_40430 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_40430
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_210258 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_210258 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_210258 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_210258 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_210258
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_196602 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_196602 is really bound
													JavaSDM.ensure(__DEC_guard_guard_196602 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_196602
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_196602 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_196602
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_149946 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_149946 is really bound
													JavaSDM.ensure(__DEC_operand_operand_149946 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_149946
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_149946 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_149946
															.equals(combo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_924823 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_924823 is really bound
													JavaSDM.ensure(__DEC_spec_specification_924823 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_924823
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_924823 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_924823
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from combo to __DEC_combo_coveredBy_17227
													fujaba__Success = false;

													fujaba__IterComboTo__DEC_combo_coveredBy_17227 = new ArrayList(
															combo.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterComboTo__DEC_combo_coveredBy_17227
																	.hasNext()) {
														try {
															__DEC_combo_coveredBy_17227 = (Lifeline) fujaba__IterComboTo__DEC_combo_coveredBy_17227
																	.next();

															// check object __DEC_combo_coveredBy_17227 is really bound
															JavaSDM.ensure(__DEC_combo_coveredBy_17227 != null);
															// check isomorphic binding between objects __DEC_combo_coveredBy_17227 and line 
															JavaSDM.ensure(!__DEC_combo_coveredBy_17227
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_533800
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_533800 = new ArrayList(
															messageReceive
																	.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_533800
																	.hasNext()) {
														try {
															__DEC_messageReceive_coveredBy_533800 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_533800
																	.next();

															// check object __DEC_messageReceive_coveredBy_533800 is really bound
															JavaSDM.ensure(__DEC_messageReceive_coveredBy_533800 != null);
															// check isomorphic binding between objects __DEC_messageReceive_coveredBy_533800 and line 
															JavaSDM.ensure(!__DEC_messageReceive_coveredBy_533800
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_315779
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_315779 = new ArrayList(
															messageSend
																	.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_315779
																	.hasNext()) {
														try {
															__DEC_messageSend_coveredBy_315779 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_315779
																	.next();

															// check object __DEC_messageSend_coveredBy_315779 is really bound
															JavaSDM.ensure(__DEC_messageSend_coveredBy_315779 != null);
															// check isomorphic binding between objects __DEC_messageSend_coveredBy_315779 and line 
															JavaSDM.ensure(!__DEC_messageSend_coveredBy_315779
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from operand to __DEC_operand_coveredBy_921458
													fujaba__Success = false;

													fujaba__IterOperandTo__DEC_operand_coveredBy_921458 = new ArrayList(
															operand.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterOperandTo__DEC_operand_coveredBy_921458
																	.hasNext()) {
														try {
															__DEC_operand_coveredBy_921458 = (Lifeline) fujaba__IterOperandTo__DEC_operand_coveredBy_921458
																	.next();

															// check object __DEC_operand_coveredBy_921458 is really bound
															JavaSDM.ensure(__DEC_operand_coveredBy_921458 != null);
															// check isomorphic binding between objects __DEC_operand_coveredBy_921458 and line 
															JavaSDM.ensure(!__DEC_operand_coveredBy_921458
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_646029
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_646029 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_646029
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_646029 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_646029
																	.next();

															// check object __DEC_messageReceive_receiveEvent_646029 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_646029 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_646029 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_646029
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_651944
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_651944 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_651944
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_651944 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_651944
																	.next();

															// check object __DEC_messageSend_receiveEvent_651944 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_651944 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_651944 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_651944
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_411895
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_411895 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_411895
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_411895 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_411895
																	.next();

															// check object __DEC_messageReceive_sendEvent_411895 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_411895 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_411895 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_411895
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_728852
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_728852 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_728852
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_728852 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_728852
																	.next();

															// check object __DEC_messageSend_sendEvent_728852 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_728852 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_728852 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_728852
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_445474
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_445474 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_445474
																	.hasNext()) {
														try {
															__DEC_message_message_445474 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_445474
																	.next();

															// check object __DEC_message_message_445474 is really bound
															JavaSDM.ensure(__DEC_message_message_445474 != null);
															// check isomorphic binding between objects __DEC_message_message_445474 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_445474
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_445474 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_445474
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_covered is really bound
												JavaSDM.ensure(_edge_covered != null);
												// check object _edge_coveredBy is really bound
												JavaSDM.ensure(_edge_coveredBy != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
												JavaSDM.ensure(!_edge_coveredBy
														.equals(_edge_covered));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_covered to messageSend
												JavaSDM.ensure(messageSend
														.equals(_edge_covered
																.getSrc()));

												// check link src from _edge_coveredBy to line
												JavaSDM.ensure(line
														.equals(_edge_coveredBy
																.getSrc()));

												// check link trg from _edge_covered to line
												JavaSDM.ensure(line
														.equals(_edge_covered
																.getTrg()));

												// check link trg from _edge_coveredBy to messageSend
												JavaSDM.ensure(messageSend
														.equals(_edge_coveredBy
																.getTrg()));

												// check link covered from line to combo
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(combo));

												// check link covered from messageReceive to line
												JavaSDM.ensure(messageReceive
														.getCovered().contains(
																line));

												// check link covered from messageSend to line
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																line));

												// check link covered from line to operand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(operand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, combo,
																operand, guard,
																spec, line,
																message,
																interaction,
																messageSend,
																messageReceive);
												if (fujaba__Success) {
													// statement node ''
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_56(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_423372 = null;
		InteractionOperand __DEC_combo_fragment_169797 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_118961 = null;
		InteractionOperand __DEC_messageReceive_fragment_167971 = null;
		Interaction __DEC_messageSend_enclosingInteraction_646849 = null;
		InteractionOperand __DEC_messageSend_fragment_421692 = null;
		Interaction __DEC_operand_enclosingInteraction_689229 = null;
		InteractionOperand __DEC_operand_fragment_212409 = null;
		InteractionOperand __DEC_guard_guard_970776 = null;
		CombinedFragment __DEC_operand_operand_342898 = null;
		Constraint __DEC_spec_specification_335826 = null;
		Iterator fujaba__IterComboTo__DEC_combo_coveredBy_486025 = null;
		Lifeline __DEC_combo_coveredBy_486025 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_604482 = null;
		Lifeline __DEC_messageReceive_coveredBy_604482 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_880427 = null;
		Lifeline __DEC_messageSend_coveredBy_880427 = null;
		Iterator fujaba__IterOperandTo__DEC_operand_coveredBy_974282 = null;
		Lifeline __DEC_operand_coveredBy_974282 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_484177 = null;
		Message __DEC_messageReceive_receiveEvent_484177 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_971523 = null;
		Message __DEC_messageSend_receiveEvent_971523 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_914335 = null;
		Message __DEC_messageReceive_sendEvent_914335 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_863754 = null;
		Message __DEC_messageSend_sendEvent_863754 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_299364 = null;
		MessageEnd __DEC_message_message_299364 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// check link trg from _edge_message to message
			JavaSDM.ensure(message.equals(_edge_message.getTrg()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to messageSend
							fujaba__Success = false;

							fujaba__IterLineToMessageSend = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link message from messageSend to message
									JavaSDM.ensure(message.equals(messageSend
											.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// iterate to-many link covered from line to operand
									fujaba__Success = false;

									fujaba__IterLineToOperand = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToOperand.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// check link operand from operand to combo
											JavaSDM.ensure(combo.equals(operand
													.eContainer()));

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_423372 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_423372 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_423372 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_423372 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_423372
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_169797 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_169797 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_169797 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_169797 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_169797
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_118961 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_118961 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_118961 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_118961 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_118961
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_167971 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_167971 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_167971 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_167971 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_167971
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_646849 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_646849 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_646849 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_646849 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_646849
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_421692 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_421692 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_421692 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_421692 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_421692
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_689229 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_689229 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_689229 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_689229 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_689229
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_212409 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_212409 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_212409 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_212409 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_212409
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_970776 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_970776 is really bound
													JavaSDM.ensure(__DEC_guard_guard_970776 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_970776
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_970776 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_970776
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_342898 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_342898 is really bound
													JavaSDM.ensure(__DEC_operand_operand_342898 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_342898
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_342898 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_342898
															.equals(combo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_335826 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_335826 is really bound
													JavaSDM.ensure(__DEC_spec_specification_335826 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_335826
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_335826 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_335826
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from combo to __DEC_combo_coveredBy_486025
													fujaba__Success = false;

													fujaba__IterComboTo__DEC_combo_coveredBy_486025 = new ArrayList(
															combo.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterComboTo__DEC_combo_coveredBy_486025
																	.hasNext()) {
														try {
															__DEC_combo_coveredBy_486025 = (Lifeline) fujaba__IterComboTo__DEC_combo_coveredBy_486025
																	.next();

															// check object __DEC_combo_coveredBy_486025 is really bound
															JavaSDM.ensure(__DEC_combo_coveredBy_486025 != null);
															// check isomorphic binding between objects __DEC_combo_coveredBy_486025 and line 
															JavaSDM.ensure(!__DEC_combo_coveredBy_486025
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_604482
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_604482 = new ArrayList(
															messageReceive
																	.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_604482
																	.hasNext()) {
														try {
															__DEC_messageReceive_coveredBy_604482 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_604482
																	.next();

															// check object __DEC_messageReceive_coveredBy_604482 is really bound
															JavaSDM.ensure(__DEC_messageReceive_coveredBy_604482 != null);
															// check isomorphic binding between objects __DEC_messageReceive_coveredBy_604482 and line 
															JavaSDM.ensure(!__DEC_messageReceive_coveredBy_604482
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_880427
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_880427 = new ArrayList(
															messageSend
																	.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_880427
																	.hasNext()) {
														try {
															__DEC_messageSend_coveredBy_880427 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_880427
																	.next();

															// check object __DEC_messageSend_coveredBy_880427 is really bound
															JavaSDM.ensure(__DEC_messageSend_coveredBy_880427 != null);
															// check isomorphic binding between objects __DEC_messageSend_coveredBy_880427 and line 
															JavaSDM.ensure(!__DEC_messageSend_coveredBy_880427
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from operand to __DEC_operand_coveredBy_974282
													fujaba__Success = false;

													fujaba__IterOperandTo__DEC_operand_coveredBy_974282 = new ArrayList(
															operand.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterOperandTo__DEC_operand_coveredBy_974282
																	.hasNext()) {
														try {
															__DEC_operand_coveredBy_974282 = (Lifeline) fujaba__IterOperandTo__DEC_operand_coveredBy_974282
																	.next();

															// check object __DEC_operand_coveredBy_974282 is really bound
															JavaSDM.ensure(__DEC_operand_coveredBy_974282 != null);
															// check isomorphic binding between objects __DEC_operand_coveredBy_974282 and line 
															JavaSDM.ensure(!__DEC_operand_coveredBy_974282
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_484177
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_484177 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_484177
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_484177 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_484177
																	.next();

															// check object __DEC_messageReceive_receiveEvent_484177 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_484177 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_484177 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_484177
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_971523
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_971523 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_971523
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_971523 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_971523
																	.next();

															// check object __DEC_messageSend_receiveEvent_971523 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_971523 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_971523 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_971523
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_914335
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_914335 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_914335
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_914335 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_914335
																	.next();

															// check object __DEC_messageReceive_sendEvent_914335 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_914335 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_914335 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_914335
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_863754
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_863754 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_863754
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_863754 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_863754
																	.next();

															// check object __DEC_messageSend_sendEvent_863754 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_863754 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_863754 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_863754
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_299364
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_299364 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_299364
																	.hasNext()) {
														try {
															__DEC_message_message_299364 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_299364
																	.next();

															// check object __DEC_message_message_299364 is really bound
															JavaSDM.ensure(__DEC_message_message_299364 != null);
															// check isomorphic binding between objects __DEC_message_message_299364 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_299364
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_299364 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_299364
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_message is really bound
												JavaSDM.ensure(_edge_message != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_message to messageReceive
												JavaSDM.ensure(messageReceive
														.equals(_edge_message
																.getSrc()));

												// check link trg from _edge_message to message
												JavaSDM.ensure(message
														.equals(_edge_message
																.getTrg()));

												// check link covered from line to combo
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(combo));

												// check link covered from messageReceive to line
												JavaSDM.ensure(messageReceive
														.getCovered().contains(
																line));

												// check link covered from messageSend to line
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																line));

												// check link covered from line to operand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(operand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, combo,
																operand, guard,
																spec, line,
																message,
																interaction,
																messageSend,
																messageReceive);
												if (fujaba__Success) {
													// statement node ''
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_57(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_483756 = null;
		InteractionOperand __DEC_combo_fragment_478928 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_464200 = null;
		InteractionOperand __DEC_messageReceive_fragment_979689 = null;
		Interaction __DEC_messageSend_enclosingInteraction_483829 = null;
		InteractionOperand __DEC_messageSend_fragment_131453 = null;
		Interaction __DEC_operand_enclosingInteraction_138350 = null;
		InteractionOperand __DEC_operand_fragment_13102 = null;
		InteractionOperand __DEC_guard_guard_421315 = null;
		CombinedFragment __DEC_operand_operand_613084 = null;
		Constraint __DEC_spec_specification_918330 = null;
		Iterator fujaba__IterComboTo__DEC_combo_coveredBy_692592 = null;
		Lifeline __DEC_combo_coveredBy_692592 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_762822 = null;
		Lifeline __DEC_messageReceive_coveredBy_762822 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_791673 = null;
		Lifeline __DEC_messageSend_coveredBy_791673 = null;
		Iterator fujaba__IterOperandTo__DEC_operand_coveredBy_946976 = null;
		Lifeline __DEC_operand_coveredBy_946976 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_787934 = null;
		Message __DEC_messageReceive_receiveEvent_787934 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_290376 = null;
		Message __DEC_messageSend_receiveEvent_290376 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_108145 = null;
		Message __DEC_messageReceive_sendEvent_108145 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_267286 = null;
		Message __DEC_messageSend_sendEvent_267286 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_131570 = null;
		MessageEnd __DEC_message_message_131570 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link covered from messageReceive to line
			JavaSDM.ensure(messageReceive.getCovered().contains(line));

			// iterate to-many link covered from line to combo
			fujaba__Success = false;

			fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from line to messageSend
					fujaba__Success = false;

					fujaba__IterLineToMessageSend = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageSend.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// bind object
							message = messageSend.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_483756 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_483756 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_483756 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_483756 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_483756
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_478928 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_478928 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_478928 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_478928 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_478928
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_464200 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_464200 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_464200 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_464200 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_464200
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_979689 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_979689 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_979689 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_979689 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_979689
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_483829 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_483829 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_483829 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_483829 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_483829
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_131453 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_131453 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_131453 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_131453 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_131453
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_138350 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_138350 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_138350 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_138350 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_138350
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_13102 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_13102 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_13102 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_13102 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_13102
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_421315 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_421315 is really bound
											JavaSDM.ensure(__DEC_guard_guard_421315 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_421315
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_421315 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_421315
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_613084 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_613084 is really bound
											JavaSDM.ensure(__DEC_operand_operand_613084 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_613084
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_613084 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_613084
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_918330 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_918330 is really bound
											JavaSDM.ensure(__DEC_spec_specification_918330 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_918330
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_918330 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_918330
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from combo to __DEC_combo_coveredBy_692592
											fujaba__Success = false;

											fujaba__IterComboTo__DEC_combo_coveredBy_692592 = new ArrayList(
													combo.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterComboTo__DEC_combo_coveredBy_692592
															.hasNext()) {
												try {
													__DEC_combo_coveredBy_692592 = (Lifeline) fujaba__IterComboTo__DEC_combo_coveredBy_692592
															.next();

													// check object __DEC_combo_coveredBy_692592 is really bound
													JavaSDM.ensure(__DEC_combo_coveredBy_692592 != null);
													// check isomorphic binding between objects __DEC_combo_coveredBy_692592 and line 
													JavaSDM.ensure(!__DEC_combo_coveredBy_692592
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_762822
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_762822 = new ArrayList(
													messageReceive.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_762822
															.hasNext()) {
												try {
													__DEC_messageReceive_coveredBy_762822 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_762822
															.next();

													// check object __DEC_messageReceive_coveredBy_762822 is really bound
													JavaSDM.ensure(__DEC_messageReceive_coveredBy_762822 != null);
													// check isomorphic binding between objects __DEC_messageReceive_coveredBy_762822 and line 
													JavaSDM.ensure(!__DEC_messageReceive_coveredBy_762822
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_791673
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_791673 = new ArrayList(
													messageSend.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_791673
															.hasNext()) {
												try {
													__DEC_messageSend_coveredBy_791673 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_791673
															.next();

													// check object __DEC_messageSend_coveredBy_791673 is really bound
													JavaSDM.ensure(__DEC_messageSend_coveredBy_791673 != null);
													// check isomorphic binding between objects __DEC_messageSend_coveredBy_791673 and line 
													JavaSDM.ensure(!__DEC_messageSend_coveredBy_791673
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link covered from operand to __DEC_operand_coveredBy_946976
											fujaba__Success = false;

											fujaba__IterOperandTo__DEC_operand_coveredBy_946976 = new ArrayList(
													operand.getCovered())
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterOperandTo__DEC_operand_coveredBy_946976
															.hasNext()) {
												try {
													__DEC_operand_coveredBy_946976 = (Lifeline) fujaba__IterOperandTo__DEC_operand_coveredBy_946976
															.next();

													// check object __DEC_operand_coveredBy_946976 is really bound
													JavaSDM.ensure(__DEC_operand_coveredBy_946976 != null);
													// check isomorphic binding between objects __DEC_operand_coveredBy_946976 and line 
													JavaSDM.ensure(!__DEC_operand_coveredBy_946976
															.equals(line));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_787934
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_787934 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_787934
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_787934 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_787934
															.next();

													// check object __DEC_messageReceive_receiveEvent_787934 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_787934 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_787934 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_787934
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_290376
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_290376 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_290376
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_290376 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_290376
															.next();

													// check object __DEC_messageSend_receiveEvent_290376 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_290376 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_290376 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_290376
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_108145
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_108145 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_108145
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_108145 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_108145
															.next();

													// check object __DEC_messageReceive_sendEvent_108145 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_108145 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_108145 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_108145
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_267286
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_267286 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_267286
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_267286 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_267286
															.next();

													// check object __DEC_messageSend_sendEvent_267286 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_267286 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_267286 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_267286
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_131570
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_131570 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_131570
															.hasNext()) {
												try {
													__DEC_message_message_131570 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_131570
															.next();

													// check object __DEC_message_message_131570 is really bound
													JavaSDM.ensure(__DEC_message_message_131570 != null);
													// check isomorphic binding between objects __DEC_message_message_131570 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_131570
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_131570 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_131570
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_coveredBy is really bound
										JavaSDM.ensure(_edge_coveredBy != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_coveredBy to line
										JavaSDM.ensure(line
												.equals(_edge_coveredBy
														.getSrc()));

										// check link trg from _edge_coveredBy to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(_edge_coveredBy
														.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from line to operand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(operand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, operand, guard,
														spec, line, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node ''
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_58(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_79783 = null;
		InteractionOperand __DEC_combo_fragment_377847 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_340627 = null;
		InteractionOperand __DEC_messageReceive_fragment_894955 = null;
		Interaction __DEC_messageSend_enclosingInteraction_579391 = null;
		InteractionOperand __DEC_messageSend_fragment_423517 = null;
		Interaction __DEC_operand_enclosingInteraction_860954 = null;
		InteractionOperand __DEC_operand_fragment_255794 = null;
		InteractionOperand __DEC_guard_guard_305904 = null;
		CombinedFragment __DEC_operand_operand_35092 = null;
		Constraint __DEC_spec_specification_511374 = null;
		Iterator fujaba__IterComboTo__DEC_combo_coveredBy_736429 = null;
		Lifeline __DEC_combo_coveredBy_736429 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_636857 = null;
		Lifeline __DEC_messageReceive_coveredBy_636857 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_713621 = null;
		Lifeline __DEC_messageSend_coveredBy_713621 = null;
		Iterator fujaba__IterOperandTo__DEC_operand_coveredBy_225785 = null;
		Lifeline __DEC_operand_coveredBy_225785 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_299594 = null;
		Message __DEC_messageReceive_receiveEvent_299594 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_119235 = null;
		Message __DEC_messageSend_receiveEvent_119235 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_442451 = null;
		Message __DEC_messageReceive_sendEvent_442451 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_284867 = null;
		Message __DEC_messageSend_sendEvent_284867 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_95401 = null;
		MessageEnd __DEC_message_message_95401 = null;
		Match match = null;
		Iterator fujaba__IterLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Lifeline line = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from message to interaction
			JavaSDM.ensure(interaction.equals(message.getInteraction()));

			// check link covered from messageReceive to line
			JavaSDM.ensure(messageReceive.getCovered().contains(line));

			// iterate to-many link covered from line to combo
			fujaba__Success = false;

			fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from line to messageSend
					fujaba__Success = false;

					fujaba__IterLineToMessageSend = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageSend.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link src from line to _edge_coveredBy
									fujaba__Success = false;

									fujaba__IterLineTo_edge_coveredBy = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(line,
															EMoflonEdge.class,
															"src")).iterator();

									while (fujaba__IterLineTo_edge_coveredBy
											.hasNext()) {
										try {
											_edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy
													.next();

											// check object _edge_coveredBy is really bound
											JavaSDM.ensure(_edge_coveredBy != null);
											// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
											JavaSDM.ensure(!_edge_coveredBy
													.equals(_edge_covered));

											// check link trg from _edge_coveredBy to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(_edge_coveredBy
															.getTrg()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_79783 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_79783 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_79783 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_79783 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_79783
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_377847 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_377847 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_377847 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_377847 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_377847
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_340627 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_340627 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_340627 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_340627 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_340627
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_894955 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_894955 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_894955 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_894955 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_894955
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_579391 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_579391 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_579391 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_579391 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_579391
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_423517 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_423517 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_423517 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_423517 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_423517
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_860954 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_860954 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_860954 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_860954 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_860954
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_255794 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_255794 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_255794 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_255794 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_255794
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_305904 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_305904 is really bound
													JavaSDM.ensure(__DEC_guard_guard_305904 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_305904
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_305904 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_305904
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_35092 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_35092 is really bound
													JavaSDM.ensure(__DEC_operand_operand_35092 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_35092
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_35092 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_35092
															.equals(combo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_511374 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_511374 is really bound
													JavaSDM.ensure(__DEC_spec_specification_511374 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_511374
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_511374 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_511374
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from combo to __DEC_combo_coveredBy_736429
													fujaba__Success = false;

													fujaba__IterComboTo__DEC_combo_coveredBy_736429 = new ArrayList(
															combo.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterComboTo__DEC_combo_coveredBy_736429
																	.hasNext()) {
														try {
															__DEC_combo_coveredBy_736429 = (Lifeline) fujaba__IterComboTo__DEC_combo_coveredBy_736429
																	.next();

															// check object __DEC_combo_coveredBy_736429 is really bound
															JavaSDM.ensure(__DEC_combo_coveredBy_736429 != null);
															// check isomorphic binding between objects __DEC_combo_coveredBy_736429 and line 
															JavaSDM.ensure(!__DEC_combo_coveredBy_736429
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_636857
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_636857 = new ArrayList(
															messageReceive
																	.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_636857
																	.hasNext()) {
														try {
															__DEC_messageReceive_coveredBy_636857 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_636857
																	.next();

															// check object __DEC_messageReceive_coveredBy_636857 is really bound
															JavaSDM.ensure(__DEC_messageReceive_coveredBy_636857 != null);
															// check isomorphic binding between objects __DEC_messageReceive_coveredBy_636857 and line 
															JavaSDM.ensure(!__DEC_messageReceive_coveredBy_636857
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_713621
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_713621 = new ArrayList(
															messageSend
																	.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_713621
																	.hasNext()) {
														try {
															__DEC_messageSend_coveredBy_713621 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_713621
																	.next();

															// check object __DEC_messageSend_coveredBy_713621 is really bound
															JavaSDM.ensure(__DEC_messageSend_coveredBy_713621 != null);
															// check isomorphic binding between objects __DEC_messageSend_coveredBy_713621 and line 
															JavaSDM.ensure(!__DEC_messageSend_coveredBy_713621
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link covered from operand to __DEC_operand_coveredBy_225785
													fujaba__Success = false;

													fujaba__IterOperandTo__DEC_operand_coveredBy_225785 = new ArrayList(
															operand.getCovered())
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterOperandTo__DEC_operand_coveredBy_225785
																	.hasNext()) {
														try {
															__DEC_operand_coveredBy_225785 = (Lifeline) fujaba__IterOperandTo__DEC_operand_coveredBy_225785
																	.next();

															// check object __DEC_operand_coveredBy_225785 is really bound
															JavaSDM.ensure(__DEC_operand_coveredBy_225785 != null);
															// check isomorphic binding between objects __DEC_operand_coveredBy_225785 and line 
															JavaSDM.ensure(!__DEC_operand_coveredBy_225785
																	.equals(line));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_299594
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_299594 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_299594
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_299594 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_299594
																	.next();

															// check object __DEC_messageReceive_receiveEvent_299594 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_299594 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_299594 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_299594
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_119235
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_119235 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_119235
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_119235 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_119235
																	.next();

															// check object __DEC_messageSend_receiveEvent_119235 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_119235 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_119235 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_119235
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_442451
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_442451 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_442451
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_442451 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_442451
																	.next();

															// check object __DEC_messageReceive_sendEvent_442451 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_442451 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_442451 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_442451
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_284867
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_284867 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_284867
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_284867 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_284867
																	.next();

															// check object __DEC_messageSend_sendEvent_284867 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_284867 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_284867 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_284867
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_95401
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_95401 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_95401
																	.hasNext()) {
														try {
															__DEC_message_message_95401 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_95401
																	.next();

															// check object __DEC_message_message_95401 is really bound
															JavaSDM.ensure(__DEC_message_message_95401 != null);
															// check isomorphic binding between objects __DEC_message_message_95401 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_95401
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_95401 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_95401
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_covered is really bound
												JavaSDM.ensure(_edge_covered != null);
												// check object _edge_coveredBy is really bound
												JavaSDM.ensure(_edge_coveredBy != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
												JavaSDM.ensure(!_edge_coveredBy
														.equals(_edge_covered));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_covered to messageReceive
												JavaSDM.ensure(messageReceive
														.equals(_edge_covered
																.getSrc()));

												// check link src from _edge_coveredBy to line
												JavaSDM.ensure(line
														.equals(_edge_coveredBy
																.getSrc()));

												// check link trg from _edge_covered to line
												JavaSDM.ensure(line
														.equals(_edge_covered
																.getTrg()));

												// check link trg from _edge_coveredBy to messageReceive
												JavaSDM.ensure(messageReceive
														.equals(_edge_coveredBy
																.getTrg()));

												// check link covered from line to combo
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(combo));

												// check link covered from messageReceive to line
												JavaSDM.ensure(messageReceive
														.getCovered().contains(
																line));

												// check link covered from messageSend to line
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																line));

												// check link covered from line to operand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(operand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, combo,
																operand, guard,
																spec, line,
																message,
																interaction,
																messageSend,
																messageReceive);
												if (fujaba__Success) {
													// statement node ''
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RuleResult checkAttributes_FWD(TripleMatch tripleMatch) {

		// [user code injected with eMoflon]

		// TODO: implement this method here but do not remove the injection marker 
		throw new UnsupportedOperationException();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RuleResult checkAttributes_BWD(TripleMatch tripleMatch) {

		// [user code injected with eMoflon]

		// TODO: implement this method here but do not remove the injection marker 
		throw new UnsupportedOperationException();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ModelgeneratorRuleResult generateModel(
			RuleEntryContainer ruleEntryContainer,
			UseCaseToInteraction useCaseToInteractionDummyParameter) {
		boolean fujaba__Success = false;
		ModelgeneratorRuleResult ruleResult = null;
		IsApplicableMatch isApplicableMatch = null;
		Object _TmpObject = null;
		CSP csp = null;
		NormalStep step = null;
		AlternativeFlowAlternative alt = null;
		NormalStepToMessage stepToMessage = null;
		NormalStepToCombinedFragment stepToCombo = null;
		AlternativeFlow altFlow = null;
		StepAlternativeToInteractionOperand alternative1ToOperand = null;
		CombinedFragment combo = null;
		InteractionOperand operand = null;
		InteractionConstraint guard = null;
		LiteralString spec = null;
		MessageOccurrenceSpecification messageReceive = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Actor actor = null;
		Iterator fujaba__IterLineToActorToLine = null;
		ActorToLifeline actorToLine = null;
		Iterator fujaba__IterInteractionToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterUseCaseToFlow = null;
		Flow flow = null;
		Interaction interaction = null;
		UseCase useCase = null;
		Iterator fujaba__IterUseCaseToInteractionListToUseCaseToInteraction = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Iterator fujaba__IterRuleEntryContainerToUseCaseToInteractionList = null;
		RuleEntryList useCaseToInteractionList = null;

		// story node 'create result'
		try {
			fujaba__Success = false;

			// create object ruleResult
			ruleResult = TGGRuntimeFactory.eINSTANCE
					.createModelgeneratorRuleResult();

			// create object isApplicableMatch
			isApplicableMatch = TGGRuntimeFactory.eINSTANCE
					.createIsApplicableMatch();

			// assign attribute ruleResult
			ruleResult.setSuccess(false);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'is applicable core'
		try {
			fujaba__Success = false;

			// check object ruleEntryContainer is really bound
			JavaSDM.ensure(ruleEntryContainer != null);
			// iterate to-many link ruleEntryList from ruleEntryContainer to useCaseToInteractionList
			fujaba__Success = false;

			fujaba__IterRuleEntryContainerToUseCaseToInteractionList = new ArrayList(
					ruleEntryContainer.getRuleEntryList()).iterator();

			while (fujaba__IterRuleEntryContainerToUseCaseToInteractionList
					.hasNext()) {
				try {
					useCaseToInteractionList = (RuleEntryList) fujaba__IterRuleEntryContainerToUseCaseToInteractionList
							.next();

					// check object useCaseToInteractionList is really bound
					JavaSDM.ensure(useCaseToInteractionList != null);
					// iterate to-many link entryObjects from useCaseToInteractionList to useCaseToInteraction
					fujaba__Success = false;

					fujaba__IterUseCaseToInteractionListToUseCaseToInteraction = new ArrayList(
							useCaseToInteractionList.getEntryObjects())
							.iterator();

					while (fujaba__IterUseCaseToInteractionListToUseCaseToInteraction
							.hasNext()) {
						try {
							_TmpObject = fujaba__IterUseCaseToInteractionListToUseCaseToInteraction
									.next();

							// ensure correct type and really bound of object useCaseToInteraction
							JavaSDM.ensure(_TmpObject instanceof UseCaseToInteraction);
							useCaseToInteraction = (UseCaseToInteraction) _TmpObject;
							// bind object
							useCase = useCaseToInteraction.getSource();

							// check object useCase is really bound
							JavaSDM.ensure(useCase != null);

							// bind object
							interaction = useCaseToInteraction.getTarget();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// iterate to-many link flows from useCase to flow
							fujaba__Success = false;

							fujaba__IterUseCaseToFlow = new ArrayList(
									useCase.getFlows()).iterator();

							while (fujaba__IterUseCaseToFlow.hasNext()) {
								try {
									flow = (Flow) fujaba__IterUseCaseToFlow
											.next();

									// check object flow is really bound
									JavaSDM.ensure(flow != null);
									// iterate to-many link lifeline from interaction to line
									fujaba__Success = false;

									fujaba__IterInteractionToLine = new ArrayList(
											interaction.getLifeline())
											.iterator();

									while (fujaba__IterInteractionToLine
											.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterInteractionToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// iterate to-many link target from line to actorToLine
											fujaba__Success = false;

											fujaba__IterLineToActorToLine = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	line,
																	ActorToLifeline.class,
																	"target"))
													.iterator();

											while (fujaba__IterLineToActorToLine
													.hasNext()) {
												try {
													actorToLine = (ActorToLifeline) fujaba__IterLineToActorToLine
															.next();

													// check object actorToLine is really bound
													JavaSDM.ensure(actorToLine != null);
													// bind object
													actor = actorToLine
															.getSource();

													// check object actor is really bound
													JavaSDM.ensure(actor != null);

													// story node 'solve CSP'
													try {
														fujaba__Success = false;

														_TmpObject = (this
																.generateModel_solveCsp_BWD(
																		isApplicableMatch,
																		step,
																		alt,
																		combo,
																		stepToCombo,
																		operand,
																		alternative1ToOperand,
																		guard,
																		spec,
																		altFlow,
																		line,
																		useCase,
																		useCaseToInteraction,
																		flow,
																		message,
																		interaction,
																		stepToMessage,
																		messageSend,
																		messageReceive,
																		actor,
																		actorToLine,
																		ruleResult));

														// ensure correct type and really bound of object csp
														JavaSDM.ensure(_TmpObject instanceof CSP);
														csp = (CSP) _TmpObject;
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													// statement node 'check CSP'
													fujaba__Success = this
															.generateModel_checkCsp_BWD(csp);
													if (fujaba__Success) {
														// story node 'perform'
														try {
															fujaba__Success = false;

															// check object actor is really bound
															JavaSDM.ensure(actor != null);
															// check object actorToLine is really bound
															JavaSDM.ensure(actorToLine != null);
															// check object flow is really bound
															JavaSDM.ensure(flow != null);
															// check object interaction is really bound
															JavaSDM.ensure(interaction != null);
															// check object line is really bound
															JavaSDM.ensure(line != null);
															// check object ruleResult is really bound
															JavaSDM.ensure(ruleResult != null);
															// check object useCase is really bound
															JavaSDM.ensure(useCase != null);
															// check object useCaseToInteraction is really bound
															JavaSDM.ensure(useCaseToInteraction != null);
															// create object step
															step = UseCaseDSLFactory.eINSTANCE
																	.createNormalStep();

															// create object alt
															alt = UseCaseDSLFactory.eINSTANCE
																	.createAlternativeFlowAlternative();

															// create object stepToMessage
															stepToMessage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
																	.createNormalStepToMessage();

															// create object stepToCombo
															stepToCombo = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
																	.createNormalStepToCombinedFragment();

															// create object altFlow
															altFlow = UseCaseDSLFactory.eINSTANCE
																	.createAlternativeFlow();

															// create object alternative1ToOperand
															alternative1ToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
																	.createStepAlternativeToInteractionOperand();

															// create object combo
															combo = ModalSequenceDiagramFactory.eINSTANCE
																	.createCombinedFragment();

															// create object operand
															operand = ModalSequenceDiagramFactory.eINSTANCE
																	.createInteractionOperand();

															// create object guard
															guard = ModalSequenceDiagramFactory.eINSTANCE
																	.createInteractionConstraint();

															// create object spec
															spec = ModalSequenceDiagramFactory.eINSTANCE
																	.createLiteralString();

															// create object messageReceive
															messageReceive = ModalSequenceDiagramFactory.eINSTANCE
																	.createMessageOccurrenceSpecification();

															// create object messageSend
															messageSend = ModalSequenceDiagramFactory.eINSTANCE
																	.createMessageOccurrenceSpecification();

															// create object message
															message = ModalSequenceDiagramFactory.eINSTANCE
																	.createMessage();

															// assign attribute step
															step.setName((java.lang.String) csp
																	.getAttributeVariable(
																			"step",
																			"name")
																	.getValue());
															// assign attribute alt
															alt.setCondition((java.lang.String) csp
																	.getAttributeVariable(
																			"alt",
																			"condition")
																	.getValue());
															// assign attribute combo
															combo.setInteractionOperator((ModalSequenceDiagram.InteractionOperatorKind) csp
																	.getAttributeVariable(
																			"combo",
																			"interactionOperator")
																	.getValue());
															// assign attribute guard
															guard.setName((java.lang.String) csp
																	.getAttributeVariable(
																			"guard",
																			"name")
																	.getValue());
															// assign attribute spec
															spec.setValue((java.lang.String) csp
																	.getAttributeVariable(
																			"spec",
																			"value")
																	.getValue());
															// assign attribute altFlow
															altFlow.setName((java.lang.String) csp
																	.getAttributeVariable(
																			"altFlow",
																			"name")
																	.getValue());
															// assign attribute message
															message.setName((java.lang.String) csp
																	.getAttributeVariable(
																			"message",
																			"name")
																	.getValue());
															// assign attribute ruleResult
															ruleResult
																	.setSuccess(true);

															// create link
															step.getStepAlternative()
																	.add(alt); // add link

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			step,
																			actor,
																			"actor");

															// create link
															stepToMessage
																	.setSource(step);

															// create link
															ruleResult
																	.getSourceObjects()
																	.add(step);

															// create link
															stepToCombo
																	.setSource(step);

															// create link
															flow.getSteps()
																	.add(step);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			alt,
																			altFlow,
																			"ref");

															// create link
															alternative1ToOperand
																	.setSource(alt);

															// create link
															ruleResult
																	.getSourceObjects()
																	.add(alt);

															// create link
															combo.getOperand()
																	.add(operand); // add link

															// create link
															line.getCoveredBy()
																	.add(combo);

															// create link
															ruleResult
																	.getTargetObjects()
																	.add(combo);

															// create link
															stepToCombo
																	.setTarget(combo);

															// create link
															ruleResult
																	.getCorrObjects()
																	.add(stepToCombo);

															// create link
															operand.setGuard(guard); // add link to one

															// create link
															line.getCoveredBy()
																	.add(operand);

															// create link
															ruleResult
																	.getTargetObjects()
																	.add(operand);

															// create link
															alternative1ToOperand
																	.setTarget(operand);

															// create link
															ruleResult
																	.getCorrObjects()
																	.add(alternative1ToOperand);

															// create link
															guard.setSpecification(spec); // add link to one

															// create link
															ruleResult
																	.getTargetObjects()
																	.add(guard);

															// create link
															ruleResult
																	.getTargetObjects()
																	.add(spec);

															// create link
															ruleResult
																	.getSourceObjects()
																	.add(altFlow);

															// create link
															messageReceive
																	.getCovered()
																	.add(line);

															// create link
															messageSend
																	.getCovered()
																	.add(line);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			message,
																			messageSend,
																			"sendEvent");

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			message,
																			messageReceive,
																			"receiveEvent");

															// create link
															stepToMessage
																	.setTarget(message);

															// create link
															messageSend
																	.setMessage(message);

															// create link
															ruleResult
																	.getTargetObjects()
																	.add(message);

															// create link
															messageReceive
																	.setMessage(message);

															// create link
															interaction
																	.getMessage()
																	.add(message);

															// create link
															ruleResult
																	.getCorrObjects()
																	.add(stepToMessage);

															// create link
															ruleResult
																	.getTargetObjects()
																	.add(messageSend);

															// create link
															ruleResult
																	.getTargetObjects()
																	.add(messageReceive);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														return ruleResult;

													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return ruleResult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			NormalStep step, AlternativeFlowAlternative alt,
			CombinedFragment combo, NormalStepToCombinedFragment stepToCombo,
			InteractionOperand operand,
			StepAlternativeToInteractionOperand alternative1ToOperand,
			InteractionConstraint guard, LiteralString spec,
			AlternativeFlow altFlow, Lifeline line, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Flow flow,
			Message message, Interaction interaction,
			NormalStepToMessage stepToMessage,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Actor actor,
			ActorToLifeline actorToLine, ModelgeneratorRuleResult ruleResult) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables

		// Create explicit parameters

		// Create unbound variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", csp);
		var_altFlow_name.setType("");
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", csp);
		var_guard_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", csp);
		var_alt_condition.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", csp);
		var_spec_value.setType("");
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", csp);
		var_combo_interactionOperator.setType("EObject");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", csp);
		var_step_name.setType("");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", csp);
		var_message_name.setType("");

		// Create constraints
		EqInterOperKind eqInterOperKind = new EqInterOperKind();
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eqInterOperKind);
		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean generateModel_checkCsp_BWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match, UseCase useCase, Flow flow,
			NormalStep step, Actor actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __useCase_flows_flow = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_FWD(match, useCase, flow,
					step, actor));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// create object __step_actor_actor
				__step_actor_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __flow_steps_step
				__flow_steps_step = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __flow_steps_step
				__flow_steps_step.setName("steps");
				// assign attribute __step_actor_actor
				__step_actor_actor.setName("actor");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						step, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_actor_actor, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__flow_steps_step, "toBeTranslatedEdges");

				// create link
				__flow_steps_step.setSrc(flow);

				// create link
				__flow_steps_step.setTrg(step);

				// create link
				__step_actor_actor.setSrc(step);

				// create link
				__step_actor_actor.setTrg(actor);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// create object __useCase_flows_flow
				__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __useCase_flows_flow
				__useCase_flows_flow.setName("flows");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						actor, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__useCase_flows_flow, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						flow, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						useCase, "contextNodes");

				// create link
				__useCase_flows_flow.setSrc(useCase);

				// create link
				__useCase_flows_flow.setTrg(flow);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_FWD(match, useCase, flow, step, actor);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_FWD(Match match, UseCase useCase,
			Flow flow, NormalStep step, Actor actor) {
		match.registerObject("useCase", useCase);
		match.registerObject("flow", flow);
		match.registerObject("step", step);
		match.registerObject("actor", actor);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_FWD(Match match, UseCase useCase,
			Flow flow, NormalStep step, Actor actor) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals

		// Create attribute variables

		// Create explicit parameters

		// Create unbound variables

		// Create constraints

		// Solve CSP
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			Flow flow, NormalStep step, Interaction interaction, Lifeline line,
			Actor actor, ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals

		// Create attribute variables
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", true, csp);
		var_step_name.setValue(step.getName());
		var_step_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", csp);
		var_message_name.setType("");

		// Create constraints
		Eq eq = new Eq();

		csp.getConstraints().add(eq);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("step", step);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_FWD(PerformRuleResult ruleresult,
			EObject useCase, EObject useCaseToInteraction, EObject flow,
			EObject step, EObject message, EObject interaction,
			EObject stepToMessage, EObject messageSend, EObject messageReceive,
			EObject line, EObject actor, EObject actorToLine) {
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_BWD(Match match, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __line_coveredBy_messageReceive = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __line_coveredBy_messageSend = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __messageSend_covered_line = null;
		EMoflonEdge __messageReceive_covered_line = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __line_interaction_interaction = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_BWD(match, message,
					interaction, messageSend, messageReceive, line));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// create object __line_coveredBy_messageReceive
				__line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_sendEvent_messageSend
				__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_messageSend
				__line_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_message_message
				__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_interaction_interaction
				__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_message_message
				__interaction_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_covered_line
				__messageSend_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_covered_line
				__messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_message_message
				__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __message_sendEvent_messageSend
				__message_sendEvent_messageSend.setName("sendEvent");
				// assign attribute __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive.setName("receiveEvent");
				// assign attribute __message_interaction_interaction
				__message_interaction_interaction.setName("interaction");
				// assign attribute __interaction_message_message
				__interaction_message_message.setName("message");
				// assign attribute __messageSend_message_message
				__messageSend_message_message.setName("message");
				// assign attribute __line_coveredBy_messageSend
				__line_coveredBy_messageSend.setName("coveredBy");
				// assign attribute __messageSend_covered_line
				__messageSend_covered_line.setName("covered");
				// assign attribute __messageReceive_message_message
				__messageReceive_message_message.setName("message");
				// assign attribute __line_coveredBy_messageReceive
				__line_coveredBy_messageReceive.setName("coveredBy");
				// assign attribute __messageReceive_covered_line
				__messageReceive_covered_line.setName("covered");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_messageReceive, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						message, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_receiveEvent_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageSend, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_sendEvent_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageReceive, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_interaction_interaction,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageReceive_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil
						.addOppositeReference(match,
								__messageReceive_message_message,
								"toBeTranslatedEdges");

				// create link
				__message_receiveEvent_messageReceive.setSrc(message);

				// create link
				__message_interaction_interaction.setSrc(message);

				// create link
				__messageReceive_message_message.setTrg(message);

				// create link
				__interaction_message_message.setTrg(message);

				// create link
				__message_sendEvent_messageSend.setSrc(message);

				// create link
				__messageSend_message_message.setTrg(message);

				// create link
				__interaction_message_message.setSrc(interaction);

				// create link
				__message_interaction_interaction.setTrg(interaction);

				// create link
				__messageSend_message_message.setSrc(messageSend);

				// create link
				__messageSend_covered_line.setSrc(messageSend);

				// create link
				__message_sendEvent_messageSend.setTrg(messageSend);

				// create link
				__line_coveredBy_messageSend.setTrg(messageSend);

				// create link
				__messageReceive_message_message.setSrc(messageReceive);

				// create link
				__line_coveredBy_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_covered_line.setSrc(messageReceive);

				// create link
				__message_receiveEvent_messageReceive.setTrg(messageReceive);

				// create link
				__messageSend_covered_line.setTrg(line);

				// create link
				__messageReceive_covered_line.setTrg(line);

				// create link
				__line_coveredBy_messageSend.setSrc(line);

				// create link
				__line_coveredBy_messageReceive.setSrc(line);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// create object __interaction_lifeline_line
				__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_interaction_interaction
				__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __line_interaction_interaction
				__line_interaction_interaction.setName("interaction");
				// assign attribute __interaction_lifeline_line
				__interaction_lifeline_line.setName("lifeline");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_lifeline_line, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						interaction, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						line, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_interaction_interaction, "contextEdges");

				// create link
				__interaction_lifeline_line.setSrc(interaction);

				// create link
				__line_interaction_interaction.setTrg(interaction);

				// create link
				__line_interaction_interaction.setSrc(line);

				// create link
				__interaction_lifeline_line.setTrg(line);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_BWD(match, message, interaction,
					messageSend, messageReceive, line);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_BWD(Match match, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line) {
		match.registerObject("message", message);
		match.registerObject("interaction", interaction);
		match.registerObject("messageSend", messageSend);
		match.registerObject("messageReceive", messageReceive);
		match.registerObject("line", line);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_BWD(Match match, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals

		// Create attribute variables

		// Create explicit parameters

		// Create unbound variables

		// Create constraints

		// Solve CSP
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			Flow flow, Message message, Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Actor actor, ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals

		// Create attribute variables
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", true, csp);
		var_message_name.setValue(message.getName());
		var_message_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", csp);
		var_step_name.setType("");

		// Create constraints
		Eq eq = new Eq();

		csp.getConstraints().add(eq);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("message", message);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("messageSend", messageSend);
		isApplicableMatch.registerObject("messageReceive", messageReceive);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_BWD(PerformRuleResult ruleresult,
			EObject useCase, EObject useCaseToInteraction, EObject flow,
			EObject step, EObject message, EObject interaction,
			EObject stepToMessage, EObject messageSend, EObject messageReceive,
			EObject line, EObject actor, EObject actorToLine) {
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_4(
			EMoflonEdge _edge_steps) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Flow __DEC_step_steps_390623 = null;
		Match match = null;
		Actor actor = null;
		NormalStep step = null;
		UseCase useCase = null;
		Flow flow = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_steps is really bound
			JavaSDM.ensure(_edge_steps != null);
			// bind object
			_TmpObject = _edge_steps.getSrc();

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof Flow);
			flow = (Flow) _TmpObject;

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_steps.getTrg();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// check link steps from step to flow
			JavaSDM.ensure(flow.equals(step.eContainer()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_390623 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_390623 is really bound
					JavaSDM.ensure(__DEC_step_steps_390623 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_390623.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_390623 and flow 
					JavaSDM.ensure(!__DEC_step_steps_390623.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_steps is really bound
				JavaSDM.ensure(_edge_steps != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link src from _edge_steps to flow
				JavaSDM.ensure(flow.equals(_edge_steps.getSrc()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link trg from _edge_steps to step
				JavaSDM.ensure(step.equals(_edge_steps.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, useCase, flow,
						step, actor);
				if (fujaba__Success) {
					// statement node ''
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_5(
			EMoflonEdge _edge_actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Flow __DEC_step_steps_321117 = null;
		Match match = null;
		UseCase useCase = null;
		Flow flow = null;
		Actor actor = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_actor is really bound
			JavaSDM.ensure(_edge_actor != null);
			// bind object
			_TmpObject = _edge_actor.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer()
					: null;

			// check object flow is really bound
			JavaSDM.ensure(flow != null);

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// check link trg from _edge_actor to actor
			JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_321117 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_321117 is really bound
					JavaSDM.ensure(__DEC_step_steps_321117 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_321117.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_321117 and flow 
					JavaSDM.ensure(!__DEC_step_steps_321117.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_actor is really bound
				JavaSDM.ensure(_edge_actor != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link src from _edge_actor to step
				JavaSDM.ensure(step.equals(_edge_actor.getSrc()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link trg from _edge_actor to actor
				JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, useCase, flow,
						step, actor);
				if (fujaba__Success) {
					// statement node ''
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_4(
			EMoflonEdge _edge_sendEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_337319 = null;
		Interaction __DEC_messageSend_enclosingInteraction_539109 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_766483 = null;
		Lifeline __DEC_messageReceive_coveredBy_766483 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_113411 = null;
		Lifeline __DEC_messageSend_coveredBy_113411 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_825994 = null;
		Message __DEC_messageReceive_receiveEvent_825994 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_16590 = null;
		Message __DEC_messageSend_receiveEvent_16590 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_66263 = null;
		Message __DEC_messageReceive_sendEvent_66263 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_124719 = null;
		Message __DEC_messageSend_sendEvent_124719 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_844641 = null;
		MessageEnd __DEC_message_message_844641 = null;
		Match match = null;
		Iterator fujaba__IterMessageSendToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_sendEvent is really bound
			JavaSDM.ensure(_edge_sendEvent != null);
			// bind object
			_TmpObject = _edge_sendEvent.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_sendEvent to messageSend
			JavaSDM.ensure(messageSend.equals(_edge_sendEvent.getTrg()));

			// iterate to-many link covered from messageSend to line
			fujaba__Success = false;

			fujaba__IterMessageSendToLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageSendToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// check link covered from line to messageReceive
					JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_337319 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_337319 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_337319 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_337319 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_337319
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_539109 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_539109 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_539109 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_539109 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_539109
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_766483
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_766483 = new ArrayList(
									messageReceive.getCovered()).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_766483
											.hasNext()) {
								try {
									__DEC_messageReceive_coveredBy_766483 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_766483
											.next();

									// check object __DEC_messageReceive_coveredBy_766483 is really bound
									JavaSDM.ensure(__DEC_messageReceive_coveredBy_766483 != null);
									// check isomorphic binding between objects __DEC_messageReceive_coveredBy_766483 and line 
									JavaSDM.ensure(!__DEC_messageReceive_coveredBy_766483
											.equals(line));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_113411
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_113411 = new ArrayList(
									messageSend.getCovered()).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_113411
											.hasNext()) {
								try {
									__DEC_messageSend_coveredBy_113411 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_113411
											.next();

									// check object __DEC_messageSend_coveredBy_113411 is really bound
									JavaSDM.ensure(__DEC_messageSend_coveredBy_113411 != null);
									// check isomorphic binding between objects __DEC_messageSend_coveredBy_113411 and line 
									JavaSDM.ensure(!__DEC_messageSend_coveredBy_113411
											.equals(line));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_825994
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_825994 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_825994
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_825994 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_825994
											.next();

									// check object __DEC_messageReceive_receiveEvent_825994 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_825994 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_825994 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_825994
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_16590
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_16590 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_16590
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_16590 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_16590
											.next();

									// check object __DEC_messageSend_receiveEvent_16590 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_16590 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_16590 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_16590
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_66263
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_66263 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_66263
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_66263 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_66263
											.next();

									// check object __DEC_messageReceive_sendEvent_66263 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_66263 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_66263 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_66263
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_124719
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_124719 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_124719
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_124719 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_124719
											.next();

									// check object __DEC_messageSend_sendEvent_124719 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_124719 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_124719 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_124719
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_844641
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_844641 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_844641
											.hasNext()) {
								try {
									__DEC_message_message_844641 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_844641
											.next();

									// check object __DEC_message_message_844641 is really bound
									JavaSDM.ensure(__DEC_message_message_844641 != null);
									// check isomorphic binding between objects __DEC_message_message_844641 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_844641
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_844641 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_844641
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_sendEvent is really bound
						JavaSDM.ensure(_edge_sendEvent != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_sendEvent to message
						JavaSDM.ensure(message.equals(_edge_sendEvent.getSrc()));

						// check link trg from _edge_sendEvent to messageSend
						JavaSDM.ensure(messageSend.equals(_edge_sendEvent
								.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// check link covered from line to messageSend
						JavaSDM.ensure(line.getCoveredBy()
								.contains(messageSend));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node ''
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_5(
			EMoflonEdge _edge_receiveEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_444450 = null;
		Interaction __DEC_messageSend_enclosingInteraction_580628 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_887199 = null;
		Lifeline __DEC_messageReceive_coveredBy_887199 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_831471 = null;
		Lifeline __DEC_messageSend_coveredBy_831471 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_557923 = null;
		Message __DEC_messageReceive_receiveEvent_557923 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_307386 = null;
		Message __DEC_messageSend_receiveEvent_307386 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_834762 = null;
		Message __DEC_messageReceive_sendEvent_834762 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_531025 = null;
		Message __DEC_messageSend_sendEvent_531025 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_474315 = null;
		MessageEnd __DEC_message_message_474315 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_receiveEvent is really bound
			JavaSDM.ensure(_edge_receiveEvent != null);
			// bind object
			_TmpObject = _edge_receiveEvent.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_receiveEvent to messageReceive
			JavaSDM.ensure(messageReceive.equals(_edge_receiveEvent.getTrg()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// check link covered from line to messageSend
					JavaSDM.ensure(line.getCoveredBy().contains(messageSend));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_444450 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_444450 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_444450 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_444450 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_444450
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_580628 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_580628 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_580628 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_580628 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_580628
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_887199
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_887199 = new ArrayList(
									messageReceive.getCovered()).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_887199
											.hasNext()) {
								try {
									__DEC_messageReceive_coveredBy_887199 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_887199
											.next();

									// check object __DEC_messageReceive_coveredBy_887199 is really bound
									JavaSDM.ensure(__DEC_messageReceive_coveredBy_887199 != null);
									// check isomorphic binding between objects __DEC_messageReceive_coveredBy_887199 and line 
									JavaSDM.ensure(!__DEC_messageReceive_coveredBy_887199
											.equals(line));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_831471
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_831471 = new ArrayList(
									messageSend.getCovered()).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_831471
											.hasNext()) {
								try {
									__DEC_messageSend_coveredBy_831471 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_831471
											.next();

									// check object __DEC_messageSend_coveredBy_831471 is really bound
									JavaSDM.ensure(__DEC_messageSend_coveredBy_831471 != null);
									// check isomorphic binding between objects __DEC_messageSend_coveredBy_831471 and line 
									JavaSDM.ensure(!__DEC_messageSend_coveredBy_831471
											.equals(line));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_557923
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_557923 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_557923
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_557923 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_557923
											.next();

									// check object __DEC_messageReceive_receiveEvent_557923 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_557923 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_557923 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_557923
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_307386
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_307386 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_307386
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_307386 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_307386
											.next();

									// check object __DEC_messageSend_receiveEvent_307386 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_307386 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_307386 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_307386
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_834762
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_834762 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_834762
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_834762 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_834762
											.next();

									// check object __DEC_messageReceive_sendEvent_834762 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_834762 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_834762 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_834762
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_531025
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_531025 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_531025
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_531025 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_531025
											.next();

									// check object __DEC_messageSend_sendEvent_531025 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_531025 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_531025 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_531025
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_474315
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_474315 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_474315
											.hasNext()) {
								try {
									__DEC_message_message_474315 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_474315
											.next();

									// check object __DEC_message_message_474315 is really bound
									JavaSDM.ensure(__DEC_message_message_474315 != null);
									// check isomorphic binding between objects __DEC_message_message_474315 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_474315
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_474315 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_474315
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_receiveEvent is really bound
						JavaSDM.ensure(_edge_receiveEvent != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_receiveEvent to message
						JavaSDM.ensure(message.equals(_edge_receiveEvent
								.getSrc()));

						// check link trg from _edge_receiveEvent to messageReceive
						JavaSDM.ensure(messageReceive.equals(_edge_receiveEvent
								.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// check link covered from line to messageSend
						JavaSDM.ensure(line.getCoveredBy()
								.contains(messageSend));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node ''
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_6(
			EMoflonEdge _edge_interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_668558 = null;
		Interaction __DEC_messageSend_enclosingInteraction_779998 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_642937 = null;
		Lifeline __DEC_messageReceive_coveredBy_642937 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_608928 = null;
		Lifeline __DEC_messageSend_coveredBy_608928 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_704848 = null;
		Message __DEC_messageReceive_receiveEvent_704848 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_333027 = null;
		Message __DEC_messageSend_receiveEvent_333027 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_34083 = null;
		Message __DEC_messageReceive_sendEvent_34083 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_825973 = null;
		Message __DEC_messageSend_sendEvent_825973 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_2350 = null;
		MessageEnd __DEC_message_message_2350 = null;
		Match match = null;
		Iterator fujaba__IterMessageSendToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_interaction is really bound
			JavaSDM.ensure(_edge_interaction != null);
			// bind object
			_TmpObject = _edge_interaction.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_interaction to interaction
			JavaSDM.ensure(interaction.equals(_edge_interaction.getTrg()));

			// iterate to-many link covered from messageSend to line
			fujaba__Success = false;

			fujaba__IterMessageSendToLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageSendToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// check link covered from line to messageReceive
					JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_668558 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_668558 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_668558 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_668558 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_668558
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_779998 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_779998 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_779998 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_779998 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_779998
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_642937
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_642937 = new ArrayList(
									messageReceive.getCovered()).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_642937
											.hasNext()) {
								try {
									__DEC_messageReceive_coveredBy_642937 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_642937
											.next();

									// check object __DEC_messageReceive_coveredBy_642937 is really bound
									JavaSDM.ensure(__DEC_messageReceive_coveredBy_642937 != null);
									// check isomorphic binding between objects __DEC_messageReceive_coveredBy_642937 and line 
									JavaSDM.ensure(!__DEC_messageReceive_coveredBy_642937
											.equals(line));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_608928
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_608928 = new ArrayList(
									messageSend.getCovered()).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_608928
											.hasNext()) {
								try {
									__DEC_messageSend_coveredBy_608928 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_608928
											.next();

									// check object __DEC_messageSend_coveredBy_608928 is really bound
									JavaSDM.ensure(__DEC_messageSend_coveredBy_608928 != null);
									// check isomorphic binding between objects __DEC_messageSend_coveredBy_608928 and line 
									JavaSDM.ensure(!__DEC_messageSend_coveredBy_608928
											.equals(line));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_704848
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_704848 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_704848
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_704848 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_704848
											.next();

									// check object __DEC_messageReceive_receiveEvent_704848 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_704848 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_704848 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_704848
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_333027
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_333027 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_333027
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_333027 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_333027
											.next();

									// check object __DEC_messageSend_receiveEvent_333027 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_333027 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_333027 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_333027
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_34083
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_34083 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_34083
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_34083 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_34083
											.next();

									// check object __DEC_messageReceive_sendEvent_34083 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_34083 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_34083 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_34083
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_825973
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_825973 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_825973
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_825973 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_825973
											.next();

									// check object __DEC_messageSend_sendEvent_825973 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_825973 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_825973 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_825973
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_2350
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_2350 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_2350
											.hasNext()) {
								try {
									__DEC_message_message_2350 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_2350
											.next();

									// check object __DEC_message_message_2350 is really bound
									JavaSDM.ensure(__DEC_message_message_2350 != null);
									// check isomorphic binding between objects __DEC_message_message_2350 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_2350
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_2350 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_2350
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_interaction is really bound
						JavaSDM.ensure(_edge_interaction != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_interaction to message
						JavaSDM.ensure(message.equals(_edge_interaction
								.getSrc()));

						// check link trg from _edge_interaction to interaction
						JavaSDM.ensure(interaction.equals(_edge_interaction
								.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// check link covered from line to messageSend
						JavaSDM.ensure(line.getCoveredBy()
								.contains(messageSend));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node ''
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_7(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_547504 = null;
		Interaction __DEC_messageSend_enclosingInteraction_624791 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_373484 = null;
		Lifeline __DEC_messageReceive_coveredBy_373484 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_494681 = null;
		Lifeline __DEC_messageSend_coveredBy_494681 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_954815 = null;
		Message __DEC_messageReceive_receiveEvent_954815 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_358170 = null;
		Message __DEC_messageSend_receiveEvent_358170 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_269983 = null;
		Message __DEC_messageReceive_sendEvent_269983 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_280308 = null;
		Message __DEC_messageSend_sendEvent_280308 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_145126 = null;
		MessageEnd __DEC_message_message_145126 = null;
		Match match = null;
		Iterator fujaba__IterMessageTo_edge_interaction = null;
		EMoflonEdge _edge_interaction = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link src from _edge_message to interaction
			JavaSDM.ensure(interaction.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// check link covered from line to messageSend
					JavaSDM.ensure(line.getCoveredBy().contains(messageSend));

					// iterate to-many link src from message to _edge_interaction
					fujaba__Success = false;

					fujaba__IterMessageTo_edge_interaction = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(message,
											EMoflonEdge.class, "src"))
							.iterator();

					while (fujaba__IterMessageTo_edge_interaction.hasNext()) {
						try {
							_edge_interaction = (EMoflonEdge) fujaba__IterMessageTo_edge_interaction
									.next();

							// check object _edge_interaction is really bound
							JavaSDM.ensure(_edge_interaction != null);
							// check isomorphic binding between objects _edge_message and _edge_interaction 
							JavaSDM.ensure(!_edge_message
									.equals(_edge_interaction));

							// check link trg from _edge_interaction to interaction
							JavaSDM.ensure(interaction.equals(_edge_interaction
									.getTrg()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// negative check for link fragment from messageReceive
								JavaSDM.ensure(messageReceive
										.getEnclosingOperand() == null);
								// negative check for link fragment from messageSend
								JavaSDM.ensure(messageSend
										.getEnclosingOperand() == null);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_547504 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_547504 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_547504 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_547504 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_547504
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_624791 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_624791 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_624791 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_624791 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_624791
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_373484
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_373484 = new ArrayList(
											messageReceive.getCovered())
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_373484
													.hasNext()) {
										try {
											__DEC_messageReceive_coveredBy_373484 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_373484
													.next();

											// check object __DEC_messageReceive_coveredBy_373484 is really bound
											JavaSDM.ensure(__DEC_messageReceive_coveredBy_373484 != null);
											// check isomorphic binding between objects __DEC_messageReceive_coveredBy_373484 and line 
											JavaSDM.ensure(!__DEC_messageReceive_coveredBy_373484
													.equals(line));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_494681
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_494681 = new ArrayList(
											messageSend.getCovered())
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_494681
													.hasNext()) {
										try {
											__DEC_messageSend_coveredBy_494681 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_494681
													.next();

											// check object __DEC_messageSend_coveredBy_494681 is really bound
											JavaSDM.ensure(__DEC_messageSend_coveredBy_494681 != null);
											// check isomorphic binding between objects __DEC_messageSend_coveredBy_494681 and line 
											JavaSDM.ensure(!__DEC_messageSend_coveredBy_494681
													.equals(line));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_954815
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_954815 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_954815
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_954815 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_954815
													.next();

											// check object __DEC_messageReceive_receiveEvent_954815 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_954815 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_954815 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_954815
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_358170
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_358170 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_358170
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_358170 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_358170
													.next();

											// check object __DEC_messageSend_receiveEvent_358170 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_358170 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_358170 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_358170
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_269983
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_269983 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_269983
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_269983 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_269983
													.next();

											// check object __DEC_messageReceive_sendEvent_269983 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_269983 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_269983 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_269983
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_280308
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_280308 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_280308
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_280308 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_280308
													.next();

											// check object __DEC_messageSend_sendEvent_280308 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_280308 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_280308 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_280308
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_145126
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_145126 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_145126
													.hasNext()) {
										try {
											__DEC_message_message_145126 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_145126
													.next();

											// check object __DEC_message_message_145126 is really bound
											JavaSDM.ensure(__DEC_message_message_145126 != null);
											// check isomorphic binding between objects __DEC_message_message_145126 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_145126
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_145126 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_145126
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check object _edge_interaction is really bound
								JavaSDM.ensure(_edge_interaction != null);
								// check object _edge_message is really bound
								JavaSDM.ensure(_edge_message != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check isomorphic binding between objects _edge_message and _edge_interaction 
								JavaSDM.ensure(!_edge_message
										.equals(_edge_interaction));

								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link src from _edge_interaction to message
								JavaSDM.ensure(message.equals(_edge_interaction
										.getSrc()));

								// check link src from _edge_message to interaction
								JavaSDM.ensure(interaction.equals(_edge_message
										.getSrc()));

								// check link trg from _edge_interaction to interaction
								JavaSDM.ensure(interaction
										.equals(_edge_interaction.getTrg()));

								// check link trg from _edge_message to message
								JavaSDM.ensure(message.equals(_edge_message
										.getTrg()));

								// check link covered from line to messageReceive
								JavaSDM.ensure(line.getCoveredBy().contains(
										messageReceive));

								// check link covered from line to messageSend
								JavaSDM.ensure(line.getCoveredBy().contains(
										messageSend));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										message, interaction, messageSend,
										messageReceive, line);
								if (fujaba__Success) {
									// statement node ''
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_8(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_480145 = null;
		Interaction __DEC_messageSend_enclosingInteraction_982463 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_243562 = null;
		Lifeline __DEC_messageReceive_coveredBy_243562 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_301479 = null;
		Lifeline __DEC_messageSend_coveredBy_301479 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_922801 = null;
		Message __DEC_messageReceive_receiveEvent_922801 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_933356 = null;
		Message __DEC_messageSend_receiveEvent_933356 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_342946 = null;
		Message __DEC_messageReceive_sendEvent_342946 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_772675 = null;
		Message __DEC_messageSend_sendEvent_772675 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_870519 = null;
		MessageEnd __DEC_message_message_870519 = null;
		Match match = null;
		Iterator fujaba__IterMessageSendToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link src from _edge_message to messageSend
			JavaSDM.ensure(messageSend.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageSend to line
			fujaba__Success = false;

			fujaba__IterMessageSendToLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageSendToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// check link covered from line to messageReceive
					JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_480145 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_480145 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_480145 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_480145 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_480145
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_982463 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_982463 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_982463 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_982463 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_982463
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_243562
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_243562 = new ArrayList(
									messageReceive.getCovered()).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_243562
											.hasNext()) {
								try {
									__DEC_messageReceive_coveredBy_243562 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_243562
											.next();

									// check object __DEC_messageReceive_coveredBy_243562 is really bound
									JavaSDM.ensure(__DEC_messageReceive_coveredBy_243562 != null);
									// check isomorphic binding between objects __DEC_messageReceive_coveredBy_243562 and line 
									JavaSDM.ensure(!__DEC_messageReceive_coveredBy_243562
											.equals(line));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_301479
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_301479 = new ArrayList(
									messageSend.getCovered()).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_301479
											.hasNext()) {
								try {
									__DEC_messageSend_coveredBy_301479 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_301479
											.next();

									// check object __DEC_messageSend_coveredBy_301479 is really bound
									JavaSDM.ensure(__DEC_messageSend_coveredBy_301479 != null);
									// check isomorphic binding between objects __DEC_messageSend_coveredBy_301479 and line 
									JavaSDM.ensure(!__DEC_messageSend_coveredBy_301479
											.equals(line));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_922801
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_922801 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_922801
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_922801 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_922801
											.next();

									// check object __DEC_messageReceive_receiveEvent_922801 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_922801 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_922801 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_922801
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_933356
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_933356 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_933356
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_933356 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_933356
											.next();

									// check object __DEC_messageSend_receiveEvent_933356 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_933356 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_933356 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_933356
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_342946
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_342946 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_342946
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_342946 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_342946
											.next();

									// check object __DEC_messageReceive_sendEvent_342946 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_342946 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_342946 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_342946
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_772675
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_772675 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_772675
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_772675 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_772675
											.next();

									// check object __DEC_messageSend_sendEvent_772675 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_772675 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_772675 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_772675
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_870519
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_870519 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_870519
											.hasNext()) {
								try {
									__DEC_message_message_870519 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_870519
											.next();

									// check object __DEC_message_message_870519 is really bound
									JavaSDM.ensure(__DEC_message_message_870519 != null);
									// check isomorphic binding between objects __DEC_message_message_870519 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_870519
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_870519 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_870519
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_message is really bound
						JavaSDM.ensure(_edge_message != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_message to messageSend
						JavaSDM.ensure(messageSend.equals(_edge_message
								.getSrc()));

						// check link trg from _edge_message to message
						JavaSDM.ensure(message.equals(_edge_message.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// check link covered from line to messageSend
						JavaSDM.ensure(line.getCoveredBy()
								.contains(messageSend));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node ''
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_9(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_5878 = null;
		Interaction __DEC_messageSend_enclosingInteraction_601303 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_753918 = null;
		Lifeline __DEC_messageReceive_coveredBy_753918 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_789778 = null;
		Lifeline __DEC_messageSend_coveredBy_789778 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_669261 = null;
		Message __DEC_messageReceive_receiveEvent_669261 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_562635 = null;
		Message __DEC_messageSend_receiveEvent_562635 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_23864 = null;
		Message __DEC_messageReceive_sendEvent_23864 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_847687 = null;
		Message __DEC_messageSend_sendEvent_847687 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_633571 = null;
		MessageEnd __DEC_message_message_633571 = null;
		Match match = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link lifeline from line to interaction
			JavaSDM.ensure(interaction.equals(line.getInteraction()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// check link covered from line to messageReceive
			JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

			// check link covered from line to messageSend
			JavaSDM.ensure(line.getCoveredBy().contains(messageSend));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// negative check for link fragment from messageReceive
				JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
				// negative check for link fragment from messageSend
				JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_messageReceive_enclosingInteraction_5878 = messageReceive
							.getEnclosingInteraction();

					// check object __DEC_messageReceive_enclosingInteraction_5878 is really bound
					JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_5878 != null);

					// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_5878 and interaction 
					JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_5878
							.equals(interaction));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_messageSend_enclosingInteraction_601303 = messageSend
							.getEnclosingInteraction();

					// check object __DEC_messageSend_enclosingInteraction_601303 is really bound
					JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_601303 != null);

					// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_601303 and interaction 
					JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_601303
							.equals(interaction));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_753918
					fujaba__Success = false;

					fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_753918 = new ArrayList(
							messageReceive.getCovered()).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_753918
									.hasNext()) {
						try {
							__DEC_messageReceive_coveredBy_753918 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_753918
									.next();

							// check object __DEC_messageReceive_coveredBy_753918 is really bound
							JavaSDM.ensure(__DEC_messageReceive_coveredBy_753918 != null);
							// check isomorphic binding between objects __DEC_messageReceive_coveredBy_753918 and line 
							JavaSDM.ensure(!__DEC_messageReceive_coveredBy_753918
									.equals(line));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_789778
					fujaba__Success = false;

					fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_789778 = new ArrayList(
							messageSend.getCovered()).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_789778
									.hasNext()) {
						try {
							__DEC_messageSend_coveredBy_789778 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_789778
									.next();

							// check object __DEC_messageSend_coveredBy_789778 is really bound
							JavaSDM.ensure(__DEC_messageSend_coveredBy_789778 != null);
							// check isomorphic binding between objects __DEC_messageSend_coveredBy_789778 and line 
							JavaSDM.ensure(!__DEC_messageSend_coveredBy_789778
									.equals(line));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_669261
					fujaba__Success = false;

					fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_669261 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageReceive,
											Message.class, "receiveEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_669261
									.hasNext()) {
						try {
							__DEC_messageReceive_receiveEvent_669261 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_669261
									.next();

							// check object __DEC_messageReceive_receiveEvent_669261 is really bound
							JavaSDM.ensure(__DEC_messageReceive_receiveEvent_669261 != null);
							// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_669261 and message 
							JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_669261
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_562635
					fujaba__Success = false;

					fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_562635 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageSend,
											Message.class, "receiveEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_562635
									.hasNext()) {
						try {
							__DEC_messageSend_receiveEvent_562635 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_562635
									.next();

							// check object __DEC_messageSend_receiveEvent_562635 is really bound
							JavaSDM.ensure(__DEC_messageSend_receiveEvent_562635 != null);
							// check isomorphic binding between objects __DEC_messageSend_receiveEvent_562635 and message 
							JavaSDM.ensure(!__DEC_messageSend_receiveEvent_562635
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_23864
					fujaba__Success = false;

					fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_23864 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageReceive,
											Message.class, "sendEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_23864
									.hasNext()) {
						try {
							__DEC_messageReceive_sendEvent_23864 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_23864
									.next();

							// check object __DEC_messageReceive_sendEvent_23864 is really bound
							JavaSDM.ensure(__DEC_messageReceive_sendEvent_23864 != null);
							// check isomorphic binding between objects __DEC_messageReceive_sendEvent_23864 and message 
							JavaSDM.ensure(!__DEC_messageReceive_sendEvent_23864
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_847687
					fujaba__Success = false;

					fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_847687 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageSend,
											Message.class, "sendEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_847687
									.hasNext()) {
						try {
							__DEC_messageSend_sendEvent_847687 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_847687
									.next();

							// check object __DEC_messageSend_sendEvent_847687 is really bound
							JavaSDM.ensure(__DEC_messageSend_sendEvent_847687 != null);
							// check isomorphic binding between objects __DEC_messageSend_sendEvent_847687 and message 
							JavaSDM.ensure(!__DEC_messageSend_sendEvent_847687
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link message from message to __DEC_message_message_633571
					fujaba__Success = false;

					fujaba__IterMessageTo__DEC_message_message_633571 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(message,
											MessageEnd.class, "message"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageTo__DEC_message_message_633571
									.hasNext()) {
						try {
							__DEC_message_message_633571 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_633571
									.next();

							// check object __DEC_message_message_633571 is really bound
							JavaSDM.ensure(__DEC_message_message_633571 != null);
							// check isomorphic binding between objects __DEC_message_message_633571 and messageReceive 
							JavaSDM.ensure(!__DEC_message_message_633571
									.equals(messageReceive));

							// check isomorphic binding between objects __DEC_message_message_633571 and messageSend 
							JavaSDM.ensure(!__DEC_message_message_633571
									.equals(messageSend));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_coveredBy is really bound
				JavaSDM.ensure(_edge_coveredBy != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check link fragment from messageReceive to interaction
				JavaSDM.ensure(!(interaction.equals(messageReceive
						.getEnclosingInteraction())));

				// check link fragment from messageSend to interaction
				JavaSDM.ensure(!(interaction.equals(messageSend
						.getEnclosingInteraction())));

				// check link lifeline from line to interaction
				JavaSDM.ensure(interaction.equals(line.getInteraction()));

				// check link message from message to interaction
				JavaSDM.ensure(interaction.equals(message.getInteraction()));

				// check link message from messageReceive to message
				JavaSDM.ensure(message.equals(messageReceive.getMessage()));

				// check link message from messageSend to message
				JavaSDM.ensure(message.equals(messageSend.getMessage()));

				// check link receiveEvent from message to messageReceive
				JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

				// check link receiveEvent from message to messageSend
				JavaSDM.ensure(!(messageSend.equals(message.getReceiveEvent())));

				// check link sendEvent from message to messageSend
				JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

				// check link sendEvent from message to messageReceive
				JavaSDM.ensure(!(messageReceive.equals(message.getSendEvent())));

				// check link src from _edge_coveredBy to line
				JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

				// check link trg from _edge_coveredBy to messageSend
				JavaSDM.ensure(messageSend.equals(_edge_coveredBy.getTrg()));

				// check link covered from line to messageReceive
				JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

				// check link covered from line to messageSend
				JavaSDM.ensure(line.getCoveredBy().contains(messageSend));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_BWD(match, message,
						interaction, messageSend, messageReceive, line);
				if (fujaba__Success) {
					// statement node ''
					fujaba__Success = this.checkTypes_BWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_10(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_919009 = null;
		Interaction __DEC_messageSend_enclosingInteraction_118004 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_809228 = null;
		Lifeline __DEC_messageReceive_coveredBy_809228 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_242877 = null;
		Lifeline __DEC_messageSend_coveredBy_242877 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_952421 = null;
		Message __DEC_messageReceive_receiveEvent_952421 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_11 = null;
		Message __DEC_messageSend_receiveEvent_11 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_384874 = null;
		Message __DEC_messageReceive_sendEvent_384874 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_919294 = null;
		Message __DEC_messageSend_sendEvent_919294 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_596264 = null;
		MessageEnd __DEC_message_message_596264 = null;
		Match match = null;
		Iterator fujaba__IterMessageSendTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// check link lifeline from line to interaction
			JavaSDM.ensure(interaction.equals(line.getInteraction()));

			// check link covered from line to messageReceive
			JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

			// check link covered from line to messageSend
			JavaSDM.ensure(line.getCoveredBy().contains(messageSend));

			// iterate to-many link trg from messageSend to _edge_coveredBy
			fujaba__Success = false;

			fujaba__IterMessageSendTo_edge_coveredBy = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(
							messageSend, EMoflonEdge.class, "trg")).iterator();

			while (fujaba__IterMessageSendTo_edge_coveredBy.hasNext()) {
				try {
					_edge_coveredBy = (EMoflonEdge) fujaba__IterMessageSendTo_edge_coveredBy
							.next();

					// check object _edge_coveredBy is really bound
					JavaSDM.ensure(_edge_coveredBy != null);
					// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
					JavaSDM.ensure(!_edge_coveredBy.equals(_edge_covered));

					// check link src from _edge_coveredBy to line
					JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_919009 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_919009 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_919009 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_919009 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_919009
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_118004 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_118004 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_118004 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_118004 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_118004
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_809228
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_809228 = new ArrayList(
									messageReceive.getCovered()).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_809228
											.hasNext()) {
								try {
									__DEC_messageReceive_coveredBy_809228 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_809228
											.next();

									// check object __DEC_messageReceive_coveredBy_809228 is really bound
									JavaSDM.ensure(__DEC_messageReceive_coveredBy_809228 != null);
									// check isomorphic binding between objects __DEC_messageReceive_coveredBy_809228 and line 
									JavaSDM.ensure(!__DEC_messageReceive_coveredBy_809228
											.equals(line));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_242877
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_242877 = new ArrayList(
									messageSend.getCovered()).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_242877
											.hasNext()) {
								try {
									__DEC_messageSend_coveredBy_242877 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_242877
											.next();

									// check object __DEC_messageSend_coveredBy_242877 is really bound
									JavaSDM.ensure(__DEC_messageSend_coveredBy_242877 != null);
									// check isomorphic binding between objects __DEC_messageSend_coveredBy_242877 and line 
									JavaSDM.ensure(!__DEC_messageSend_coveredBy_242877
											.equals(line));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_952421
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_952421 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_952421
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_952421 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_952421
											.next();

									// check object __DEC_messageReceive_receiveEvent_952421 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_952421 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_952421 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_952421
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_11
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_11 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_11
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_11 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_11
											.next();

									// check object __DEC_messageSend_receiveEvent_11 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_11 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_11 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_11
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_384874
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_384874 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_384874
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_384874 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_384874
											.next();

									// check object __DEC_messageReceive_sendEvent_384874 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_384874 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_384874 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_384874
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_919294
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_919294 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_919294
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_919294 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_919294
											.next();

									// check object __DEC_messageSend_sendEvent_919294 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_919294 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_919294 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_919294
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_596264
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_596264 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_596264
											.hasNext()) {
								try {
									__DEC_message_message_596264 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_596264
											.next();

									// check object __DEC_message_message_596264 is really bound
									JavaSDM.ensure(__DEC_message_message_596264 != null);
									// check isomorphic binding between objects __DEC_message_message_596264 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_596264
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_596264 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_596264
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_covered is really bound
						JavaSDM.ensure(_edge_covered != null);
						// check object _edge_coveredBy is really bound
						JavaSDM.ensure(_edge_coveredBy != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
						JavaSDM.ensure(!_edge_coveredBy.equals(_edge_covered));

						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_covered to messageSend
						JavaSDM.ensure(messageSend.equals(_edge_covered
								.getSrc()));

						// check link src from _edge_coveredBy to line
						JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

						// check link trg from _edge_covered to line
						JavaSDM.ensure(line.equals(_edge_covered.getTrg()));

						// check link trg from _edge_coveredBy to messageSend
						JavaSDM.ensure(messageSend.equals(_edge_coveredBy
								.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// check link covered from line to messageSend
						JavaSDM.ensure(line.getCoveredBy()
								.contains(messageSend));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node ''
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_11(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_642332 = null;
		Interaction __DEC_messageSend_enclosingInteraction_814082 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_578611 = null;
		Lifeline __DEC_messageReceive_coveredBy_578611 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_123864 = null;
		Lifeline __DEC_messageSend_coveredBy_123864 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_701394 = null;
		Message __DEC_messageReceive_receiveEvent_701394 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_126960 = null;
		Message __DEC_messageSend_receiveEvent_126960 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_382612 = null;
		Message __DEC_messageReceive_sendEvent_382612 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_685194 = null;
		Message __DEC_messageSend_sendEvent_685194 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_275122 = null;
		MessageEnd __DEC_message_message_275122 = null;
		Match match = null;
		Iterator fujaba__IterMessageSendToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link src from _edge_message to messageReceive
			JavaSDM.ensure(messageReceive.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageSend to line
			fujaba__Success = false;

			fujaba__IterMessageSendToLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageSendToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// check link covered from line to messageReceive
					JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_642332 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_642332 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_642332 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_642332 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_642332
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_814082 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_814082 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_814082 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_814082 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_814082
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_578611
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_578611 = new ArrayList(
									messageReceive.getCovered()).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_578611
											.hasNext()) {
								try {
									__DEC_messageReceive_coveredBy_578611 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_578611
											.next();

									// check object __DEC_messageReceive_coveredBy_578611 is really bound
									JavaSDM.ensure(__DEC_messageReceive_coveredBy_578611 != null);
									// check isomorphic binding between objects __DEC_messageReceive_coveredBy_578611 and line 
									JavaSDM.ensure(!__DEC_messageReceive_coveredBy_578611
											.equals(line));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_123864
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_123864 = new ArrayList(
									messageSend.getCovered()).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_123864
											.hasNext()) {
								try {
									__DEC_messageSend_coveredBy_123864 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_123864
											.next();

									// check object __DEC_messageSend_coveredBy_123864 is really bound
									JavaSDM.ensure(__DEC_messageSend_coveredBy_123864 != null);
									// check isomorphic binding between objects __DEC_messageSend_coveredBy_123864 and line 
									JavaSDM.ensure(!__DEC_messageSend_coveredBy_123864
											.equals(line));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_701394
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_701394 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_701394
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_701394 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_701394
											.next();

									// check object __DEC_messageReceive_receiveEvent_701394 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_701394 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_701394 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_701394
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_126960
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_126960 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_126960
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_126960 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_126960
											.next();

									// check object __DEC_messageSend_receiveEvent_126960 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_126960 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_126960 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_126960
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_382612
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_382612 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_382612
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_382612 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_382612
											.next();

									// check object __DEC_messageReceive_sendEvent_382612 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_382612 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_382612 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_382612
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_685194
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_685194 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_685194
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_685194 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_685194
											.next();

									// check object __DEC_messageSend_sendEvent_685194 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_685194 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_685194 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_685194
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_275122
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_275122 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_275122
											.hasNext()) {
								try {
									__DEC_message_message_275122 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_275122
											.next();

									// check object __DEC_message_message_275122 is really bound
									JavaSDM.ensure(__DEC_message_message_275122 != null);
									// check isomorphic binding between objects __DEC_message_message_275122 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_275122
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_275122 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_275122
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_message is really bound
						JavaSDM.ensure(_edge_message != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_message to messageReceive
						JavaSDM.ensure(messageReceive.equals(_edge_message
								.getSrc()));

						// check link trg from _edge_message to message
						JavaSDM.ensure(message.equals(_edge_message.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// check link covered from line to messageSend
						JavaSDM.ensure(line.getCoveredBy()
								.contains(messageSend));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node ''
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_12(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_629011 = null;
		Interaction __DEC_messageSend_enclosingInteraction_235052 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_18011 = null;
		Lifeline __DEC_messageReceive_coveredBy_18011 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_187210 = null;
		Lifeline __DEC_messageSend_coveredBy_187210 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_244246 = null;
		Message __DEC_messageReceive_receiveEvent_244246 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_173307 = null;
		Message __DEC_messageSend_receiveEvent_173307 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_13924 = null;
		Message __DEC_messageReceive_sendEvent_13924 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_100750 = null;
		Message __DEC_messageSend_sendEvent_100750 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_764601 = null;
		MessageEnd __DEC_message_message_764601 = null;
		Match match = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link lifeline from line to interaction
			JavaSDM.ensure(interaction.equals(line.getInteraction()));

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link covered from line to messageReceive
			JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

			// check link covered from line to messageSend
			JavaSDM.ensure(line.getCoveredBy().contains(messageSend));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// negative check for link fragment from messageReceive
				JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
				// negative check for link fragment from messageSend
				JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_messageReceive_enclosingInteraction_629011 = messageReceive
							.getEnclosingInteraction();

					// check object __DEC_messageReceive_enclosingInteraction_629011 is really bound
					JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_629011 != null);

					// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_629011 and interaction 
					JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_629011
							.equals(interaction));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_messageSend_enclosingInteraction_235052 = messageSend
							.getEnclosingInteraction();

					// check object __DEC_messageSend_enclosingInteraction_235052 is really bound
					JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_235052 != null);

					// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_235052 and interaction 
					JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_235052
							.equals(interaction));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_18011
					fujaba__Success = false;

					fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_18011 = new ArrayList(
							messageReceive.getCovered()).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_18011
									.hasNext()) {
						try {
							__DEC_messageReceive_coveredBy_18011 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_18011
									.next();

							// check object __DEC_messageReceive_coveredBy_18011 is really bound
							JavaSDM.ensure(__DEC_messageReceive_coveredBy_18011 != null);
							// check isomorphic binding between objects __DEC_messageReceive_coveredBy_18011 and line 
							JavaSDM.ensure(!__DEC_messageReceive_coveredBy_18011
									.equals(line));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_187210
					fujaba__Success = false;

					fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_187210 = new ArrayList(
							messageSend.getCovered()).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_187210
									.hasNext()) {
						try {
							__DEC_messageSend_coveredBy_187210 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_187210
									.next();

							// check object __DEC_messageSend_coveredBy_187210 is really bound
							JavaSDM.ensure(__DEC_messageSend_coveredBy_187210 != null);
							// check isomorphic binding between objects __DEC_messageSend_coveredBy_187210 and line 
							JavaSDM.ensure(!__DEC_messageSend_coveredBy_187210
									.equals(line));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_244246
					fujaba__Success = false;

					fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_244246 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageReceive,
											Message.class, "receiveEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_244246
									.hasNext()) {
						try {
							__DEC_messageReceive_receiveEvent_244246 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_244246
									.next();

							// check object __DEC_messageReceive_receiveEvent_244246 is really bound
							JavaSDM.ensure(__DEC_messageReceive_receiveEvent_244246 != null);
							// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_244246 and message 
							JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_244246
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_173307
					fujaba__Success = false;

					fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_173307 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageSend,
											Message.class, "receiveEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_173307
									.hasNext()) {
						try {
							__DEC_messageSend_receiveEvent_173307 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_173307
									.next();

							// check object __DEC_messageSend_receiveEvent_173307 is really bound
							JavaSDM.ensure(__DEC_messageSend_receiveEvent_173307 != null);
							// check isomorphic binding between objects __DEC_messageSend_receiveEvent_173307 and message 
							JavaSDM.ensure(!__DEC_messageSend_receiveEvent_173307
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_13924
					fujaba__Success = false;

					fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_13924 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageReceive,
											Message.class, "sendEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_13924
									.hasNext()) {
						try {
							__DEC_messageReceive_sendEvent_13924 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_13924
									.next();

							// check object __DEC_messageReceive_sendEvent_13924 is really bound
							JavaSDM.ensure(__DEC_messageReceive_sendEvent_13924 != null);
							// check isomorphic binding between objects __DEC_messageReceive_sendEvent_13924 and message 
							JavaSDM.ensure(!__DEC_messageReceive_sendEvent_13924
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_100750
					fujaba__Success = false;

					fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_100750 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageSend,
											Message.class, "sendEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_100750
									.hasNext()) {
						try {
							__DEC_messageSend_sendEvent_100750 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_100750
									.next();

							// check object __DEC_messageSend_sendEvent_100750 is really bound
							JavaSDM.ensure(__DEC_messageSend_sendEvent_100750 != null);
							// check isomorphic binding between objects __DEC_messageSend_sendEvent_100750 and message 
							JavaSDM.ensure(!__DEC_messageSend_sendEvent_100750
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link message from message to __DEC_message_message_764601
					fujaba__Success = false;

					fujaba__IterMessageTo__DEC_message_message_764601 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(message,
											MessageEnd.class, "message"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageTo__DEC_message_message_764601
									.hasNext()) {
						try {
							__DEC_message_message_764601 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_764601
									.next();

							// check object __DEC_message_message_764601 is really bound
							JavaSDM.ensure(__DEC_message_message_764601 != null);
							// check isomorphic binding between objects __DEC_message_message_764601 and messageReceive 
							JavaSDM.ensure(!__DEC_message_message_764601
									.equals(messageReceive));

							// check isomorphic binding between objects __DEC_message_message_764601 and messageSend 
							JavaSDM.ensure(!__DEC_message_message_764601
									.equals(messageSend));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_coveredBy is really bound
				JavaSDM.ensure(_edge_coveredBy != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check link fragment from messageReceive to interaction
				JavaSDM.ensure(!(interaction.equals(messageReceive
						.getEnclosingInteraction())));

				// check link fragment from messageSend to interaction
				JavaSDM.ensure(!(interaction.equals(messageSend
						.getEnclosingInteraction())));

				// check link lifeline from line to interaction
				JavaSDM.ensure(interaction.equals(line.getInteraction()));

				// check link message from message to interaction
				JavaSDM.ensure(interaction.equals(message.getInteraction()));

				// check link message from messageReceive to message
				JavaSDM.ensure(message.equals(messageReceive.getMessage()));

				// check link message from messageSend to message
				JavaSDM.ensure(message.equals(messageSend.getMessage()));

				// check link receiveEvent from message to messageReceive
				JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

				// check link receiveEvent from message to messageSend
				JavaSDM.ensure(!(messageSend.equals(message.getReceiveEvent())));

				// check link sendEvent from message to messageSend
				JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

				// check link sendEvent from message to messageReceive
				JavaSDM.ensure(!(messageReceive.equals(message.getSendEvent())));

				// check link src from _edge_coveredBy to line
				JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

				// check link trg from _edge_coveredBy to messageReceive
				JavaSDM.ensure(messageReceive.equals(_edge_coveredBy.getTrg()));

				// check link covered from line to messageReceive
				JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

				// check link covered from line to messageSend
				JavaSDM.ensure(line.getCoveredBy().contains(messageSend));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_BWD(match, message,
						interaction, messageSend, messageReceive, line);
				if (fujaba__Success) {
					// statement node ''
					fujaba__Success = this.checkTypes_BWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_13(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_942084 = null;
		Interaction __DEC_messageSend_enclosingInteraction_841807 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_581207 = null;
		Lifeline __DEC_messageReceive_coveredBy_581207 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_916761 = null;
		Lifeline __DEC_messageSend_coveredBy_916761 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_932857 = null;
		Message __DEC_messageReceive_receiveEvent_932857 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_943806 = null;
		Message __DEC_messageSend_receiveEvent_943806 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_836618 = null;
		Message __DEC_messageReceive_sendEvent_836618 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_583954 = null;
		Message __DEC_messageSend_sendEvent_583954 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_39532 = null;
		MessageEnd __DEC_message_message_39532 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link lifeline from line to interaction
			JavaSDM.ensure(interaction.equals(line.getInteraction()));

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link covered from line to messageReceive
			JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

			// check link covered from line to messageSend
			JavaSDM.ensure(line.getCoveredBy().contains(messageSend));

			// iterate to-many link trg from messageReceive to _edge_coveredBy
			fujaba__Success = false;

			fujaba__IterMessageReceiveTo_edge_coveredBy = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(
							messageReceive, EMoflonEdge.class, "trg"))
					.iterator();

			while (fujaba__IterMessageReceiveTo_edge_coveredBy.hasNext()) {
				try {
					_edge_coveredBy = (EMoflonEdge) fujaba__IterMessageReceiveTo_edge_coveredBy
							.next();

					// check object _edge_coveredBy is really bound
					JavaSDM.ensure(_edge_coveredBy != null);
					// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
					JavaSDM.ensure(!_edge_coveredBy.equals(_edge_covered));

					// check link src from _edge_coveredBy to line
					JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_942084 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_942084 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_942084 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_942084 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_942084
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_841807 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_841807 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_841807 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_841807 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_841807
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link covered from messageReceive to __DEC_messageReceive_coveredBy_581207
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_581207 = new ArrayList(
									messageReceive.getCovered()).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_581207
											.hasNext()) {
								try {
									__DEC_messageReceive_coveredBy_581207 = (Lifeline) fujaba__IterMessageReceiveTo__DEC_messageReceive_coveredBy_581207
											.next();

									// check object __DEC_messageReceive_coveredBy_581207 is really bound
									JavaSDM.ensure(__DEC_messageReceive_coveredBy_581207 != null);
									// check isomorphic binding between objects __DEC_messageReceive_coveredBy_581207 and line 
									JavaSDM.ensure(!__DEC_messageReceive_coveredBy_581207
											.equals(line));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link covered from messageSend to __DEC_messageSend_coveredBy_916761
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_916761 = new ArrayList(
									messageSend.getCovered()).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_916761
											.hasNext()) {
								try {
									__DEC_messageSend_coveredBy_916761 = (Lifeline) fujaba__IterMessageSendTo__DEC_messageSend_coveredBy_916761
											.next();

									// check object __DEC_messageSend_coveredBy_916761 is really bound
									JavaSDM.ensure(__DEC_messageSend_coveredBy_916761 != null);
									// check isomorphic binding between objects __DEC_messageSend_coveredBy_916761 and line 
									JavaSDM.ensure(!__DEC_messageSend_coveredBy_916761
											.equals(line));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_932857
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_932857 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_932857
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_932857 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_932857
											.next();

									// check object __DEC_messageReceive_receiveEvent_932857 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_932857 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_932857 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_932857
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_943806
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_943806 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_943806
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_943806 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_943806
											.next();

									// check object __DEC_messageSend_receiveEvent_943806 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_943806 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_943806 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_943806
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_836618
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_836618 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_836618
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_836618 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_836618
											.next();

									// check object __DEC_messageReceive_sendEvent_836618 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_836618 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_836618 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_836618
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_583954
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_583954 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_583954
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_583954 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_583954
											.next();

									// check object __DEC_messageSend_sendEvent_583954 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_583954 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_583954 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_583954
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_39532
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_39532 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_39532
											.hasNext()) {
								try {
									__DEC_message_message_39532 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_39532
											.next();

									// check object __DEC_message_message_39532 is really bound
									JavaSDM.ensure(__DEC_message_message_39532 != null);
									// check isomorphic binding between objects __DEC_message_message_39532 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_39532
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_39532 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_39532
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_covered is really bound
						JavaSDM.ensure(_edge_covered != null);
						// check object _edge_coveredBy is really bound
						JavaSDM.ensure(_edge_coveredBy != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
						JavaSDM.ensure(!_edge_coveredBy.equals(_edge_covered));

						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_covered to messageReceive
						JavaSDM.ensure(messageReceive.equals(_edge_covered
								.getSrc()));

						// check link src from _edge_coveredBy to line
						JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

						// check link trg from _edge_covered to line
						JavaSDM.ensure(line.equals(_edge_covered.getTrg()));

						// check link trg from _edge_coveredBy to messageReceive
						JavaSDM.ensure(messageReceive.equals(_edge_coveredBy
								.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// check link covered from line to messageSend
						JavaSDM.ensure(line.getCoveredBy()
								.contains(messageSend));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node ''
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			Flow flow, NormalStep step, Message message,
			Interaction interaction, NormalStepToMessage stepToMessage,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Actor actor, ActorToLifeline actorToLine,
			ModelgeneratorRuleResult ruleResult) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals

		// Create attribute variables

		// Create explicit parameters

		// Create unbound variables
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", csp);
		var_step_name.setType("");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", csp);
		var_message_name.setType("");

		// Create constraints
		Eq eq = new Eq();

		csp.getConstraints().add(eq);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public int eDerivedOperationID(int baseOperationID, Class<?> baseClass) {
		if (baseClass == NormalStepToMessageRule.class) {
			switch (baseOperationID) {
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_FWD__MATCH:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPLICABLE_FWD__MATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___PERFORM_FWD__ISAPPLICABLEMATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_NORMALSTEP_INTERACTION_LIFELINE_ACTOR_ACTORTOLIFELINE:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_NORMALSTEP_INTERACTION_LIFELINE_ACTOR_ACTORTOLIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___CHECK_TYPES_FWD__MATCH:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___CHECK_TYPES_FWD__MATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_BWD__MATCH:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPLICABLE_BWD__MATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___PERFORM_BWD__ISAPPLICABLEMATCH:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___PERFORM_BWD__ISAPPLICABLEMATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_ACTOR_ACTORTOLIFELINE:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_ACTOR_ACTORTOLIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___CHECK_TYPES_BWD__MATCH:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___CHECK_TYPES_BWD__MATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_4__EMOFLONEDGE:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_4__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_5__EMOFLONEDGE:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_5__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_4__EMOFLONEDGE:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_4__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_5__EMOFLONEDGE:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_5__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_6__EMOFLONEDGE:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_6__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_7__EMOFLONEDGE:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_7__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_8__EMOFLONEDGE:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_8__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_9__EMOFLONEDGE:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_9__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_10__EMOFLONEDGE:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_10__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_11__EMOFLONEDGE:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_11__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_12__EMOFLONEDGE:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_12__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_13__EMOFLONEDGE:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_13__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___GENERATE_MODEL__RULEENTRYCONTAINER_USECASETOINTERACTION:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___GENERATE_MODEL__RULEENTRYCONTAINER_USECASETOINTERACTION;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___GENERATE_MODEL_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_NORMALSTEP_MESSAGE_INTERACTION_NORMALSTEPTOMESSAGE_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_ACTOR_ACTORTOLIFELINE_MODELGENERATORRULERESULT:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___GENERATE_MODEL_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_NORMALSTEP_MESSAGE_INTERACTION_NORMALSTEPTOMESSAGE_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_ACTOR_ACTORTOLIFELINE_MODELGENERATORRULERESULT;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___GENERATE_MODEL_CHECK_CSP_BWD__CSP:
				return RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___GENERATE_MODEL_CHECK_CSP_BWD__CSP;
			default:
				return -1;
			}
		}
		return super.eDerivedOperationID(baseOperationID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eInvoke(int operationID, EList<?> arguments)
			throws InvocationTargetException {
		switch (operationID) {
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR:
			return isAppropriate_FWD((Match) arguments.get(0),
					(NormalStep) arguments.get(1),
					(AlternativeFlowAlternative) arguments.get(2),
					(AlternativeFlow) arguments.get(3),
					(UseCase) arguments.get(4), (Flow) arguments.get(5),
					(Actor) arguments.get(6));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPLICABLE_FWD__MATCH:
			return isApplicable_FWD((Match) arguments.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
			return perform_FWD((IsApplicableMatch) arguments.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR:
			registerObjectsToMatch_FWD((Match) arguments.get(0),
					(NormalStep) arguments.get(1),
					(AlternativeFlowAlternative) arguments.get(2),
					(AlternativeFlow) arguments.get(3),
					(UseCase) arguments.get(4), (Flow) arguments.get(5),
					(Actor) arguments.get(6));
			return null;
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR:
			return isAppropriate_solveCsp_FWD((Match) arguments.get(0),
					(NormalStep) arguments.get(1),
					(AlternativeFlowAlternative) arguments.get(2),
					(AlternativeFlow) arguments.get(3),
					(UseCase) arguments.get(4), (Flow) arguments.get(5),
					(Actor) arguments.get(6));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP:
			return isAppropriate_checkCsp_FWD((CSP) arguments.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_LIFELINE_USECASE_USECASETOINTERACTION_FLOW_INTERACTION_ACTOR_ACTORTOLIFELINE:
			return isApplicable_solveCsp_FWD(
					(IsApplicableMatch) arguments.get(0),
					(NormalStep) arguments.get(1),
					(AlternativeFlowAlternative) arguments.get(2),
					(AlternativeFlow) arguments.get(3),
					(Lifeline) arguments.get(4), (UseCase) arguments.get(5),
					(UseCaseToInteraction) arguments.get(6),
					(Flow) arguments.get(7), (Interaction) arguments.get(8),
					(Actor) arguments.get(9),
					(ActorToLifeline) arguments.get(10));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP:
			return isApplicable_checkCsp_FWD((CSP) arguments.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_FWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20));
			return null;
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___CHECK_TYPES_FWD__MATCH:
			return checkTypes_FWD((Match) arguments.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD__MATCH_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_LIFELINE_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
			return isAppropriate_BWD((Match) arguments.get(0),
					(CombinedFragment) arguments.get(1),
					(InteractionOperand) arguments.get(2),
					(InteractionConstraint) arguments.get(3),
					(LiteralString) arguments.get(4),
					(Lifeline) arguments.get(5), (Message) arguments.get(6),
					(Interaction) arguments.get(7),
					(MessageOccurrenceSpecification) arguments.get(8),
					(MessageOccurrenceSpecification) arguments.get(9));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPLICABLE_BWD__MATCH:
			return isApplicable_BWD((Match) arguments.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___PERFORM_BWD__ISAPPLICABLEMATCH:
			return perform_BWD((IsApplicableMatch) arguments.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_LIFELINE_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
			registerObjectsToMatch_BWD((Match) arguments.get(0),
					(CombinedFragment) arguments.get(1),
					(InteractionOperand) arguments.get(2),
					(InteractionConstraint) arguments.get(3),
					(LiteralString) arguments.get(4),
					(Lifeline) arguments.get(5), (Message) arguments.get(6),
					(Interaction) arguments.get(7),
					(MessageOccurrenceSpecification) arguments.get(8),
					(MessageOccurrenceSpecification) arguments.get(9));
			return null;
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_LIFELINE_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
			return isAppropriate_solveCsp_BWD((Match) arguments.get(0),
					(CombinedFragment) arguments.get(1),
					(InteractionOperand) arguments.get(2),
					(InteractionConstraint) arguments.get(3),
					(LiteralString) arguments.get(4),
					(Lifeline) arguments.get(5), (Message) arguments.get(6),
					(Interaction) arguments.get(7),
					(MessageOccurrenceSpecification) arguments.get(8),
					(MessageOccurrenceSpecification) arguments.get(9));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP:
			return isAppropriate_checkCsp_BWD((CSP) arguments.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_LIFELINE_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_ACTOR_ACTORTOLIFELINE:
			return isApplicable_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(CombinedFragment) arguments.get(1),
					(InteractionOperand) arguments.get(2),
					(InteractionConstraint) arguments.get(3),
					(LiteralString) arguments.get(4),
					(Lifeline) arguments.get(5), (UseCase) arguments.get(6),
					(UseCaseToInteraction) arguments.get(7),
					(Flow) arguments.get(8), (Message) arguments.get(9),
					(Interaction) arguments.get(10),
					(MessageOccurrenceSpecification) arguments.get(11),
					(MessageOccurrenceSpecification) arguments.get(12),
					(Actor) arguments.get(13),
					(ActorToLifeline) arguments.get(14));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP:
			return isApplicable_checkCsp_BWD((CSP) arguments.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_BWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20));
			return null;
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___CHECK_TYPES_BWD__MATCH:
			return checkTypes_BWD((Match) arguments.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_10__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_10((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_11__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_11((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_42__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_42((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_43__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_43((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_44__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_44((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_45__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_45((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_46__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_46((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_47__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_47((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_48__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_48((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_12__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_12((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_13__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_13((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_49__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_49((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_50__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_50((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_51__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_51((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_52__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_52((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_53__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_53((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_54__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_54((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_55__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_55((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_56__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_56((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_57__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_57((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_58__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_58((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH:
			return checkAttributes_FWD((TripleMatch) arguments.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH:
			return checkAttributes_BWD((TripleMatch) arguments.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___GENERATE_MODEL__RULEENTRYCONTAINER_USECASETOINTERACTION:
			return generateModel((RuleEntryContainer) arguments.get(0),
					(UseCaseToInteraction) arguments.get(1));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___GENERATE_MODEL_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_COMBINEDFRAGMENT_NORMALSTEPTOCOMBINEDFRAGMENT_INTERACTIONOPERAND_STEPALTERNATIVETOINTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_ALTERNATIVEFLOW_LIFELINE_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_NORMALSTEPTOMESSAGE_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_ACTOR_ACTORTOLIFELINE_MODELGENERATORRULERESULT:
			return generateModel_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(NormalStep) arguments.get(1),
					(AlternativeFlowAlternative) arguments.get(2),
					(CombinedFragment) arguments.get(3),
					(NormalStepToCombinedFragment) arguments.get(4),
					(InteractionOperand) arguments.get(5),
					(StepAlternativeToInteractionOperand) arguments.get(6),
					(InteractionConstraint) arguments.get(7),
					(LiteralString) arguments.get(8),
					(AlternativeFlow) arguments.get(9),
					(Lifeline) arguments.get(10), (UseCase) arguments.get(11),
					(UseCaseToInteraction) arguments.get(12),
					(Flow) arguments.get(13), (Message) arguments.get(14),
					(Interaction) arguments.get(15),
					(NormalStepToMessage) arguments.get(16),
					(MessageOccurrenceSpecification) arguments.get(17),
					(MessageOccurrenceSpecification) arguments.get(18),
					(Actor) arguments.get(19),
					(ActorToLifeline) arguments.get(20),
					(ModelgeneratorRuleResult) arguments.get(21));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___GENERATE_MODEL_CHECK_CSP_BWD__CSP:
			return generateModel_checkCsp_BWD((CSP) arguments.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
			return isAppropriate_FWD((Match) arguments.get(0),
					(UseCase) arguments.get(1), (Flow) arguments.get(2),
					(NormalStep) arguments.get(3), (Actor) arguments.get(4));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
			registerObjectsToMatch_FWD((Match) arguments.get(0),
					(UseCase) arguments.get(1), (Flow) arguments.get(2),
					(NormalStep) arguments.get(3), (Actor) arguments.get(4));
			return null;
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
			return isAppropriate_solveCsp_FWD((Match) arguments.get(0),
					(UseCase) arguments.get(1), (Flow) arguments.get(2),
					(NormalStep) arguments.get(3), (Actor) arguments.get(4));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_NORMALSTEP_INTERACTION_LIFELINE_ACTOR_ACTORTOLIFELINE:
			return isApplicable_solveCsp_FWD(
					(IsApplicableMatch) arguments.get(0),
					(UseCase) arguments.get(1),
					(UseCaseToInteraction) arguments.get(2),
					(Flow) arguments.get(3), (NormalStep) arguments.get(4),
					(Interaction) arguments.get(5),
					(Lifeline) arguments.get(6), (Actor) arguments.get(7),
					(ActorToLifeline) arguments.get(8));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_FWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12));
			return null;
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
			return isAppropriate_BWD((Match) arguments.get(0),
					(Message) arguments.get(1), (Interaction) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(Lifeline) arguments.get(5));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
			registerObjectsToMatch_BWD((Match) arguments.get(0),
					(Message) arguments.get(1), (Interaction) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(Lifeline) arguments.get(5));
			return null;
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
			return isAppropriate_solveCsp_BWD((Match) arguments.get(0),
					(Message) arguments.get(1), (Interaction) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(Lifeline) arguments.get(5));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_ACTOR_ACTORTOLIFELINE:
			return isApplicable_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(UseCase) arguments.get(1),
					(UseCaseToInteraction) arguments.get(2),
					(Flow) arguments.get(3), (Message) arguments.get(4),
					(Interaction) arguments.get(5),
					(MessageOccurrenceSpecification) arguments.get(6),
					(MessageOccurrenceSpecification) arguments.get(7),
					(Lifeline) arguments.get(8), (Actor) arguments.get(9),
					(ActorToLifeline) arguments.get(10));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_BWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12));
			return null;
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_4__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_4((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_5__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_5((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_4__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_4((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_5__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_5((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_6__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_6((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_7__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_7((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_8__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_8((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_9__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_9((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_10__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_10((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_11__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_11((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_12__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_12((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_13__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_13((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.STEP_TO_COMBINED_FRAGMENT_RULE___GENERATE_MODEL_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_NORMALSTEP_MESSAGE_INTERACTION_NORMALSTEPTOMESSAGE_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_ACTOR_ACTORTOLIFELINE_MODELGENERATORRULERESULT:
			return generateModel_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(UseCase) arguments.get(1),
					(UseCaseToInteraction) arguments.get(2),
					(Flow) arguments.get(3), (NormalStep) arguments.get(4),
					(Message) arguments.get(5), (Interaction) arguments.get(6),
					(NormalStepToMessage) arguments.get(7),
					(MessageOccurrenceSpecification) arguments.get(8),
					(MessageOccurrenceSpecification) arguments.get(9),
					(Lifeline) arguments.get(10), (Actor) arguments.get(11),
					(ActorToLifeline) arguments.get(12),
					(ModelgeneratorRuleResult) arguments.get(13));
		}
		return super.eInvoke(operationID, arguments);
	}
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} //StepToCombinedFragmentRuleImpl
