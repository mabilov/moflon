/**
 */
package UseCaseToModalSequenceDiagramIntegration.Rules;

import ModalSequenceDiagram.CombinedFragment;
import ModalSequenceDiagram.Constraint;
import ModalSequenceDiagram.Interaction;
import ModalSequenceDiagram.InteractionConstraint;
import ModalSequenceDiagram.InteractionOperand;
import ModalSequenceDiagram.Lifeline;
import ModalSequenceDiagram.LiteralString;
import ModalSequenceDiagram.Message;
import ModalSequenceDiagram.MessageEnd;
import ModalSequenceDiagram.MessageOccurrenceSpecification;
import ModalSequenceDiagram.ModalSequenceDiagramFactory;
import ModalSequenceDiagram.Model;

import TGGLanguage.csp.*;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NamedFlow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import UseCaseToModalSequenceDiagramIntegration.ActorToLifeline;
import UseCaseToModalSequenceDiagramIntegration.FlowToInteractionFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToMessage;
import UseCaseToModalSequenceDiagramIntegration.PackageDeclarationToPackage;
import UseCaseToModalSequenceDiagramIntegration.ParallelStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.StepAlternativeToInteractionOperand;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToInteraction;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToModalSequenceDiagramIntegrationFactory;
import UseCaseToModalSequenceDiagramIntegration.UseCasesModelToModel;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>User Step BF Message Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see UseCaseToModalSequenceDiagramIntegration.Rules.RulesPackage#getUserStepBFMessageRule()
 * @model
 * @generated
 */
public interface UserStepBFMessageRule extends AbstractRule,
		NormalStepBFToMessageRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __step_actor_actor = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __packageDeclaration_actors_sysActor = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object sysActor is really bound\n         JavaSDM.ensure ( sysActor != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects sysActor and actor \n         JavaSDM.ensure ( !sysActor.equals (actor) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,actor,sysActor,packageDeclaration,flow,useCase,step));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check object sysActor is really bound\n            JavaSDM.ensure ( sysActor != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check isomorphic binding between objects sysActor and actor \n            JavaSDM.ensure ( !sysActor.equals (actor) );\n\n            // create object __step_actor_actor\n            __step_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __flow_steps_step\n            __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __flow_steps_step\n            __flow_steps_step.setName (\"steps\");\n            // assign attribute __step_actor_actor\n            __step_actor_actor.setName (\"actor\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,step,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__step_actor_actor,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flow_steps_step,\"toBeTranslatedEdges\");\n\n            // create link\n            __step_actor_actor.setTrg( actor);\n\n\n            // create link\n            __flow_steps_step.setSrc( flow);\n\n\n            // create link\n            __step_actor_actor.setSrc( step);\n\n\n            // create link\n            __flow_steps_step.setTrg( step);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check object sysActor is really bound\n            JavaSDM.ensure ( sysActor != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check isomorphic binding between objects sysActor and actor \n            JavaSDM.ensure ( !sysActor.equals (actor) );\n\n            // create object __useCase_flows_flow\n            __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __packageDeclaration_actors_sysActor\n            __packageDeclaration_actors_sysActor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __packageDeclaration_actors_actor\n            __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __packageDeclaration_useCases_useCase\n            __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __packageDeclaration_actors_actor\n            __packageDeclaration_actors_actor.setName (\"actors\");\n            // assign attribute __packageDeclaration_actors_sysActor\n            __packageDeclaration_actors_sysActor.setName (\"actors\");\n            // assign attribute __useCase_flows_flow\n            __useCase_flows_flow.setName (\"flows\");\n            // assign attribute __packageDeclaration_useCases_useCase\n            __packageDeclaration_useCases_useCase.setName (\"useCases\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__useCase_flows_flow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,packageDeclaration,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__packageDeclaration_actors_sysActor,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__packageDeclaration_actors_actor,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,actor,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,sysActor,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__packageDeclaration_useCases_useCase,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,useCase,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flow,\"contextNodes\");\n\n            // create link\n            __packageDeclaration_actors_actor.setTrg( actor);\n\n\n            // create link\n            __packageDeclaration_actors_sysActor.setTrg( sysActor);\n\n\n            // create link\n            __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n            // create link\n            __packageDeclaration_actors_sysActor.setSrc( packageDeclaration);\n\n\n            // create link\n            __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n            // create link\n            __useCase_flows_flow.setTrg( flow);\n\n\n            // create link\n            __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n            // create link\n            __useCase_flows_flow.setSrc( useCase);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,actor,sysActor,packageDeclaration,flow,useCase,step);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, Actor actor, Actor sysActor,
			PackageDeclaration packageDeclaration, BasicFlow flow,
			UseCase useCase, NormalStep step);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      ActorToLifeline actorToLine = null;\n      BasicFlow flow = null;\n      FlowToInteractionFragment flowToInteraction = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      PackageDeclaration packageDeclaration = null;\n      NormalStep step = null;\n      Actor sysActor = null;\n      ActorToLifeline sysActorToSysLine = null;\n      Lifeline sysLine = null;\n      UseCase useCase = null;\n      UseCaseToInteraction useCaseToInteraction = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Message message = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      NormalStepToMessage stepToMessage = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge message__sendEvent__messageSend = null;\n      EMoflonEdge message__interaction__interaction = null;\n      EMoflonEdge __step_actor_actor = null;\n      EMoflonEdge interaction__message__message = null;\n      EMoflonEdge stepToMessage__source__step = null;\n      EMoflonEdge messageReceive__covered__line = null;\n      EMoflonEdge messageReceive__message__message = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge messageSend__message__message = null;\n      EMoflonEdge interaction__fragment__messageSend = null;\n      EMoflonEdge interaction__fragment__messageReceive = null;\n      EMoflonEdge messageSend__enclosingInteraction__interaction = null;\n      EMoflonEdge message__receiveEvent__messageReceive = null;\n      EMoflonEdge line__coveredBy__messageReceive = null;\n      EMoflonEdge messageSend__covered__sysLine = null;\n      EMoflonEdge stepToMessage__target__message = null;\n      EMoflonEdge messageReceive__enclosingInteraction__interaction = null;\n      EMoflonEdge sysLine__coveredBy__messageSend = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"actorToLine\"));\n\n         // ensure correct type and really bound of object actorToLine\n         JavaSDM.ensure ( _TmpObject instanceof ActorToLifeline );\n         actorToLine = (ActorToLifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         flow = (BasicFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flowToInteraction\"));\n\n         // ensure correct type and really bound of object flowToInteraction\n         JavaSDM.ensure ( _TmpObject instanceof FlowToInteractionFragment );\n         flowToInteraction = (FlowToInteractionFragment) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"interaction\"));\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"line\"));\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"sysActor\"));\n\n         // ensure correct type and really bound of object sysActor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         sysActor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"sysActorToSysLine\"));\n\n         // ensure correct type and really bound of object sysActorToSysLine\n         JavaSDM.ensure ( _TmpObject instanceof ActorToLifeline );\n         sysActorToSysLine = (ActorToLifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"sysLine\"));\n\n         // ensure correct type and really bound of object sysLine\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         sysLine = (Lifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCaseToInteraction\"));\n\n         // ensure correct type and really bound of object useCaseToInteraction\n         JavaSDM.ensure ( _TmpObject instanceof UseCaseToInteraction );\n         useCaseToInteraction = (UseCaseToInteraction) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects sysActor and actor \n         JavaSDM.ensure ( !sysActor.equals (actor) );\n\n         // check isomorphic binding between objects sysActorToSysLine and actorToLine \n         JavaSDM.ensure ( !sysActorToSysLine.equals (actorToLine) );\n\n         // check isomorphic binding between objects sysLine and line \n         JavaSDM.ensure ( !sysLine.equals (line) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object messageSend\n         messageSend = ModalSequenceDiagramFactory.eINSTANCE.createMessageOccurrenceSpecification();\n\n         // create object message\n         message = ModalSequenceDiagramFactory.eINSTANCE.createMessage();\n\n         // create object messageReceive\n         messageReceive = ModalSequenceDiagramFactory.eINSTANCE.createMessageOccurrenceSpecification();\n\n         // create object stepToMessage\n         stepToMessage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createNormalStepToMessage();\n\n         // assign attribute message\n         message.setName ((java.lang.String)csp.getValue(\"message\",\"name\"));\n\n         // create link\n         messageSend.getCovered().add(sysLine);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(messageSend,message,\"message\");\n\n         // create link\n         message.setSendEvent( messageSend);\n\n\n         // create link\n         interaction.getFragment().add(messageSend);\n\n\n         // create link\n         message.setInteraction( interaction);\n\n\n         // create link\n         messageReceive.setEnclosingInteraction( interaction);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(messageReceive,message,\"message\");\n\n         // create link\n         line.getCoveredBy().add(messageReceive);\n\n\n         // create link\n         message.setReceiveEvent( messageReceive);\n\n\n         // create link\n         stepToMessage.setSource( step);\n\n\n         // create link\n         stepToMessage.setTarget( message);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToMessage is really bound\n         JavaSDM.ensure ( stepToMessage != null );\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,step,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageSend,\"createdElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object actorToLine is really bound\n         JavaSDM.ensure ( actorToLine != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object flowToInteraction is really bound\n         JavaSDM.ensure ( flowToInteraction != null );\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToMessage is really bound\n         JavaSDM.ensure ( stepToMessage != null );\n         // check object sysActor is really bound\n         JavaSDM.ensure ( sysActor != null );\n         // check object sysActorToSysLine is really bound\n         JavaSDM.ensure ( sysActorToSysLine != null );\n         // check object sysLine is really bound\n         JavaSDM.ensure ( sysLine != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check object useCaseToInteraction is really bound\n         JavaSDM.ensure ( useCaseToInteraction != null );\n         // check isomorphic binding between objects actorToLine and actor \n         JavaSDM.ensure ( !actorToLine.equals (actor) );\n\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects flowToInteraction and actor \n         JavaSDM.ensure ( !flowToInteraction.equals (actor) );\n\n         // check isomorphic binding between objects interaction and actor \n         JavaSDM.ensure ( !interaction.equals (actor) );\n\n         // check isomorphic binding between objects line and actor \n         JavaSDM.ensure ( !line.equals (actor) );\n\n         // check isomorphic binding between objects message and actor \n         JavaSDM.ensure ( !message.equals (actor) );\n\n         // check isomorphic binding between objects messageReceive and actor \n         JavaSDM.ensure ( !messageReceive.equals (actor) );\n\n         // check isomorphic binding between objects messageSend and actor \n         JavaSDM.ensure ( !messageSend.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclaration and actor \n         JavaSDM.ensure ( !packageDeclaration.equals (actor) );\n\n         // check isomorphic binding between objects step and actor \n         JavaSDM.ensure ( !step.equals (actor) );\n\n         // check isomorphic binding between objects stepToMessage and actor \n         JavaSDM.ensure ( !stepToMessage.equals (actor) );\n\n         // check isomorphic binding between objects sysActor and actor \n         JavaSDM.ensure ( !sysActor.equals (actor) );\n\n         // check isomorphic binding between objects sysActorToSysLine and actor \n         JavaSDM.ensure ( !sysActorToSysLine.equals (actor) );\n\n         // check isomorphic binding between objects sysLine and actor \n         JavaSDM.ensure ( !sysLine.equals (actor) );\n\n         // check isomorphic binding between objects useCase and actor \n         JavaSDM.ensure ( !useCase.equals (actor) );\n\n         // check isomorphic binding between objects useCaseToInteraction and actor \n         JavaSDM.ensure ( !useCaseToInteraction.equals (actor) );\n\n         // check isomorphic binding between objects flow and actorToLine \n         JavaSDM.ensure ( !flow.equals (actorToLine) );\n\n         // check isomorphic binding between objects flowToInteraction and actorToLine \n         JavaSDM.ensure ( !flowToInteraction.equals (actorToLine) );\n\n         // check isomorphic binding between objects interaction and actorToLine \n         JavaSDM.ensure ( !interaction.equals (actorToLine) );\n\n         // check isomorphic binding between objects line and actorToLine \n         JavaSDM.ensure ( !line.equals (actorToLine) );\n\n         // check isomorphic binding between objects message and actorToLine \n         JavaSDM.ensure ( !message.equals (actorToLine) );\n\n         // check isomorphic binding between objects messageReceive and actorToLine \n         JavaSDM.ensure ( !messageReceive.equals (actorToLine) );\n\n         // check isomorphic binding between objects messageSend and actorToLine \n         JavaSDM.ensure ( !messageSend.equals (actorToLine) );\n\n         // check isomorphic binding between objects packageDeclaration and actorToLine \n         JavaSDM.ensure ( !packageDeclaration.equals (actorToLine) );\n\n         // check isomorphic binding between objects step and actorToLine \n         JavaSDM.ensure ( !step.equals (actorToLine) );\n\n         // check isomorphic binding between objects stepToMessage and actorToLine \n         JavaSDM.ensure ( !stepToMessage.equals (actorToLine) );\n\n         // check isomorphic binding between objects sysActor and actorToLine \n         JavaSDM.ensure ( !sysActor.equals (actorToLine) );\n\n         // check isomorphic binding between objects sysActorToSysLine and actorToLine \n         JavaSDM.ensure ( !sysActorToSysLine.equals (actorToLine) );\n\n         // check isomorphic binding between objects sysLine and actorToLine \n         JavaSDM.ensure ( !sysLine.equals (actorToLine) );\n\n         // check isomorphic binding between objects useCase and actorToLine \n         JavaSDM.ensure ( !useCase.equals (actorToLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and actorToLine \n         JavaSDM.ensure ( !useCaseToInteraction.equals (actorToLine) );\n\n         // check isomorphic binding between objects flowToInteraction and flow \n         JavaSDM.ensure ( !flowToInteraction.equals (flow) );\n\n         // check isomorphic binding between objects interaction and flow \n         JavaSDM.ensure ( !interaction.equals (flow) );\n\n         // check isomorphic binding between objects line and flow \n         JavaSDM.ensure ( !line.equals (flow) );\n\n         // check isomorphic binding between objects message and flow \n         JavaSDM.ensure ( !message.equals (flow) );\n\n         // check isomorphic binding between objects messageReceive and flow \n         JavaSDM.ensure ( !messageReceive.equals (flow) );\n\n         // check isomorphic binding between objects messageSend and flow \n         JavaSDM.ensure ( !messageSend.equals (flow) );\n\n         // check isomorphic binding between objects packageDeclaration and flow \n         JavaSDM.ensure ( !packageDeclaration.equals (flow) );\n\n         // check isomorphic binding between objects step and flow \n         JavaSDM.ensure ( !step.equals (flow) );\n\n         // check isomorphic binding between objects stepToMessage and flow \n         JavaSDM.ensure ( !stepToMessage.equals (flow) );\n\n         // check isomorphic binding between objects sysActor and flow \n         JavaSDM.ensure ( !sysActor.equals (flow) );\n\n         // check isomorphic binding between objects sysActorToSysLine and flow \n         JavaSDM.ensure ( !sysActorToSysLine.equals (flow) );\n\n         // check isomorphic binding between objects sysLine and flow \n         JavaSDM.ensure ( !sysLine.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects useCaseToInteraction and flow \n         JavaSDM.ensure ( !useCaseToInteraction.equals (flow) );\n\n         // check isomorphic binding between objects interaction and flowToInteraction \n         JavaSDM.ensure ( !interaction.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects line and flowToInteraction \n         JavaSDM.ensure ( !line.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects message and flowToInteraction \n         JavaSDM.ensure ( !message.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects messageReceive and flowToInteraction \n         JavaSDM.ensure ( !messageReceive.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects messageSend and flowToInteraction \n         JavaSDM.ensure ( !messageSend.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects packageDeclaration and flowToInteraction \n         JavaSDM.ensure ( !packageDeclaration.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects step and flowToInteraction \n         JavaSDM.ensure ( !step.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects stepToMessage and flowToInteraction \n         JavaSDM.ensure ( !stepToMessage.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects sysActor and flowToInteraction \n         JavaSDM.ensure ( !sysActor.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects sysActorToSysLine and flowToInteraction \n         JavaSDM.ensure ( !sysActorToSysLine.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects sysLine and flowToInteraction \n         JavaSDM.ensure ( !sysLine.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects useCase and flowToInteraction \n         JavaSDM.ensure ( !useCase.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects useCaseToInteraction and flowToInteraction \n         JavaSDM.ensure ( !useCaseToInteraction.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects line and interaction \n         JavaSDM.ensure ( !line.equals (interaction) );\n\n         // check isomorphic binding between objects message and interaction \n         JavaSDM.ensure ( !message.equals (interaction) );\n\n         // check isomorphic binding between objects messageReceive and interaction \n         JavaSDM.ensure ( !messageReceive.equals (interaction) );\n\n         // check isomorphic binding between objects messageSend and interaction \n         JavaSDM.ensure ( !messageSend.equals (interaction) );\n\n         // check isomorphic binding between objects packageDeclaration and interaction \n         JavaSDM.ensure ( !packageDeclaration.equals (interaction) );\n\n         // check isomorphic binding between objects step and interaction \n         JavaSDM.ensure ( !step.equals (interaction) );\n\n         // check isomorphic binding between objects stepToMessage and interaction \n         JavaSDM.ensure ( !stepToMessage.equals (interaction) );\n\n         // check isomorphic binding between objects sysActor and interaction \n         JavaSDM.ensure ( !sysActor.equals (interaction) );\n\n         // check isomorphic binding between objects sysActorToSysLine and interaction \n         JavaSDM.ensure ( !sysActorToSysLine.equals (interaction) );\n\n         // check isomorphic binding between objects sysLine and interaction \n         JavaSDM.ensure ( !sysLine.equals (interaction) );\n\n         // check isomorphic binding between objects useCase and interaction \n         JavaSDM.ensure ( !useCase.equals (interaction) );\n\n         // check isomorphic binding between objects useCaseToInteraction and interaction \n         JavaSDM.ensure ( !useCaseToInteraction.equals (interaction) );\n\n         // check isomorphic binding between objects message and line \n         JavaSDM.ensure ( !message.equals (line) );\n\n         // check isomorphic binding between objects messageReceive and line \n         JavaSDM.ensure ( !messageReceive.equals (line) );\n\n         // check isomorphic binding between objects messageSend and line \n         JavaSDM.ensure ( !messageSend.equals (line) );\n\n         // check isomorphic binding between objects packageDeclaration and line \n         JavaSDM.ensure ( !packageDeclaration.equals (line) );\n\n         // check isomorphic binding between objects step and line \n         JavaSDM.ensure ( !step.equals (line) );\n\n         // check isomorphic binding between objects stepToMessage and line \n         JavaSDM.ensure ( !stepToMessage.equals (line) );\n\n         // check isomorphic binding between objects sysActor and line \n         JavaSDM.ensure ( !sysActor.equals (line) );\n\n         // check isomorphic binding between objects sysActorToSysLine and line \n         JavaSDM.ensure ( !sysActorToSysLine.equals (line) );\n\n         // check isomorphic binding between objects sysLine and line \n         JavaSDM.ensure ( !sysLine.equals (line) );\n\n         // check isomorphic binding between objects useCase and line \n         JavaSDM.ensure ( !useCase.equals (line) );\n\n         // check isomorphic binding between objects useCaseToInteraction and line \n         JavaSDM.ensure ( !useCaseToInteraction.equals (line) );\n\n         // check isomorphic binding between objects messageReceive and message \n         JavaSDM.ensure ( !messageReceive.equals (message) );\n\n         // check isomorphic binding between objects messageSend and message \n         JavaSDM.ensure ( !messageSend.equals (message) );\n\n         // check isomorphic binding between objects packageDeclaration and message \n         JavaSDM.ensure ( !packageDeclaration.equals (message) );\n\n         // check isomorphic binding between objects step and message \n         JavaSDM.ensure ( !step.equals (message) );\n\n         // check isomorphic binding between objects stepToMessage and message \n         JavaSDM.ensure ( !stepToMessage.equals (message) );\n\n         // check isomorphic binding between objects sysActor and message \n         JavaSDM.ensure ( !sysActor.equals (message) );\n\n         // check isomorphic binding between objects sysActorToSysLine and message \n         JavaSDM.ensure ( !sysActorToSysLine.equals (message) );\n\n         // check isomorphic binding between objects sysLine and message \n         JavaSDM.ensure ( !sysLine.equals (message) );\n\n         // check isomorphic binding between objects useCase and message \n         JavaSDM.ensure ( !useCase.equals (message) );\n\n         // check isomorphic binding between objects useCaseToInteraction and message \n         JavaSDM.ensure ( !useCaseToInteraction.equals (message) );\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check isomorphic binding between objects packageDeclaration and messageReceive \n         JavaSDM.ensure ( !packageDeclaration.equals (messageReceive) );\n\n         // check isomorphic binding between objects step and messageReceive \n         JavaSDM.ensure ( !step.equals (messageReceive) );\n\n         // check isomorphic binding between objects stepToMessage and messageReceive \n         JavaSDM.ensure ( !stepToMessage.equals (messageReceive) );\n\n         // check isomorphic binding between objects sysActor and messageReceive \n         JavaSDM.ensure ( !sysActor.equals (messageReceive) );\n\n         // check isomorphic binding between objects sysActorToSysLine and messageReceive \n         JavaSDM.ensure ( !sysActorToSysLine.equals (messageReceive) );\n\n         // check isomorphic binding between objects sysLine and messageReceive \n         JavaSDM.ensure ( !sysLine.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCase and messageReceive \n         JavaSDM.ensure ( !useCase.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCaseToInteraction and messageReceive \n         JavaSDM.ensure ( !useCaseToInteraction.equals (messageReceive) );\n\n         // check isomorphic binding between objects packageDeclaration and messageSend \n         JavaSDM.ensure ( !packageDeclaration.equals (messageSend) );\n\n         // check isomorphic binding between objects step and messageSend \n         JavaSDM.ensure ( !step.equals (messageSend) );\n\n         // check isomorphic binding between objects stepToMessage and messageSend \n         JavaSDM.ensure ( !stepToMessage.equals (messageSend) );\n\n         // check isomorphic binding between objects sysActor and messageSend \n         JavaSDM.ensure ( !sysActor.equals (messageSend) );\n\n         // check isomorphic binding between objects sysActorToSysLine and messageSend \n         JavaSDM.ensure ( !sysActorToSysLine.equals (messageSend) );\n\n         // check isomorphic binding between objects sysLine and messageSend \n         JavaSDM.ensure ( !sysLine.equals (messageSend) );\n\n         // check isomorphic binding between objects useCase and messageSend \n         JavaSDM.ensure ( !useCase.equals (messageSend) );\n\n         // check isomorphic binding between objects useCaseToInteraction and messageSend \n         JavaSDM.ensure ( !useCaseToInteraction.equals (messageSend) );\n\n         // check isomorphic binding between objects step and packageDeclaration \n         JavaSDM.ensure ( !step.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects stepToMessage and packageDeclaration \n         JavaSDM.ensure ( !stepToMessage.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects sysActor and packageDeclaration \n         JavaSDM.ensure ( !sysActor.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects sysActorToSysLine and packageDeclaration \n         JavaSDM.ensure ( !sysActorToSysLine.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects sysLine and packageDeclaration \n         JavaSDM.ensure ( !sysLine.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclaration \n         JavaSDM.ensure ( !useCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCaseToInteraction and packageDeclaration \n         JavaSDM.ensure ( !useCaseToInteraction.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects stepToMessage and step \n         JavaSDM.ensure ( !stepToMessage.equals (step) );\n\n         // check isomorphic binding between objects sysActor and step \n         JavaSDM.ensure ( !sysActor.equals (step) );\n\n         // check isomorphic binding between objects sysActorToSysLine and step \n         JavaSDM.ensure ( !sysActorToSysLine.equals (step) );\n\n         // check isomorphic binding between objects sysLine and step \n         JavaSDM.ensure ( !sysLine.equals (step) );\n\n         // check isomorphic binding between objects useCase and step \n         JavaSDM.ensure ( !useCase.equals (step) );\n\n         // check isomorphic binding between objects useCaseToInteraction and step \n         JavaSDM.ensure ( !useCaseToInteraction.equals (step) );\n\n         // check isomorphic binding between objects sysActor and stepToMessage \n         JavaSDM.ensure ( !sysActor.equals (stepToMessage) );\n\n         // check isomorphic binding between objects sysActorToSysLine and stepToMessage \n         JavaSDM.ensure ( !sysActorToSysLine.equals (stepToMessage) );\n\n         // check isomorphic binding between objects sysLine and stepToMessage \n         JavaSDM.ensure ( !sysLine.equals (stepToMessage) );\n\n         // check isomorphic binding between objects useCase and stepToMessage \n         JavaSDM.ensure ( !useCase.equals (stepToMessage) );\n\n         // check isomorphic binding between objects useCaseToInteraction and stepToMessage \n         JavaSDM.ensure ( !useCaseToInteraction.equals (stepToMessage) );\n\n         // check isomorphic binding between objects sysActorToSysLine and sysActor \n         JavaSDM.ensure ( !sysActorToSysLine.equals (sysActor) );\n\n         // check isomorphic binding between objects sysLine and sysActor \n         JavaSDM.ensure ( !sysLine.equals (sysActor) );\n\n         // check isomorphic binding between objects useCase and sysActor \n         JavaSDM.ensure ( !useCase.equals (sysActor) );\n\n         // check isomorphic binding between objects useCaseToInteraction and sysActor \n         JavaSDM.ensure ( !useCaseToInteraction.equals (sysActor) );\n\n         // check isomorphic binding between objects sysLine and sysActorToSysLine \n         JavaSDM.ensure ( !sysLine.equals (sysActorToSysLine) );\n\n         // check isomorphic binding between objects useCase and sysActorToSysLine \n         JavaSDM.ensure ( !useCase.equals (sysActorToSysLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and sysActorToSysLine \n         JavaSDM.ensure ( !useCaseToInteraction.equals (sysActorToSysLine) );\n\n         // check isomorphic binding between objects useCase and sysLine \n         JavaSDM.ensure ( !useCase.equals (sysLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and sysLine \n         JavaSDM.ensure ( !useCaseToInteraction.equals (sysLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and useCase \n         JavaSDM.ensure ( !useCaseToInteraction.equals (useCase) );\n\n         // create object message__sendEvent__messageSend\n         message__sendEvent__messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object message__interaction__interaction\n         message__interaction__interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __step_actor_actor\n         __step_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object interaction__message__message\n         interaction__message__message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object stepToMessage__source__step\n         stepToMessage__source__step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageReceive__covered__line\n         messageReceive__covered__line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageReceive__message__message\n         messageReceive__message__message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __flow_steps_step\n         __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageSend__message__message\n         messageSend__message__message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object interaction__fragment__messageSend\n         interaction__fragment__messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object interaction__fragment__messageReceive\n         interaction__fragment__messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageSend__enclosingInteraction__interaction\n         messageSend__enclosingInteraction__interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object message__receiveEvent__messageReceive\n         message__receiveEvent__messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object line__coveredBy__messageReceive\n         line__coveredBy__messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageSend__covered__sysLine\n         messageSend__covered__sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object stepToMessage__target__message\n         stepToMessage__target__message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageReceive__enclosingInteraction__interaction\n         messageReceive__enclosingInteraction__interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object sysLine__coveredBy__messageSend\n         sysLine__coveredBy__messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"UserStepBFMessageRule\");\n         // assign attribute sysLine__coveredBy__messageSend\n         sysLine__coveredBy__messageSend.setName (\"coveredBy\");\n         // assign attribute messageSend__covered__sysLine\n         messageSend__covered__sysLine.setName (\"covered\");\n         // assign attribute messageSend__enclosingInteraction__interaction\n         messageSend__enclosingInteraction__interaction.setName (\"enclosingInteraction\");\n         // assign attribute interaction__fragment__messageSend\n         interaction__fragment__messageSend.setName (\"fragment\");\n         // assign attribute messageReceive__enclosingInteraction__interaction\n         messageReceive__enclosingInteraction__interaction.setName (\"enclosingInteraction\");\n         // assign attribute interaction__fragment__messageReceive\n         interaction__fragment__messageReceive.setName (\"fragment\");\n         // assign attribute __flow_steps_step\n         __flow_steps_step.setName (\"steps\");\n         // assign attribute __step_actor_actor\n         __step_actor_actor.setName (\"actor\");\n         // assign attribute message__sendEvent__messageSend\n         message__sendEvent__messageSend.setName (\"sendEvent\");\n         // assign attribute message__receiveEvent__messageReceive\n         message__receiveEvent__messageReceive.setName (\"receiveEvent\");\n         // assign attribute message__interaction__interaction\n         message__interaction__interaction.setName (\"interaction\");\n         // assign attribute interaction__message__message\n         interaction__message__message.setName (\"message\");\n         // assign attribute stepToMessage__source__step\n         stepToMessage__source__step.setName (\"source\");\n         // assign attribute stepToMessage__target__message\n         stepToMessage__target__message.setName (\"target\");\n         // assign attribute messageSend__message__message\n         messageSend__message__message.setName (\"message\");\n         // assign attribute messageReceive__message__message\n         messageReceive__message__message.setName (\"message\");\n         // assign attribute line__coveredBy__messageReceive\n         line__coveredBy__messageReceive.setName (\"coveredBy\");\n         // assign attribute messageReceive__covered__line\n         messageReceive__covered__line.setName (\"covered\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message__sendEvent__messageSend,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message__interaction__interaction,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__step_actor_actor,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,interaction__message__message,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage__source__step,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive__covered__line,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive__message__message,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__flow_steps_step,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageSend__message__message,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,interaction__fragment__messageSend,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,interaction__fragment__messageReceive,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageSend__enclosingInteraction__interaction,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message__receiveEvent__messageReceive,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,line__coveredBy__messageReceive,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageSend__covered__sysLine,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage__target__message,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive__enclosingInteraction__interaction,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sysLine__coveredBy__messageSend,\"createdEdges\");\n\n         // create link\n         __step_actor_actor.setTrg( actor);\n\n\n         // create link\n         messageSend__covered__sysLine.setTrg( sysLine);\n\n\n         // create link\n         sysLine__coveredBy__messageSend.setSrc( sysLine);\n\n\n         // create link\n         messageSend__enclosingInteraction__interaction.setSrc( messageSend);\n\n\n         // create link\n         messageSend__message__message.setSrc( messageSend);\n\n\n         // create link\n         sysLine__coveredBy__messageSend.setTrg( messageSend);\n\n\n         // create link\n         interaction__fragment__messageSend.setTrg( messageSend);\n\n\n         // create link\n         messageSend__covered__sysLine.setSrc( messageSend);\n\n\n         // create link\n         message__sendEvent__messageSend.setTrg( messageSend);\n\n\n         // create link\n         message__interaction__interaction.setTrg( interaction);\n\n\n         // create link\n         interaction__fragment__messageSend.setSrc( interaction);\n\n\n         // create link\n         messageSend__enclosingInteraction__interaction.setTrg( interaction);\n\n\n         // create link\n         interaction__fragment__messageReceive.setSrc( interaction);\n\n\n         // create link\n         interaction__message__message.setSrc( interaction);\n\n\n         // create link\n         messageReceive__enclosingInteraction__interaction.setTrg( interaction);\n\n\n         // create link\n         messageReceive__covered__line.setSrc( messageReceive);\n\n\n         // create link\n         line__coveredBy__messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         messageReceive__enclosingInteraction__interaction.setSrc( messageReceive);\n\n\n         // create link\n         interaction__fragment__messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         message__receiveEvent__messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         messageReceive__message__message.setSrc( messageReceive);\n\n\n         // create link\n         __flow_steps_step.setSrc( flow);\n\n\n         // create link\n         __flow_steps_step.setTrg( step);\n\n\n         // create link\n         __step_actor_actor.setSrc( step);\n\n\n         // create link\n         stepToMessage__source__step.setTrg( step);\n\n\n         // create link\n         interaction__message__message.setTrg( message);\n\n\n         // create link\n         messageReceive__message__message.setTrg( message);\n\n\n         // create link\n         message__receiveEvent__messageReceive.setSrc( message);\n\n\n         // create link\n         messageSend__message__message.setTrg( message);\n\n\n         // create link\n         message__interaction__interaction.setSrc( message);\n\n\n         // create link\n         stepToMessage__target__message.setTrg( message);\n\n\n         // create link\n         message__sendEvent__messageSend.setSrc( message);\n\n\n         // create link\n         stepToMessage__target__message.setSrc( stepToMessage);\n\n\n         // create link\n         stepToMessage__source__step.setSrc( stepToMessage);\n\n\n         // create link\n         line__coveredBy__messageReceive.setSrc( line);\n\n\n         // create link\n         messageReceive__covered__line.setTrg( line);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,actor,sysActor,packageDeclaration,sysLine,sysActorToSysLine,messageSend,interaction,messageReceive,flow,flowToInteraction,useCase,useCaseToInteraction,step,message,stepToMessage,line,actorToLine);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Actor actor = null;\n      BasicFlow flow = null;\n      PackageDeclaration packageDeclaration = null;\n      NormalStep step = null;\n      Actor sysActor = null;\n      UseCase useCase = null;\n      EMoflonEdge __actorToLine_source_actor = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __step_actor_actor = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge __sysActorToSysLine_source_sysActor = null;\n      EMoflonEdge __packageDeclaration_actors_sysActor = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n      EMoflonEdge __sysActorToSysLine_target_sysLine = null;\n      EMoflonEdge __line_interaction_interaction = null;\n      EMoflonEdge __flowToInteraction_target_interaction = null;\n      EMoflonEdge __useCaseToInteraction_target_interaction = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __flowToInteraction_source_flow = null;\n      EMoflonEdge __useCaseToInteraction_source_useCase = null;\n      EMoflonEdge __actorToLine_target_line = null;\n      CSP csp = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterUseCaseToUseCaseToInteraction = null;\n      UseCaseToInteraction useCaseToInteraction = null;\n      Lifeline line = null;\n      Iterator fujaba__IterActorToActorToLine = null;\n      ActorToLifeline actorToLine = null;\n      Lifeline sysLine = null;\n      Iterator fujaba__IterSysActorToSysActorToSysLine = null;\n      ActorToLifeline sysActorToSysLine = null;\n      Iterator fujaba__IterFlowToFlowToInteraction = null;\n      FlowToInteractionFragment flowToInteraction = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"UserStepBFMessageRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (match.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         flow = (BasicFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (match.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n         _TmpObject = (match.getObject(\"sysActor\"));\n\n         // ensure correct type and really bound of object sysActor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         sysActor = (Actor) _TmpObject;\n         _TmpObject = (match.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects sysActor and actor \n         JavaSDM.ensure ( !sysActor.equals (actor) );\n\n         // iterate to-many link source from flow to flowToInteraction\n         fujaba__Success = false;\n\n         fujaba__IterFlowToFlowToInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,FlowToInteractionFragment.class,\"source\")).iterator ();\n\n         while ( fujaba__IterFlowToFlowToInteraction.hasNext () )\n         {\n            try\n            {\n               flowToInteraction = (FlowToInteractionFragment) fujaba__IterFlowToFlowToInteraction.next ();\n\n               // check object flowToInteraction is really bound\n               JavaSDM.ensure ( flowToInteraction != null );\n               // iterate to-many link source from sysActor to sysActorToSysLine\n               fujaba__Success = false;\n\n               fujaba__IterSysActorToSysActorToSysLine = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(sysActor,ActorToLifeline.class,\"source\")).iterator ();\n\n               while ( fujaba__IterSysActorToSysActorToSysLine.hasNext () )\n               {\n                  try\n                  {\n                     sysActorToSysLine = (ActorToLifeline) fujaba__IterSysActorToSysActorToSysLine.next ();\n\n                     // check object sysActorToSysLine is really bound\n                     JavaSDM.ensure ( sysActorToSysLine != null );\n                     // bind object\n                     sysLine = sysActorToSysLine.getTarget ();\n\n                     // check object sysLine is really bound\n                     JavaSDM.ensure ( sysLine != null );\n\n                     // iterate to-many link source from actor to actorToLine\n                     fujaba__Success = false;\n\n                     fujaba__IterActorToActorToLine = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(actor,ActorToLifeline.class,\"source\")).iterator ();\n\n                     while ( fujaba__IterActorToActorToLine.hasNext () )\n                     {\n                        try\n                        {\n                           actorToLine = (ActorToLifeline) fujaba__IterActorToActorToLine.next ();\n\n                           // check object actorToLine is really bound\n                           JavaSDM.ensure ( actorToLine != null );\n                           // check isomorphic binding between objects sysActorToSysLine and actorToLine \n                           JavaSDM.ensure ( !sysActorToSysLine.equals (actorToLine) );\n\n                           // bind object\n                           line = actorToLine.getTarget ();\n\n                           // check object line is really bound\n                           JavaSDM.ensure ( line != null );\n\n                           // check isomorphic binding between objects sysLine and line \n                           JavaSDM.ensure ( !sysLine.equals (line) );\n\n                           // iterate to-many link source from useCase to useCaseToInteraction\n                           fujaba__Success = false;\n\n                           fujaba__IterUseCaseToUseCaseToInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(useCase,UseCaseToInteraction.class,\"source\")).iterator ();\n\n                           while ( fujaba__IterUseCaseToUseCaseToInteraction.hasNext () )\n                           {\n                              try\n                              {\n                                 useCaseToInteraction = (UseCaseToInteraction) fujaba__IterUseCaseToUseCaseToInteraction.next ();\n\n                                 // check object useCaseToInteraction is really bound\n                                 JavaSDM.ensure ( useCaseToInteraction != null );\n                                 // bind object\n                                 interaction = useCaseToInteraction.getTarget ();\n\n                                 // check object interaction is really bound\n                                 JavaSDM.ensure ( interaction != null );\n\n                                 // check link target from flowToInteraction to interaction\n                                 JavaSDM.ensure (interaction.equals (flowToInteraction.getTarget ()\n                                 ));\n\n                                 // story node \'find context\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object actor is really bound\n                                    JavaSDM.ensure ( actor != null );\n                                    // check object actorToLine is really bound\n                                    JavaSDM.ensure ( actorToLine != null );\n                                    // check object flow is really bound\n                                    JavaSDM.ensure ( flow != null );\n                                    // check object flowToInteraction is really bound\n                                    JavaSDM.ensure ( flowToInteraction != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object packageDeclaration is really bound\n                                    JavaSDM.ensure ( packageDeclaration != null );\n                                    // check object step is really bound\n                                    JavaSDM.ensure ( step != null );\n                                    // check object sysActor is really bound\n                                    JavaSDM.ensure ( sysActor != null );\n                                    // check object sysActorToSysLine is really bound\n                                    JavaSDM.ensure ( sysActorToSysLine != null );\n                                    // check object sysLine is really bound\n                                    JavaSDM.ensure ( sysLine != null );\n                                    // check object useCase is really bound\n                                    JavaSDM.ensure ( useCase != null );\n                                    // check object useCaseToInteraction is really bound\n                                    JavaSDM.ensure ( useCaseToInteraction != null );\n                                    // check isomorphic binding between objects sysActor and actor \n                                    JavaSDM.ensure ( !sysActor.equals (actor) );\n\n                                    // check isomorphic binding between objects sysActorToSysLine and actorToLine \n                                    JavaSDM.ensure ( !sysActorToSysLine.equals (actorToLine) );\n\n                                    // check isomorphic binding between objects sysLine and line \n                                    JavaSDM.ensure ( !sysLine.equals (line) );\n\n                                    // check link actor from step to actor\n                                    JavaSDM.ensure (actor.equals (step.getActor ()\n                                    ));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link actors from actor to packageDeclaration\n                                    JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                                    ));\n\n                                    // check link actors from sysActor to packageDeclaration\n                                    JavaSDM.ensure (packageDeclaration.equals (sysActor.eContainer()\n                                    ));\n\n                                    // check link flows from flow to useCase\n                                    JavaSDM.ensure (useCase.equals (flow.eContainer()\n                                    ));\n\n                                    // check link source from actorToLine to actor\n                                    JavaSDM.ensure (actor.equals (actorToLine.getSource ()\n                                    ));\n\n                                    // check link source from flowToInteraction to flow\n                                    JavaSDM.ensure (flow.equals (flowToInteraction.getSource ()\n                                    ));\n\n                                    // check link source from sysActorToSysLine to sysActor\n                                    JavaSDM.ensure (sysActor.equals (sysActorToSysLine.getSource ()\n                                    ));\n\n                                    // check link source from useCaseToInteraction to useCase\n                                    JavaSDM.ensure (useCase.equals (useCaseToInteraction.getSource ()\n                                    ));\n\n                                    // check link steps from step to flow\n                                    JavaSDM.ensure (flow.equals (step.eContainer()\n                                    ));\n\n                                    // check link target from actorToLine to line\n                                    JavaSDM.ensure (line.equals (actorToLine.getTarget ()\n                                    ));\n\n                                    // check link target from flowToInteraction to interaction\n                                    JavaSDM.ensure (interaction.equals (flowToInteraction.getTarget ()\n                                    ));\n\n                                    // check link target from sysActorToSysLine to sysLine\n                                    JavaSDM.ensure (sysLine.equals (sysActorToSysLine.getTarget ()\n                                    ));\n\n                                    // check link target from useCaseToInteraction to interaction\n                                    JavaSDM.ensure (interaction.equals (useCaseToInteraction.getTarget ()\n                                    ));\n\n                                    // check link useCases from useCase to packageDeclaration\n                                    JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                                    ));\n\n                                    // create object __actorToLine_source_actor\n                                    __actorToLine_source_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object isApplicableMatch\n                                    isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                                    // create object __step_actor_actor\n                                    __step_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __packageDeclaration_actors_actor\n                                    __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __sysActorToSysLine_source_sysActor\n                                    __sysActorToSysLine_source_sysActor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __packageDeclaration_actors_sysActor\n                                    __packageDeclaration_actors_sysActor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __packageDeclaration_useCases_useCase\n                                    __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __sysActorToSysLine_target_sysLine\n                                    __sysActorToSysLine_target_sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __line_interaction_interaction\n                                    __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __flowToInteraction_target_interaction\n                                    __flowToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __useCaseToInteraction_target_interaction\n                                    __useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __interaction_lifeline_line\n                                    __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __flow_steps_step\n                                    __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __useCase_flows_flow\n                                    __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __flowToInteraction_source_flow\n                                    __flowToInteraction_source_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __useCaseToInteraction_source_useCase\n                                    __useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __actorToLine_target_line\n                                    __actorToLine_target_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // assign attribute __packageDeclaration_actors_actor\n                                    __packageDeclaration_actors_actor.setName (\"actors\");\n                                    // assign attribute __packageDeclaration_actors_sysActor\n                                    __packageDeclaration_actors_sysActor.setName (\"actors\");\n                                    // assign attribute __sysActorToSysLine_source_sysActor\n                                    __sysActorToSysLine_source_sysActor.setName (\"source\");\n                                    // assign attribute __sysActorToSysLine_target_sysLine\n                                    __sysActorToSysLine_target_sysLine.setName (\"target\");\n                                    // assign attribute __flowToInteraction_source_flow\n                                    __flowToInteraction_source_flow.setName (\"source\");\n                                    // assign attribute __flowToInteraction_target_interaction\n                                    __flowToInteraction_target_interaction.setName (\"target\");\n                                    // assign attribute __useCase_flows_flow\n                                    __useCase_flows_flow.setName (\"flows\");\n                                    // assign attribute __useCaseToInteraction_source_useCase\n                                    __useCaseToInteraction_source_useCase.setName (\"source\");\n                                    // assign attribute __useCaseToInteraction_target_interaction\n                                    __useCaseToInteraction_target_interaction.setName (\"target\");\n                                    // assign attribute __flow_steps_step\n                                    __flow_steps_step.setName (\"steps\");\n                                    // assign attribute __step_actor_actor\n                                    __step_actor_actor.setName (\"actor\");\n                                    // assign attribute __line_interaction_interaction\n                                    __line_interaction_interaction.setName (\"interaction\");\n                                    // assign attribute __interaction_lifeline_line\n                                    __interaction_lifeline_line.setName (\"lifeline\");\n                                    // assign attribute __actorToLine_source_actor\n                                    __actorToLine_source_actor.setName (\"source\");\n                                    // assign attribute __actorToLine_target_line\n                                    __actorToLine_target_line.setName (\"target\");\n                                    // assign attribute __packageDeclaration_useCases_useCase\n                                    __packageDeclaration_useCases_useCase.setName (\"useCases\");\n\n                                    // create link\n                                    __actorToLine_source_actor.setTrg( actor);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(actor);\n\n\n                                    // create link\n                                    __step_actor_actor.setTrg( actor);\n\n\n                                    // create link\n                                    __packageDeclaration_actors_actor.setTrg( actor);\n\n\n                                    // create link\n                                    __sysActorToSysLine_source_sysActor.setTrg( sysActor);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(sysActor);\n\n\n                                    // create link\n                                    __packageDeclaration_actors_sysActor.setTrg( sysActor);\n\n\n                                    // create link\n                                    __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                                    // create link\n                                    __packageDeclaration_actors_sysActor.setSrc( packageDeclaration);\n\n\n                                    // create link\n                                    __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n                                    // create link\n                                    __sysActorToSysLine_target_sysLine.setTrg( sysLine);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(sysLine);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(sysActorToSysLine);\n\n\n                                    // create link\n                                    __sysActorToSysLine_target_sysLine.setSrc( sysActorToSysLine);\n\n\n                                    // create link\n                                    __sysActorToSysLine_source_sysActor.setSrc( sysActorToSysLine);\n\n\n                                    // create link\n                                    __line_interaction_interaction.setTrg( interaction);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(interaction);\n\n\n                                    // create link\n                                    __flowToInteraction_target_interaction.setTrg( interaction);\n\n\n                                    // create link\n                                    __useCaseToInteraction_target_interaction.setTrg( interaction);\n\n\n                                    // create link\n                                    __interaction_lifeline_line.setSrc( interaction);\n\n\n                                    // create link\n                                    __flow_steps_step.setSrc( flow);\n\n\n                                    // create link\n                                    __useCase_flows_flow.setTrg( flow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(flow);\n\n\n                                    // create link\n                                    __flowToInteraction_source_flow.setTrg( flow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(flowToInteraction);\n\n\n                                    // create link\n                                    __flowToInteraction_target_interaction.setSrc( flowToInteraction);\n\n\n                                    // create link\n                                    __flowToInteraction_source_flow.setSrc( flowToInteraction);\n\n\n                                    // create link\n                                    __useCase_flows_flow.setSrc( useCase);\n\n\n                                    // create link\n                                    __useCaseToInteraction_source_useCase.setTrg( useCase);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                                    // create link\n                                    __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n                                    // create link\n                                    __useCaseToInteraction_target_interaction.setSrc( useCaseToInteraction);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(useCaseToInteraction);\n\n\n                                    // create link\n                                    __useCaseToInteraction_source_useCase.setSrc( useCaseToInteraction);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(step);\n\n\n                                    // create link\n                                    __flow_steps_step.setTrg( step);\n\n\n                                    // create link\n                                    __step_actor_actor.setSrc( step);\n\n\n                                    // create link\n                                    __actorToLine_target_line.setTrg( line);\n\n\n                                    // create link\n                                    __line_interaction_interaction.setSrc( line);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(line);\n\n\n                                    // create link\n                                    __interaction_lifeline_line.setTrg( line);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(actorToLine);\n\n\n                                    // create link\n                                    __actorToLine_source_actor.setSrc( actorToLine);\n\n\n                                    // create link\n                                    __actorToLine_target_line.setSrc( actorToLine);\n\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCaseToInteraction_source_useCase,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_actors_sysActor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_actors_actor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__actorToLine_source_actor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_step,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__sysActorToSysLine_target_sysLine,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__sysActorToSysLine_source_sysActor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__actorToLine_target_line,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_lifeline_line,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowToInteraction_source_flow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__step_actor_actor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_interaction_interaction,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowToInteraction_target_interaction,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCaseToInteraction_target_interaction,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_useCases_useCase,\"allContextElements\");\n                                    // story node \'solve CSP\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,actor,sysActor,packageDeclaration,sysLine,sysActorToSysLine,interaction,flow,flowToInteraction,useCase,useCaseToInteraction,step,line,actorToLine));\n\n                                       // ensure correct type and really bound of object csp\n                                       JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                       csp = (CSP) _TmpObject;\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    // statement node \'check CSP\'\n                                    fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                                    if (fujaba__Success)\n                                    {\n                                       // story node \'add match to rule result\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // check object isApplicableMatch is really bound\n                                          JavaSDM.ensure ( isApplicableMatch != null );\n                                          // check object ruleresult is really bound\n                                          JavaSDM.ensure ( ruleresult != null );\n                                          // assign attribute isApplicableMatch\n                                          isApplicableMatch.setRuleName (\"UserStepBFMessageRule\");\n                                          // assign attribute ruleresult\n                                          ruleresult.setSuccess (true);\n\n                                          // create link\n                                          ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"actor\", actor);\nmatch.registerObject(\"sysActor\", sysActor);\nmatch.registerObject(\"packageDeclaration\", packageDeclaration);\nmatch.registerObject(\"flow\", flow);\nmatch.registerObject(\"useCase\", useCase);\nmatch.registerObject(\"step\", step);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, Actor actor, Actor sysActor,
			PackageDeclaration packageDeclaration, BasicFlow flow,
			UseCase useCase, NormalStep step);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"person\");\r\nliteral0.setType(\"String\");\r\nVariable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal1\", true, csp);\r\nliteral1.setValue(\"system\");\r\nliteral1.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.type\", true, csp);\r\nvar_actor_type.setValue(actor.getType());\r\nvar_actor_type.setType(\"EObject\");\r\nVariable var_sysActor_type = CSPFactoryHelper.eINSTANCE.createVariable(\"sysActor.type\", true, csp);\r\nvar_sysActor_type.setValue(sysActor.getType());\r\nvar_sysActor_type.setType(\"EObject\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqActorType eqActorType = new EqActorType();EqActorType eqActorType_0 = new EqActorType();\r\n\r\ncsp.getConstraints().add(eqActorType);\r\ncsp.getConstraints().add(eqActorType_0);\r\n\r\n// Solve CSP\r\neqActorType.setRuleName(\"\");\r\neqActorType.solve(var_actor_type,literal0);\r\neqActorType_0.setRuleName(\"\");\r\neqActorType_0.solve(var_sysActor_type,literal1);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, Actor actor, Actor sysActor,
			PackageDeclaration packageDeclaration, BasicFlow flow,
			UseCase useCase, NormalStep step);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(\"step.name\", true, csp);\r\nvar_step_name.setValue(step.getName());\r\nvar_step_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(\"message.name\", csp);\r\nvar_message_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_step_name,var_message_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"sysActor\",sysActor);\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"sysLine\",sysLine);\r\nisApplicableMatch.registerObject(\"sysActorToSysLine\",sysActorToSysLine);\r\nisApplicableMatch.registerObject(\"interaction\",interaction);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"flowToInteraction\",flowToInteraction);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"useCaseToInteraction\",useCaseToInteraction);\r\nisApplicableMatch.registerObject(\"step\",step);\r\nisApplicableMatch.registerObject(\"line\",line);\r\nisApplicableMatch.registerObject(\"actorToLine\",actorToLine);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			Actor actor, Actor sysActor, PackageDeclaration packageDeclaration,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			Interaction interaction, BasicFlow flow,
			FlowToInteractionFragment flowToInteraction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, NormalStep step,
			Lifeline line, ActorToLifeline actorToLine);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"sysActor\", sysActor);\nruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"sysLine\", sysLine);\nruleresult.registerObject(\"sysActorToSysLine\", sysActorToSysLine);\nruleresult.registerObject(\"messageSend\", messageSend);\nruleresult.registerObject(\"interaction\", interaction);\nruleresult.registerObject(\"messageReceive\", messageReceive);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"flowToInteraction\", flowToInteraction);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"useCaseToInteraction\", useCaseToInteraction);\nruleresult.registerObject(\"step\", step);\nruleresult.registerObject(\"message\", message);\nruleresult.registerObject(\"stepToMessage\", stepToMessage);\nruleresult.registerObject(\"line\", line);\nruleresult.registerObject(\"actorToLine\", actorToLine);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject actor,
			EObject sysActor, EObject packageDeclaration, EObject sysLine,
			EObject sysActorToSysLine, EObject messageSend,
			EObject interaction, EObject messageReceive, EObject flow,
			EObject flowToInteraction, EObject useCase,
			EObject useCaseToInteraction, EObject step, EObject message,
			EObject stepToMessage, EObject line, EObject actorToLine);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"step\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __messageSend_message_message = null;\n      EMoflonEdge __interaction_message_message = null;\n      EMoflonEdge __message_interaction_interaction = null;\n      EMoflonEdge __line_coveredBy_messageReceive = null;\n      EMoflonEdge __interaction_fragment_messageReceive = null;\n      EMoflonEdge __messageReceive_message_message = null;\n      EMoflonEdge __messageReceive_enclosingInteraction_interaction = null;\n      EMoflonEdge __message_receiveEvent_messageReceive = null;\n      EMoflonEdge __sysLine_coveredBy_messageSend = null;\n      EMoflonEdge __message_sendEvent_messageSend = null;\n      EMoflonEdge __messageSend_enclosingInteraction_interaction = null;\n      EMoflonEdge __interaction_fragment_messageSend = null;\n      EMoflonEdge __messageSend_covered_sysLine = null;\n      EMoflonEdge __messageReceive_covered_line = null;\n      EMoflonEdge __line_interaction_interaction = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object sysLine is really bound\n         JavaSDM.ensure ( sysLine != null );\n         // check isomorphic binding between objects sysLine and line \n         JavaSDM.ensure ( !sysLine.equals (line) );\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,sysLine,messageSend,interaction,messageReceive,message,line));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object interaction is really bound\n            JavaSDM.ensure ( interaction != null );\n            // check object line is really bound\n            JavaSDM.ensure ( line != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object message is really bound\n            JavaSDM.ensure ( message != null );\n            // check object messageReceive is really bound\n            JavaSDM.ensure ( messageReceive != null );\n            // check object messageSend is really bound\n            JavaSDM.ensure ( messageSend != null );\n            // check object sysLine is really bound\n            JavaSDM.ensure ( sysLine != null );\n            // check isomorphic binding between objects sysLine and line \n            JavaSDM.ensure ( !sysLine.equals (line) );\n\n            // check isomorphic binding between objects messageSend and messageReceive \n            JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n            // create object __messageSend_message_message\n            __messageSend_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __interaction_message_message\n            __interaction_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __message_interaction_interaction\n            __message_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __line_coveredBy_messageReceive\n            __line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __interaction_fragment_messageReceive\n            __interaction_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageReceive_message_message\n            __messageReceive_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageReceive_enclosingInteraction_interaction\n            __messageReceive_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __message_receiveEvent_messageReceive\n            __message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __sysLine_coveredBy_messageSend\n            __sysLine_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __message_sendEvent_messageSend\n            __message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageSend_enclosingInteraction_interaction\n            __messageSend_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __interaction_fragment_messageSend\n            __interaction_fragment_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageSend_covered_sysLine\n            __messageSend_covered_sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageReceive_covered_line\n            __messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __sysLine_coveredBy_messageSend\n            __sysLine_coveredBy_messageSend.setName (\"coveredBy\");\n            // assign attribute __messageSend_covered_sysLine\n            __messageSend_covered_sysLine.setName (\"covered\");\n            // assign attribute __messageSend_enclosingInteraction_interaction\n            __messageSend_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n            // assign attribute __interaction_fragment_messageSend\n            __interaction_fragment_messageSend.setName (\"fragment\");\n            // assign attribute __messageReceive_enclosingInteraction_interaction\n            __messageReceive_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n            // assign attribute __interaction_fragment_messageReceive\n            __interaction_fragment_messageReceive.setName (\"fragment\");\n            // assign attribute __message_sendEvent_messageSend\n            __message_sendEvent_messageSend.setName (\"sendEvent\");\n            // assign attribute __message_receiveEvent_messageReceive\n            __message_receiveEvent_messageReceive.setName (\"receiveEvent\");\n            // assign attribute __message_interaction_interaction\n            __message_interaction_interaction.setName (\"interaction\");\n            // assign attribute __interaction_message_message\n            __interaction_message_message.setName (\"message\");\n            // assign attribute __messageSend_message_message\n            __messageSend_message_message.setName (\"message\");\n            // assign attribute __messageReceive_message_message\n            __messageReceive_message_message.setName (\"message\");\n            // assign attribute __line_coveredBy_messageReceive\n            __line_coveredBy_messageReceive.setName (\"coveredBy\");\n            // assign attribute __messageReceive_covered_line\n            __messageReceive_covered_line.setName (\"covered\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,messageSend,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageSend_message_message,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_message_message,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__message_interaction_interaction,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__line_coveredBy_messageReceive,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,messageReceive,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_fragment_messageReceive,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageReceive_message_message,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageReceive_enclosingInteraction_interaction,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__message_receiveEvent_messageReceive,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__sysLine_coveredBy_messageSend,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__message_sendEvent_messageSend,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageSend_enclosingInteraction_interaction,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,message,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_fragment_messageSend,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageSend_covered_sysLine,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageReceive_covered_line,\"toBeTranslatedEdges\");\n\n            // create link\n            __messageSend_covered_sysLine.setTrg( sysLine);\n\n\n            // create link\n            __sysLine_coveredBy_messageSend.setSrc( sysLine);\n\n\n            // create link\n            __messageSend_covered_sysLine.setSrc( messageSend);\n\n\n            // create link\n            __interaction_fragment_messageSend.setTrg( messageSend);\n\n\n            // create link\n            __message_sendEvent_messageSend.setTrg( messageSend);\n\n\n            // create link\n            __messageSend_message_message.setSrc( messageSend);\n\n\n            // create link\n            __sysLine_coveredBy_messageSend.setTrg( messageSend);\n\n\n            // create link\n            __messageSend_enclosingInteraction_interaction.setSrc( messageSend);\n\n\n            // create link\n            __interaction_message_message.setSrc( interaction);\n\n\n            // create link\n            __message_interaction_interaction.setTrg( interaction);\n\n\n            // create link\n            __interaction_fragment_messageSend.setSrc( interaction);\n\n\n            // create link\n            __interaction_fragment_messageReceive.setSrc( interaction);\n\n\n            // create link\n            __messageSend_enclosingInteraction_interaction.setTrg( interaction);\n\n\n            // create link\n            __messageReceive_enclosingInteraction_interaction.setTrg( interaction);\n\n\n            // create link\n            __messageReceive_enclosingInteraction_interaction.setSrc( messageReceive);\n\n\n            // create link\n            __interaction_fragment_messageReceive.setTrg( messageReceive);\n\n\n            // create link\n            __message_receiveEvent_messageReceive.setTrg( messageReceive);\n\n\n            // create link\n            __messageReceive_covered_line.setSrc( messageReceive);\n\n\n            // create link\n            __line_coveredBy_messageReceive.setTrg( messageReceive);\n\n\n            // create link\n            __messageReceive_message_message.setSrc( messageReceive);\n\n\n            // create link\n            __message_sendEvent_messageSend.setSrc( message);\n\n\n            // create link\n            __message_interaction_interaction.setSrc( message);\n\n\n            // create link\n            __messageReceive_message_message.setTrg( message);\n\n\n            // create link\n            __messageSend_message_message.setTrg( message);\n\n\n            // create link\n            __interaction_message_message.setTrg( message);\n\n\n            // create link\n            __message_receiveEvent_messageReceive.setSrc( message);\n\n\n            // create link\n            __line_coveredBy_messageReceive.setSrc( line);\n\n\n            // create link\n            __messageReceive_covered_line.setTrg( line);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object interaction is really bound\n            JavaSDM.ensure ( interaction != null );\n            // check object line is really bound\n            JavaSDM.ensure ( line != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object message is really bound\n            JavaSDM.ensure ( message != null );\n            // check object messageReceive is really bound\n            JavaSDM.ensure ( messageReceive != null );\n            // check object messageSend is really bound\n            JavaSDM.ensure ( messageSend != null );\n            // check object sysLine is really bound\n            JavaSDM.ensure ( sysLine != null );\n            // check isomorphic binding between objects sysLine and line \n            JavaSDM.ensure ( !sysLine.equals (line) );\n\n            // check isomorphic binding between objects messageSend and messageReceive \n            JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n            // create object __line_interaction_interaction\n            __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __interaction_lifeline_line\n            __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __line_interaction_interaction\n            __line_interaction_interaction.setName (\"interaction\");\n            // assign attribute __interaction_lifeline_line\n            __interaction_lifeline_line.setName (\"lifeline\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__line_interaction_interaction,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,interaction,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,sysLine,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_lifeline_line,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,line,\"contextNodes\");\n\n            // create link\n            __line_interaction_interaction.setTrg( interaction);\n\n\n            // create link\n            __interaction_lifeline_line.setSrc( interaction);\n\n\n            // create link\n            __interaction_lifeline_line.setTrg( line);\n\n\n            // create link\n            __line_interaction_interaction.setSrc( line);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,sysLine,messageSend,interaction,messageReceive,message,line);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend,
			Interaction interaction,
			MessageOccurrenceSpecification messageReceive, Message message,
			Lifeline line);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      ActorToLifeline actorToLine = null;\n      BasicFlow flow = null;\n      FlowToInteractionFragment flowToInteraction = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      Message message = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      MessageOccurrenceSpecification messageSend = null;\n      PackageDeclaration packageDeclaration = null;\n      Actor sysActor = null;\n      ActorToLifeline sysActorToSysLine = null;\n      Lifeline sysLine = null;\n      UseCase useCase = null;\n      UseCaseToInteraction useCaseToInteraction = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      NormalStep step = null;\n      NormalStepToMessage stepToMessage = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __messageReceive_covered_line = null;\n      EMoflonEdge __messageSend_message_message = null;\n      EMoflonEdge __message_receiveEvent_messageReceive = null;\n      EMoflonEdge __interaction_message_message = null;\n      EMoflonEdge __interaction_fragment_messageReceive = null;\n      EMoflonEdge __messageReceive_enclosingInteraction_interaction = null;\n      EMoflonEdge step__actor__actor = null;\n      EMoflonEdge __messageSend_covered_sysLine = null;\n      EMoflonEdge flow__steps__step = null;\n      EMoflonEdge stepToMessage__source__step = null;\n      EMoflonEdge __messageReceive_message_message = null;\n      EMoflonEdge __interaction_fragment_messageSend = null;\n      EMoflonEdge __sysLine_coveredBy_messageSend = null;\n      EMoflonEdge __message_sendEvent_messageSend = null;\n      EMoflonEdge __messageSend_enclosingInteraction_interaction = null;\n      EMoflonEdge __line_coveredBy_messageReceive = null;\n      EMoflonEdge stepToMessage__target__message = null;\n      EMoflonEdge __message_interaction_interaction = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"actorToLine\"));\n\n         // ensure correct type and really bound of object actorToLine\n         JavaSDM.ensure ( _TmpObject instanceof ActorToLifeline );\n         actorToLine = (ActorToLifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         flow = (BasicFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flowToInteraction\"));\n\n         // ensure correct type and really bound of object flowToInteraction\n         JavaSDM.ensure ( _TmpObject instanceof FlowToInteractionFragment );\n         flowToInteraction = (FlowToInteractionFragment) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"interaction\"));\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"line\"));\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"message\"));\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"messageReceive\"));\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"messageSend\"));\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"sysActor\"));\n\n         // ensure correct type and really bound of object sysActor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         sysActor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"sysActorToSysLine\"));\n\n         // ensure correct type and really bound of object sysActorToSysLine\n         JavaSDM.ensure ( _TmpObject instanceof ActorToLifeline );\n         sysActorToSysLine = (ActorToLifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"sysLine\"));\n\n         // ensure correct type and really bound of object sysLine\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         sysLine = (Lifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCaseToInteraction\"));\n\n         // ensure correct type and really bound of object useCaseToInteraction\n         JavaSDM.ensure ( _TmpObject instanceof UseCaseToInteraction );\n         useCaseToInteraction = (UseCaseToInteraction) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects sysActor and actor \n         JavaSDM.ensure ( !sysActor.equals (actor) );\n\n         // check isomorphic binding between objects sysActorToSysLine and actorToLine \n         JavaSDM.ensure ( !sysActorToSysLine.equals (actorToLine) );\n\n         // check isomorphic binding between objects sysLine and line \n         JavaSDM.ensure ( !sysLine.equals (line) );\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object step\n         step = UseCaseDSLFactory.eINSTANCE.createNormalStep();\n\n         // create object stepToMessage\n         stepToMessage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createNormalStepToMessage();\n\n         // assign attribute step\n         step.setName ((java.lang.String)csp.getValue(\"step\",\"name\"));\n\n         // create link\n         stepToMessage.setTarget( message);\n\n\n         // create link\n         step.setActor( actor);\n\n\n         // create link\n         \tflow.getSteps().add(step); // add link\n\n\n         // create link\n         stepToMessage.setSource( step);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToMessage is really bound\n         JavaSDM.ensure ( stepToMessage != null );\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageSend,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,step,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage,\"createdLinkElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object actorToLine is really bound\n         JavaSDM.ensure ( actorToLine != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object flowToInteraction is really bound\n         JavaSDM.ensure ( flowToInteraction != null );\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToMessage is really bound\n         JavaSDM.ensure ( stepToMessage != null );\n         // check object sysActor is really bound\n         JavaSDM.ensure ( sysActor != null );\n         // check object sysActorToSysLine is really bound\n         JavaSDM.ensure ( sysActorToSysLine != null );\n         // check object sysLine is really bound\n         JavaSDM.ensure ( sysLine != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check object useCaseToInteraction is really bound\n         JavaSDM.ensure ( useCaseToInteraction != null );\n         // check isomorphic binding between objects actorToLine and actor \n         JavaSDM.ensure ( !actorToLine.equals (actor) );\n\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects flowToInteraction and actor \n         JavaSDM.ensure ( !flowToInteraction.equals (actor) );\n\n         // check isomorphic binding between objects interaction and actor \n         JavaSDM.ensure ( !interaction.equals (actor) );\n\n         // check isomorphic binding between objects line and actor \n         JavaSDM.ensure ( !line.equals (actor) );\n\n         // check isomorphic binding between objects message and actor \n         JavaSDM.ensure ( !message.equals (actor) );\n\n         // check isomorphic binding between objects messageReceive and actor \n         JavaSDM.ensure ( !messageReceive.equals (actor) );\n\n         // check isomorphic binding between objects messageSend and actor \n         JavaSDM.ensure ( !messageSend.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclaration and actor \n         JavaSDM.ensure ( !packageDeclaration.equals (actor) );\n\n         // check isomorphic binding between objects step and actor \n         JavaSDM.ensure ( !step.equals (actor) );\n\n         // check isomorphic binding between objects stepToMessage and actor \n         JavaSDM.ensure ( !stepToMessage.equals (actor) );\n\n         // check isomorphic binding between objects sysActor and actor \n         JavaSDM.ensure ( !sysActor.equals (actor) );\n\n         // check isomorphic binding between objects sysActorToSysLine and actor \n         JavaSDM.ensure ( !sysActorToSysLine.equals (actor) );\n\n         // check isomorphic binding between objects sysLine and actor \n         JavaSDM.ensure ( !sysLine.equals (actor) );\n\n         // check isomorphic binding between objects useCase and actor \n         JavaSDM.ensure ( !useCase.equals (actor) );\n\n         // check isomorphic binding between objects useCaseToInteraction and actor \n         JavaSDM.ensure ( !useCaseToInteraction.equals (actor) );\n\n         // check isomorphic binding between objects flow and actorToLine \n         JavaSDM.ensure ( !flow.equals (actorToLine) );\n\n         // check isomorphic binding between objects flowToInteraction and actorToLine \n         JavaSDM.ensure ( !flowToInteraction.equals (actorToLine) );\n\n         // check isomorphic binding between objects interaction and actorToLine \n         JavaSDM.ensure ( !interaction.equals (actorToLine) );\n\n         // check isomorphic binding between objects line and actorToLine \n         JavaSDM.ensure ( !line.equals (actorToLine) );\n\n         // check isomorphic binding between objects message and actorToLine \n         JavaSDM.ensure ( !message.equals (actorToLine) );\n\n         // check isomorphic binding between objects messageReceive and actorToLine \n         JavaSDM.ensure ( !messageReceive.equals (actorToLine) );\n\n         // check isomorphic binding between objects messageSend and actorToLine \n         JavaSDM.ensure ( !messageSend.equals (actorToLine) );\n\n         // check isomorphic binding between objects packageDeclaration and actorToLine \n         JavaSDM.ensure ( !packageDeclaration.equals (actorToLine) );\n\n         // check isomorphic binding between objects step and actorToLine \n         JavaSDM.ensure ( !step.equals (actorToLine) );\n\n         // check isomorphic binding between objects stepToMessage and actorToLine \n         JavaSDM.ensure ( !stepToMessage.equals (actorToLine) );\n\n         // check isomorphic binding between objects sysActor and actorToLine \n         JavaSDM.ensure ( !sysActor.equals (actorToLine) );\n\n         // check isomorphic binding between objects sysActorToSysLine and actorToLine \n         JavaSDM.ensure ( !sysActorToSysLine.equals (actorToLine) );\n\n         // check isomorphic binding between objects sysLine and actorToLine \n         JavaSDM.ensure ( !sysLine.equals (actorToLine) );\n\n         // check isomorphic binding between objects useCase and actorToLine \n         JavaSDM.ensure ( !useCase.equals (actorToLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and actorToLine \n         JavaSDM.ensure ( !useCaseToInteraction.equals (actorToLine) );\n\n         // check isomorphic binding between objects flowToInteraction and flow \n         JavaSDM.ensure ( !flowToInteraction.equals (flow) );\n\n         // check isomorphic binding between objects interaction and flow \n         JavaSDM.ensure ( !interaction.equals (flow) );\n\n         // check isomorphic binding between objects line and flow \n         JavaSDM.ensure ( !line.equals (flow) );\n\n         // check isomorphic binding between objects message and flow \n         JavaSDM.ensure ( !message.equals (flow) );\n\n         // check isomorphic binding between objects messageReceive and flow \n         JavaSDM.ensure ( !messageReceive.equals (flow) );\n\n         // check isomorphic binding between objects messageSend and flow \n         JavaSDM.ensure ( !messageSend.equals (flow) );\n\n         // check isomorphic binding between objects packageDeclaration and flow \n         JavaSDM.ensure ( !packageDeclaration.equals (flow) );\n\n         // check isomorphic binding between objects step and flow \n         JavaSDM.ensure ( !step.equals (flow) );\n\n         // check isomorphic binding between objects stepToMessage and flow \n         JavaSDM.ensure ( !stepToMessage.equals (flow) );\n\n         // check isomorphic binding between objects sysActor and flow \n         JavaSDM.ensure ( !sysActor.equals (flow) );\n\n         // check isomorphic binding between objects sysActorToSysLine and flow \n         JavaSDM.ensure ( !sysActorToSysLine.equals (flow) );\n\n         // check isomorphic binding between objects sysLine and flow \n         JavaSDM.ensure ( !sysLine.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects useCaseToInteraction and flow \n         JavaSDM.ensure ( !useCaseToInteraction.equals (flow) );\n\n         // check isomorphic binding between objects interaction and flowToInteraction \n         JavaSDM.ensure ( !interaction.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects line and flowToInteraction \n         JavaSDM.ensure ( !line.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects message and flowToInteraction \n         JavaSDM.ensure ( !message.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects messageReceive and flowToInteraction \n         JavaSDM.ensure ( !messageReceive.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects messageSend and flowToInteraction \n         JavaSDM.ensure ( !messageSend.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects packageDeclaration and flowToInteraction \n         JavaSDM.ensure ( !packageDeclaration.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects step and flowToInteraction \n         JavaSDM.ensure ( !step.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects stepToMessage and flowToInteraction \n         JavaSDM.ensure ( !stepToMessage.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects sysActor and flowToInteraction \n         JavaSDM.ensure ( !sysActor.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects sysActorToSysLine and flowToInteraction \n         JavaSDM.ensure ( !sysActorToSysLine.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects sysLine and flowToInteraction \n         JavaSDM.ensure ( !sysLine.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects useCase and flowToInteraction \n         JavaSDM.ensure ( !useCase.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects useCaseToInteraction and flowToInteraction \n         JavaSDM.ensure ( !useCaseToInteraction.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects line and interaction \n         JavaSDM.ensure ( !line.equals (interaction) );\n\n         // check isomorphic binding between objects message and interaction \n         JavaSDM.ensure ( !message.equals (interaction) );\n\n         // check isomorphic binding between objects messageReceive and interaction \n         JavaSDM.ensure ( !messageReceive.equals (interaction) );\n\n         // check isomorphic binding between objects messageSend and interaction \n         JavaSDM.ensure ( !messageSend.equals (interaction) );\n\n         // check isomorphic binding between objects packageDeclaration and interaction \n         JavaSDM.ensure ( !packageDeclaration.equals (interaction) );\n\n         // check isomorphic binding between objects step and interaction \n         JavaSDM.ensure ( !step.equals (interaction) );\n\n         // check isomorphic binding between objects stepToMessage and interaction \n         JavaSDM.ensure ( !stepToMessage.equals (interaction) );\n\n         // check isomorphic binding between objects sysActor and interaction \n         JavaSDM.ensure ( !sysActor.equals (interaction) );\n\n         // check isomorphic binding between objects sysActorToSysLine and interaction \n         JavaSDM.ensure ( !sysActorToSysLine.equals (interaction) );\n\n         // check isomorphic binding between objects sysLine and interaction \n         JavaSDM.ensure ( !sysLine.equals (interaction) );\n\n         // check isomorphic binding between objects useCase and interaction \n         JavaSDM.ensure ( !useCase.equals (interaction) );\n\n         // check isomorphic binding between objects useCaseToInteraction and interaction \n         JavaSDM.ensure ( !useCaseToInteraction.equals (interaction) );\n\n         // check isomorphic binding between objects message and line \n         JavaSDM.ensure ( !message.equals (line) );\n\n         // check isomorphic binding between objects messageReceive and line \n         JavaSDM.ensure ( !messageReceive.equals (line) );\n\n         // check isomorphic binding between objects messageSend and line \n         JavaSDM.ensure ( !messageSend.equals (line) );\n\n         // check isomorphic binding between objects packageDeclaration and line \n         JavaSDM.ensure ( !packageDeclaration.equals (line) );\n\n         // check isomorphic binding between objects step and line \n         JavaSDM.ensure ( !step.equals (line) );\n\n         // check isomorphic binding between objects stepToMessage and line \n         JavaSDM.ensure ( !stepToMessage.equals (line) );\n\n         // check isomorphic binding between objects sysActor and line \n         JavaSDM.ensure ( !sysActor.equals (line) );\n\n         // check isomorphic binding between objects sysActorToSysLine and line \n         JavaSDM.ensure ( !sysActorToSysLine.equals (line) );\n\n         // check isomorphic binding between objects sysLine and line \n         JavaSDM.ensure ( !sysLine.equals (line) );\n\n         // check isomorphic binding between objects useCase and line \n         JavaSDM.ensure ( !useCase.equals (line) );\n\n         // check isomorphic binding between objects useCaseToInteraction and line \n         JavaSDM.ensure ( !useCaseToInteraction.equals (line) );\n\n         // check isomorphic binding between objects messageReceive and message \n         JavaSDM.ensure ( !messageReceive.equals (message) );\n\n         // check isomorphic binding between objects messageSend and message \n         JavaSDM.ensure ( !messageSend.equals (message) );\n\n         // check isomorphic binding between objects packageDeclaration and message \n         JavaSDM.ensure ( !packageDeclaration.equals (message) );\n\n         // check isomorphic binding between objects step and message \n         JavaSDM.ensure ( !step.equals (message) );\n\n         // check isomorphic binding between objects stepToMessage and message \n         JavaSDM.ensure ( !stepToMessage.equals (message) );\n\n         // check isomorphic binding between objects sysActor and message \n         JavaSDM.ensure ( !sysActor.equals (message) );\n\n         // check isomorphic binding between objects sysActorToSysLine and message \n         JavaSDM.ensure ( !sysActorToSysLine.equals (message) );\n\n         // check isomorphic binding between objects sysLine and message \n         JavaSDM.ensure ( !sysLine.equals (message) );\n\n         // check isomorphic binding between objects useCase and message \n         JavaSDM.ensure ( !useCase.equals (message) );\n\n         // check isomorphic binding between objects useCaseToInteraction and message \n         JavaSDM.ensure ( !useCaseToInteraction.equals (message) );\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check isomorphic binding between objects packageDeclaration and messageReceive \n         JavaSDM.ensure ( !packageDeclaration.equals (messageReceive) );\n\n         // check isomorphic binding between objects step and messageReceive \n         JavaSDM.ensure ( !step.equals (messageReceive) );\n\n         // check isomorphic binding between objects stepToMessage and messageReceive \n         JavaSDM.ensure ( !stepToMessage.equals (messageReceive) );\n\n         // check isomorphic binding between objects sysActor and messageReceive \n         JavaSDM.ensure ( !sysActor.equals (messageReceive) );\n\n         // check isomorphic binding between objects sysActorToSysLine and messageReceive \n         JavaSDM.ensure ( !sysActorToSysLine.equals (messageReceive) );\n\n         // check isomorphic binding between objects sysLine and messageReceive \n         JavaSDM.ensure ( !sysLine.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCase and messageReceive \n         JavaSDM.ensure ( !useCase.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCaseToInteraction and messageReceive \n         JavaSDM.ensure ( !useCaseToInteraction.equals (messageReceive) );\n\n         // check isomorphic binding between objects packageDeclaration and messageSend \n         JavaSDM.ensure ( !packageDeclaration.equals (messageSend) );\n\n         // check isomorphic binding between objects step and messageSend \n         JavaSDM.ensure ( !step.equals (messageSend) );\n\n         // check isomorphic binding between objects stepToMessage and messageSend \n         JavaSDM.ensure ( !stepToMessage.equals (messageSend) );\n\n         // check isomorphic binding between objects sysActor and messageSend \n         JavaSDM.ensure ( !sysActor.equals (messageSend) );\n\n         // check isomorphic binding between objects sysActorToSysLine and messageSend \n         JavaSDM.ensure ( !sysActorToSysLine.equals (messageSend) );\n\n         // check isomorphic binding between objects sysLine and messageSend \n         JavaSDM.ensure ( !sysLine.equals (messageSend) );\n\n         // check isomorphic binding between objects useCase and messageSend \n         JavaSDM.ensure ( !useCase.equals (messageSend) );\n\n         // check isomorphic binding between objects useCaseToInteraction and messageSend \n         JavaSDM.ensure ( !useCaseToInteraction.equals (messageSend) );\n\n         // check isomorphic binding between objects step and packageDeclaration \n         JavaSDM.ensure ( !step.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects stepToMessage and packageDeclaration \n         JavaSDM.ensure ( !stepToMessage.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects sysActor and packageDeclaration \n         JavaSDM.ensure ( !sysActor.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects sysActorToSysLine and packageDeclaration \n         JavaSDM.ensure ( !sysActorToSysLine.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects sysLine and packageDeclaration \n         JavaSDM.ensure ( !sysLine.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclaration \n         JavaSDM.ensure ( !useCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCaseToInteraction and packageDeclaration \n         JavaSDM.ensure ( !useCaseToInteraction.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects stepToMessage and step \n         JavaSDM.ensure ( !stepToMessage.equals (step) );\n\n         // check isomorphic binding between objects sysActor and step \n         JavaSDM.ensure ( !sysActor.equals (step) );\n\n         // check isomorphic binding between objects sysActorToSysLine and step \n         JavaSDM.ensure ( !sysActorToSysLine.equals (step) );\n\n         // check isomorphic binding between objects sysLine and step \n         JavaSDM.ensure ( !sysLine.equals (step) );\n\n         // check isomorphic binding between objects useCase and step \n         JavaSDM.ensure ( !useCase.equals (step) );\n\n         // check isomorphic binding between objects useCaseToInteraction and step \n         JavaSDM.ensure ( !useCaseToInteraction.equals (step) );\n\n         // check isomorphic binding between objects sysActor and stepToMessage \n         JavaSDM.ensure ( !sysActor.equals (stepToMessage) );\n\n         // check isomorphic binding between objects sysActorToSysLine and stepToMessage \n         JavaSDM.ensure ( !sysActorToSysLine.equals (stepToMessage) );\n\n         // check isomorphic binding between objects sysLine and stepToMessage \n         JavaSDM.ensure ( !sysLine.equals (stepToMessage) );\n\n         // check isomorphic binding between objects useCase and stepToMessage \n         JavaSDM.ensure ( !useCase.equals (stepToMessage) );\n\n         // check isomorphic binding between objects useCaseToInteraction and stepToMessage \n         JavaSDM.ensure ( !useCaseToInteraction.equals (stepToMessage) );\n\n         // check isomorphic binding between objects sysActorToSysLine and sysActor \n         JavaSDM.ensure ( !sysActorToSysLine.equals (sysActor) );\n\n         // check isomorphic binding between objects sysLine and sysActor \n         JavaSDM.ensure ( !sysLine.equals (sysActor) );\n\n         // check isomorphic binding between objects useCase and sysActor \n         JavaSDM.ensure ( !useCase.equals (sysActor) );\n\n         // check isomorphic binding between objects useCaseToInteraction and sysActor \n         JavaSDM.ensure ( !useCaseToInteraction.equals (sysActor) );\n\n         // check isomorphic binding between objects sysLine and sysActorToSysLine \n         JavaSDM.ensure ( !sysLine.equals (sysActorToSysLine) );\n\n         // check isomorphic binding between objects useCase and sysActorToSysLine \n         JavaSDM.ensure ( !useCase.equals (sysActorToSysLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and sysActorToSysLine \n         JavaSDM.ensure ( !useCaseToInteraction.equals (sysActorToSysLine) );\n\n         // check isomorphic binding between objects useCase and sysLine \n         JavaSDM.ensure ( !useCase.equals (sysLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and sysLine \n         JavaSDM.ensure ( !useCaseToInteraction.equals (sysLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and useCase \n         JavaSDM.ensure ( !useCaseToInteraction.equals (useCase) );\n\n         // create object __messageReceive_covered_line\n         __messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageSend_message_message\n         __messageSend_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __message_receiveEvent_messageReceive\n         __message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __interaction_message_message\n         __interaction_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __interaction_fragment_messageReceive\n         __interaction_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageReceive_enclosingInteraction_interaction\n         __messageReceive_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object step__actor__actor\n         step__actor__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageSend_covered_sysLine\n         __messageSend_covered_sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object flow__steps__step\n         flow__steps__step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object stepToMessage__source__step\n         stepToMessage__source__step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageReceive_message_message\n         __messageReceive_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __interaction_fragment_messageSend\n         __interaction_fragment_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __sysLine_coveredBy_messageSend\n         __sysLine_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __message_sendEvent_messageSend\n         __message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageSend_enclosingInteraction_interaction\n         __messageSend_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __line_coveredBy_messageReceive\n         __line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object stepToMessage__target__message\n         stepToMessage__target__message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __message_interaction_interaction\n         __message_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"UserStepBFMessageRule\");\n         // assign attribute __sysLine_coveredBy_messageSend\n         __sysLine_coveredBy_messageSend.setName (\"coveredBy\");\n         // assign attribute __messageSend_covered_sysLine\n         __messageSend_covered_sysLine.setName (\"covered\");\n         // assign attribute __messageSend_enclosingInteraction_interaction\n         __messageSend_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n         // assign attribute __interaction_fragment_messageSend\n         __interaction_fragment_messageSend.setName (\"fragment\");\n         // assign attribute __messageReceive_enclosingInteraction_interaction\n         __messageReceive_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n         // assign attribute __interaction_fragment_messageReceive\n         __interaction_fragment_messageReceive.setName (\"fragment\");\n         // assign attribute flow__steps__step\n         flow__steps__step.setName (\"steps\");\n         // assign attribute step__actor__actor\n         step__actor__actor.setName (\"actor\");\n         // assign attribute __message_sendEvent_messageSend\n         __message_sendEvent_messageSend.setName (\"sendEvent\");\n         // assign attribute __message_receiveEvent_messageReceive\n         __message_receiveEvent_messageReceive.setName (\"receiveEvent\");\n         // assign attribute __message_interaction_interaction\n         __message_interaction_interaction.setName (\"interaction\");\n         // assign attribute __interaction_message_message\n         __interaction_message_message.setName (\"message\");\n         // assign attribute stepToMessage__source__step\n         stepToMessage__source__step.setName (\"source\");\n         // assign attribute stepToMessage__target__message\n         stepToMessage__target__message.setName (\"target\");\n         // assign attribute __messageSend_message_message\n         __messageSend_message_message.setName (\"message\");\n         // assign attribute __messageReceive_message_message\n         __messageReceive_message_message.setName (\"message\");\n         // assign attribute __line_coveredBy_messageReceive\n         __line_coveredBy_messageReceive.setName (\"coveredBy\");\n         // assign attribute __messageReceive_covered_line\n         __messageReceive_covered_line.setName (\"covered\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageReceive_covered_line,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageSend_message_message,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__message_receiveEvent_messageReceive,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__interaction_message_message,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__interaction_fragment_messageReceive,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageReceive_enclosingInteraction_interaction,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,step__actor__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageSend_covered_sysLine,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,flow__steps__step,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage__source__step,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageReceive_message_message,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__interaction_fragment_messageSend,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__sysLine_coveredBy_messageSend,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__message_sendEvent_messageSend,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageSend_enclosingInteraction_interaction,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__line_coveredBy_messageReceive,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage__target__message,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__message_interaction_interaction,\"translatedEdges\");\n\n         // create link\n         step__actor__actor.setTrg( actor);\n\n\n         // create link\n         __sysLine_coveredBy_messageSend.setSrc( sysLine);\n\n\n         // create link\n         __messageSend_covered_sysLine.setTrg( sysLine);\n\n\n         // create link\n         __messageSend_message_message.setSrc( messageSend);\n\n\n         // create link\n         __messageSend_covered_sysLine.setSrc( messageSend);\n\n\n         // create link\n         __sysLine_coveredBy_messageSend.setTrg( messageSend);\n\n\n         // create link\n         __message_sendEvent_messageSend.setTrg( messageSend);\n\n\n         // create link\n         __messageSend_enclosingInteraction_interaction.setSrc( messageSend);\n\n\n         // create link\n         __interaction_fragment_messageSend.setTrg( messageSend);\n\n\n         // create link\n         __interaction_fragment_messageReceive.setSrc( interaction);\n\n\n         // create link\n         __messageSend_enclosingInteraction_interaction.setTrg( interaction);\n\n\n         // create link\n         __interaction_fragment_messageSend.setSrc( interaction);\n\n\n         // create link\n         __message_interaction_interaction.setTrg( interaction);\n\n\n         // create link\n         __messageReceive_enclosingInteraction_interaction.setTrg( interaction);\n\n\n         // create link\n         __interaction_message_message.setSrc( interaction);\n\n\n         // create link\n         __line_coveredBy_messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         __messageReceive_enclosingInteraction_interaction.setSrc( messageReceive);\n\n\n         // create link\n         __message_receiveEvent_messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         __interaction_fragment_messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         __messageReceive_covered_line.setSrc( messageReceive);\n\n\n         // create link\n         __messageReceive_message_message.setSrc( messageReceive);\n\n\n         // create link\n         flow__steps__step.setSrc( flow);\n\n\n         // create link\n         stepToMessage__source__step.setTrg( step);\n\n\n         // create link\n         step__actor__actor.setSrc( step);\n\n\n         // create link\n         flow__steps__step.setTrg( step);\n\n\n         // create link\n         __messageSend_message_message.setTrg( message);\n\n\n         // create link\n         __message_receiveEvent_messageReceive.setSrc( message);\n\n\n         // create link\n         __interaction_message_message.setTrg( message);\n\n\n         // create link\n         __message_interaction_interaction.setSrc( message);\n\n\n         // create link\n         __message_sendEvent_messageSend.setSrc( message);\n\n\n         // create link\n         __messageReceive_message_message.setTrg( message);\n\n\n         // create link\n         stepToMessage__target__message.setTrg( message);\n\n\n         // create link\n         stepToMessage__target__message.setSrc( stepToMessage);\n\n\n         // create link\n         stepToMessage__source__step.setSrc( stepToMessage);\n\n\n         // create link\n         __line_coveredBy_messageReceive.setSrc( line);\n\n\n         // create link\n         __messageReceive_covered_line.setTrg( line);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,actor,sysActor,packageDeclaration,sysLine,sysActorToSysLine,messageSend,interaction,messageReceive,flow,flowToInteraction,useCase,useCaseToInteraction,step,message,stepToMessage,line,actorToLine);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      Message message = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Lifeline sysLine = null;\n      EMoflonEdge __actorToLine_source_actor = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __sysActorToSysLine_source_sysActor = null;\n      EMoflonEdge __packageDeclaration_actors_sysActor = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n      EMoflonEdge __sysLine_coveredBy_messageSend = null;\n      EMoflonEdge __messageSend_covered_sysLine = null;\n      EMoflonEdge __sysActorToSysLine_target_sysLine = null;\n      EMoflonEdge __interaction_fragment_messageSend = null;\n      EMoflonEdge __messageSend_enclosingInteraction_interaction = null;\n      EMoflonEdge __message_sendEvent_messageSend = null;\n      EMoflonEdge __messageSend_message_message = null;\n      EMoflonEdge __interaction_fragment_messageReceive = null;\n      EMoflonEdge __interaction_message_message = null;\n      EMoflonEdge __messageReceive_enclosingInteraction_interaction = null;\n      EMoflonEdge __useCaseToInteraction_target_interaction = null;\n      EMoflonEdge __message_interaction_interaction = null;\n      EMoflonEdge __flowToInteraction_target_interaction = null;\n      EMoflonEdge __line_interaction_interaction = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n      EMoflonEdge __messageReceive_message_message = null;\n      EMoflonEdge __line_coveredBy_messageReceive = null;\n      EMoflonEdge __message_receiveEvent_messageReceive = null;\n      EMoflonEdge __messageReceive_covered_line = null;\n      EMoflonEdge __flowToInteraction_source_flow = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __useCaseToInteraction_source_useCase = null;\n      EMoflonEdge __actorToLine_target_line = null;\n      CSP csp = null;\n      PackageDeclaration packageDeclaration = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterInteractionToUseCaseToInteraction = null;\n      UseCaseToInteraction useCaseToInteraction = null;\n      Actor sysActor = null;\n      Iterator fujaba__IterSysLineToSysActorToSysLine = null;\n      ActorToLifeline sysActorToSysLine = null;\n      BasicFlow flow = null;\n      Iterator fujaba__IterInteractionToFlowToInteraction = null;\n      FlowToInteractionFragment flowToInteraction = null;\n      Actor actor = null;\n      Iterator fujaba__IterLineToActorToLine = null;\n      ActorToLifeline actorToLine = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"UserStepBFMessageRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"interaction\"));\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n         _TmpObject = (match.getObject(\"line\"));\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n         _TmpObject = (match.getObject(\"message\"));\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n         _TmpObject = (match.getObject(\"messageReceive\"));\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n         _TmpObject = (match.getObject(\"messageSend\"));\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n         _TmpObject = (match.getObject(\"sysLine\"));\n\n         // ensure correct type and really bound of object sysLine\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         sysLine = (Lifeline) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects sysLine and line \n         JavaSDM.ensure ( !sysLine.equals (line) );\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // iterate to-many link target from line to actorToLine\n         fujaba__Success = false;\n\n         fujaba__IterLineToActorToLine = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(line,ActorToLifeline.class,\"target\")).iterator ();\n\n         while ( fujaba__IterLineToActorToLine.hasNext () )\n         {\n            try\n            {\n               actorToLine = (ActorToLifeline) fujaba__IterLineToActorToLine.next ();\n\n               // check object actorToLine is really bound\n               JavaSDM.ensure ( actorToLine != null );\n               // bind object\n               actor = actorToLine.getSource ();\n\n               // check object actor is really bound\n               JavaSDM.ensure ( actor != null );\n\n               // iterate to-many link target from interaction to flowToInteraction\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToFlowToInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(interaction,FlowToInteractionFragment.class,\"target\")).iterator ();\n\n               while ( fujaba__IterInteractionToFlowToInteraction.hasNext () )\n               {\n                  try\n                  {\n                     flowToInteraction = (FlowToInteractionFragment) fujaba__IterInteractionToFlowToInteraction.next ();\n\n                     // check object flowToInteraction is really bound\n                     JavaSDM.ensure ( flowToInteraction != null );\n                     // bind object\n                     _TmpObject = flowToInteraction.getSource ();\n\n                     // ensure correct type and really bound of object flow\n                     JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n                     flow = (BasicFlow) _TmpObject;\n\n                     // iterate to-many link target from sysLine to sysActorToSysLine\n                     fujaba__Success = false;\n\n                     fujaba__IterSysLineToSysActorToSysLine = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(sysLine,ActorToLifeline.class,\"target\")).iterator ();\n\n                     while ( fujaba__IterSysLineToSysActorToSysLine.hasNext () )\n                     {\n                        try\n                        {\n                           sysActorToSysLine = (ActorToLifeline) fujaba__IterSysLineToSysActorToSysLine.next ();\n\n                           // check object sysActorToSysLine is really bound\n                           JavaSDM.ensure ( sysActorToSysLine != null );\n                           // check isomorphic binding between objects sysActorToSysLine and actorToLine \n                           JavaSDM.ensure ( !sysActorToSysLine.equals (actorToLine) );\n\n                           // bind object\n                           sysActor = sysActorToSysLine.getSource ();\n\n                           // check object sysActor is really bound\n                           JavaSDM.ensure ( sysActor != null );\n\n                           // check isomorphic binding between objects sysActor and actor \n                           JavaSDM.ensure ( !sysActor.equals (actor) );\n\n                           // iterate to-many link target from interaction to useCaseToInteraction\n                           fujaba__Success = false;\n\n                           fujaba__IterInteractionToUseCaseToInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(interaction,UseCaseToInteraction.class,\"target\")).iterator ();\n\n                           while ( fujaba__IterInteractionToUseCaseToInteraction.hasNext () )\n                           {\n                              try\n                              {\n                                 useCaseToInteraction = (UseCaseToInteraction) fujaba__IterInteractionToUseCaseToInteraction.next ();\n\n                                 // check object useCaseToInteraction is really bound\n                                 JavaSDM.ensure ( useCaseToInteraction != null );\n                                 // bind object\n                                 useCase = useCaseToInteraction.getSource ();\n\n                                 // check object useCase is really bound\n                                 JavaSDM.ensure ( useCase != null );\n\n                                 // story node \'find context\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object actor is really bound\n                                    JavaSDM.ensure ( actor != null );\n                                    // check object actorToLine is really bound\n                                    JavaSDM.ensure ( actorToLine != null );\n                                    // check object flow is really bound\n                                    JavaSDM.ensure ( flow != null );\n                                    // check object flowToInteraction is really bound\n                                    JavaSDM.ensure ( flowToInteraction != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object message is really bound\n                                    JavaSDM.ensure ( message != null );\n                                    // check object messageReceive is really bound\n                                    JavaSDM.ensure ( messageReceive != null );\n                                    // check object messageSend is really bound\n                                    JavaSDM.ensure ( messageSend != null );\n                                    // check object sysActor is really bound\n                                    JavaSDM.ensure ( sysActor != null );\n                                    // check object sysActorToSysLine is really bound\n                                    JavaSDM.ensure ( sysActorToSysLine != null );\n                                    // check object sysLine is really bound\n                                    JavaSDM.ensure ( sysLine != null );\n                                    // check object useCase is really bound\n                                    JavaSDM.ensure ( useCase != null );\n                                    // check object useCaseToInteraction is really bound\n                                    JavaSDM.ensure ( useCaseToInteraction != null );\n                                    // check isomorphic binding between objects sysActor and actor \n                                    JavaSDM.ensure ( !sysActor.equals (actor) );\n\n                                    // check isomorphic binding between objects sysActorToSysLine and actorToLine \n                                    JavaSDM.ensure ( !sysActorToSysLine.equals (actorToLine) );\n\n                                    // check isomorphic binding between objects sysLine and line \n                                    JavaSDM.ensure ( !sysLine.equals (line) );\n\n                                    // check isomorphic binding between objects messageSend and messageReceive \n                                    JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                    // check link fragment from messageReceive to interaction\n                                    JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link fragment from messageSend to interaction\n                                    JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link message from message to interaction\n                                    JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                                    ));\n\n                                    // check link message from messageReceive to message\n                                    JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                                    ));\n\n                                    // check link message from messageSend to message\n                                    JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                                    ));\n\n                                    // check link sendEvent from message to messageSend\n                                    JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                                    ));\n\n                                    // bind object\n                                    packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor.eContainer() : null;\n\n                                    // check object packageDeclaration is really bound\n                                    JavaSDM.ensure ( packageDeclaration != null );\n\n                                    // check if contained via correct reference\n                                    JavaSDM.ensure(packageDeclaration.getActors().contains(actor));\n\n                                    // check link actors from sysActor to packageDeclaration\n                                    JavaSDM.ensure (packageDeclaration.equals (sysActor.eContainer()\n                                    ));\n\n                                    // check link flows from flow to useCase\n                                    JavaSDM.ensure (useCase.equals (flow.eContainer()\n                                    ));\n\n                                    // check link source from actorToLine to actor\n                                    JavaSDM.ensure (actor.equals (actorToLine.getSource ()\n                                    ));\n\n                                    // check link source from flowToInteraction to flow\n                                    JavaSDM.ensure (flow.equals (flowToInteraction.getSource ()\n                                    ));\n\n                                    // check link source from sysActorToSysLine to sysActor\n                                    JavaSDM.ensure (sysActor.equals (sysActorToSysLine.getSource ()\n                                    ));\n\n                                    // check link source from useCaseToInteraction to useCase\n                                    JavaSDM.ensure (useCase.equals (useCaseToInteraction.getSource ()\n                                    ));\n\n                                    // check link target from actorToLine to line\n                                    JavaSDM.ensure (line.equals (actorToLine.getTarget ()\n                                    ));\n\n                                    // check link target from flowToInteraction to interaction\n                                    JavaSDM.ensure (interaction.equals (flowToInteraction.getTarget ()\n                                    ));\n\n                                    // check link target from sysActorToSysLine to sysLine\n                                    JavaSDM.ensure (sysLine.equals (sysActorToSysLine.getTarget ()\n                                    ));\n\n                                    // check link target from useCaseToInteraction to interaction\n                                    JavaSDM.ensure (interaction.equals (useCaseToInteraction.getTarget ()\n                                    ));\n\n                                    // check link useCases from useCase to packageDeclaration\n                                    JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                                    ));\n\n                                    // check link covered from line to messageReceive\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                                    // check link covered from messageSend to sysLine\n                                    JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                                    // create object __actorToLine_source_actor\n                                    __actorToLine_source_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __packageDeclaration_actors_actor\n                                    __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object isApplicableMatch\n                                    isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                                    // create object __sysActorToSysLine_source_sysActor\n                                    __sysActorToSysLine_source_sysActor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __packageDeclaration_actors_sysActor\n                                    __packageDeclaration_actors_sysActor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __packageDeclaration_useCases_useCase\n                                    __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __sysLine_coveredBy_messageSend\n                                    __sysLine_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __messageSend_covered_sysLine\n                                    __messageSend_covered_sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __sysActorToSysLine_target_sysLine\n                                    __sysActorToSysLine_target_sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __interaction_fragment_messageSend\n                                    __interaction_fragment_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __messageSend_enclosingInteraction_interaction\n                                    __messageSend_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __message_sendEvent_messageSend\n                                    __message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __messageSend_message_message\n                                    __messageSend_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __interaction_fragment_messageReceive\n                                    __interaction_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __interaction_message_message\n                                    __interaction_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __messageReceive_enclosingInteraction_interaction\n                                    __messageReceive_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __useCaseToInteraction_target_interaction\n                                    __useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __message_interaction_interaction\n                                    __message_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __flowToInteraction_target_interaction\n                                    __flowToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __line_interaction_interaction\n                                    __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __interaction_lifeline_line\n                                    __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __messageReceive_message_message\n                                    __messageReceive_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __line_coveredBy_messageReceive\n                                    __line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __message_receiveEvent_messageReceive\n                                    __message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __messageReceive_covered_line\n                                    __messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __flowToInteraction_source_flow\n                                    __flowToInteraction_source_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __useCase_flows_flow\n                                    __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __useCaseToInteraction_source_useCase\n                                    __useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __actorToLine_target_line\n                                    __actorToLine_target_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // assign attribute __packageDeclaration_actors_actor\n                                    __packageDeclaration_actors_actor.setName (\"actors\");\n                                    // assign attribute __packageDeclaration_actors_sysActor\n                                    __packageDeclaration_actors_sysActor.setName (\"actors\");\n                                    // assign attribute __sysLine_coveredBy_messageSend\n                                    __sysLine_coveredBy_messageSend.setName (\"coveredBy\");\n                                    // assign attribute __messageSend_covered_sysLine\n                                    __messageSend_covered_sysLine.setName (\"covered\");\n                                    // assign attribute __sysActorToSysLine_source_sysActor\n                                    __sysActorToSysLine_source_sysActor.setName (\"source\");\n                                    // assign attribute __sysActorToSysLine_target_sysLine\n                                    __sysActorToSysLine_target_sysLine.setName (\"target\");\n                                    // assign attribute __messageSend_enclosingInteraction_interaction\n                                    __messageSend_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n                                    // assign attribute __interaction_fragment_messageSend\n                                    __interaction_fragment_messageSend.setName (\"fragment\");\n                                    // assign attribute __messageReceive_enclosingInteraction_interaction\n                                    __messageReceive_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n                                    // assign attribute __interaction_fragment_messageReceive\n                                    __interaction_fragment_messageReceive.setName (\"fragment\");\n                                    // assign attribute __flowToInteraction_source_flow\n                                    __flowToInteraction_source_flow.setName (\"source\");\n                                    // assign attribute __flowToInteraction_target_interaction\n                                    __flowToInteraction_target_interaction.setName (\"target\");\n                                    // assign attribute __useCase_flows_flow\n                                    __useCase_flows_flow.setName (\"flows\");\n                                    // assign attribute __useCaseToInteraction_source_useCase\n                                    __useCaseToInteraction_source_useCase.setName (\"source\");\n                                    // assign attribute __useCaseToInteraction_target_interaction\n                                    __useCaseToInteraction_target_interaction.setName (\"target\");\n                                    // assign attribute __message_sendEvent_messageSend\n                                    __message_sendEvent_messageSend.setName (\"sendEvent\");\n                                    // assign attribute __message_receiveEvent_messageReceive\n                                    __message_receiveEvent_messageReceive.setName (\"receiveEvent\");\n                                    // assign attribute __message_interaction_interaction\n                                    __message_interaction_interaction.setName (\"interaction\");\n                                    // assign attribute __interaction_message_message\n                                    __interaction_message_message.setName (\"message\");\n                                    // assign attribute __line_interaction_interaction\n                                    __line_interaction_interaction.setName (\"interaction\");\n                                    // assign attribute __interaction_lifeline_line\n                                    __interaction_lifeline_line.setName (\"lifeline\");\n                                    // assign attribute __messageSend_message_message\n                                    __messageSend_message_message.setName (\"message\");\n                                    // assign attribute __messageReceive_message_message\n                                    __messageReceive_message_message.setName (\"message\");\n                                    // assign attribute __line_coveredBy_messageReceive\n                                    __line_coveredBy_messageReceive.setName (\"coveredBy\");\n                                    // assign attribute __messageReceive_covered_line\n                                    __messageReceive_covered_line.setName (\"covered\");\n                                    // assign attribute __actorToLine_source_actor\n                                    __actorToLine_source_actor.setName (\"source\");\n                                    // assign attribute __actorToLine_target_line\n                                    __actorToLine_target_line.setName (\"target\");\n                                    // assign attribute __packageDeclaration_useCases_useCase\n                                    __packageDeclaration_useCases_useCase.setName (\"useCases\");\n\n                                    // create link\n                                    __actorToLine_source_actor.setTrg( actor);\n\n\n                                    // create link\n                                    __packageDeclaration_actors_actor.setTrg( actor);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(actor);\n\n\n                                    // create link\n                                    __sysActorToSysLine_source_sysActor.setTrg( sysActor);\n\n\n                                    // create link\n                                    __packageDeclaration_actors_sysActor.setTrg( sysActor);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(sysActor);\n\n\n                                    // create link\n                                    __packageDeclaration_actors_sysActor.setSrc( packageDeclaration);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                                    // create link\n                                    __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n                                    // create link\n                                    __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(sysLine);\n\n\n                                    // create link\n                                    __sysLine_coveredBy_messageSend.setSrc( sysLine);\n\n\n                                    // create link\n                                    __messageSend_covered_sysLine.setTrg( sysLine);\n\n\n                                    // create link\n                                    __sysActorToSysLine_target_sysLine.setTrg( sysLine);\n\n\n                                    // create link\n                                    __sysActorToSysLine_target_sysLine.setSrc( sysActorToSysLine);\n\n\n                                    // create link\n                                    __sysActorToSysLine_source_sysActor.setSrc( sysActorToSysLine);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(sysActorToSysLine);\n\n\n                                    // create link\n                                    __sysLine_coveredBy_messageSend.setTrg( messageSend);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(messageSend);\n\n\n                                    // create link\n                                    __interaction_fragment_messageSend.setTrg( messageSend);\n\n\n                                    // create link\n                                    __messageSend_covered_sysLine.setSrc( messageSend);\n\n\n                                    // create link\n                                    __messageSend_enclosingInteraction_interaction.setSrc( messageSend);\n\n\n                                    // create link\n                                    __message_sendEvent_messageSend.setTrg( messageSend);\n\n\n                                    // create link\n                                    __messageSend_message_message.setSrc( messageSend);\n\n\n                                    // create link\n                                    __interaction_fragment_messageReceive.setSrc( interaction);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(interaction);\n\n\n                                    // create link\n                                    __interaction_message_message.setSrc( interaction);\n\n\n                                    // create link\n                                    __interaction_fragment_messageSend.setSrc( interaction);\n\n\n                                    // create link\n                                    __messageReceive_enclosingInteraction_interaction.setTrg( interaction);\n\n\n                                    // create link\n                                    __useCaseToInteraction_target_interaction.setTrg( interaction);\n\n\n                                    // create link\n                                    __message_interaction_interaction.setTrg( interaction);\n\n\n                                    // create link\n                                    __messageSend_enclosingInteraction_interaction.setTrg( interaction);\n\n\n                                    // create link\n                                    __flowToInteraction_target_interaction.setTrg( interaction);\n\n\n                                    // create link\n                                    __line_interaction_interaction.setTrg( interaction);\n\n\n                                    // create link\n                                    __interaction_lifeline_line.setSrc( interaction);\n\n\n                                    // create link\n                                    __messageReceive_enclosingInteraction_interaction.setSrc( messageReceive);\n\n\n                                    // create link\n                                    __messageReceive_message_message.setSrc( messageReceive);\n\n\n                                    // create link\n                                    __interaction_fragment_messageReceive.setTrg( messageReceive);\n\n\n                                    // create link\n                                    __line_coveredBy_messageReceive.setTrg( messageReceive);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(messageReceive);\n\n\n                                    // create link\n                                    __message_receiveEvent_messageReceive.setTrg( messageReceive);\n\n\n                                    // create link\n                                    __messageReceive_covered_line.setSrc( messageReceive);\n\n\n                                    // create link\n                                    __flowToInteraction_source_flow.setTrg( flow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(flow);\n\n\n                                    // create link\n                                    __useCase_flows_flow.setTrg( flow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(flowToInteraction);\n\n\n                                    // create link\n                                    __flowToInteraction_target_interaction.setSrc( flowToInteraction);\n\n\n                                    // create link\n                                    __flowToInteraction_source_flow.setSrc( flowToInteraction);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                                    // create link\n                                    __useCaseToInteraction_source_useCase.setTrg( useCase);\n\n\n                                    // create link\n                                    __useCase_flows_flow.setSrc( useCase);\n\n\n                                    // create link\n                                    __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n                                    // create link\n                                    __useCaseToInteraction_target_interaction.setSrc( useCaseToInteraction);\n\n\n                                    // create link\n                                    __useCaseToInteraction_source_useCase.setSrc( useCaseToInteraction);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(useCaseToInteraction);\n\n\n                                    // create link\n                                    __message_sendEvent_messageSend.setSrc( message);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(message);\n\n\n                                    // create link\n                                    __messageReceive_message_message.setTrg( message);\n\n\n                                    // create link\n                                    __messageSend_message_message.setTrg( message);\n\n\n                                    // create link\n                                    __interaction_message_message.setTrg( message);\n\n\n                                    // create link\n                                    __message_interaction_interaction.setSrc( message);\n\n\n                                    // create link\n                                    __message_receiveEvent_messageReceive.setSrc( message);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(line);\n\n\n                                    // create link\n                                    __messageReceive_covered_line.setTrg( line);\n\n\n                                    // create link\n                                    __actorToLine_target_line.setTrg( line);\n\n\n                                    // create link\n                                    __line_interaction_interaction.setSrc( line);\n\n\n                                    // create link\n                                    __line_coveredBy_messageReceive.setSrc( line);\n\n\n                                    // create link\n                                    __interaction_lifeline_line.setTrg( line);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(actorToLine);\n\n\n                                    // create link\n                                    __actorToLine_source_actor.setSrc( actorToLine);\n\n\n                                    // create link\n                                    __actorToLine_target_line.setSrc( actorToLine);\n\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageSend_enclosingInteraction_interaction,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowToInteraction_source_flow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowToInteraction_target_interaction,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_lifeline_line,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageReceive_covered_line,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_fragment_messageSend,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageSend_message_message,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_coveredBy_messageReceive,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCaseToInteraction_target_interaction,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_message_message,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_useCases_useCase,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__message_interaction_interaction,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__sysLine_coveredBy_messageSend,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__actorToLine_source_actor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__message_receiveEvent_messageReceive,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__actorToLine_target_line,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__message_sendEvent_messageSend,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_actors_actor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__sysActorToSysLine_target_sysLine,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCaseToInteraction_source_useCase,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__sysActorToSysLine_source_sysActor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_fragment_messageReceive,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageSend_covered_sysLine,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_actors_sysActor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageReceive_enclosingInteraction_interaction,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_interaction_interaction,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageReceive_message_message,\"allContextElements\");\n                                    // story node \'solve CSP\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,actor,sysActor,packageDeclaration,sysLine,sysActorToSysLine,messageSend,interaction,messageReceive,flow,flowToInteraction,useCase,useCaseToInteraction,message,line,actorToLine));\n\n                                       // ensure correct type and really bound of object csp\n                                       JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                       csp = (CSP) _TmpObject;\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    // statement node \'check CSP\'\n                                    fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                                    if (fujaba__Success)\n                                    {\n                                       // story node \'add match to rule result\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // check object isApplicableMatch is really bound\n                                          JavaSDM.ensure ( isApplicableMatch != null );\n                                          // check object ruleresult is really bound\n                                          JavaSDM.ensure ( ruleresult != null );\n                                          // assign attribute isApplicableMatch\n                                          isApplicableMatch.setRuleName (\"UserStepBFMessageRule\");\n                                          // assign attribute ruleresult\n                                          ruleresult.setSuccess (true);\n\n                                          // create link\n                                          ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"sysLine\", sysLine);\nmatch.registerObject(\"messageSend\", messageSend);\nmatch.registerObject(\"interaction\", interaction);\nmatch.registerObject(\"messageReceive\", messageReceive);\nmatch.registerObject(\"message\", message);\nmatch.registerObject(\"line\", line);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend,
			Interaction interaction,
			MessageOccurrenceSpecification messageReceive, Message message,
			Lifeline line);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend,
			Interaction interaction,
			MessageOccurrenceSpecification messageReceive, Message message,
			Lifeline line);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"person\");\r\nliteral0.setType(\"String\");\r\nVariable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal1\", true, csp);\r\nliteral1.setValue(\"system\");\r\nliteral1.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.type\", true, csp);\r\nvar_actor_type.setValue(actor.getType());\r\nvar_actor_type.setType(\"EObject\");\r\nVariable var_sysActor_type = CSPFactoryHelper.eINSTANCE.createVariable(\"sysActor.type\", true, csp);\r\nvar_sysActor_type.setValue(sysActor.getType());\r\nvar_sysActor_type.setType(\"EObject\");\r\nVariable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(\"message.name\", true, csp);\r\nvar_message_name.setValue(message.getName());\r\nvar_message_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(\"step.name\", csp);\r\nvar_step_name.setType(\"\");\r\n\r\n// Create constraints\r\nEqActorType eqActorType = new EqActorType();EqActorType eqActorType_0 = new EqActorType();Eq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eqActorType);\r\ncsp.getConstraints().add(eqActorType_0);\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neqActorType.setRuleName(\"\");\r\neqActorType.solve(var_actor_type,literal0);\r\neqActorType_0.setRuleName(\"\");\r\neqActorType_0.solve(var_sysActor_type,literal1);\r\neq.setRuleName(\"\");\r\neq.solve(var_step_name,var_message_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"sysActor\",sysActor);\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"sysLine\",sysLine);\r\nisApplicableMatch.registerObject(\"sysActorToSysLine\",sysActorToSysLine);\r\nisApplicableMatch.registerObject(\"messageSend\",messageSend);\r\nisApplicableMatch.registerObject(\"interaction\",interaction);\r\nisApplicableMatch.registerObject(\"messageReceive\",messageReceive);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"flowToInteraction\",flowToInteraction);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"useCaseToInteraction\",useCaseToInteraction);\r\nisApplicableMatch.registerObject(\"message\",message);\r\nisApplicableMatch.registerObject(\"line\",line);\r\nisApplicableMatch.registerObject(\"actorToLine\",actorToLine);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			Actor actor, Actor sysActor, PackageDeclaration packageDeclaration,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			MessageOccurrenceSpecification messageSend,
			Interaction interaction,
			MessageOccurrenceSpecification messageReceive, BasicFlow flow,
			FlowToInteractionFragment flowToInteraction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Message message,
			Lifeline line, ActorToLifeline actorToLine);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"sysActor\", sysActor);\nruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"sysLine\", sysLine);\nruleresult.registerObject(\"sysActorToSysLine\", sysActorToSysLine);\nruleresult.registerObject(\"messageSend\", messageSend);\nruleresult.registerObject(\"interaction\", interaction);\nruleresult.registerObject(\"messageReceive\", messageReceive);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"flowToInteraction\", flowToInteraction);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"useCaseToInteraction\", useCaseToInteraction);\nruleresult.registerObject(\"step\", step);\nruleresult.registerObject(\"message\", message);\nruleresult.registerObject(\"stepToMessage\", stepToMessage);\nruleresult.registerObject(\"line\", line);\nruleresult.registerObject(\"actorToLine\", actorToLine);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject actor,
			EObject sysActor, EObject packageDeclaration, EObject sysLine,
			EObject sysActorToSysLine, EObject messageSend,
			EObject interaction, EObject messageReceive, EObject flow,
			EObject flowToInteraction, EObject useCase,
			EObject useCaseToInteraction, EObject step, EObject message,
			EObject stepToMessage, EObject line, EObject actorToLine);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"messageSend\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification()) && match.getObject(\"messageReceive\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification()) && match.getObject(\"message\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessage());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_45079 = null;\n      Message __DEC_messageReceive_receiveEvent_45079 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_247068 = null;\n      Message __DEC_messageSend_receiveEvent_247068 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_983807 = null;\n      Message __DEC_messageReceive_sendEvent_983807 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_773485 = null;\n      Message __DEC_messageSend_sendEvent_773485 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_768019 = null;\n      MessageEnd __DEC_message_message_768019 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Interaction interaction = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Lifeline sysLine = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_coveredBy is really bound\n         JavaSDM.ensure ( _edge_coveredBy != null );\n         // bind object\n         _TmpObject = _edge_coveredBy.getSrc ();\n\n         // ensure correct type and really bound of object sysLine\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         sysLine = (Lifeline) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_coveredBy.getTrg ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         interaction = messageSend.getEnclosingInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         message = messageSend.getMessage ();\n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n\n         // check link message from message to interaction\n         JavaSDM.ensure (interaction.equals (message.getInteraction ()\n         ));\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check link fragment from messageReceive to interaction\n         JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n         ));\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // check link sendEvent from message to messageSend\n         JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n         ));\n\n         // check link covered from messageSend to sysLine\n         JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n         // iterate to-many link lifeline from interaction to line\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n         while ( fujaba__IterInteractionToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // check isomorphic binding between objects sysLine and line \n               JavaSDM.ensure ( !sysLine.equals (line) );\n\n               // check link covered from line to messageReceive\n               JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // negative check for link fragment from messageReceive\n                  JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                  // negative check for link fragment from messageSend\n                  JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_45079\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_45079 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_45079.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_receiveEvent_45079 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_45079.next ();\n\n                           // check object __DEC_messageReceive_receiveEvent_45079 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_45079 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_45079 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_45079.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_247068\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_247068 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_247068.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageSend_receiveEvent_247068 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_247068.next ();\n\n                           // check object __DEC_messageSend_receiveEvent_247068 is really bound\n                           JavaSDM.ensure ( __DEC_messageSend_receiveEvent_247068 != null );\n                           // check isomorphic binding between objects __DEC_messageSend_receiveEvent_247068 and message \n                           JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_247068.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_983807\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_983807 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_983807.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_sendEvent_983807 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_983807.next ();\n\n                           // check object __DEC_messageReceive_sendEvent_983807 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_sendEvent_983807 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_sendEvent_983807 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_983807.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_773485\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_773485 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_773485.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageSend_sendEvent_773485 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_773485.next ();\n\n                           // check object __DEC_messageSend_sendEvent_773485 is really bound\n                           JavaSDM.ensure ( __DEC_messageSend_sendEvent_773485 != null );\n                           // check isomorphic binding between objects __DEC_messageSend_sendEvent_773485 and message \n                           JavaSDM.ensure ( !__DEC_messageSend_sendEvent_773485.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link message from message to __DEC_message_message_768019\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageTo__DEC_message_message_768019 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_768019.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_message_message_768019 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_768019.next ();\n\n                           // check object __DEC_message_message_768019 is really bound\n                           JavaSDM.ensure ( __DEC_message_message_768019 != null );\n                           // check isomorphic binding between objects __DEC_message_message_768019 and messageReceive \n                           JavaSDM.ensure ( !__DEC_message_message_768019.equals (messageReceive) );\n\n                           // check isomorphic binding between objects __DEC_message_message_768019 and messageSend \n                           JavaSDM.ensure ( !__DEC_message_message_768019.equals (messageSend) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_coveredBy is really bound\n                  JavaSDM.ensure ( _edge_coveredBy != null );\n                  // check object interaction is really bound\n                  JavaSDM.ensure ( interaction != null );\n                  // check object line is really bound\n                  JavaSDM.ensure ( line != null );\n                  // check object message is really bound\n                  JavaSDM.ensure ( message != null );\n                  // check object messageReceive is really bound\n                  JavaSDM.ensure ( messageReceive != null );\n                  // check object messageSend is really bound\n                  JavaSDM.ensure ( messageSend != null );\n                  // check object sysLine is really bound\n                  JavaSDM.ensure ( sysLine != null );\n                  // check isomorphic binding between objects sysLine and line \n                  JavaSDM.ensure ( !sysLine.equals (line) );\n\n                  // check isomorphic binding between objects messageSend and messageReceive \n                  JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                  // check link fragment from messageReceive to interaction\n                  JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                  ));\n\n                  // check link fragment from messageSend to interaction\n                  JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                  ));\n\n                  // check link lifeline from line to interaction\n                  JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                  ));\n\n                  // check link message from message to interaction\n                  JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                  ));\n\n                  // check link message from messageReceive to message\n                  JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                  ));\n\n                  // check link message from messageSend to message\n                  JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                  ));\n\n                  // check link receiveEvent from message to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                  ));\n\n                  // check link receiveEvent from message to messageSend\n                  JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                  )));\n\n                  // check link sendEvent from message to messageSend\n                  JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                  ));\n\n                  // check link sendEvent from message to messageReceive\n                  JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                  )));\n\n                  // check link src from _edge_coveredBy to sysLine\n                  JavaSDM.ensure (sysLine.equals (_edge_coveredBy.getSrc ()\n                  ));\n\n                  // check link trg from _edge_coveredBy to messageSend\n                  JavaSDM.ensure (messageSend.equals (_edge_coveredBy.getTrg ()\n                  ));\n\n                  // check link covered from line to messageReceive\n                  JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                  // check link covered from messageSend to sysLine\n                  JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,interaction,messageReceive,message,line);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_130(
			EMoflonEdge _edge_coveredBy);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_57399 = null;\n      Message __DEC_messageReceive_receiveEvent_57399 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_27647 = null;\n      Message __DEC_messageSend_receiveEvent_27647 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_111988 = null;\n      Message __DEC_messageReceive_sendEvent_111988 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_316274 = null;\n      Message __DEC_messageSend_sendEvent_316274 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_467478 = null;\n      MessageEnd __DEC_message_message_467478 = null;\n      Match match = null;\n      Iterator fujaba__IterSysLineTo_edge_coveredBy = null;\n      EMoflonEdge _edge_coveredBy = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Interaction interaction = null;\n      MessageOccurrenceSpecification messageSend = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_covered is really bound\n         JavaSDM.ensure ( _edge_covered != null );\n         // bind object\n         _TmpObject = _edge_covered.getSrc ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         interaction = messageSend.getEnclosingInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         message = messageSend.getMessage ();\n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n\n         // check link message from message to interaction\n         JavaSDM.ensure (interaction.equals (message.getInteraction ()\n         ));\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check link fragment from messageReceive to interaction\n         JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n         ));\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // check link sendEvent from message to messageSend\n         JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n         ));\n\n         // bind object\n         _TmpObject = _edge_covered.getTrg ();\n\n         // ensure correct type and really bound of object sysLine\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         sysLine = (Lifeline) _TmpObject;\n\n         // check link covered from messageSend to sysLine\n         JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n         // iterate to-many link lifeline from interaction to line\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n         while ( fujaba__IterInteractionToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // check isomorphic binding between objects sysLine and line \n               JavaSDM.ensure ( !sysLine.equals (line) );\n\n               // check link covered from line to messageReceive\n               JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n               // iterate to-many link src from sysLine to _edge_coveredBy\n               fujaba__Success = false;\n\n               fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(sysLine,EMoflonEdge.class,\"src\")).iterator ();\n\n               while ( fujaba__IterSysLineTo_edge_coveredBy.hasNext () )\n               {\n                  try\n                  {\n                     _edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy.next ();\n\n                     // check object _edge_coveredBy is really bound\n                     JavaSDM.ensure ( _edge_coveredBy != null );\n                     // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                     JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                     // check link trg from _edge_coveredBy to messageSend\n                     JavaSDM.ensure (messageSend.equals (_edge_coveredBy.getTrg ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageSend\n                        JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_57399\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_57399 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_57399.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_57399 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_57399.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_57399 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_57399 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_57399 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_57399.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_27647\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_27647 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_27647.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_receiveEvent_27647 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_27647.next ();\n\n                                 // check object __DEC_messageSend_receiveEvent_27647 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_receiveEvent_27647 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_receiveEvent_27647 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_27647.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_111988\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_111988 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_111988.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_111988 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_111988.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_111988 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_111988 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_111988 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_111988.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_316274\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_316274 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_316274.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_sendEvent_316274 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_316274.next ();\n\n                                 // check object __DEC_messageSend_sendEvent_316274 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_sendEvent_316274 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_sendEvent_316274 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_sendEvent_316274.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_467478\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_467478 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_467478.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_467478 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_467478.next ();\n\n                                 // check object __DEC_message_message_467478 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_467478 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_467478 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_467478.equals (messageReceive) );\n\n                                 // check isomorphic binding between objects __DEC_message_message_467478 and messageSend \n                                 JavaSDM.ensure ( !__DEC_message_message_467478.equals (messageSend) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_covered is really bound\n                        JavaSDM.ensure ( _edge_covered != null );\n                        // check object _edge_coveredBy is really bound\n                        JavaSDM.ensure ( _edge_coveredBy != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check object messageSend is really bound\n                        JavaSDM.ensure ( messageSend != null );\n                        // check object sysLine is really bound\n                        JavaSDM.ensure ( sysLine != null );\n                        // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                        JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                        // check isomorphic binding between objects sysLine and line \n                        JavaSDM.ensure ( !sysLine.equals (line) );\n\n                        // check isomorphic binding between objects messageSend and messageReceive \n                        JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link fragment from messageSend to interaction\n                        JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link message from messageSend to message\n                        JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link receiveEvent from message to messageSend\n                        JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                        )));\n\n                        // check link sendEvent from message to messageSend\n                        JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link src from _edge_covered to messageSend\n                        JavaSDM.ensure (messageSend.equals (_edge_covered.getSrc ()\n                        ));\n\n                        // check link src from _edge_coveredBy to sysLine\n                        JavaSDM.ensure (sysLine.equals (_edge_coveredBy.getSrc ()\n                        ));\n\n                        // check link trg from _edge_covered to sysLine\n                        JavaSDM.ensure (sysLine.equals (_edge_covered.getTrg ()\n                        ));\n\n                        // check link trg from _edge_coveredBy to messageSend\n                        JavaSDM.ensure (messageSend.equals (_edge_coveredBy.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // check link covered from messageSend to sysLine\n                        JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,interaction,messageReceive,message,line);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_131(EMoflonEdge _edge_covered);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_889541 = null;\n      Message __DEC_messageReceive_receiveEvent_889541 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_404337 = null;\n      Message __DEC_messageSend_receiveEvent_404337 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_336199 = null;\n      Message __DEC_messageReceive_sendEvent_336199 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_362887 = null;\n      Message __DEC_messageSend_sendEvent_362887 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_696495 = null;\n      MessageEnd __DEC_message_message_696495 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Interaction interaction = null;\n      MessageOccurrenceSpecification messageSend = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_enclosingInteraction is really bound\n         JavaSDM.ensure ( _edge_enclosingInteraction != null );\n         // bind object\n         _TmpObject = _edge_enclosingInteraction.getSrc ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         interaction = messageSend.getEnclosingInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         message = messageSend.getMessage ();\n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n\n         // check link message from message to interaction\n         JavaSDM.ensure (interaction.equals (message.getInteraction ()\n         ));\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check link fragment from messageReceive to interaction\n         JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n         ));\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // check link sendEvent from message to messageSend\n         JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n         ));\n\n         // check link trg from _edge_enclosingInteraction to interaction\n         JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n         ));\n\n         // iterate to-many link covered from messageSend to sysLine\n         fujaba__Success = false;\n\n         fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageSendToSysLine.hasNext () )\n         {\n            try\n            {\n               sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n               // check object sysLine is really bound\n               JavaSDM.ensure ( sysLine != null );\n               // iterate to-many link lifeline from interaction to line\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n               while ( fujaba__IterInteractionToLine.hasNext () )\n               {\n                  try\n                  {\n                     line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n                     // check object line is really bound\n                     JavaSDM.ensure ( line != null );\n                     // check isomorphic binding between objects sysLine and line \n                     JavaSDM.ensure ( !sysLine.equals (line) );\n\n                     // check link covered from line to messageReceive\n                     JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageSend\n                        JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_889541\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_889541 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_889541.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_889541 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_889541.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_889541 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_889541 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_889541 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_889541.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_404337\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_404337 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_404337.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_receiveEvent_404337 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_404337.next ();\n\n                                 // check object __DEC_messageSend_receiveEvent_404337 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_receiveEvent_404337 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_receiveEvent_404337 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_404337.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_336199\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_336199 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_336199.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_336199 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_336199.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_336199 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_336199 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_336199 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_336199.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_362887\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_362887 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_362887.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_sendEvent_362887 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_362887.next ();\n\n                                 // check object __DEC_messageSend_sendEvent_362887 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_sendEvent_362887 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_sendEvent_362887 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_sendEvent_362887.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_696495\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_696495 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_696495.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_696495 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_696495.next ();\n\n                                 // check object __DEC_message_message_696495 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_696495 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_696495 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_696495.equals (messageReceive) );\n\n                                 // check isomorphic binding between objects __DEC_message_message_696495 and messageSend \n                                 JavaSDM.ensure ( !__DEC_message_message_696495.equals (messageSend) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_enclosingInteraction is really bound\n                        JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check object messageSend is really bound\n                        JavaSDM.ensure ( messageSend != null );\n                        // check object sysLine is really bound\n                        JavaSDM.ensure ( sysLine != null );\n                        // check isomorphic binding between objects sysLine and line \n                        JavaSDM.ensure ( !sysLine.equals (line) );\n\n                        // check isomorphic binding between objects messageSend and messageReceive \n                        JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link fragment from messageSend to interaction\n                        JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link message from messageSend to message\n                        JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link receiveEvent from message to messageSend\n                        JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                        )));\n\n                        // check link sendEvent from message to messageSend\n                        JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link src from _edge_enclosingInteraction to messageSend\n                        JavaSDM.ensure (messageSend.equals (_edge_enclosingInteraction.getSrc ()\n                        ));\n\n                        // check link trg from _edge_enclosingInteraction to interaction\n                        JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // check link covered from messageSend to sysLine\n                        JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,interaction,messageReceive,message,line);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_132(
			EMoflonEdge _edge_enclosingInteraction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_906061 = null;\n      Message __DEC_messageReceive_receiveEvent_906061 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_159505 = null;\n      Message __DEC_messageSend_receiveEvent_159505 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_611418 = null;\n      Message __DEC_messageReceive_sendEvent_611418 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_962628 = null;\n      Message __DEC_messageSend_sendEvent_962628 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_51433 = null;\n      MessageEnd __DEC_message_message_51433 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterMessageSendTo_edge_enclosingInteraction = null;\n      EMoflonEdge _edge_enclosingInteraction = null;\n      MessageOccurrenceSpecification messageSend = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_fragment is really bound\n         JavaSDM.ensure ( _edge_fragment != null );\n         // bind object\n         _TmpObject = _edge_fragment.getTrg ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // iterate to-many link src from messageSend to _edge_enclosingInteraction\n         fujaba__Success = false;\n\n         fujaba__IterMessageSendTo_edge_enclosingInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,EMoflonEdge.class,\"src\")).iterator ();\n\n         while ( fujaba__IterMessageSendTo_edge_enclosingInteraction.hasNext () )\n         {\n            try\n            {\n               _edge_enclosingInteraction = (EMoflonEdge) fujaba__IterMessageSendTo_edge_enclosingInteraction.next ();\n\n               // check object _edge_enclosingInteraction is really bound\n               JavaSDM.ensure ( _edge_enclosingInteraction != null );\n               // check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction \n               JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingInteraction) );\n\n               // bind object\n               message = messageSend.getMessage ();\n\n               // check object message is really bound\n               JavaSDM.ensure ( message != null );\n\n               // bind object\n               _TmpObject = message.getReceiveEvent ();\n\n               // ensure correct type and really bound of object messageReceive\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n               // check isomorphic binding between objects messageSend and messageReceive \n               JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n               // check link message from messageReceive to message\n               JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n               ));\n\n               // check link sendEvent from message to messageSend\n               JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n               ));\n\n               // iterate to-many link covered from messageSend to sysLine\n               fujaba__Success = false;\n\n               fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n               while ( fujaba__IterMessageSendToSysLine.hasNext () )\n               {\n                  try\n                  {\n                     sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n                     // check object sysLine is really bound\n                     JavaSDM.ensure ( sysLine != null );\n                     // bind object\n                     interaction = messageSend.getEnclosingInteraction ();\n\n                     // check object interaction is really bound\n                     JavaSDM.ensure ( interaction != null );\n\n                     // check link fragment from messageReceive to interaction\n                     JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                     ));\n\n                     // check link message from message to interaction\n                     JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                     ));\n\n                     // check link src from _edge_fragment to interaction\n                     JavaSDM.ensure (interaction.equals (_edge_fragment.getSrc ()\n                     ));\n\n                     // check link trg from _edge_enclosingInteraction to interaction\n                     JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                     ));\n\n                     // iterate to-many link lifeline from interaction to line\n                     fujaba__Success = false;\n\n                     fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n                     while ( fujaba__IterInteractionToLine.hasNext () )\n                     {\n                        try\n                        {\n                           line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n                           // check object line is really bound\n                           JavaSDM.ensure ( line != null );\n                           // check isomorphic binding between objects sysLine and line \n                           JavaSDM.ensure ( !sysLine.equals (line) );\n\n                           // check link covered from line to messageReceive\n                           JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // negative check for link fragment from messageReceive\n                              JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                              // negative check for link fragment from messageSend\n                              JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_906061\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_906061 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_906061.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_receiveEvent_906061 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_906061.next ();\n\n                                       // check object __DEC_messageReceive_receiveEvent_906061 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_906061 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_906061 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_906061.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_159505\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_159505 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_159505.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_receiveEvent_159505 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_159505.next ();\n\n                                       // check object __DEC_messageSend_receiveEvent_159505 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_receiveEvent_159505 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_receiveEvent_159505 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_159505.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_611418\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_611418 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_611418.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_sendEvent_611418 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_611418.next ();\n\n                                       // check object __DEC_messageReceive_sendEvent_611418 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_sendEvent_611418 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_sendEvent_611418 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_611418.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_962628\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_962628 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_962628.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_sendEvent_962628 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_962628.next ();\n\n                                       // check object __DEC_messageSend_sendEvent_962628 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_sendEvent_962628 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_sendEvent_962628 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_sendEvent_962628.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link message from message to __DEC_message_message_51433\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageTo__DEC_message_message_51433 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_51433.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_message_message_51433 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_51433.next ();\n\n                                       // check object __DEC_message_message_51433 is really bound\n                                       JavaSDM.ensure ( __DEC_message_message_51433 != null );\n                                       // check isomorphic binding between objects __DEC_message_message_51433 and messageReceive \n                                       JavaSDM.ensure ( !__DEC_message_message_51433.equals (messageReceive) );\n\n                                       // check isomorphic binding between objects __DEC_message_message_51433 and messageSend \n                                       JavaSDM.ensure ( !__DEC_message_message_51433.equals (messageSend) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_enclosingInteraction is really bound\n                              JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                              // check object _edge_fragment is really bound\n                              JavaSDM.ensure ( _edge_fragment != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object message is really bound\n                              JavaSDM.ensure ( message != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object sysLine is really bound\n                              JavaSDM.ensure ( sysLine != null );\n                              // check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction \n                              JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingInteraction) );\n\n                              // check isomorphic binding between objects sysLine and line \n                              JavaSDM.ensure ( !sysLine.equals (line) );\n\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                              ));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link message from message to interaction\n                              JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                              ));\n\n                              // check link message from messageReceive to message\n                              JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                              ));\n\n                              // check link message from messageSend to message\n                              JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                              ));\n\n                              // check link receiveEvent from message to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                              ));\n\n                              // check link receiveEvent from message to messageSend\n                              JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                              )));\n\n                              // check link sendEvent from message to messageSend\n                              JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                              ));\n\n                              // check link sendEvent from message to messageReceive\n                              JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                              )));\n\n                              // check link src from _edge_enclosingInteraction to messageSend\n                              JavaSDM.ensure (messageSend.equals (_edge_enclosingInteraction.getSrc ()\n                              ));\n\n                              // check link src from _edge_fragment to interaction\n                              JavaSDM.ensure (interaction.equals (_edge_fragment.getSrc ()\n                              ));\n\n                              // check link trg from _edge_enclosingInteraction to interaction\n                              JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                              ));\n\n                              // check link trg from _edge_fragment to messageSend\n                              JavaSDM.ensure (messageSend.equals (_edge_fragment.getTrg ()\n                              ));\n\n                              // check link covered from line to messageReceive\n                              JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                              // check link covered from messageSend to sysLine\n                              JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,interaction,messageReceive,message,line);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_133(
			EMoflonEdge _edge_fragment);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_30831 = null;\n      Message __DEC_messageReceive_receiveEvent_30831 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_816922 = null;\n      Message __DEC_messageSend_receiveEvent_816922 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_172630 = null;\n      Message __DEC_messageReceive_sendEvent_172630 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_440297 = null;\n      Message __DEC_messageSend_sendEvent_440297 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_75989 = null;\n      MessageEnd __DEC_message_message_75989 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterInteractionToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Interaction interaction = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_enclosingInteraction is really bound\n         JavaSDM.ensure ( _edge_enclosingInteraction != null );\n         // bind object\n         _TmpObject = _edge_enclosingInteraction.getTrg ();\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n\n         // iterate to-many link fragment from interaction to messageSend\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToMessageSend = new ArrayList(interaction.getFragment()).iterator ();\n\n         while ( fujaba__IterInteractionToMessageSend.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterInteractionToMessageSend.next ();\n\n               // ensure correct type and really bound of object messageSend\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageSend = (MessageOccurrenceSpecification) _TmpObject;\n               // bind object\n               message = messageSend.getMessage ();\n\n               // check object message is really bound\n               JavaSDM.ensure ( message != null );\n\n               // check link message from message to interaction\n               JavaSDM.ensure (interaction.equals (message.getInteraction ()\n               ));\n\n               // bind object\n               _TmpObject = message.getReceiveEvent ();\n\n               // ensure correct type and really bound of object messageReceive\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n               // check isomorphic binding between objects messageSend and messageReceive \n               JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n               // check link fragment from messageReceive to interaction\n               JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n               ));\n\n               // check link message from messageReceive to message\n               JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n               ));\n\n               // check link sendEvent from message to messageSend\n               JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n               ));\n\n               // check link src from _edge_enclosingInteraction to messageReceive\n               JavaSDM.ensure (messageReceive.equals (_edge_enclosingInteraction.getSrc ()\n               ));\n\n               // iterate to-many link covered from messageSend to sysLine\n               fujaba__Success = false;\n\n               fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n               while ( fujaba__IterMessageSendToSysLine.hasNext () )\n               {\n                  try\n                  {\n                     sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n                     // check object sysLine is really bound\n                     JavaSDM.ensure ( sysLine != null );\n                     // iterate to-many link lifeline from interaction to line\n                     fujaba__Success = false;\n\n                     fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n                     while ( fujaba__IterInteractionToLine.hasNext () )\n                     {\n                        try\n                        {\n                           line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n                           // check object line is really bound\n                           JavaSDM.ensure ( line != null );\n                           // check isomorphic binding between objects sysLine and line \n                           JavaSDM.ensure ( !sysLine.equals (line) );\n\n                           // check link covered from line to messageReceive\n                           JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // negative check for link fragment from messageReceive\n                              JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                              // negative check for link fragment from messageSend\n                              JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_30831\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_30831 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_30831.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_receiveEvent_30831 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_30831.next ();\n\n                                       // check object __DEC_messageReceive_receiveEvent_30831 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_30831 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_30831 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_30831.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_816922\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_816922 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_816922.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_receiveEvent_816922 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_816922.next ();\n\n                                       // check object __DEC_messageSend_receiveEvent_816922 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_receiveEvent_816922 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_receiveEvent_816922 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_816922.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_172630\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_172630 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_172630.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_sendEvent_172630 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_172630.next ();\n\n                                       // check object __DEC_messageReceive_sendEvent_172630 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_sendEvent_172630 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_sendEvent_172630 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_172630.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_440297\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_440297 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_440297.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_sendEvent_440297 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_440297.next ();\n\n                                       // check object __DEC_messageSend_sendEvent_440297 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_sendEvent_440297 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_sendEvent_440297 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_sendEvent_440297.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link message from message to __DEC_message_message_75989\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageTo__DEC_message_message_75989 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_75989.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_message_message_75989 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_75989.next ();\n\n                                       // check object __DEC_message_message_75989 is really bound\n                                       JavaSDM.ensure ( __DEC_message_message_75989 != null );\n                                       // check isomorphic binding between objects __DEC_message_message_75989 and messageReceive \n                                       JavaSDM.ensure ( !__DEC_message_message_75989.equals (messageReceive) );\n\n                                       // check isomorphic binding between objects __DEC_message_message_75989 and messageSend \n                                       JavaSDM.ensure ( !__DEC_message_message_75989.equals (messageSend) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_enclosingInteraction is really bound\n                              JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object message is really bound\n                              JavaSDM.ensure ( message != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object sysLine is really bound\n                              JavaSDM.ensure ( sysLine != null );\n                              // check isomorphic binding between objects sysLine and line \n                              JavaSDM.ensure ( !sysLine.equals (line) );\n\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                              ));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link message from message to interaction\n                              JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                              ));\n\n                              // check link message from messageReceive to message\n                              JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                              ));\n\n                              // check link message from messageSend to message\n                              JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                              ));\n\n                              // check link receiveEvent from message to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                              ));\n\n                              // check link receiveEvent from message to messageSend\n                              JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                              )));\n\n                              // check link sendEvent from message to messageSend\n                              JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                              ));\n\n                              // check link sendEvent from message to messageReceive\n                              JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                              )));\n\n                              // check link src from _edge_enclosingInteraction to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (_edge_enclosingInteraction.getSrc ()\n                              ));\n\n                              // check link trg from _edge_enclosingInteraction to interaction\n                              JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                              ));\n\n                              // check link covered from line to messageReceive\n                              JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                              // check link covered from messageSend to sysLine\n                              JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,interaction,messageReceive,message,line);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_134(
			EMoflonEdge _edge_enclosingInteraction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_602257 = null;\n      Message __DEC_messageReceive_receiveEvent_602257 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_523360 = null;\n      Message __DEC_messageSend_receiveEvent_523360 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_674101 = null;\n      Message __DEC_messageReceive_sendEvent_674101 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_655868 = null;\n      Message __DEC_messageSend_sendEvent_655868 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_890140 = null;\n      MessageEnd __DEC_message_message_890140 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionTo_edge_enclosingInteraction = null;\n      EMoflonEdge _edge_enclosingInteraction = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterInteractionToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Interaction interaction = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_fragment is really bound\n         JavaSDM.ensure ( _edge_fragment != null );\n         // bind object\n         _TmpObject = _edge_fragment.getSrc ();\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n\n         // iterate to-many link fragment from interaction to messageSend\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToMessageSend = new ArrayList(interaction.getFragment()).iterator ();\n\n         while ( fujaba__IterInteractionToMessageSend.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterInteractionToMessageSend.next ();\n\n               // ensure correct type and really bound of object messageSend\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageSend = (MessageOccurrenceSpecification) _TmpObject;\n               // bind object\n               message = messageSend.getMessage ();\n\n               // check object message is really bound\n               JavaSDM.ensure ( message != null );\n\n               // check link message from message to interaction\n               JavaSDM.ensure (interaction.equals (message.getInteraction ()\n               ));\n\n               // bind object\n               _TmpObject = message.getReceiveEvent ();\n\n               // ensure correct type and really bound of object messageReceive\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n               // check isomorphic binding between objects messageSend and messageReceive \n               JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n               // check link fragment from messageReceive to interaction\n               JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n               ));\n\n               // check link message from messageReceive to message\n               JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n               ));\n\n               // check link sendEvent from message to messageSend\n               JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n               ));\n\n               // check link trg from _edge_fragment to messageReceive\n               JavaSDM.ensure (messageReceive.equals (_edge_fragment.getTrg ()\n               ));\n\n               // iterate to-many link covered from messageSend to sysLine\n               fujaba__Success = false;\n\n               fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n               while ( fujaba__IterMessageSendToSysLine.hasNext () )\n               {\n                  try\n                  {\n                     sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n                     // check object sysLine is really bound\n                     JavaSDM.ensure ( sysLine != null );\n                     // iterate to-many link lifeline from interaction to line\n                     fujaba__Success = false;\n\n                     fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n                     while ( fujaba__IterInteractionToLine.hasNext () )\n                     {\n                        try\n                        {\n                           line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n                           // check object line is really bound\n                           JavaSDM.ensure ( line != null );\n                           // check isomorphic binding between objects sysLine and line \n                           JavaSDM.ensure ( !sysLine.equals (line) );\n\n                           // check link covered from line to messageReceive\n                           JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                           // iterate to-many link trg from interaction to _edge_enclosingInteraction\n                           fujaba__Success = false;\n\n                           fujaba__IterInteractionTo_edge_enclosingInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(interaction,EMoflonEdge.class,\"trg\")).iterator ();\n\n                           while ( fujaba__IterInteractionTo_edge_enclosingInteraction.hasNext () )\n                           {\n                              try\n                              {\n                                 _edge_enclosingInteraction = (EMoflonEdge) fujaba__IterInteractionTo_edge_enclosingInteraction.next ();\n\n                                 // check object _edge_enclosingInteraction is really bound\n                                 JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                                 // check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction \n                                 JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingInteraction) );\n\n                                 // check link src from _edge_enclosingInteraction to messageReceive\n                                 JavaSDM.ensure (messageReceive.equals (_edge_enclosingInteraction.getSrc ()\n                                 ));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // negative check for link fragment from messageReceive\n                                    JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                                    // negative check for link fragment from messageSend\n                                    JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_602257\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_602257 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_602257.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_receiveEvent_602257 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_602257.next ();\n\n                                             // check object __DEC_messageReceive_receiveEvent_602257 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_602257 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_602257 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_602257.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_523360\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_523360 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_523360.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_receiveEvent_523360 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_523360.next ();\n\n                                             // check object __DEC_messageSend_receiveEvent_523360 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_receiveEvent_523360 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_receiveEvent_523360 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_523360.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_674101\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_674101 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_674101.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_sendEvent_674101 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_674101.next ();\n\n                                             // check object __DEC_messageReceive_sendEvent_674101 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_sendEvent_674101 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_sendEvent_674101 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_674101.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_655868\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_655868 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_655868.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_sendEvent_655868 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_655868.next ();\n\n                                             // check object __DEC_messageSend_sendEvent_655868 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_sendEvent_655868 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_sendEvent_655868 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_sendEvent_655868.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link message from message to __DEC_message_message_890140\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageTo__DEC_message_message_890140 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_890140.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_message_message_890140 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_890140.next ();\n\n                                             // check object __DEC_message_message_890140 is really bound\n                                             JavaSDM.ensure ( __DEC_message_message_890140 != null );\n                                             // check isomorphic binding between objects __DEC_message_message_890140 and messageReceive \n                                             JavaSDM.ensure ( !__DEC_message_message_890140.equals (messageReceive) );\n\n                                             // check isomorphic binding between objects __DEC_message_message_890140 and messageSend \n                                             JavaSDM.ensure ( !__DEC_message_message_890140.equals (messageSend) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_enclosingInteraction is really bound\n                                    JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                                    // check object _edge_fragment is really bound\n                                    JavaSDM.ensure ( _edge_fragment != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object message is really bound\n                                    JavaSDM.ensure ( message != null );\n                                    // check object messageReceive is really bound\n                                    JavaSDM.ensure ( messageReceive != null );\n                                    // check object messageSend is really bound\n                                    JavaSDM.ensure ( messageSend != null );\n                                    // check object sysLine is really bound\n                                    JavaSDM.ensure ( sysLine != null );\n                                    // check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction \n                                    JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingInteraction) );\n\n                                    // check isomorphic binding between objects sysLine and line \n                                    JavaSDM.ensure ( !sysLine.equals (line) );\n\n                                    // check isomorphic binding between objects messageSend and messageReceive \n                                    JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                    // check link fragment from messageReceive to interaction\n                                    JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link fragment from messageSend to interaction\n                                    JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link message from message to interaction\n                                    JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                                    ));\n\n                                    // check link message from messageReceive to message\n                                    JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                                    ));\n\n                                    // check link message from messageSend to message\n                                    JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageSend\n                                    JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                                    )));\n\n                                    // check link sendEvent from message to messageSend\n                                    JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                                    ));\n\n                                    // check link sendEvent from message to messageReceive\n                                    JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                                    )));\n\n                                    // check link src from _edge_enclosingInteraction to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (_edge_enclosingInteraction.getSrc ()\n                                    ));\n\n                                    // check link src from _edge_fragment to interaction\n                                    JavaSDM.ensure (interaction.equals (_edge_fragment.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_enclosingInteraction to interaction\n                                    JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                                    ));\n\n                                    // check link trg from _edge_fragment to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (_edge_fragment.getTrg ()\n                                    ));\n\n                                    // check link covered from line to messageReceive\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                                    // check link covered from messageSend to sysLine\n                                    JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,interaction,messageReceive,message,line);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_BWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_135(
			EMoflonEdge _edge_fragment);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_step_steps_830616 = null;\n      Match match = null;\n      Iterator fujaba__IterPackageDeclarationToUseCase = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterPackageDeclarationToSysActor = null;\n      Actor sysActor = null;\n      PackageDeclaration packageDeclaration = null;\n      Actor actor = null;\n      NormalStep step = null;\n      BasicFlow flow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_steps is really bound\n         JavaSDM.ensure ( _edge_steps != null );\n         // bind object\n         _TmpObject = _edge_steps.getSrc ();\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         flow = (BasicFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_steps.getTrg ();\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n\n         // bind object\n         actor = step.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // bind object\n         packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor.eContainer() : null;\n\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(packageDeclaration.getActors().contains(actor));\n\n         // check link steps from step to flow\n         JavaSDM.ensure (flow.equals (step.eContainer()\n         ));\n\n         // iterate to-many link actors from packageDeclaration to sysActor\n         fujaba__Success = false;\n\n         fujaba__IterPackageDeclarationToSysActor = new ArrayList(packageDeclaration.getActors()).iterator ();\n\n         while ( fujaba__IterPackageDeclarationToSysActor.hasNext () )\n         {\n            try\n            {\n               sysActor = (Actor) fujaba__IterPackageDeclarationToSysActor.next ();\n\n               // check object sysActor is really bound\n               JavaSDM.ensure ( sysActor != null );\n               // check isomorphic binding between objects sysActor and actor \n               JavaSDM.ensure ( !sysActor.equals (actor) );\n\n               // iterate to-many link useCases from packageDeclaration to useCase\n               fujaba__Success = false;\n\n               fujaba__IterPackageDeclarationToUseCase = new ArrayList(packageDeclaration.getUseCases()).iterator ();\n\n               while ( fujaba__IterPackageDeclarationToUseCase.hasNext () )\n               {\n                  try\n                  {\n                     useCase = (UseCase) fujaba__IterPackageDeclarationToUseCase.next ();\n\n                     // check object useCase is really bound\n                     JavaSDM.ensure ( useCase != null );\n                     // check link flows from flow to useCase\n                     JavaSDM.ensure (useCase.equals (flow.eContainer()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_step_steps_830616 = step.eContainer() instanceof Flow ? (Flow) step.eContainer() : null;\n\n                           // check object __DEC_step_steps_830616 is really bound\n                           JavaSDM.ensure ( __DEC_step_steps_830616 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_step_steps_830616.getSteps().contains(step));\n\n                           // check isomorphic binding between objects __DEC_step_steps_830616 and flow \n                           JavaSDM.ensure ( !__DEC_step_steps_830616.equals (flow) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_steps is really bound\n                        JavaSDM.ensure ( _edge_steps != null );\n                        // check object actor is really bound\n                        JavaSDM.ensure ( actor != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object packageDeclaration is really bound\n                        JavaSDM.ensure ( packageDeclaration != null );\n                        // check object step is really bound\n                        JavaSDM.ensure ( step != null );\n                        // check object sysActor is really bound\n                        JavaSDM.ensure ( sysActor != null );\n                        // check object useCase is really bound\n                        JavaSDM.ensure ( useCase != null );\n                        // check isomorphic binding between objects sysActor and actor \n                        JavaSDM.ensure ( !sysActor.equals (actor) );\n\n                        // check link actor from step to actor\n                        JavaSDM.ensure (actor.equals (step.getActor ()\n                        ));\n\n                        // check link actors from actor to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                        ));\n\n                        // check link actors from sysActor to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (sysActor.eContainer()\n                        ));\n\n                        // check link flows from flow to useCase\n                        JavaSDM.ensure (useCase.equals (flow.eContainer()\n                        ));\n\n                        // check link src from _edge_steps to flow\n                        JavaSDM.ensure (flow.equals (_edge_steps.getSrc ()\n                        ));\n\n                        // check link steps from step to flow\n                        JavaSDM.ensure (flow.equals (step.eContainer()\n                        ));\n\n                        // check link trg from _edge_steps to step\n                        JavaSDM.ensure (step.equals (_edge_steps.getTrg ()\n                        ));\n\n                        // check link useCases from useCase to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,actor,sysActor,packageDeclaration,flow,useCase,step);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_33(EMoflonEdge _edge_steps);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_step_steps_673666 = null;\n      Match match = null;\n      Iterator fujaba__IterPackageDeclarationToUseCase = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterPackageDeclarationToSysActor = null;\n      Actor sysActor = null;\n      PackageDeclaration packageDeclaration = null;\n      Actor actor = null;\n      BasicFlow flow = null;\n      NormalStep step = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_actor is really bound\n         JavaSDM.ensure ( _edge_actor != null );\n         // bind object\n         _TmpObject = _edge_actor.getSrc ();\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n\n         // bind object\n         _TmpObject = step.eContainer() instanceof BasicFlow ? (BasicFlow) step.eContainer() : null;\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         flow = (BasicFlow) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(step));\n\n         // bind object\n         _TmpObject = _edge_actor.getTrg ();\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n\n         // check link actor from step to actor\n         JavaSDM.ensure (actor.equals (step.getActor ()\n         ));\n\n         // bind object\n         packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor.eContainer() : null;\n\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(packageDeclaration.getActors().contains(actor));\n\n         // iterate to-many link actors from packageDeclaration to sysActor\n         fujaba__Success = false;\n\n         fujaba__IterPackageDeclarationToSysActor = new ArrayList(packageDeclaration.getActors()).iterator ();\n\n         while ( fujaba__IterPackageDeclarationToSysActor.hasNext () )\n         {\n            try\n            {\n               sysActor = (Actor) fujaba__IterPackageDeclarationToSysActor.next ();\n\n               // check object sysActor is really bound\n               JavaSDM.ensure ( sysActor != null );\n               // check isomorphic binding between objects sysActor and actor \n               JavaSDM.ensure ( !sysActor.equals (actor) );\n\n               // iterate to-many link useCases from packageDeclaration to useCase\n               fujaba__Success = false;\n\n               fujaba__IterPackageDeclarationToUseCase = new ArrayList(packageDeclaration.getUseCases()).iterator ();\n\n               while ( fujaba__IterPackageDeclarationToUseCase.hasNext () )\n               {\n                  try\n                  {\n                     useCase = (UseCase) fujaba__IterPackageDeclarationToUseCase.next ();\n\n                     // check object useCase is really bound\n                     JavaSDM.ensure ( useCase != null );\n                     // check link flows from flow to useCase\n                     JavaSDM.ensure (useCase.equals (flow.eContainer()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_step_steps_673666 = step.eContainer() instanceof Flow ? (Flow) step.eContainer() : null;\n\n                           // check object __DEC_step_steps_673666 is really bound\n                           JavaSDM.ensure ( __DEC_step_steps_673666 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_step_steps_673666.getSteps().contains(step));\n\n                           // check isomorphic binding between objects __DEC_step_steps_673666 and flow \n                           JavaSDM.ensure ( !__DEC_step_steps_673666.equals (flow) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_actor is really bound\n                        JavaSDM.ensure ( _edge_actor != null );\n                        // check object actor is really bound\n                        JavaSDM.ensure ( actor != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object packageDeclaration is really bound\n                        JavaSDM.ensure ( packageDeclaration != null );\n                        // check object step is really bound\n                        JavaSDM.ensure ( step != null );\n                        // check object sysActor is really bound\n                        JavaSDM.ensure ( sysActor != null );\n                        // check object useCase is really bound\n                        JavaSDM.ensure ( useCase != null );\n                        // check isomorphic binding between objects sysActor and actor \n                        JavaSDM.ensure ( !sysActor.equals (actor) );\n\n                        // check link actor from step to actor\n                        JavaSDM.ensure (actor.equals (step.getActor ()\n                        ));\n\n                        // check link actors from actor to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                        ));\n\n                        // check link actors from sysActor to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (sysActor.eContainer()\n                        ));\n\n                        // check link flows from flow to useCase\n                        JavaSDM.ensure (useCase.equals (flow.eContainer()\n                        ));\n\n                        // check link src from _edge_actor to step\n                        JavaSDM.ensure (step.equals (_edge_actor.getSrc ()\n                        ));\n\n                        // check link steps from step to flow\n                        JavaSDM.ensure (flow.equals (step.eContainer()\n                        ));\n\n                        // check link trg from _edge_actor to actor\n                        JavaSDM.ensure (actor.equals (_edge_actor.getTrg ()\n                        ));\n\n                        // check link useCases from useCase to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,actor,sysActor,packageDeclaration,flow,useCase,step);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_34(EMoflonEdge _edge_actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_438605 = null;\n      Message __DEC_messageReceive_receiveEvent_438605 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_976780 = null;\n      Message __DEC_messageSend_receiveEvent_976780 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_636179 = null;\n      Message __DEC_messageReceive_sendEvent_636179 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_162671 = null;\n      Message __DEC_messageSend_sendEvent_162671 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_502777 = null;\n      MessageEnd __DEC_message_message_502777 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      MessageOccurrenceSpecification messageSend = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sendEvent is really bound\n         JavaSDM.ensure ( _edge_sendEvent != null );\n         // bind object\n         _TmpObject = _edge_sendEvent.getTrg ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         message = messageSend.getMessage ();\n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // check link sendEvent from message to messageSend\n         JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n         ));\n\n         // check link src from _edge_sendEvent to message\n         JavaSDM.ensure (message.equals (_edge_sendEvent.getSrc ()\n         ));\n\n         // iterate to-many link covered from messageSend to sysLine\n         fujaba__Success = false;\n\n         fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageSendToSysLine.hasNext () )\n         {\n            try\n            {\n               sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n               // check object sysLine is really bound\n               JavaSDM.ensure ( sysLine != null );\n               // bind object\n               interaction = messageSend.getEnclosingInteraction ();\n\n               // check object interaction is really bound\n               JavaSDM.ensure ( interaction != null );\n\n               // check link fragment from messageReceive to interaction\n               JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n               ));\n\n               // check link message from message to interaction\n               JavaSDM.ensure (interaction.equals (message.getInteraction ()\n               ));\n\n               // iterate to-many link lifeline from interaction to line\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n               while ( fujaba__IterInteractionToLine.hasNext () )\n               {\n                  try\n                  {\n                     line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n                     // check object line is really bound\n                     JavaSDM.ensure ( line != null );\n                     // check isomorphic binding between objects sysLine and line \n                     JavaSDM.ensure ( !sysLine.equals (line) );\n\n                     // check link covered from line to messageReceive\n                     JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageSend\n                        JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_438605\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_438605 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_438605.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_438605 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_438605.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_438605 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_438605 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_438605 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_438605.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_976780\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_976780 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_976780.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_receiveEvent_976780 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_976780.next ();\n\n                                 // check object __DEC_messageSend_receiveEvent_976780 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_receiveEvent_976780 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_receiveEvent_976780 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_976780.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_636179\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_636179 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_636179.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_636179 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_636179.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_636179 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_636179 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_636179 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_636179.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_162671\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_162671 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_162671.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_sendEvent_162671 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_162671.next ();\n\n                                 // check object __DEC_messageSend_sendEvent_162671 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_sendEvent_162671 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_sendEvent_162671 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_sendEvent_162671.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_502777\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_502777 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_502777.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_502777 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_502777.next ();\n\n                                 // check object __DEC_message_message_502777 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_502777 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_502777 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_502777.equals (messageReceive) );\n\n                                 // check isomorphic binding between objects __DEC_message_message_502777 and messageSend \n                                 JavaSDM.ensure ( !__DEC_message_message_502777.equals (messageSend) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_sendEvent is really bound\n                        JavaSDM.ensure ( _edge_sendEvent != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check object messageSend is really bound\n                        JavaSDM.ensure ( messageSend != null );\n                        // check object sysLine is really bound\n                        JavaSDM.ensure ( sysLine != null );\n                        // check isomorphic binding between objects sysLine and line \n                        JavaSDM.ensure ( !sysLine.equals (line) );\n\n                        // check isomorphic binding between objects messageSend and messageReceive \n                        JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link fragment from messageSend to interaction\n                        JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link message from messageSend to message\n                        JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link receiveEvent from message to messageSend\n                        JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                        )));\n\n                        // check link sendEvent from message to messageSend\n                        JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link src from _edge_sendEvent to message\n                        JavaSDM.ensure (message.equals (_edge_sendEvent.getSrc ()\n                        ));\n\n                        // check link trg from _edge_sendEvent to messageSend\n                        JavaSDM.ensure (messageSend.equals (_edge_sendEvent.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // check link covered from messageSend to sysLine\n                        JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,interaction,messageReceive,message,line);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_136(
			EMoflonEdge _edge_sendEvent);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_42351 = null;\n      Message __DEC_messageReceive_receiveEvent_42351 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_113420 = null;\n      Message __DEC_messageSend_receiveEvent_113420 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_19216 = null;\n      Message __DEC_messageReceive_sendEvent_19216 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_603132 = null;\n      Message __DEC_messageSend_sendEvent_603132 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_682479 = null;\n      MessageEnd __DEC_message_message_682479 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageSend = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_receiveEvent is really bound\n         JavaSDM.ensure ( _edge_receiveEvent != null );\n         // bind object\n         _TmpObject = _edge_receiveEvent.getSrc ();\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // bind object\n         _TmpObject = message.getSendEvent ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check link message from messageSend to message\n         JavaSDM.ensure (message.equals (messageSend.getMessage ()\n         ));\n\n         // check link trg from _edge_receiveEvent to messageReceive\n         JavaSDM.ensure (messageReceive.equals (_edge_receiveEvent.getTrg ()\n         ));\n\n         // iterate to-many link covered from messageSend to sysLine\n         fujaba__Success = false;\n\n         fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageSendToSysLine.hasNext () )\n         {\n            try\n            {\n               sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n               // check object sysLine is really bound\n               JavaSDM.ensure ( sysLine != null );\n               // bind object\n               interaction = message.getInteraction ();\n\n               // check object interaction is really bound\n               JavaSDM.ensure ( interaction != null );\n\n               // check link fragment from messageReceive to interaction\n               JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n               ));\n\n               // check link fragment from messageSend to interaction\n               JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n               ));\n\n               // iterate to-many link lifeline from interaction to line\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n               while ( fujaba__IterInteractionToLine.hasNext () )\n               {\n                  try\n                  {\n                     line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n                     // check object line is really bound\n                     JavaSDM.ensure ( line != null );\n                     // check isomorphic binding between objects sysLine and line \n                     JavaSDM.ensure ( !sysLine.equals (line) );\n\n                     // check link covered from line to messageReceive\n                     JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageSend\n                        JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_42351\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_42351 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_42351.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_42351 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_42351.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_42351 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_42351 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_42351 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_42351.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_113420\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_113420 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_113420.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_receiveEvent_113420 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_113420.next ();\n\n                                 // check object __DEC_messageSend_receiveEvent_113420 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_receiveEvent_113420 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_receiveEvent_113420 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_113420.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_19216\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_19216 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_19216.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_19216 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_19216.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_19216 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_19216 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_19216 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_19216.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_603132\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_603132 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_603132.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_sendEvent_603132 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_603132.next ();\n\n                                 // check object __DEC_messageSend_sendEvent_603132 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_sendEvent_603132 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_sendEvent_603132 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_sendEvent_603132.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_682479\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_682479 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_682479.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_682479 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_682479.next ();\n\n                                 // check object __DEC_message_message_682479 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_682479 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_682479 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_682479.equals (messageReceive) );\n\n                                 // check isomorphic binding between objects __DEC_message_message_682479 and messageSend \n                                 JavaSDM.ensure ( !__DEC_message_message_682479.equals (messageSend) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_receiveEvent is really bound\n                        JavaSDM.ensure ( _edge_receiveEvent != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check object messageSend is really bound\n                        JavaSDM.ensure ( messageSend != null );\n                        // check object sysLine is really bound\n                        JavaSDM.ensure ( sysLine != null );\n                        // check isomorphic binding between objects sysLine and line \n                        JavaSDM.ensure ( !sysLine.equals (line) );\n\n                        // check isomorphic binding between objects messageSend and messageReceive \n                        JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link fragment from messageSend to interaction\n                        JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link message from messageSend to message\n                        JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link receiveEvent from message to messageSend\n                        JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                        )));\n\n                        // check link sendEvent from message to messageSend\n                        JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link src from _edge_receiveEvent to message\n                        JavaSDM.ensure (message.equals (_edge_receiveEvent.getSrc ()\n                        ));\n\n                        // check link trg from _edge_receiveEvent to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (_edge_receiveEvent.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // check link covered from messageSend to sysLine\n                        JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,interaction,messageReceive,message,line);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_137(
			EMoflonEdge _edge_receiveEvent);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_529088 = null;\n      Message __DEC_messageReceive_receiveEvent_529088 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_124283 = null;\n      Message __DEC_messageSend_receiveEvent_124283 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_582142 = null;\n      Message __DEC_messageReceive_sendEvent_582142 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_917167 = null;\n      Message __DEC_messageSend_sendEvent_917167 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_160839 = null;\n      MessageEnd __DEC_message_message_160839 = null;\n      Match match = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Interaction interaction = null;\n      Message message = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_interaction is really bound\n         JavaSDM.ensure ( _edge_interaction != null );\n         // bind object\n         _TmpObject = _edge_interaction.getSrc ();\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n\n         // bind object\n         interaction = message.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check link fragment from messageReceive to interaction\n         JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n         ));\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // check link trg from _edge_interaction to interaction\n         JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n         ));\n\n         // iterate to-many link lifeline from interaction to line\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n         while ( fujaba__IterInteractionToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // bind object\n               _TmpObject = message.getSendEvent ();\n\n               // ensure correct type and really bound of object messageSend\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n               // check isomorphic binding between objects messageSend and messageReceive \n               JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n               // check link fragment from messageSend to interaction\n               JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n               ));\n\n               // check link message from messageSend to message\n               JavaSDM.ensure (message.equals (messageSend.getMessage ()\n               ));\n\n               // check link covered from line to messageReceive\n               JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n               // iterate to-many link covered from messageSend to sysLine\n               fujaba__Success = false;\n\n               fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n               while ( fujaba__IterMessageSendToSysLine.hasNext () )\n               {\n                  try\n                  {\n                     sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n                     // check object sysLine is really bound\n                     JavaSDM.ensure ( sysLine != null );\n                     // check isomorphic binding between objects sysLine and line \n                     JavaSDM.ensure ( !sysLine.equals (line) );\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageSend\n                        JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_529088\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_529088 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_529088.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_529088 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_529088.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_529088 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_529088 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_529088 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_529088.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_124283\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_124283 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_124283.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_receiveEvent_124283 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_124283.next ();\n\n                                 // check object __DEC_messageSend_receiveEvent_124283 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_receiveEvent_124283 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_receiveEvent_124283 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_124283.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_582142\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_582142 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_582142.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_582142 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_582142.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_582142 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_582142 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_582142 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_582142.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_917167\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_917167 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_917167.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_sendEvent_917167 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_917167.next ();\n\n                                 // check object __DEC_messageSend_sendEvent_917167 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_sendEvent_917167 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_sendEvent_917167 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_sendEvent_917167.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_160839\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_160839 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_160839.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_160839 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_160839.next ();\n\n                                 // check object __DEC_message_message_160839 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_160839 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_160839 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_160839.equals (messageReceive) );\n\n                                 // check isomorphic binding between objects __DEC_message_message_160839 and messageSend \n                                 JavaSDM.ensure ( !__DEC_message_message_160839.equals (messageSend) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_interaction is really bound\n                        JavaSDM.ensure ( _edge_interaction != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check object messageSend is really bound\n                        JavaSDM.ensure ( messageSend != null );\n                        // check object sysLine is really bound\n                        JavaSDM.ensure ( sysLine != null );\n                        // check isomorphic binding between objects sysLine and line \n                        JavaSDM.ensure ( !sysLine.equals (line) );\n\n                        // check isomorphic binding between objects messageSend and messageReceive \n                        JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link fragment from messageSend to interaction\n                        JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link message from messageSend to message\n                        JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link receiveEvent from message to messageSend\n                        JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                        )));\n\n                        // check link sendEvent from message to messageSend\n                        JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link src from _edge_interaction to message\n                        JavaSDM.ensure (message.equals (_edge_interaction.getSrc ()\n                        ));\n\n                        // check link trg from _edge_interaction to interaction\n                        JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // check link covered from messageSend to sysLine\n                        JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,interaction,messageReceive,message,line);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_138(
			EMoflonEdge _edge_interaction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_342038 = null;\n      Message __DEC_messageReceive_receiveEvent_342038 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_838224 = null;\n      Message __DEC_messageSend_receiveEvent_838224 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_708785 = null;\n      Message __DEC_messageReceive_sendEvent_708785 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_72693 = null;\n      Message __DEC_messageSend_sendEvent_72693 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_541151 = null;\n      MessageEnd __DEC_message_message_541151 = null;\n      Match match = null;\n      Iterator fujaba__IterMessageTo_edge_interaction = null;\n      EMoflonEdge _edge_interaction = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Interaction interaction = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_message is really bound\n         JavaSDM.ensure ( _edge_message != null );\n         // bind object\n         _TmpObject = _edge_message.getTrg ();\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         interaction = message.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // check link fragment from messageReceive to interaction\n         JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n         ));\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // check link src from _edge_message to interaction\n         JavaSDM.ensure (interaction.equals (_edge_message.getSrc ()\n         ));\n\n         // iterate to-many link lifeline from interaction to line\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n         while ( fujaba__IterInteractionToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // bind object\n               _TmpObject = message.getSendEvent ();\n\n               // ensure correct type and really bound of object messageSend\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n               // check isomorphic binding between objects messageSend and messageReceive \n               JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n               // check link fragment from messageSend to interaction\n               JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n               ));\n\n               // check link message from messageSend to message\n               JavaSDM.ensure (message.equals (messageSend.getMessage ()\n               ));\n\n               // check link covered from line to messageReceive\n               JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n               // iterate to-many link covered from messageSend to sysLine\n               fujaba__Success = false;\n\n               fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n               while ( fujaba__IterMessageSendToSysLine.hasNext () )\n               {\n                  try\n                  {\n                     sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n                     // check object sysLine is really bound\n                     JavaSDM.ensure ( sysLine != null );\n                     // check isomorphic binding between objects sysLine and line \n                     JavaSDM.ensure ( !sysLine.equals (line) );\n\n                     // iterate to-many link src from message to _edge_interaction\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageTo_edge_interaction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,EMoflonEdge.class,\"src\")).iterator ();\n\n                     while ( fujaba__IterMessageTo_edge_interaction.hasNext () )\n                     {\n                        try\n                        {\n                           _edge_interaction = (EMoflonEdge) fujaba__IterMessageTo_edge_interaction.next ();\n\n                           // check object _edge_interaction is really bound\n                           JavaSDM.ensure ( _edge_interaction != null );\n                           // check isomorphic binding between objects _edge_message and _edge_interaction \n                           JavaSDM.ensure ( !_edge_message.equals (_edge_interaction) );\n\n                           // check link trg from _edge_interaction to interaction\n                           JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // negative check for link fragment from messageReceive\n                              JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                              // negative check for link fragment from messageSend\n                              JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_342038\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_342038 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_342038.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_receiveEvent_342038 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_342038.next ();\n\n                                       // check object __DEC_messageReceive_receiveEvent_342038 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_342038 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_342038 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_342038.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_838224\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_838224 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_838224.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_receiveEvent_838224 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_838224.next ();\n\n                                       // check object __DEC_messageSend_receiveEvent_838224 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_receiveEvent_838224 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_receiveEvent_838224 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_838224.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_708785\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_708785 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_708785.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_sendEvent_708785 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_708785.next ();\n\n                                       // check object __DEC_messageReceive_sendEvent_708785 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_sendEvent_708785 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_sendEvent_708785 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_708785.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_72693\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_72693 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_72693.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_sendEvent_72693 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_72693.next ();\n\n                                       // check object __DEC_messageSend_sendEvent_72693 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_sendEvent_72693 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_sendEvent_72693 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_sendEvent_72693.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link message from message to __DEC_message_message_541151\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageTo__DEC_message_message_541151 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_541151.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_message_message_541151 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_541151.next ();\n\n                                       // check object __DEC_message_message_541151 is really bound\n                                       JavaSDM.ensure ( __DEC_message_message_541151 != null );\n                                       // check isomorphic binding between objects __DEC_message_message_541151 and messageReceive \n                                       JavaSDM.ensure ( !__DEC_message_message_541151.equals (messageReceive) );\n\n                                       // check isomorphic binding between objects __DEC_message_message_541151 and messageSend \n                                       JavaSDM.ensure ( !__DEC_message_message_541151.equals (messageSend) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_interaction is really bound\n                              JavaSDM.ensure ( _edge_interaction != null );\n                              // check object _edge_message is really bound\n                              JavaSDM.ensure ( _edge_message != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object message is really bound\n                              JavaSDM.ensure ( message != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object sysLine is really bound\n                              JavaSDM.ensure ( sysLine != null );\n                              // check isomorphic binding between objects _edge_message and _edge_interaction \n                              JavaSDM.ensure ( !_edge_message.equals (_edge_interaction) );\n\n                              // check isomorphic binding between objects sysLine and line \n                              JavaSDM.ensure ( !sysLine.equals (line) );\n\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                              ));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link message from message to interaction\n                              JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                              ));\n\n                              // check link message from messageReceive to message\n                              JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                              ));\n\n                              // check link message from messageSend to message\n                              JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                              ));\n\n                              // check link receiveEvent from message to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                              ));\n\n                              // check link receiveEvent from message to messageSend\n                              JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                              )));\n\n                              // check link sendEvent from message to messageSend\n                              JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                              ));\n\n                              // check link sendEvent from message to messageReceive\n                              JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                              )));\n\n                              // check link src from _edge_interaction to message\n                              JavaSDM.ensure (message.equals (_edge_interaction.getSrc ()\n                              ));\n\n                              // check link src from _edge_message to interaction\n                              JavaSDM.ensure (interaction.equals (_edge_message.getSrc ()\n                              ));\n\n                              // check link trg from _edge_interaction to interaction\n                              JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n                              ));\n\n                              // check link trg from _edge_message to message\n                              JavaSDM.ensure (message.equals (_edge_message.getTrg ()\n                              ));\n\n                              // check link covered from line to messageReceive\n                              JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                              // check link covered from messageSend to sysLine\n                              JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,interaction,messageReceive,message,line);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_139(EMoflonEdge _edge_message);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_437266 = null;\n      Message __DEC_messageReceive_receiveEvent_437266 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_229803 = null;\n      Message __DEC_messageSend_receiveEvent_229803 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_615155 = null;\n      Message __DEC_messageReceive_sendEvent_615155 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_636146 = null;\n      Message __DEC_messageSend_sendEvent_636146 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_953879 = null;\n      MessageEnd __DEC_message_message_953879 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      MessageOccurrenceSpecification messageSend = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_message is really bound\n         JavaSDM.ensure ( _edge_message != null );\n         // bind object\n         _TmpObject = _edge_message.getSrc ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         message = messageSend.getMessage ();\n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // check link sendEvent from message to messageSend\n         JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n         ));\n\n         // check link trg from _edge_message to message\n         JavaSDM.ensure (message.equals (_edge_message.getTrg ()\n         ));\n\n         // iterate to-many link covered from messageSend to sysLine\n         fujaba__Success = false;\n\n         fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageSendToSysLine.hasNext () )\n         {\n            try\n            {\n               sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n               // check object sysLine is really bound\n               JavaSDM.ensure ( sysLine != null );\n               // bind object\n               interaction = messageSend.getEnclosingInteraction ();\n\n               // check object interaction is really bound\n               JavaSDM.ensure ( interaction != null );\n\n               // check link fragment from messageReceive to interaction\n               JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n               ));\n\n               // check link message from message to interaction\n               JavaSDM.ensure (interaction.equals (message.getInteraction ()\n               ));\n\n               // iterate to-many link lifeline from interaction to line\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n               while ( fujaba__IterInteractionToLine.hasNext () )\n               {\n                  try\n                  {\n                     line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n                     // check object line is really bound\n                     JavaSDM.ensure ( line != null );\n                     // check isomorphic binding between objects sysLine and line \n                     JavaSDM.ensure ( !sysLine.equals (line) );\n\n                     // check link covered from line to messageReceive\n                     JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageSend\n                        JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_437266\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_437266 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_437266.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_437266 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_437266.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_437266 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_437266 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_437266 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_437266.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_229803\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_229803 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_229803.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_receiveEvent_229803 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_229803.next ();\n\n                                 // check object __DEC_messageSend_receiveEvent_229803 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_receiveEvent_229803 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_receiveEvent_229803 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_229803.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_615155\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_615155 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_615155.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_615155 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_615155.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_615155 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_615155 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_615155 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_615155.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_636146\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_636146 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_636146.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_sendEvent_636146 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_636146.next ();\n\n                                 // check object __DEC_messageSend_sendEvent_636146 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_sendEvent_636146 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_sendEvent_636146 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_sendEvent_636146.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_953879\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_953879 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_953879.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_953879 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_953879.next ();\n\n                                 // check object __DEC_message_message_953879 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_953879 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_953879 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_953879.equals (messageReceive) );\n\n                                 // check isomorphic binding between objects __DEC_message_message_953879 and messageSend \n                                 JavaSDM.ensure ( !__DEC_message_message_953879.equals (messageSend) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_message is really bound\n                        JavaSDM.ensure ( _edge_message != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check object messageSend is really bound\n                        JavaSDM.ensure ( messageSend != null );\n                        // check object sysLine is really bound\n                        JavaSDM.ensure ( sysLine != null );\n                        // check isomorphic binding between objects sysLine and line \n                        JavaSDM.ensure ( !sysLine.equals (line) );\n\n                        // check isomorphic binding between objects messageSend and messageReceive \n                        JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link fragment from messageSend to interaction\n                        JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link message from messageSend to message\n                        JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link receiveEvent from message to messageSend\n                        JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                        )));\n\n                        // check link sendEvent from message to messageSend\n                        JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link src from _edge_message to messageSend\n                        JavaSDM.ensure (messageSend.equals (_edge_message.getSrc ()\n                        ));\n\n                        // check link trg from _edge_message to message\n                        JavaSDM.ensure (message.equals (_edge_message.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // check link covered from messageSend to sysLine\n                        JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,interaction,messageReceive,message,line);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_140(EMoflonEdge _edge_message);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_55541 = null;\n      Message __DEC_messageReceive_receiveEvent_55541 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_761594 = null;\n      Message __DEC_messageSend_receiveEvent_761594 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_186458 = null;\n      Message __DEC_messageReceive_sendEvent_186458 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_577555 = null;\n      Message __DEC_messageSend_sendEvent_577555 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_281344 = null;\n      MessageEnd __DEC_message_message_281344 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageSend = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_message is really bound\n         JavaSDM.ensure ( _edge_message != null );\n         // bind object\n         _TmpObject = _edge_message.getTrg ();\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // bind object\n         _TmpObject = message.getSendEvent ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check link message from messageSend to message\n         JavaSDM.ensure (message.equals (messageSend.getMessage ()\n         ));\n\n         // check link src from _edge_message to messageReceive\n         JavaSDM.ensure (messageReceive.equals (_edge_message.getSrc ()\n         ));\n\n         // iterate to-many link covered from messageSend to sysLine\n         fujaba__Success = false;\n\n         fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageSendToSysLine.hasNext () )\n         {\n            try\n            {\n               sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n               // check object sysLine is really bound\n               JavaSDM.ensure ( sysLine != null );\n               // bind object\n               interaction = message.getInteraction ();\n\n               // check object interaction is really bound\n               JavaSDM.ensure ( interaction != null );\n\n               // check link fragment from messageReceive to interaction\n               JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n               ));\n\n               // check link fragment from messageSend to interaction\n               JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n               ));\n\n               // iterate to-many link lifeline from interaction to line\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n               while ( fujaba__IterInteractionToLine.hasNext () )\n               {\n                  try\n                  {\n                     line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n                     // check object line is really bound\n                     JavaSDM.ensure ( line != null );\n                     // check isomorphic binding between objects sysLine and line \n                     JavaSDM.ensure ( !sysLine.equals (line) );\n\n                     // check link covered from line to messageReceive\n                     JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageSend\n                        JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_55541\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_55541 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_55541.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_55541 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_55541.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_55541 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_55541 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_55541 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_55541.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_761594\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_761594 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_761594.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_receiveEvent_761594 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_761594.next ();\n\n                                 // check object __DEC_messageSend_receiveEvent_761594 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_receiveEvent_761594 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_receiveEvent_761594 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_761594.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_186458\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_186458 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_186458.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_186458 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_186458.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_186458 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_186458 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_186458 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_186458.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_577555\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_577555 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_577555.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_sendEvent_577555 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_577555.next ();\n\n                                 // check object __DEC_messageSend_sendEvent_577555 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_sendEvent_577555 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_sendEvent_577555 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_sendEvent_577555.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_281344\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_281344 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_281344.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_281344 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_281344.next ();\n\n                                 // check object __DEC_message_message_281344 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_281344 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_281344 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_281344.equals (messageReceive) );\n\n                                 // check isomorphic binding between objects __DEC_message_message_281344 and messageSend \n                                 JavaSDM.ensure ( !__DEC_message_message_281344.equals (messageSend) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_message is really bound\n                        JavaSDM.ensure ( _edge_message != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check object messageSend is really bound\n                        JavaSDM.ensure ( messageSend != null );\n                        // check object sysLine is really bound\n                        JavaSDM.ensure ( sysLine != null );\n                        // check isomorphic binding between objects sysLine and line \n                        JavaSDM.ensure ( !sysLine.equals (line) );\n\n                        // check isomorphic binding between objects messageSend and messageReceive \n                        JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link fragment from messageSend to interaction\n                        JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link message from messageSend to message\n                        JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link receiveEvent from message to messageSend\n                        JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                        )));\n\n                        // check link sendEvent from message to messageSend\n                        JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link src from _edge_message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (_edge_message.getSrc ()\n                        ));\n\n                        // check link trg from _edge_message to message\n                        JavaSDM.ensure (message.equals (_edge_message.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // check link covered from messageSend to sysLine\n                        JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,interaction,messageReceive,message,line);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_141(EMoflonEdge _edge_message);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_614535 = null;\n      Message __DEC_messageReceive_receiveEvent_614535 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_83079 = null;\n      Message __DEC_messageSend_receiveEvent_83079 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_732945 = null;\n      Message __DEC_messageReceive_sendEvent_732945 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_914062 = null;\n      Message __DEC_messageSend_sendEvent_914062 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_335430 = null;\n      MessageEnd __DEC_message_message_335430 = null;\n      Match match = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterInteractionToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_coveredBy is really bound\n         JavaSDM.ensure ( _edge_coveredBy != null );\n         // bind object\n         _TmpObject = _edge_coveredBy.getSrc ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // bind object\n         interaction = line.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // iterate to-many link fragment from interaction to messageSend\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToMessageSend = new ArrayList(interaction.getFragment()).iterator ();\n\n         while ( fujaba__IterInteractionToMessageSend.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterInteractionToMessageSend.next ();\n\n               // ensure correct type and really bound of object messageSend\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageSend = (MessageOccurrenceSpecification) _TmpObject;\n               // bind object\n               message = messageSend.getMessage ();\n\n               // check object message is really bound\n               JavaSDM.ensure ( message != null );\n\n               // check link message from message to interaction\n               JavaSDM.ensure (interaction.equals (message.getInteraction ()\n               ));\n\n               // bind object\n               _TmpObject = message.getReceiveEvent ();\n\n               // ensure correct type and really bound of object messageReceive\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n               // check isomorphic binding between objects messageSend and messageReceive \n               JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n               // check link fragment from messageReceive to interaction\n               JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n               ));\n\n               // check link message from messageReceive to message\n               JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n               ));\n\n               // check link sendEvent from message to messageSend\n               JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n               ));\n\n               // check link trg from _edge_coveredBy to messageReceive\n               JavaSDM.ensure (messageReceive.equals (_edge_coveredBy.getTrg ()\n               ));\n\n               // check link covered from line to messageReceive\n               JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n               // iterate to-many link covered from messageSend to sysLine\n               fujaba__Success = false;\n\n               fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n               while ( fujaba__IterMessageSendToSysLine.hasNext () )\n               {\n                  try\n                  {\n                     sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n                     // check object sysLine is really bound\n                     JavaSDM.ensure ( sysLine != null );\n                     // check isomorphic binding between objects sysLine and line \n                     JavaSDM.ensure ( !sysLine.equals (line) );\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageSend\n                        JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_614535\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_614535 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_614535.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_614535 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_614535.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_614535 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_614535 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_614535 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_614535.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_83079\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_83079 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_83079.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_receiveEvent_83079 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_83079.next ();\n\n                                 // check object __DEC_messageSend_receiveEvent_83079 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_receiveEvent_83079 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_receiveEvent_83079 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_83079.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_732945\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_732945 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_732945.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_732945 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_732945.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_732945 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_732945 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_732945 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_732945.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_914062\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_914062 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_914062.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_sendEvent_914062 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_914062.next ();\n\n                                 // check object __DEC_messageSend_sendEvent_914062 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_sendEvent_914062 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_sendEvent_914062 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_sendEvent_914062.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_335430\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_335430 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_335430.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_335430 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_335430.next ();\n\n                                 // check object __DEC_message_message_335430 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_335430 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_335430 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_335430.equals (messageReceive) );\n\n                                 // check isomorphic binding between objects __DEC_message_message_335430 and messageSend \n                                 JavaSDM.ensure ( !__DEC_message_message_335430.equals (messageSend) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_coveredBy is really bound\n                        JavaSDM.ensure ( _edge_coveredBy != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check object messageSend is really bound\n                        JavaSDM.ensure ( messageSend != null );\n                        // check object sysLine is really bound\n                        JavaSDM.ensure ( sysLine != null );\n                        // check isomorphic binding between objects sysLine and line \n                        JavaSDM.ensure ( !sysLine.equals (line) );\n\n                        // check isomorphic binding between objects messageSend and messageReceive \n                        JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link fragment from messageSend to interaction\n                        JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link message from messageSend to message\n                        JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link receiveEvent from message to messageSend\n                        JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                        )));\n\n                        // check link sendEvent from message to messageSend\n                        JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link src from _edge_coveredBy to line\n                        JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n                        ));\n\n                        // check link trg from _edge_coveredBy to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (_edge_coveredBy.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // check link covered from messageSend to sysLine\n                        JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,interaction,messageReceive,message,line);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_142(
			EMoflonEdge _edge_coveredBy);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_19433 = null;\n      Message __DEC_messageReceive_receiveEvent_19433 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_868910 = null;\n      Message __DEC_messageSend_receiveEvent_868910 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_172117 = null;\n      Message __DEC_messageReceive_sendEvent_172117 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_407604 = null;\n      Message __DEC_messageSend_sendEvent_407604 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_607705 = null;\n      MessageEnd __DEC_message_message_607705 = null;\n      Match match = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterInteractionToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterLineTo_edge_coveredBy = null;\n      EMoflonEdge _edge_coveredBy = null;\n      Lifeline line = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_covered is really bound\n         JavaSDM.ensure ( _edge_covered != null );\n         // bind object\n         _TmpObject = _edge_covered.getTrg ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // iterate to-many link src from line to _edge_coveredBy\n         fujaba__Success = false;\n\n         fujaba__IterLineTo_edge_coveredBy = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(line,EMoflonEdge.class,\"src\")).iterator ();\n\n         while ( fujaba__IterLineTo_edge_coveredBy.hasNext () )\n         {\n            try\n            {\n               _edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy.next ();\n\n               // check object _edge_coveredBy is really bound\n               JavaSDM.ensure ( _edge_coveredBy != null );\n               // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n               JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n               // bind object\n               interaction = line.getInteraction ();\n\n               // check object interaction is really bound\n               JavaSDM.ensure ( interaction != null );\n\n               // iterate to-many link fragment from interaction to messageSend\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToMessageSend = new ArrayList(interaction.getFragment()).iterator ();\n\n               while ( fujaba__IterInteractionToMessageSend.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterInteractionToMessageSend.next ();\n\n                     // ensure correct type and really bound of object messageSend\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                     // bind object\n                     message = messageSend.getMessage ();\n\n                     // check object message is really bound\n                     JavaSDM.ensure ( message != null );\n\n                     // check link message from message to interaction\n                     JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                     ));\n\n                     // bind object\n                     _TmpObject = message.getReceiveEvent ();\n\n                     // ensure correct type and really bound of object messageReceive\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n                     // check isomorphic binding between objects messageSend and messageReceive \n                     JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                     // check link fragment from messageReceive to interaction\n                     JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                     ));\n\n                     // check link message from messageReceive to message\n                     JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                     ));\n\n                     // check link sendEvent from message to messageSend\n                     JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                     ));\n\n                     // check link src from _edge_covered to messageReceive\n                     JavaSDM.ensure (messageReceive.equals (_edge_covered.getSrc ()\n                     ));\n\n                     // check link trg from _edge_coveredBy to messageReceive\n                     JavaSDM.ensure (messageReceive.equals (_edge_coveredBy.getTrg ()\n                     ));\n\n                     // check link covered from line to messageReceive\n                     JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                     // iterate to-many link covered from messageSend to sysLine\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n                     while ( fujaba__IterMessageSendToSysLine.hasNext () )\n                     {\n                        try\n                        {\n                           sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n                           // check object sysLine is really bound\n                           JavaSDM.ensure ( sysLine != null );\n                           // check isomorphic binding between objects sysLine and line \n                           JavaSDM.ensure ( !sysLine.equals (line) );\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // negative check for link fragment from messageReceive\n                              JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                              // negative check for link fragment from messageSend\n                              JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_19433\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_19433 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_19433.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_receiveEvent_19433 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_19433.next ();\n\n                                       // check object __DEC_messageReceive_receiveEvent_19433 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_19433 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_19433 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_19433.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_868910\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_868910 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_868910.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_receiveEvent_868910 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_868910.next ();\n\n                                       // check object __DEC_messageSend_receiveEvent_868910 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_receiveEvent_868910 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_receiveEvent_868910 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_868910.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_172117\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_172117 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_172117.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_sendEvent_172117 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_172117.next ();\n\n                                       // check object __DEC_messageReceive_sendEvent_172117 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_sendEvent_172117 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_sendEvent_172117 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_172117.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_407604\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_407604 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_407604.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_sendEvent_407604 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_407604.next ();\n\n                                       // check object __DEC_messageSend_sendEvent_407604 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_sendEvent_407604 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_sendEvent_407604 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_sendEvent_407604.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link message from message to __DEC_message_message_607705\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageTo__DEC_message_message_607705 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_607705.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_message_message_607705 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_607705.next ();\n\n                                       // check object __DEC_message_message_607705 is really bound\n                                       JavaSDM.ensure ( __DEC_message_message_607705 != null );\n                                       // check isomorphic binding between objects __DEC_message_message_607705 and messageReceive \n                                       JavaSDM.ensure ( !__DEC_message_message_607705.equals (messageReceive) );\n\n                                       // check isomorphic binding between objects __DEC_message_message_607705 and messageSend \n                                       JavaSDM.ensure ( !__DEC_message_message_607705.equals (messageSend) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_covered is really bound\n                              JavaSDM.ensure ( _edge_covered != null );\n                              // check object _edge_coveredBy is really bound\n                              JavaSDM.ensure ( _edge_coveredBy != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object message is really bound\n                              JavaSDM.ensure ( message != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object sysLine is really bound\n                              JavaSDM.ensure ( sysLine != null );\n                              // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                              JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                              // check isomorphic binding between objects sysLine and line \n                              JavaSDM.ensure ( !sysLine.equals (line) );\n\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                              ));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link message from message to interaction\n                              JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                              ));\n\n                              // check link message from messageReceive to message\n                              JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                              ));\n\n                              // check link message from messageSend to message\n                              JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                              ));\n\n                              // check link receiveEvent from message to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                              ));\n\n                              // check link receiveEvent from message to messageSend\n                              JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                              )));\n\n                              // check link sendEvent from message to messageSend\n                              JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                              ));\n\n                              // check link sendEvent from message to messageReceive\n                              JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                              )));\n\n                              // check link src from _edge_covered to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (_edge_covered.getSrc ()\n                              ));\n\n                              // check link src from _edge_coveredBy to line\n                              JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n                              ));\n\n                              // check link trg from _edge_covered to line\n                              JavaSDM.ensure (line.equals (_edge_covered.getTrg ()\n                              ));\n\n                              // check link trg from _edge_coveredBy to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (_edge_coveredBy.getTrg ()\n                              ));\n\n                              // check link covered from line to messageReceive\n                              JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                              // check link covered from messageSend to sysLine\n                              JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,interaction,messageReceive,message,line);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_143(EMoflonEdge _edge_covered);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // UserStepBFMessageRule
