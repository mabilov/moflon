/**
 */
package UseCaseToModalSequenceDiagramIntegration.Rules;

import ModalSequenceDiagram.CombinedFragment;
import ModalSequenceDiagram.Constraint;
import ModalSequenceDiagram.Interaction;
import ModalSequenceDiagram.InteractionConstraint;
import ModalSequenceDiagram.InteractionOperand;
import ModalSequenceDiagram.Lifeline;
import ModalSequenceDiagram.LiteralString;
import ModalSequenceDiagram.Message;
import ModalSequenceDiagram.MessageEnd;
import ModalSequenceDiagram.MessageOccurrenceSpecification;
import ModalSequenceDiagram.ModalSequenceDiagramFactory;
import ModalSequenceDiagram.Model;

import TGGLanguage.csp.*;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NamedFlow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import UseCaseToModalSequenceDiagramIntegration.ActorToLifeline;
import UseCaseToModalSequenceDiagramIntegration.FlowToInteractionFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToMessage;
import UseCaseToModalSequenceDiagramIntegration.PackageDeclarationToPackage;
import UseCaseToModalSequenceDiagramIntegration.ParallelStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.StepAlternativeToInteractionOperand;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToInteraction;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToModalSequenceDiagramIntegrationFactory;
import UseCaseToModalSequenceDiagramIntegration.UseCasesModelToModel;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Use Case Precond To Found Message Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see UseCaseToModalSequenceDiagramIntegration.Rules.RulesPackage#getUseCasePrecondToFoundMessageRule()
 * @model
 * @generated
 */
public interface UseCasePrecondToFoundMessageRule extends AbstractRule,
		UseCaseToInteractionRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge __useCase_flows_basicFlow = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object basicFlow is really bound\n         JavaSDM.ensure ( basicFlow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,useCase,actor,packageDeclaration,basicFlow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object basicFlow is really bound\n            JavaSDM.ensure ( basicFlow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // create object __packageDeclaration_actors_actor\n            __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __useCase_flows_basicFlow\n            __useCase_flows_basicFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __packageDeclaration_useCases_useCase\n            __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __packageDeclaration_useCases_useCase\n            __packageDeclaration_useCases_useCase.setName (\"useCases\");\n            // assign attribute __packageDeclaration_actors_actor\n            __packageDeclaration_actors_actor.setName (\"actors\");\n            // assign attribute __useCase_flows_basicFlow\n            __useCase_flows_basicFlow.setName (\"flows\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,useCase,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,actor,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__packageDeclaration_actors_actor,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__useCase_flows_basicFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,basicFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__packageDeclaration_useCases_useCase,\"toBeTranslatedEdges\");\n\n            // create link\n            __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n            // create link\n            __useCase_flows_basicFlow.setSrc( useCase);\n\n\n            // create link\n            __packageDeclaration_actors_actor.setTrg( actor);\n\n\n            // create link\n            __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n            // create link\n            __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n            // create link\n            __useCase_flows_basicFlow.setTrg( basicFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object basicFlow is really bound\n            JavaSDM.ensure ( basicFlow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,packageDeclaration,\"contextNodes\");\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,useCase,actor,packageDeclaration,basicFlow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, UseCase useCase, Actor actor,
			PackageDeclaration packageDeclaration, BasicFlow basicFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      ModalSequenceDiagram.Package _package = null;\n      Actor actor = null;\n      BasicFlow basicFlow = null;\n      PackageDeclaration packageDeclaration = null;\n      PackageDeclarationToPackage packageDeclarationToPackage = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      Message message = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      FlowToInteractionFragment basicFlowToInteraction = null;\n      ActorToLifeline actorToLine = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge interaction__lifeline__line = null;\n      EMoflonEdge interaction__message__message = null;\n      EMoflonEdge line__coveredBy__messageReceive = null;\n      EMoflonEdge messageReceive__message__message = null;\n      EMoflonEdge messageReceive__covered__line = null;\n      EMoflonEdge __useCase_flows_basicFlow = null;\n      EMoflonEdge basicFlowToInteraction__source__basicFlow = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n      EMoflonEdge message__interaction__interaction = null;\n      EMoflonEdge _package__packagedElement__interaction = null;\n      EMoflonEdge basicFlowToInteraction__target__interaction = null;\n      EMoflonEdge actorToLine__target__line = null;\n      EMoflonEdge interaction__fragment__messageReceive = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge messageReceive__enclosingInteraction__interaction = null;\n      EMoflonEdge message__receiveEvent__messageReceive = null;\n      EMoflonEdge line__interaction__interaction = null;\n      EMoflonEdge actorToLine__source__actor = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"_package\"));\n\n         // ensure correct type and really bound of object _package\n         JavaSDM.ensure ( _TmpObject instanceof ModalSequenceDiagram.Package );\n         _package = (ModalSequenceDiagram.Package) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"basicFlow\"));\n\n         // ensure correct type and really bound of object basicFlow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         basicFlow = (BasicFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclarationToPackage\"));\n\n         // ensure correct type and really bound of object packageDeclarationToPackage\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclarationToPackage );\n         packageDeclarationToPackage = (PackageDeclarationToPackage) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object message\n         message = ModalSequenceDiagramFactory.eINSTANCE.createMessage();\n\n         // create object messageReceive\n         messageReceive = ModalSequenceDiagramFactory.eINSTANCE.createMessageOccurrenceSpecification();\n\n         // create object interaction\n         interaction = ModalSequenceDiagramFactory.eINSTANCE.createInteraction();\n\n         // create object line\n         line = ModalSequenceDiagramFactory.eINSTANCE.createLifeline();\n\n         // create object basicFlowToInteraction\n         basicFlowToInteraction = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createFlowToInteractionFragment();\n\n         // create object actorToLine\n         actorToLine = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createActorToLifeline();\n\n         // assign attribute message\n         message.setName ((java.lang.String)csp.getValue(\"message\",\"name\"));\n         // assign attribute message\n         message.setMessageKind ((ModalSequenceDiagram.MessageKind)csp.getValue(\"message\",\"messageKind\"));\n         // assign attribute message\n         message.setMessageSort ((ModalSequenceDiagram.MessageSort)csp.getValue(\"message\",\"messageSort\"));\n         // assign attribute interaction\n         interaction.setName ((java.lang.String)csp.getValue(\"interaction\",\"name\"));\n         // assign attribute line\n         line.setName ((java.lang.String)csp.getValue(\"line\",\"name\"));\n\n         // create link\n         basicFlowToInteraction.setSource( basicFlow);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(message,messageReceive,\"receiveEvent\");\n\n         // create link\n         messageReceive.setMessage( message);\n\n\n         // create link\n         interaction.getMessage().add(message);\n\n\n         // create link\n         line.setInteraction( interaction);\n\n\n         // create link\n         messageReceive.setEnclosingInteraction( interaction);\n\n\n         // create link\n         _package.getPackagedElement().add(interaction);\n\n\n         // create link\n         basicFlowToInteraction.setTarget( interaction);\n\n\n         // create link\n         line.getCoveredBy().add(messageReceive);\n\n\n         // create link\n         actorToLine.setSource( actor);\n\n\n         // create link\n         actorToLine.setTarget( line);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object actorToLine is really bound\n         JavaSDM.ensure ( actorToLine != null );\n         // check object basicFlow is really bound\n         JavaSDM.ensure ( basicFlow != null );\n         // check object basicFlowToInteraction is really bound\n         JavaSDM.ensure ( basicFlowToInteraction != null );\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,interaction,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actor,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,line,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,basicFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actorToLine,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,basicFlowToInteraction,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCase,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _package is really bound\n         JavaSDM.ensure ( _package != null );\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object actorToLine is really bound\n         JavaSDM.ensure ( actorToLine != null );\n         // check object basicFlow is really bound\n         JavaSDM.ensure ( basicFlow != null );\n         // check object basicFlowToInteraction is really bound\n         JavaSDM.ensure ( basicFlowToInteraction != null );\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object packageDeclarationToPackage is really bound\n         JavaSDM.ensure ( packageDeclarationToPackage != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects actor and _package \n         JavaSDM.ensure ( !actor.equals (_package) );\n\n         // check isomorphic binding between objects actorToLine and _package \n         JavaSDM.ensure ( !actorToLine.equals (_package) );\n\n         // check isomorphic binding between objects basicFlow and _package \n         JavaSDM.ensure ( !basicFlow.equals (_package) );\n\n         // check isomorphic binding between objects basicFlowToInteraction and _package \n         JavaSDM.ensure ( !basicFlowToInteraction.equals (_package) );\n\n         // check isomorphic binding between objects interaction and _package \n         JavaSDM.ensure ( !interaction.equals (_package) );\n\n         // check isomorphic binding between objects line and _package \n         JavaSDM.ensure ( !line.equals (_package) );\n\n         // check isomorphic binding between objects message and _package \n         JavaSDM.ensure ( !message.equals (_package) );\n\n         // check isomorphic binding between objects messageReceive and _package \n         JavaSDM.ensure ( !messageReceive.equals (_package) );\n\n         // check isomorphic binding between objects packageDeclaration and _package \n         JavaSDM.ensure ( !packageDeclaration.equals (_package) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and _package \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (_package) );\n\n         // check isomorphic binding between objects useCase and _package \n         JavaSDM.ensure ( !useCase.equals (_package) );\n\n         // check isomorphic binding between objects actorToLine and actor \n         JavaSDM.ensure ( !actorToLine.equals (actor) );\n\n         // check isomorphic binding between objects basicFlow and actor \n         JavaSDM.ensure ( !basicFlow.equals (actor) );\n\n         // check isomorphic binding between objects basicFlowToInteraction and actor \n         JavaSDM.ensure ( !basicFlowToInteraction.equals (actor) );\n\n         // check isomorphic binding between objects interaction and actor \n         JavaSDM.ensure ( !interaction.equals (actor) );\n\n         // check isomorphic binding between objects line and actor \n         JavaSDM.ensure ( !line.equals (actor) );\n\n         // check isomorphic binding between objects message and actor \n         JavaSDM.ensure ( !message.equals (actor) );\n\n         // check isomorphic binding between objects messageReceive and actor \n         JavaSDM.ensure ( !messageReceive.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclaration and actor \n         JavaSDM.ensure ( !packageDeclaration.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and actor \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (actor) );\n\n         // check isomorphic binding between objects useCase and actor \n         JavaSDM.ensure ( !useCase.equals (actor) );\n\n         // check isomorphic binding between objects basicFlow and actorToLine \n         JavaSDM.ensure ( !basicFlow.equals (actorToLine) );\n\n         // check isomorphic binding between objects basicFlowToInteraction and actorToLine \n         JavaSDM.ensure ( !basicFlowToInteraction.equals (actorToLine) );\n\n         // check isomorphic binding between objects interaction and actorToLine \n         JavaSDM.ensure ( !interaction.equals (actorToLine) );\n\n         // check isomorphic binding between objects line and actorToLine \n         JavaSDM.ensure ( !line.equals (actorToLine) );\n\n         // check isomorphic binding between objects message and actorToLine \n         JavaSDM.ensure ( !message.equals (actorToLine) );\n\n         // check isomorphic binding between objects messageReceive and actorToLine \n         JavaSDM.ensure ( !messageReceive.equals (actorToLine) );\n\n         // check isomorphic binding between objects packageDeclaration and actorToLine \n         JavaSDM.ensure ( !packageDeclaration.equals (actorToLine) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and actorToLine \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (actorToLine) );\n\n         // check isomorphic binding between objects useCase and actorToLine \n         JavaSDM.ensure ( !useCase.equals (actorToLine) );\n\n         // check isomorphic binding between objects basicFlowToInteraction and basicFlow \n         JavaSDM.ensure ( !basicFlowToInteraction.equals (basicFlow) );\n\n         // check isomorphic binding between objects interaction and basicFlow \n         JavaSDM.ensure ( !interaction.equals (basicFlow) );\n\n         // check isomorphic binding between objects line and basicFlow \n         JavaSDM.ensure ( !line.equals (basicFlow) );\n\n         // check isomorphic binding between objects message and basicFlow \n         JavaSDM.ensure ( !message.equals (basicFlow) );\n\n         // check isomorphic binding between objects messageReceive and basicFlow \n         JavaSDM.ensure ( !messageReceive.equals (basicFlow) );\n\n         // check isomorphic binding between objects packageDeclaration and basicFlow \n         JavaSDM.ensure ( !packageDeclaration.equals (basicFlow) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and basicFlow \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (basicFlow) );\n\n         // check isomorphic binding between objects useCase and basicFlow \n         JavaSDM.ensure ( !useCase.equals (basicFlow) );\n\n         // check isomorphic binding between objects interaction and basicFlowToInteraction \n         JavaSDM.ensure ( !interaction.equals (basicFlowToInteraction) );\n\n         // check isomorphic binding between objects line and basicFlowToInteraction \n         JavaSDM.ensure ( !line.equals (basicFlowToInteraction) );\n\n         // check isomorphic binding between objects message and basicFlowToInteraction \n         JavaSDM.ensure ( !message.equals (basicFlowToInteraction) );\n\n         // check isomorphic binding between objects messageReceive and basicFlowToInteraction \n         JavaSDM.ensure ( !messageReceive.equals (basicFlowToInteraction) );\n\n         // check isomorphic binding between objects packageDeclaration and basicFlowToInteraction \n         JavaSDM.ensure ( !packageDeclaration.equals (basicFlowToInteraction) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and basicFlowToInteraction \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (basicFlowToInteraction) );\n\n         // check isomorphic binding between objects useCase and basicFlowToInteraction \n         JavaSDM.ensure ( !useCase.equals (basicFlowToInteraction) );\n\n         // check isomorphic binding between objects line and interaction \n         JavaSDM.ensure ( !line.equals (interaction) );\n\n         // check isomorphic binding between objects message and interaction \n         JavaSDM.ensure ( !message.equals (interaction) );\n\n         // check isomorphic binding between objects messageReceive and interaction \n         JavaSDM.ensure ( !messageReceive.equals (interaction) );\n\n         // check isomorphic binding between objects packageDeclaration and interaction \n         JavaSDM.ensure ( !packageDeclaration.equals (interaction) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and interaction \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (interaction) );\n\n         // check isomorphic binding between objects useCase and interaction \n         JavaSDM.ensure ( !useCase.equals (interaction) );\n\n         // check isomorphic binding between objects message and line \n         JavaSDM.ensure ( !message.equals (line) );\n\n         // check isomorphic binding between objects messageReceive and line \n         JavaSDM.ensure ( !messageReceive.equals (line) );\n\n         // check isomorphic binding between objects packageDeclaration and line \n         JavaSDM.ensure ( !packageDeclaration.equals (line) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and line \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (line) );\n\n         // check isomorphic binding between objects useCase and line \n         JavaSDM.ensure ( !useCase.equals (line) );\n\n         // check isomorphic binding between objects messageReceive and message \n         JavaSDM.ensure ( !messageReceive.equals (message) );\n\n         // check isomorphic binding between objects packageDeclaration and message \n         JavaSDM.ensure ( !packageDeclaration.equals (message) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and message \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (message) );\n\n         // check isomorphic binding between objects useCase and message \n         JavaSDM.ensure ( !useCase.equals (message) );\n\n         // check isomorphic binding between objects packageDeclaration and messageReceive \n         JavaSDM.ensure ( !packageDeclaration.equals (messageReceive) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and messageReceive \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCase and messageReceive \n         JavaSDM.ensure ( !useCase.equals (messageReceive) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and packageDeclaration \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclaration \n         JavaSDM.ensure ( !useCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclarationToPackage \n         JavaSDM.ensure ( !useCase.equals (packageDeclarationToPackage) );\n\n         // create object interaction__lifeline__line\n         interaction__lifeline__line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object interaction__message__message\n         interaction__message__message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object line__coveredBy__messageReceive\n         line__coveredBy__messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageReceive__message__message\n         messageReceive__message__message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageReceive__covered__line\n         messageReceive__covered__line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __useCase_flows_basicFlow\n         __useCase_flows_basicFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object basicFlowToInteraction__source__basicFlow\n         basicFlowToInteraction__source__basicFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __packageDeclaration_useCases_useCase\n         __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object message__interaction__interaction\n         message__interaction__interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object _package__packagedElement__interaction\n         _package__packagedElement__interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object basicFlowToInteraction__target__interaction\n         basicFlowToInteraction__target__interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object actorToLine__target__line\n         actorToLine__target__line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object interaction__fragment__messageReceive\n         interaction__fragment__messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __packageDeclaration_actors_actor\n         __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageReceive__enclosingInteraction__interaction\n         messageReceive__enclosingInteraction__interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object message__receiveEvent__messageReceive\n         message__receiveEvent__messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object line__interaction__interaction\n         line__interaction__interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object actorToLine__source__actor\n         actorToLine__source__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"UseCasePrecondToFoundMessageRule\");\n         // assign attribute message__receiveEvent__messageReceive\n         message__receiveEvent__messageReceive.setName (\"receiveEvent\");\n         // assign attribute message__interaction__interaction\n         message__interaction__interaction.setName (\"interaction\");\n         // assign attribute interaction__message__message\n         interaction__message__message.setName (\"message\");\n         // assign attribute line__interaction__interaction\n         line__interaction__interaction.setName (\"interaction\");\n         // assign attribute interaction__lifeline__line\n         interaction__lifeline__line.setName (\"lifeline\");\n         // assign attribute messageReceive__enclosingInteraction__interaction\n         messageReceive__enclosingInteraction__interaction.setName (\"enclosingInteraction\");\n         // assign attribute interaction__fragment__messageReceive\n         interaction__fragment__messageReceive.setName (\"fragment\");\n         // assign attribute messageReceive__message__message\n         messageReceive__message__message.setName (\"message\");\n         // assign attribute __packageDeclaration_useCases_useCase\n         __packageDeclaration_useCases_useCase.setName (\"useCases\");\n         // assign attribute __packageDeclaration_actors_actor\n         __packageDeclaration_actors_actor.setName (\"actors\");\n         // assign attribute line__coveredBy__messageReceive\n         line__coveredBy__messageReceive.setName (\"coveredBy\");\n         // assign attribute messageReceive__covered__line\n         messageReceive__covered__line.setName (\"covered\");\n         // assign attribute actorToLine__source__actor\n         actorToLine__source__actor.setName (\"source\");\n         // assign attribute actorToLine__target__line\n         actorToLine__target__line.setName (\"target\");\n         // assign attribute _package__packagedElement__interaction\n         _package__packagedElement__interaction.setName (\"packagedElement\");\n         // assign attribute __useCase_flows_basicFlow\n         __useCase_flows_basicFlow.setName (\"flows\");\n         // assign attribute basicFlowToInteraction__source__basicFlow\n         basicFlowToInteraction__source__basicFlow.setName (\"source\");\n         // assign attribute basicFlowToInteraction__target__interaction\n         basicFlowToInteraction__target__interaction.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,interaction__lifeline__line,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,interaction__message__message,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,line__coveredBy__messageReceive,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive__message__message,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive__covered__line,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__useCase_flows_basicFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,basicFlowToInteraction__source__basicFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__packageDeclaration_useCases_useCase,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message__interaction__interaction,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,_package__packagedElement__interaction,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,basicFlowToInteraction__target__interaction,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actorToLine__target__line,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,interaction__fragment__messageReceive,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__packageDeclaration_actors_actor,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive__enclosingInteraction__interaction,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message__receiveEvent__messageReceive,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,line__interaction__interaction,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actorToLine__source__actor,\"createdEdges\");\n\n         // create link\n         __useCase_flows_basicFlow.setSrc( useCase);\n\n\n         // create link\n         __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n         // create link\n         messageReceive__message__message.setTrg( message);\n\n\n         // create link\n         message__interaction__interaction.setSrc( message);\n\n\n         // create link\n         message__receiveEvent__messageReceive.setSrc( message);\n\n\n         // create link\n         interaction__message__message.setTrg( message);\n\n\n         // create link\n         interaction__message__message.setSrc( interaction);\n\n\n         // create link\n         messageReceive__enclosingInteraction__interaction.setTrg( interaction);\n\n\n         // create link\n         interaction__fragment__messageReceive.setSrc( interaction);\n\n\n         // create link\n         interaction__lifeline__line.setSrc( interaction);\n\n\n         // create link\n         basicFlowToInteraction__target__interaction.setTrg( interaction);\n\n\n         // create link\n         _package__packagedElement__interaction.setTrg( interaction);\n\n\n         // create link\n         message__interaction__interaction.setTrg( interaction);\n\n\n         // create link\n         line__interaction__interaction.setTrg( interaction);\n\n\n         // create link\n         line__coveredBy__messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         messageReceive__message__message.setSrc( messageReceive);\n\n\n         // create link\n         messageReceive__enclosingInteraction__interaction.setSrc( messageReceive);\n\n\n         // create link\n         interaction__fragment__messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         message__receiveEvent__messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         messageReceive__covered__line.setSrc( messageReceive);\n\n\n         // create link\n         actorToLine__source__actor.setTrg( actor);\n\n\n         // create link\n         __packageDeclaration_actors_actor.setTrg( actor);\n\n\n         // create link\n         __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n         // create link\n         __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n         // create link\n         line__coveredBy__messageReceive.setSrc( line);\n\n\n         // create link\n         line__interaction__interaction.setSrc( line);\n\n\n         // create link\n         interaction__lifeline__line.setTrg( line);\n\n\n         // create link\n         actorToLine__target__line.setTrg( line);\n\n\n         // create link\n         messageReceive__covered__line.setTrg( line);\n\n\n         // create link\n         actorToLine__target__line.setSrc( actorToLine);\n\n\n         // create link\n         actorToLine__source__actor.setSrc( actorToLine);\n\n\n         // create link\n         _package__packagedElement__interaction.setSrc( _package);\n\n\n         // create link\n         basicFlowToInteraction__source__basicFlow.setTrg( basicFlow);\n\n\n         // create link\n         __useCase_flows_basicFlow.setTrg( basicFlow);\n\n\n         // create link\n         basicFlowToInteraction__source__basicFlow.setSrc( basicFlowToInteraction);\n\n\n         // create link\n         basicFlowToInteraction__target__interaction.setSrc( basicFlowToInteraction);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,useCase,message,interaction,messageReceive,actor,packageDeclaration,line,actorToLine,_package,packageDeclarationToPackage,basicFlow,basicFlowToInteraction);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Actor actor = null;\n      BasicFlow basicFlow = null;\n      PackageDeclaration packageDeclaration = null;\n      UseCase useCase = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n      EMoflonEdge __useCase_flows_basicFlow = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge __packageDeclarationToPackage_source_packageDeclaration = null;\n      EMoflonEdge __packageDeclarationToPackage_target__package = null;\n      CSP csp = null;\n      ModalSequenceDiagram.Package _package = null;\n      Iterator fujaba__IterPackageDeclarationToPackageDeclarationToPackage = null;\n      PackageDeclarationToPackage packageDeclarationToPackage = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"UseCasePrecondToFoundMessageRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (match.getObject(\"basicFlow\"));\n\n         // ensure correct type and really bound of object basicFlow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         basicFlow = (BasicFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (match.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link source from packageDeclaration to packageDeclarationToPackage\n         fujaba__Success = false;\n\n         fujaba__IterPackageDeclarationToPackageDeclarationToPackage = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(packageDeclaration,PackageDeclarationToPackage.class,\"source\")).iterator ();\n\n         while ( fujaba__IterPackageDeclarationToPackageDeclarationToPackage.hasNext () )\n         {\n            try\n            {\n               packageDeclarationToPackage = (PackageDeclarationToPackage) fujaba__IterPackageDeclarationToPackageDeclarationToPackage.next ();\n\n               // check object packageDeclarationToPackage is really bound\n               JavaSDM.ensure ( packageDeclarationToPackage != null );\n               // bind object\n               _package = packageDeclarationToPackage.getTarget ();\n\n               // check object _package is really bound\n               JavaSDM.ensure ( _package != null );\n\n               // story node \'find context\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check object _package is really bound\n                  JavaSDM.ensure ( _package != null );\n                  // check object actor is really bound\n                  JavaSDM.ensure ( actor != null );\n                  // check object basicFlow is really bound\n                  JavaSDM.ensure ( basicFlow != null );\n                  // check object packageDeclaration is really bound\n                  JavaSDM.ensure ( packageDeclaration != null );\n                  // check object packageDeclarationToPackage is really bound\n                  JavaSDM.ensure ( packageDeclarationToPackage != null );\n                  // check object useCase is really bound\n                  JavaSDM.ensure ( useCase != null );\n                  // check link actors from actor to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                  ));\n\n                  // check link flows from basicFlow to useCase\n                  JavaSDM.ensure (useCase.equals (basicFlow.eContainer()\n                  ));\n\n                  // check link source from packageDeclarationToPackage to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (packageDeclarationToPackage.getSource ()\n                  ));\n\n                  // check link target from packageDeclarationToPackage to _package\n                  JavaSDM.ensure (_package.equals (packageDeclarationToPackage.getTarget ()\n                  ));\n\n                  // check link useCases from useCase to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                  ));\n\n                  // create object isApplicableMatch\n                  isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                  // create object __packageDeclaration_useCases_useCase\n                  __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __useCase_flows_basicFlow\n                  __useCase_flows_basicFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __packageDeclaration_actors_actor\n                  __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __packageDeclarationToPackage_source_packageDeclaration\n                  __packageDeclarationToPackage_source_packageDeclaration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __packageDeclarationToPackage_target__package\n                  __packageDeclarationToPackage_target__package = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // assign attribute __packageDeclaration_useCases_useCase\n                  __packageDeclaration_useCases_useCase.setName (\"useCases\");\n                  // assign attribute __packageDeclaration_actors_actor\n                  __packageDeclaration_actors_actor.setName (\"actors\");\n                  // assign attribute __packageDeclarationToPackage_source_packageDeclaration\n                  __packageDeclarationToPackage_source_packageDeclaration.setName (\"source\");\n                  // assign attribute __packageDeclarationToPackage_target__package\n                  __packageDeclarationToPackage_target__package.setName (\"target\");\n                  // assign attribute __useCase_flows_basicFlow\n                  __useCase_flows_basicFlow.setName (\"flows\");\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                  // create link\n                  __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n                  // create link\n                  __useCase_flows_basicFlow.setSrc( useCase);\n\n\n                  // create link\n                  __packageDeclaration_actors_actor.setTrg( actor);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(actor);\n\n\n                  // create link\n                  __packageDeclarationToPackage_source_packageDeclaration.setTrg( packageDeclaration);\n\n\n                  // create link\n                  __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n                  // create link\n                  __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(_package);\n\n\n                  // create link\n                  __packageDeclarationToPackage_target__package.setTrg( _package);\n\n\n                  // create link\n                  __packageDeclarationToPackage_source_packageDeclaration.setSrc( packageDeclarationToPackage);\n\n\n                  // create link\n                  __packageDeclarationToPackage_target__package.setSrc( packageDeclarationToPackage);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(packageDeclarationToPackage);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(basicFlow);\n\n\n                  // create link\n                  __useCase_flows_basicFlow.setTrg( basicFlow);\n\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_actors_actor,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclarationToPackage_source_packageDeclaration,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclarationToPackage_target__package,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_useCases_useCase,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_basicFlow,\"allContextElements\");\n                  // story node \'solve CSP\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,useCase,actor,packageDeclaration,_package,packageDeclarationToPackage,basicFlow));\n\n                     // ensure correct type and really bound of object csp\n                     JavaSDM.ensure ( _TmpObject instanceof CSP );\n                     csp = (CSP) _TmpObject;\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  // statement node \'check CSP\'\n                  fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                  if (fujaba__Success)\n                  {\n                     // story node \'add match to rule result\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object isApplicableMatch is really bound\n                        JavaSDM.ensure ( isApplicableMatch != null );\n                        // check object ruleresult is really bound\n                        JavaSDM.ensure ( ruleresult != null );\n                        // assign attribute isApplicableMatch\n                        isApplicableMatch.setRuleName (\"UseCasePrecondToFoundMessageRule\");\n                        // assign attribute ruleresult\n                        ruleresult.setSuccess (true);\n\n                        // create link\n                        ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"useCase\", useCase);\nmatch.registerObject(\"actor\", actor);\nmatch.registerObject(\"packageDeclaration\", packageDeclaration);\nmatch.registerObject(\"basicFlow\", basicFlow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, UseCase useCase, Actor actor,
			PackageDeclaration packageDeclaration, BasicFlow basicFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"system\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.type\", true, csp);\r\nvar_actor_type.setValue(actor.getType());\r\nvar_actor_type.setType(\"EObject\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqActorType eqActorType = new EqActorType();\r\n\r\ncsp.getConstraints().add(eqActorType);\r\n\r\n// Solve CSP\r\neqActorType.setRuleName(\"\");\r\neqActorType.solve(var_actor_type,literal0);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, UseCase useCase, Actor actor,
			PackageDeclaration packageDeclaration, BasicFlow basicFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"found\");\r\nliteral0.setType(\"String\");\r\nVariable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal1\", true, csp);\r\nliteral1.setValue(\"asynchSignal\");\r\nliteral1.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_useCase_preConditions = CSPFactoryHelper.eINSTANCE.createVariable(\"useCase.preConditions\", true, csp);\r\nvar_useCase_preConditions.setValue(useCase.getPreConditions());\r\nvar_useCase_preConditions.setType(\"\");\r\nVariable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.name\", true, csp);\r\nvar_actor_name.setValue(actor.getName());\r\nvar_actor_name.setType(\"\");\r\nVariable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(\"useCase.name\", true, csp);\r\nvar_useCase_name.setValue(useCase.getName());\r\nvar_useCase_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(\"message.name\", csp);\r\nvar_message_name.setType(\"\");\r\nVariable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(\"message.messageKind\", csp);\r\nvar_message_messageKind.setType(\"EObject\");\r\nVariable var_line_name = CSPFactoryHelper.eINSTANCE.createVariable(\"line.name\", csp);\r\nvar_line_name.setType(\"\");\r\nVariable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(\"message.messageSort\", csp);\r\nvar_message_messageSort.setType(\"EObject\");\r\nVariable var_interaction_name = CSPFactoryHelper.eINSTANCE.createVariable(\"interaction.name\", csp);\r\nvar_interaction_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();EqMessageKind eqMessageKind = new EqMessageKind();Eq eq_0 = new Eq();EqMessageSort eqMessageSort = new EqMessageSort();Eq eq_1 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eqMessageKind);\r\ncsp.getConstraints().add(eq_0);\r\ncsp.getConstraints().add(eqMessageSort);\r\ncsp.getConstraints().add(eq_1);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_useCase_preConditions,var_message_name);\r\neqMessageKind.setRuleName(\"\");\r\neqMessageKind.solve(var_message_messageKind,literal0);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_actor_name,var_line_name);\r\neqMessageSort.setRuleName(\"\");\r\neqMessageSort.solve(var_message_messageSort,literal1);\r\neq_1.setRuleName(\"\");\r\neq_1.solve(var_useCase_name,var_interaction_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"_package\",_package);\r\nisApplicableMatch.registerObject(\"packageDeclarationToPackage\",packageDeclarationToPackage);\r\nisApplicableMatch.registerObject(\"basicFlow\",basicFlow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			UseCase useCase, Actor actor,
			PackageDeclaration packageDeclaration,
			ModalSequenceDiagram.Package _package,
			PackageDeclarationToPackage packageDeclarationToPackage,
			BasicFlow basicFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"message\", message);\nruleresult.registerObject(\"interaction\", interaction);\nruleresult.registerObject(\"messageReceive\", messageReceive);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"line\", line);\nruleresult.registerObject(\"actorToLine\", actorToLine);\nruleresult.registerObject(\"_package\", _package);\nruleresult.registerObject(\"packageDeclarationToPackage\", packageDeclarationToPackage);\nruleresult.registerObject(\"basicFlow\", basicFlow);\nruleresult.registerObject(\"basicFlowToInteraction\", basicFlowToInteraction);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject useCase,
			EObject message, EObject interaction, EObject messageReceive,
			EObject actor, EObject packageDeclaration, EObject line,
			EObject actorToLine, EObject _package,
			EObject packageDeclarationToPackage, EObject basicFlow,
			EObject basicFlowToInteraction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"useCase\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getUseCase()) && match.getObject(\"actor\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getActor()) && match.getObject(\"basicFlow\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getBasicFlow());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __line_interaction_interaction = null;\n      EMoflonEdge __messageReceive_message_message = null;\n      EMoflonEdge __messageReceive_enclosingInteraction_interaction = null;\n      EMoflonEdge __messageReceive_covered_line = null;\n      EMoflonEdge __interaction_message_message = null;\n      EMoflonEdge __message_receiveEvent_messageReceive = null;\n      EMoflonEdge __interaction_fragment_messageReceive = null;\n      EMoflonEdge __line_coveredBy_messageReceive = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n      EMoflonEdge ___package_packagedElement_interaction = null;\n      EMoflonEdge __message_interaction_interaction = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _package is really bound\n         JavaSDM.ensure ( _package != null );\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,message,interaction,messageReceive,line,_package));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object _package is really bound\n            JavaSDM.ensure ( _package != null );\n            // check object interaction is really bound\n            JavaSDM.ensure ( interaction != null );\n            // check object line is really bound\n            JavaSDM.ensure ( line != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object message is really bound\n            JavaSDM.ensure ( message != null );\n            // check object messageReceive is really bound\n            JavaSDM.ensure ( messageReceive != null );\n            // create object __line_interaction_interaction\n            __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageReceive_message_message\n            __messageReceive_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageReceive_enclosingInteraction_interaction\n            __messageReceive_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageReceive_covered_line\n            __messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __interaction_message_message\n            __interaction_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __message_receiveEvent_messageReceive\n            __message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __interaction_fragment_messageReceive\n            __interaction_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __line_coveredBy_messageReceive\n            __line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __interaction_lifeline_line\n            __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object ___package_packagedElement_interaction\n            ___package_packagedElement_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __message_interaction_interaction\n            __message_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __message_receiveEvent_messageReceive\n            __message_receiveEvent_messageReceive.setName (\"receiveEvent\");\n            // assign attribute __message_interaction_interaction\n            __message_interaction_interaction.setName (\"interaction\");\n            // assign attribute __interaction_message_message\n            __interaction_message_message.setName (\"message\");\n            // assign attribute __line_interaction_interaction\n            __line_interaction_interaction.setName (\"interaction\");\n            // assign attribute __interaction_lifeline_line\n            __interaction_lifeline_line.setName (\"lifeline\");\n            // assign attribute __messageReceive_enclosingInteraction_interaction\n            __messageReceive_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n            // assign attribute __interaction_fragment_messageReceive\n            __interaction_fragment_messageReceive.setName (\"fragment\");\n            // assign attribute __messageReceive_message_message\n            __messageReceive_message_message.setName (\"message\");\n            // assign attribute __line_coveredBy_messageReceive\n            __line_coveredBy_messageReceive.setName (\"coveredBy\");\n            // assign attribute __messageReceive_covered_line\n            __messageReceive_covered_line.setName (\"covered\");\n            // assign attribute ___package_packagedElement_interaction\n            ___package_packagedElement_interaction.setName (\"packagedElement\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__line_interaction_interaction,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageReceive_message_message,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,line,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageReceive_enclosingInteraction_interaction,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,messageReceive,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageReceive_covered_line,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,message,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_message_message,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,interaction,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__message_receiveEvent_messageReceive,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_fragment_messageReceive,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__line_coveredBy_messageReceive,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_lifeline_line,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,___package_packagedElement_interaction,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__message_interaction_interaction,\"toBeTranslatedEdges\");\n\n            // create link\n            __interaction_message_message.setTrg( message);\n\n\n            // create link\n            __message_interaction_interaction.setSrc( message);\n\n\n            // create link\n            __message_receiveEvent_messageReceive.setSrc( message);\n\n\n            // create link\n            __messageReceive_message_message.setTrg( message);\n\n\n            // create link\n            __line_interaction_interaction.setTrg( interaction);\n\n\n            // create link\n            __interaction_fragment_messageReceive.setSrc( interaction);\n\n\n            // create link\n            ___package_packagedElement_interaction.setTrg( interaction);\n\n\n            // create link\n            __messageReceive_enclosingInteraction_interaction.setTrg( interaction);\n\n\n            // create link\n            __interaction_lifeline_line.setSrc( interaction);\n\n\n            // create link\n            __interaction_message_message.setSrc( interaction);\n\n\n            // create link\n            __message_interaction_interaction.setTrg( interaction);\n\n\n            // create link\n            __messageReceive_covered_line.setSrc( messageReceive);\n\n\n            // create link\n            __messageReceive_message_message.setSrc( messageReceive);\n\n\n            // create link\n            __message_receiveEvent_messageReceive.setTrg( messageReceive);\n\n\n            // create link\n            __line_coveredBy_messageReceive.setTrg( messageReceive);\n\n\n            // create link\n            __interaction_fragment_messageReceive.setTrg( messageReceive);\n\n\n            // create link\n            __messageReceive_enclosingInteraction_interaction.setSrc( messageReceive);\n\n\n            // create link\n            __interaction_lifeline_line.setTrg( line);\n\n\n            // create link\n            __messageReceive_covered_line.setTrg( line);\n\n\n            // create link\n            __line_coveredBy_messageReceive.setSrc( line);\n\n\n            // create link\n            __line_interaction_interaction.setSrc( line);\n\n\n            // create link\n            ___package_packagedElement_interaction.setSrc( _package);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object _package is really bound\n            JavaSDM.ensure ( _package != null );\n            // check object interaction is really bound\n            JavaSDM.ensure ( interaction != null );\n            // check object line is really bound\n            JavaSDM.ensure ( line != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object message is really bound\n            JavaSDM.ensure ( message != null );\n            // check object messageReceive is really bound\n            JavaSDM.ensure ( messageReceive != null );\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,_package,\"contextNodes\");\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,message,interaction,messageReceive,line,_package);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			ModalSequenceDiagram.Package _package);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      ModalSequenceDiagram.Package _package = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      Message message = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      PackageDeclaration packageDeclaration = null;\n      PackageDeclarationToPackage packageDeclarationToPackage = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      UseCase useCase = null;\n      BasicFlow basicFlow = null;\n      FlowToInteractionFragment basicFlowToInteraction = null;\n      Actor actor = null;\n      ActorToLifeline actorToLine = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __message_interaction_interaction = null;\n      EMoflonEdge __messageReceive_message_message = null;\n      EMoflonEdge basicFlowToInteraction__source__basicFlow = null;\n      EMoflonEdge __line_interaction_interaction = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n      EMoflonEdge packageDeclaration__actors__actor = null;\n      EMoflonEdge actorToLine__source__actor = null;\n      EMoflonEdge actorToLine__target__line = null;\n      EMoflonEdge basicFlowToInteraction__target__interaction = null;\n      EMoflonEdge __messageReceive_enclosingInteraction_interaction = null;\n      EMoflonEdge useCase__flows__basicFlow = null;\n      EMoflonEdge packageDeclaration__useCases__useCase = null;\n      EMoflonEdge __messageReceive_covered_line = null;\n      EMoflonEdge ___package_packagedElement_interaction = null;\n      EMoflonEdge __interaction_fragment_messageReceive = null;\n      EMoflonEdge __interaction_message_message = null;\n      EMoflonEdge __line_coveredBy_messageReceive = null;\n      EMoflonEdge __message_receiveEvent_messageReceive = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"_package\"));\n\n         // ensure correct type and really bound of object _package\n         JavaSDM.ensure ( _TmpObject instanceof ModalSequenceDiagram.Package );\n         _package = (ModalSequenceDiagram.Package) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"interaction\"));\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"line\"));\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"message\"));\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"messageReceive\"));\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclarationToPackage\"));\n\n         // ensure correct type and really bound of object packageDeclarationToPackage\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclarationToPackage );\n         packageDeclarationToPackage = (PackageDeclarationToPackage) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object useCase\n         useCase = UseCaseDSLFactory.eINSTANCE.createUseCase();\n\n         // create object basicFlow\n         basicFlow = UseCaseDSLFactory.eINSTANCE.createBasicFlow();\n\n         // create object basicFlowToInteraction\n         basicFlowToInteraction = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createFlowToInteractionFragment();\n\n         // create object actor\n         actor = UseCaseDSLFactory.eINSTANCE.createActor();\n\n         // create object actorToLine\n         actorToLine = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createActorToLifeline();\n\n         // assign attribute useCase\n         useCase.setPreConditions ((java.lang.String)csp.getValue(\"useCase\",\"preConditions\"));\n         // assign attribute useCase\n         useCase.setName ((java.lang.String)csp.getValue(\"useCase\",\"name\"));\n         // assign attribute actor\n         actor.setType ((UseCaseDSL.ActorType)csp.getValue(\"actor\",\"type\"));\n         // assign attribute actor\n         actor.setName ((java.lang.String)csp.getValue(\"actor\",\"name\"));\n\n         // create link\n         actorToLine.setTarget( line);\n\n\n         // create link\n         basicFlowToInteraction.setSource( basicFlow);\n\n\n         // create link\n         \tuseCase.getFlows().add(basicFlow); // add link\n\n\n         // create link\n         packageDeclaration.getUseCases().add(useCase);\n\n\n         // create link\n         basicFlowToInteraction.setTarget( interaction);\n\n\n         // create link\n         packageDeclaration.getActors().add(actor);\n\n\n         // create link\n         actorToLine.setSource( actor);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object actorToLine is really bound\n         JavaSDM.ensure ( actorToLine != null );\n         // check object basicFlow is really bound\n         JavaSDM.ensure ( basicFlow != null );\n         // check object basicFlowToInteraction is really bound\n         JavaSDM.ensure ( basicFlowToInteraction != null );\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,basicFlow,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,interaction,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,line,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actor,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,basicFlowToInteraction,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCase,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actorToLine,\"createdLinkElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _package is really bound\n         JavaSDM.ensure ( _package != null );\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object actorToLine is really bound\n         JavaSDM.ensure ( actorToLine != null );\n         // check object basicFlow is really bound\n         JavaSDM.ensure ( basicFlow != null );\n         // check object basicFlowToInteraction is really bound\n         JavaSDM.ensure ( basicFlowToInteraction != null );\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object packageDeclarationToPackage is really bound\n         JavaSDM.ensure ( packageDeclarationToPackage != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects actor and _package \n         JavaSDM.ensure ( !actor.equals (_package) );\n\n         // check isomorphic binding between objects actorToLine and _package \n         JavaSDM.ensure ( !actorToLine.equals (_package) );\n\n         // check isomorphic binding between objects basicFlow and _package \n         JavaSDM.ensure ( !basicFlow.equals (_package) );\n\n         // check isomorphic binding between objects basicFlowToInteraction and _package \n         JavaSDM.ensure ( !basicFlowToInteraction.equals (_package) );\n\n         // check isomorphic binding between objects interaction and _package \n         JavaSDM.ensure ( !interaction.equals (_package) );\n\n         // check isomorphic binding between objects line and _package \n         JavaSDM.ensure ( !line.equals (_package) );\n\n         // check isomorphic binding between objects message and _package \n         JavaSDM.ensure ( !message.equals (_package) );\n\n         // check isomorphic binding between objects messageReceive and _package \n         JavaSDM.ensure ( !messageReceive.equals (_package) );\n\n         // check isomorphic binding between objects packageDeclaration and _package \n         JavaSDM.ensure ( !packageDeclaration.equals (_package) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and _package \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (_package) );\n\n         // check isomorphic binding between objects useCase and _package \n         JavaSDM.ensure ( !useCase.equals (_package) );\n\n         // check isomorphic binding between objects actorToLine and actor \n         JavaSDM.ensure ( !actorToLine.equals (actor) );\n\n         // check isomorphic binding between objects basicFlow and actor \n         JavaSDM.ensure ( !basicFlow.equals (actor) );\n\n         // check isomorphic binding between objects basicFlowToInteraction and actor \n         JavaSDM.ensure ( !basicFlowToInteraction.equals (actor) );\n\n         // check isomorphic binding between objects interaction and actor \n         JavaSDM.ensure ( !interaction.equals (actor) );\n\n         // check isomorphic binding between objects line and actor \n         JavaSDM.ensure ( !line.equals (actor) );\n\n         // check isomorphic binding between objects message and actor \n         JavaSDM.ensure ( !message.equals (actor) );\n\n         // check isomorphic binding between objects messageReceive and actor \n         JavaSDM.ensure ( !messageReceive.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclaration and actor \n         JavaSDM.ensure ( !packageDeclaration.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and actor \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (actor) );\n\n         // check isomorphic binding between objects useCase and actor \n         JavaSDM.ensure ( !useCase.equals (actor) );\n\n         // check isomorphic binding between objects basicFlow and actorToLine \n         JavaSDM.ensure ( !basicFlow.equals (actorToLine) );\n\n         // check isomorphic binding between objects basicFlowToInteraction and actorToLine \n         JavaSDM.ensure ( !basicFlowToInteraction.equals (actorToLine) );\n\n         // check isomorphic binding between objects interaction and actorToLine \n         JavaSDM.ensure ( !interaction.equals (actorToLine) );\n\n         // check isomorphic binding between objects line and actorToLine \n         JavaSDM.ensure ( !line.equals (actorToLine) );\n\n         // check isomorphic binding between objects message and actorToLine \n         JavaSDM.ensure ( !message.equals (actorToLine) );\n\n         // check isomorphic binding between objects messageReceive and actorToLine \n         JavaSDM.ensure ( !messageReceive.equals (actorToLine) );\n\n         // check isomorphic binding between objects packageDeclaration and actorToLine \n         JavaSDM.ensure ( !packageDeclaration.equals (actorToLine) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and actorToLine \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (actorToLine) );\n\n         // check isomorphic binding between objects useCase and actorToLine \n         JavaSDM.ensure ( !useCase.equals (actorToLine) );\n\n         // check isomorphic binding between objects basicFlowToInteraction and basicFlow \n         JavaSDM.ensure ( !basicFlowToInteraction.equals (basicFlow) );\n\n         // check isomorphic binding between objects interaction and basicFlow \n         JavaSDM.ensure ( !interaction.equals (basicFlow) );\n\n         // check isomorphic binding between objects line and basicFlow \n         JavaSDM.ensure ( !line.equals (basicFlow) );\n\n         // check isomorphic binding between objects message and basicFlow \n         JavaSDM.ensure ( !message.equals (basicFlow) );\n\n         // check isomorphic binding between objects messageReceive and basicFlow \n         JavaSDM.ensure ( !messageReceive.equals (basicFlow) );\n\n         // check isomorphic binding between objects packageDeclaration and basicFlow \n         JavaSDM.ensure ( !packageDeclaration.equals (basicFlow) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and basicFlow \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (basicFlow) );\n\n         // check isomorphic binding between objects useCase and basicFlow \n         JavaSDM.ensure ( !useCase.equals (basicFlow) );\n\n         // check isomorphic binding between objects interaction and basicFlowToInteraction \n         JavaSDM.ensure ( !interaction.equals (basicFlowToInteraction) );\n\n         // check isomorphic binding between objects line and basicFlowToInteraction \n         JavaSDM.ensure ( !line.equals (basicFlowToInteraction) );\n\n         // check isomorphic binding between objects message and basicFlowToInteraction \n         JavaSDM.ensure ( !message.equals (basicFlowToInteraction) );\n\n         // check isomorphic binding between objects messageReceive and basicFlowToInteraction \n         JavaSDM.ensure ( !messageReceive.equals (basicFlowToInteraction) );\n\n         // check isomorphic binding between objects packageDeclaration and basicFlowToInteraction \n         JavaSDM.ensure ( !packageDeclaration.equals (basicFlowToInteraction) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and basicFlowToInteraction \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (basicFlowToInteraction) );\n\n         // check isomorphic binding between objects useCase and basicFlowToInteraction \n         JavaSDM.ensure ( !useCase.equals (basicFlowToInteraction) );\n\n         // check isomorphic binding between objects line and interaction \n         JavaSDM.ensure ( !line.equals (interaction) );\n\n         // check isomorphic binding between objects message and interaction \n         JavaSDM.ensure ( !message.equals (interaction) );\n\n         // check isomorphic binding between objects messageReceive and interaction \n         JavaSDM.ensure ( !messageReceive.equals (interaction) );\n\n         // check isomorphic binding between objects packageDeclaration and interaction \n         JavaSDM.ensure ( !packageDeclaration.equals (interaction) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and interaction \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (interaction) );\n\n         // check isomorphic binding between objects useCase and interaction \n         JavaSDM.ensure ( !useCase.equals (interaction) );\n\n         // check isomorphic binding between objects message and line \n         JavaSDM.ensure ( !message.equals (line) );\n\n         // check isomorphic binding between objects messageReceive and line \n         JavaSDM.ensure ( !messageReceive.equals (line) );\n\n         // check isomorphic binding between objects packageDeclaration and line \n         JavaSDM.ensure ( !packageDeclaration.equals (line) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and line \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (line) );\n\n         // check isomorphic binding between objects useCase and line \n         JavaSDM.ensure ( !useCase.equals (line) );\n\n         // check isomorphic binding between objects messageReceive and message \n         JavaSDM.ensure ( !messageReceive.equals (message) );\n\n         // check isomorphic binding between objects packageDeclaration and message \n         JavaSDM.ensure ( !packageDeclaration.equals (message) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and message \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (message) );\n\n         // check isomorphic binding between objects useCase and message \n         JavaSDM.ensure ( !useCase.equals (message) );\n\n         // check isomorphic binding between objects packageDeclaration and messageReceive \n         JavaSDM.ensure ( !packageDeclaration.equals (messageReceive) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and messageReceive \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCase and messageReceive \n         JavaSDM.ensure ( !useCase.equals (messageReceive) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and packageDeclaration \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclaration \n         JavaSDM.ensure ( !useCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclarationToPackage \n         JavaSDM.ensure ( !useCase.equals (packageDeclarationToPackage) );\n\n         // create object __message_interaction_interaction\n         __message_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageReceive_message_message\n         __messageReceive_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object basicFlowToInteraction__source__basicFlow\n         basicFlowToInteraction__source__basicFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __line_interaction_interaction\n         __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __interaction_lifeline_line\n         __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object packageDeclaration__actors__actor\n         packageDeclaration__actors__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object actorToLine__source__actor\n         actorToLine__source__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object actorToLine__target__line\n         actorToLine__target__line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object basicFlowToInteraction__target__interaction\n         basicFlowToInteraction__target__interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageReceive_enclosingInteraction_interaction\n         __messageReceive_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object useCase__flows__basicFlow\n         useCase__flows__basicFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object packageDeclaration__useCases__useCase\n         packageDeclaration__useCases__useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageReceive_covered_line\n         __messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object ___package_packagedElement_interaction\n         ___package_packagedElement_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __interaction_fragment_messageReceive\n         __interaction_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __interaction_message_message\n         __interaction_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __line_coveredBy_messageReceive\n         __line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __message_receiveEvent_messageReceive\n         __message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"UseCasePrecondToFoundMessageRule\");\n         // assign attribute __message_receiveEvent_messageReceive\n         __message_receiveEvent_messageReceive.setName (\"receiveEvent\");\n         // assign attribute __message_interaction_interaction\n         __message_interaction_interaction.setName (\"interaction\");\n         // assign attribute __interaction_message_message\n         __interaction_message_message.setName (\"message\");\n         // assign attribute __line_interaction_interaction\n         __line_interaction_interaction.setName (\"interaction\");\n         // assign attribute __interaction_lifeline_line\n         __interaction_lifeline_line.setName (\"lifeline\");\n         // assign attribute __messageReceive_enclosingInteraction_interaction\n         __messageReceive_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n         // assign attribute __interaction_fragment_messageReceive\n         __interaction_fragment_messageReceive.setName (\"fragment\");\n         // assign attribute __messageReceive_message_message\n         __messageReceive_message_message.setName (\"message\");\n         // assign attribute packageDeclaration__useCases__useCase\n         packageDeclaration__useCases__useCase.setName (\"useCases\");\n         // assign attribute packageDeclaration__actors__actor\n         packageDeclaration__actors__actor.setName (\"actors\");\n         // assign attribute __line_coveredBy_messageReceive\n         __line_coveredBy_messageReceive.setName (\"coveredBy\");\n         // assign attribute __messageReceive_covered_line\n         __messageReceive_covered_line.setName (\"covered\");\n         // assign attribute actorToLine__source__actor\n         actorToLine__source__actor.setName (\"source\");\n         // assign attribute actorToLine__target__line\n         actorToLine__target__line.setName (\"target\");\n         // assign attribute ___package_packagedElement_interaction\n         ___package_packagedElement_interaction.setName (\"packagedElement\");\n         // assign attribute useCase__flows__basicFlow\n         useCase__flows__basicFlow.setName (\"flows\");\n         // assign attribute basicFlowToInteraction__source__basicFlow\n         basicFlowToInteraction__source__basicFlow.setName (\"source\");\n         // assign attribute basicFlowToInteraction__target__interaction\n         basicFlowToInteraction__target__interaction.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__message_interaction_interaction,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageReceive_message_message,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,basicFlowToInteraction__source__basicFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__line_interaction_interaction,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__interaction_lifeline_line,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,packageDeclaration__actors__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actorToLine__source__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actorToLine__target__line,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,basicFlowToInteraction__target__interaction,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageReceive_enclosingInteraction_interaction,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCase__flows__basicFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,packageDeclaration__useCases__useCase,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageReceive_covered_line,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,___package_packagedElement_interaction,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__interaction_fragment_messageReceive,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__interaction_message_message,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__line_coveredBy_messageReceive,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__message_receiveEvent_messageReceive,\"translatedEdges\");\n\n         // create link\n         packageDeclaration__useCases__useCase.setTrg( useCase);\n\n\n         // create link\n         useCase__flows__basicFlow.setSrc( useCase);\n\n\n         // create link\n         __interaction_message_message.setTrg( message);\n\n\n         // create link\n         __message_receiveEvent_messageReceive.setSrc( message);\n\n\n         // create link\n         __message_interaction_interaction.setSrc( message);\n\n\n         // create link\n         __messageReceive_message_message.setTrg( message);\n\n\n         // create link\n         __line_interaction_interaction.setTrg( interaction);\n\n\n         // create link\n         __interaction_message_message.setSrc( interaction);\n\n\n         // create link\n         ___package_packagedElement_interaction.setTrg( interaction);\n\n\n         // create link\n         __messageReceive_enclosingInteraction_interaction.setTrg( interaction);\n\n\n         // create link\n         basicFlowToInteraction__target__interaction.setTrg( interaction);\n\n\n         // create link\n         __message_interaction_interaction.setTrg( interaction);\n\n\n         // create link\n         __interaction_lifeline_line.setSrc( interaction);\n\n\n         // create link\n         __interaction_fragment_messageReceive.setSrc( interaction);\n\n\n         // create link\n         __messageReceive_covered_line.setSrc( messageReceive);\n\n\n         // create link\n         __messageReceive_message_message.setSrc( messageReceive);\n\n\n         // create link\n         __messageReceive_enclosingInteraction_interaction.setSrc( messageReceive);\n\n\n         // create link\n         __interaction_fragment_messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         __message_receiveEvent_messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         __line_coveredBy_messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         actorToLine__source__actor.setTrg( actor);\n\n\n         // create link\n         packageDeclaration__actors__actor.setTrg( actor);\n\n\n         // create link\n         packageDeclaration__useCases__useCase.setSrc( packageDeclaration);\n\n\n         // create link\n         packageDeclaration__actors__actor.setSrc( packageDeclaration);\n\n\n         // create link\n         __line_coveredBy_messageReceive.setSrc( line);\n\n\n         // create link\n         __interaction_lifeline_line.setTrg( line);\n\n\n         // create link\n         actorToLine__target__line.setTrg( line);\n\n\n         // create link\n         __line_interaction_interaction.setSrc( line);\n\n\n         // create link\n         __messageReceive_covered_line.setTrg( line);\n\n\n         // create link\n         actorToLine__target__line.setSrc( actorToLine);\n\n\n         // create link\n         actorToLine__source__actor.setSrc( actorToLine);\n\n\n         // create link\n         ___package_packagedElement_interaction.setSrc( _package);\n\n\n         // create link\n         basicFlowToInteraction__source__basicFlow.setTrg( basicFlow);\n\n\n         // create link\n         useCase__flows__basicFlow.setTrg( basicFlow);\n\n\n         // create link\n         basicFlowToInteraction__target__interaction.setSrc( basicFlowToInteraction);\n\n\n         // create link\n         basicFlowToInteraction__source__basicFlow.setSrc( basicFlowToInteraction);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,useCase,message,interaction,messageReceive,actor,packageDeclaration,line,actorToLine,_package,packageDeclarationToPackage,basicFlow,basicFlowToInteraction);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      ModalSequenceDiagram.Package _package = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      Message message = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      EMoflonEdge __message_receiveEvent_messageReceive = null;\n      EMoflonEdge __interaction_message_message = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __message_interaction_interaction = null;\n      EMoflonEdge __messageReceive_message_message = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n      EMoflonEdge ___package_packagedElement_interaction = null;\n      EMoflonEdge __line_interaction_interaction = null;\n      EMoflonEdge __interaction_fragment_messageReceive = null;\n      EMoflonEdge __messageReceive_enclosingInteraction_interaction = null;\n      EMoflonEdge __messageReceive_covered_line = null;\n      EMoflonEdge __line_coveredBy_messageReceive = null;\n      EMoflonEdge __packageDeclarationToPackage_source_packageDeclaration = null;\n      EMoflonEdge __packageDeclarationToPackage_target__package = null;\n      CSP csp = null;\n      PackageDeclaration packageDeclaration = null;\n      Iterator fujaba__Iter_packageToPackageDeclarationToPackage = null;\n      PackageDeclarationToPackage packageDeclarationToPackage = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"UseCasePrecondToFoundMessageRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"_package\"));\n\n         // ensure correct type and really bound of object _package\n         JavaSDM.ensure ( _TmpObject instanceof ModalSequenceDiagram.Package );\n         _package = (ModalSequenceDiagram.Package) _TmpObject;\n         _TmpObject = (match.getObject(\"interaction\"));\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n         _TmpObject = (match.getObject(\"line\"));\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n         _TmpObject = (match.getObject(\"message\"));\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n         _TmpObject = (match.getObject(\"messageReceive\"));\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link target from _package to packageDeclarationToPackage\n         fujaba__Success = false;\n\n         fujaba__Iter_packageToPackageDeclarationToPackage = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(_package,PackageDeclarationToPackage.class,\"target\")).iterator ();\n\n         while ( fujaba__Iter_packageToPackageDeclarationToPackage.hasNext () )\n         {\n            try\n            {\n               packageDeclarationToPackage = (PackageDeclarationToPackage) fujaba__Iter_packageToPackageDeclarationToPackage.next ();\n\n               // check object packageDeclarationToPackage is really bound\n               JavaSDM.ensure ( packageDeclarationToPackage != null );\n               // bind object\n               packageDeclaration = packageDeclarationToPackage.getSource ();\n\n               // check object packageDeclaration is really bound\n               JavaSDM.ensure ( packageDeclaration != null );\n\n               // story node \'find context\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check object _package is really bound\n                  JavaSDM.ensure ( _package != null );\n                  // check object interaction is really bound\n                  JavaSDM.ensure ( interaction != null );\n                  // check object line is really bound\n                  JavaSDM.ensure ( line != null );\n                  // check object message is really bound\n                  JavaSDM.ensure ( message != null );\n                  // check object messageReceive is really bound\n                  JavaSDM.ensure ( messageReceive != null );\n                  // check object packageDeclaration is really bound\n                  JavaSDM.ensure ( packageDeclaration != null );\n                  // check object packageDeclarationToPackage is really bound\n                  JavaSDM.ensure ( packageDeclarationToPackage != null );\n                  // check link fragment from messageReceive to interaction\n                  JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                  ));\n\n                  // check link lifeline from line to interaction\n                  JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                  ));\n\n                  // check link message from message to interaction\n                  JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                  ));\n\n                  // check link message from messageReceive to message\n                  JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                  ));\n\n                  // check link receiveEvent from message to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                  ));\n\n                  // check link packagedElement from interaction to _package\n                  JavaSDM.ensure (_package.equals (interaction.eContainer()\n                  ));\n\n                  // check link source from packageDeclarationToPackage to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (packageDeclarationToPackage.getSource ()\n                  ));\n\n                  // check link target from packageDeclarationToPackage to _package\n                  JavaSDM.ensure (_package.equals (packageDeclarationToPackage.getTarget ()\n                  ));\n\n                  // check link covered from line to messageReceive\n                  JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                  // create object __message_receiveEvent_messageReceive\n                  __message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __interaction_message_message\n                  __interaction_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object isApplicableMatch\n                  isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                  // create object __message_interaction_interaction\n                  __message_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __messageReceive_message_message\n                  __messageReceive_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __interaction_lifeline_line\n                  __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object ___package_packagedElement_interaction\n                  ___package_packagedElement_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __line_interaction_interaction\n                  __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __interaction_fragment_messageReceive\n                  __interaction_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __messageReceive_enclosingInteraction_interaction\n                  __messageReceive_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __messageReceive_covered_line\n                  __messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __line_coveredBy_messageReceive\n                  __line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __packageDeclarationToPackage_source_packageDeclaration\n                  __packageDeclarationToPackage_source_packageDeclaration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __packageDeclarationToPackage_target__package\n                  __packageDeclarationToPackage_target__package = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // assign attribute __message_receiveEvent_messageReceive\n                  __message_receiveEvent_messageReceive.setName (\"receiveEvent\");\n                  // assign attribute __message_interaction_interaction\n                  __message_interaction_interaction.setName (\"interaction\");\n                  // assign attribute __interaction_message_message\n                  __interaction_message_message.setName (\"message\");\n                  // assign attribute __line_interaction_interaction\n                  __line_interaction_interaction.setName (\"interaction\");\n                  // assign attribute __interaction_lifeline_line\n                  __interaction_lifeline_line.setName (\"lifeline\");\n                  // assign attribute __messageReceive_enclosingInteraction_interaction\n                  __messageReceive_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n                  // assign attribute __interaction_fragment_messageReceive\n                  __interaction_fragment_messageReceive.setName (\"fragment\");\n                  // assign attribute __messageReceive_message_message\n                  __messageReceive_message_message.setName (\"message\");\n                  // assign attribute __line_coveredBy_messageReceive\n                  __line_coveredBy_messageReceive.setName (\"coveredBy\");\n                  // assign attribute __messageReceive_covered_line\n                  __messageReceive_covered_line.setName (\"covered\");\n                  // assign attribute ___package_packagedElement_interaction\n                  ___package_packagedElement_interaction.setName (\"packagedElement\");\n                  // assign attribute __packageDeclarationToPackage_source_packageDeclaration\n                  __packageDeclarationToPackage_source_packageDeclaration.setName (\"source\");\n                  // assign attribute __packageDeclarationToPackage_target__package\n                  __packageDeclarationToPackage_target__package.setName (\"target\");\n\n                  // create link\n                  __message_receiveEvent_messageReceive.setSrc( message);\n\n\n                  // create link\n                  __interaction_message_message.setTrg( message);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(message);\n\n\n                  // create link\n                  __message_interaction_interaction.setSrc( message);\n\n\n                  // create link\n                  __messageReceive_message_message.setTrg( message);\n\n\n                  // create link\n                  __interaction_lifeline_line.setSrc( interaction);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(interaction);\n\n\n                  // create link\n                  __interaction_message_message.setSrc( interaction);\n\n\n                  // create link\n                  ___package_packagedElement_interaction.setTrg( interaction);\n\n\n                  // create link\n                  __line_interaction_interaction.setTrg( interaction);\n\n\n                  // create link\n                  __interaction_fragment_messageReceive.setSrc( interaction);\n\n\n                  // create link\n                  __messageReceive_enclosingInteraction_interaction.setTrg( interaction);\n\n\n                  // create link\n                  __message_interaction_interaction.setTrg( interaction);\n\n\n                  // create link\n                  __messageReceive_message_message.setSrc( messageReceive);\n\n\n                  // create link\n                  __messageReceive_enclosingInteraction_interaction.setSrc( messageReceive);\n\n\n                  // create link\n                  __interaction_fragment_messageReceive.setTrg( messageReceive);\n\n\n                  // create link\n                  __message_receiveEvent_messageReceive.setTrg( messageReceive);\n\n\n                  // create link\n                  __messageReceive_covered_line.setSrc( messageReceive);\n\n\n                  // create link\n                  __line_coveredBy_messageReceive.setTrg( messageReceive);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(messageReceive);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                  // create link\n                  __packageDeclarationToPackage_source_packageDeclaration.setTrg( packageDeclaration);\n\n\n                  // create link\n                  __interaction_lifeline_line.setTrg( line);\n\n\n                  // create link\n                  __line_interaction_interaction.setSrc( line);\n\n\n                  // create link\n                  __messageReceive_covered_line.setTrg( line);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(line);\n\n\n                  // create link\n                  __line_coveredBy_messageReceive.setSrc( line);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(_package);\n\n\n                  // create link\n                  ___package_packagedElement_interaction.setSrc( _package);\n\n\n                  // create link\n                  __packageDeclarationToPackage_target__package.setTrg( _package);\n\n\n                  // create link\n                  __packageDeclarationToPackage_source_packageDeclaration.setSrc( packageDeclarationToPackage);\n\n\n                  // create link\n                  __packageDeclarationToPackage_target__package.setSrc( packageDeclarationToPackage);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(packageDeclarationToPackage);\n\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclarationToPackage_target__package,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_coveredBy_messageReceive,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__message_receiveEvent_messageReceive,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_interaction_interaction,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageReceive_covered_line,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_lifeline_line,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_message_message,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclarationToPackage_source_packageDeclaration,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_fragment_messageReceive,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageReceive_message_message,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,___package_packagedElement_interaction,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__message_interaction_interaction,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageReceive_enclosingInteraction_interaction,\"allContextElements\");\n                  // story node \'solve CSP\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,message,interaction,messageReceive,packageDeclaration,line,_package,packageDeclarationToPackage));\n\n                     // ensure correct type and really bound of object csp\n                     JavaSDM.ensure ( _TmpObject instanceof CSP );\n                     csp = (CSP) _TmpObject;\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  // statement node \'check CSP\'\n                  fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                  if (fujaba__Success)\n                  {\n                     // story node \'add match to rule result\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object isApplicableMatch is really bound\n                        JavaSDM.ensure ( isApplicableMatch != null );\n                        // check object ruleresult is really bound\n                        JavaSDM.ensure ( ruleresult != null );\n                        // assign attribute isApplicableMatch\n                        isApplicableMatch.setRuleName (\"UseCasePrecondToFoundMessageRule\");\n                        // assign attribute ruleresult\n                        ruleresult.setSuccess (true);\n\n                        // create link\n                        ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"message\", message);\nmatch.registerObject(\"interaction\", interaction);\nmatch.registerObject(\"messageReceive\", messageReceive);\nmatch.registerObject(\"line\", line);\nmatch.registerObject(\"_package\", _package);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			ModalSequenceDiagram.Package _package);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"found\");\r\nliteral0.setType(\"String\");\r\nVariable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal1\", true, csp);\r\nliteral1.setValue(\"asynchSignal\");\r\nliteral1.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(\"message.messageKind\", true, csp);\r\nvar_message_messageKind.setValue(message.getMessageKind());\r\nvar_message_messageKind.setType(\"EObject\");\r\nVariable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(\"message.messageSort\", true, csp);\r\nvar_message_messageSort.setValue(message.getMessageSort());\r\nvar_message_messageSort.setType(\"EObject\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqMessageKind eqMessageKind = new EqMessageKind();EqMessageSort eqMessageSort = new EqMessageSort();\r\n\r\ncsp.getConstraints().add(eqMessageKind);\r\ncsp.getConstraints().add(eqMessageSort);\r\n\r\n// Solve CSP\r\neqMessageKind.setRuleName(\"\");\r\neqMessageKind.solve(var_message_messageKind,literal0);\r\neqMessageSort.setRuleName(\"\");\r\neqMessageSort.solve(var_message_messageSort,literal1);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			ModalSequenceDiagram.Package _package);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"system\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(\"message.name\", true, csp);\r\nvar_message_name.setValue(message.getName());\r\nvar_message_name.setType(\"\");\r\nVariable var_line_name = CSPFactoryHelper.eINSTANCE.createVariable(\"line.name\", true, csp);\r\nvar_line_name.setValue(line.getName());\r\nvar_line_name.setType(\"\");\r\nVariable var_interaction_name = CSPFactoryHelper.eINSTANCE.createVariable(\"interaction.name\", true, csp);\r\nvar_interaction_name.setValue(interaction.getName());\r\nvar_interaction_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_useCase_preConditions = CSPFactoryHelper.eINSTANCE.createVariable(\"useCase.preConditions\", csp);\r\nvar_useCase_preConditions.setType(\"\");\r\nVariable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.type\", csp);\r\nvar_actor_type.setType(\"EObject\");\r\nVariable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.name\", csp);\r\nvar_actor_name.setType(\"\");\r\nVariable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(\"useCase.name\", csp);\r\nvar_useCase_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();EqActorType eqActorType = new EqActorType();Eq eq_0 = new Eq();Eq eq_1 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eqActorType);\r\ncsp.getConstraints().add(eq_0);\r\ncsp.getConstraints().add(eq_1);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_useCase_preConditions,var_message_name);\r\neqActorType.setRuleName(\"\");\r\neqActorType.solve(var_actor_type,literal0);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_actor_name,var_line_name);\r\neq_1.setRuleName(\"\");\r\neq_1.solve(var_useCase_name,var_interaction_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"message\",message);\r\nisApplicableMatch.registerObject(\"interaction\",interaction);\r\nisApplicableMatch.registerObject(\"messageReceive\",messageReceive);\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"line\",line);\r\nisApplicableMatch.registerObject(\"_package\",_package);\r\nisApplicableMatch.registerObject(\"packageDeclarationToPackage\",packageDeclarationToPackage);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			Message message, Interaction interaction,
			MessageOccurrenceSpecification messageReceive,
			PackageDeclaration packageDeclaration, Lifeline line,
			ModalSequenceDiagram.Package _package,
			PackageDeclarationToPackage packageDeclarationToPackage);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"message\", message);\nruleresult.registerObject(\"interaction\", interaction);\nruleresult.registerObject(\"messageReceive\", messageReceive);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"line\", line);\nruleresult.registerObject(\"actorToLine\", actorToLine);\nruleresult.registerObject(\"_package\", _package);\nruleresult.registerObject(\"packageDeclarationToPackage\", packageDeclarationToPackage);\nruleresult.registerObject(\"basicFlow\", basicFlow);\nruleresult.registerObject(\"basicFlowToInteraction\", basicFlowToInteraction);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject useCase,
			EObject message, EObject interaction, EObject messageReceive,
			EObject actor, EObject packageDeclaration, EObject line,
			EObject actorToLine, EObject _package,
			EObject packageDeclarationToPackage, EObject basicFlow,
			EObject basicFlowToInteraction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"message\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessage()) && match.getObject(\"interaction\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getInteraction()) && match.getObject(\"messageReceive\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification()) && match.getObject(\"line\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getLifeline());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_interaction_enclosingInteraction_750514 = null;\n      MessageEnd __DEC_message_sendEvent_217671 = null;\n      ModalSequenceDiagram.Package __DEC_interaction_packagedElement_673638 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_606034 = null;\n      MessageEnd __DEC_message_message_606034 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_252671 = null;\n      Message __DEC_messageReceive_receiveEvent_252671 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_745937 = null;\n      Message __DEC_messageReceive_sendEvent_745937 = null;\n      Match match = null;\n      Iterator fujaba__IterMessageReceiveToLine = null;\n      Lifeline line = null;\n      ModalSequenceDiagram.Package _package = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Interaction interaction = null;\n      Message message = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_receiveEvent is really bound\n         JavaSDM.ensure ( _edge_receiveEvent != null );\n         // bind object\n         _TmpObject = _edge_receiveEvent.getSrc ();\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n\n         // bind object\n         interaction = message.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check link fragment from messageReceive to interaction\n         JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n         ));\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // bind object\n         _package = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n         // check object _package is really bound\n         JavaSDM.ensure ( _package != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(_package.getPackagedElement().contains(interaction));\n\n         // check link trg from _edge_receiveEvent to messageReceive\n         JavaSDM.ensure (messageReceive.equals (_edge_receiveEvent.getTrg ()\n         ));\n\n         // iterate to-many link covered from messageReceive to line\n         fujaba__Success = false;\n\n         fujaba__IterMessageReceiveToLine = new ArrayList(messageReceive.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageReceiveToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterMessageReceiveToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // check link lifeline from line to interaction\n               JavaSDM.ensure (interaction.equals (line.getInteraction ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // negative check for link fragment from interaction\n                  JavaSDM.ensure (interaction.getEnclosingOperand () == null);\n                  // negative check for link fragment from messageReceive\n                  JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_interaction_enclosingInteraction_750514 = interaction.getEnclosingInteraction ();\n\n                     // check object __DEC_interaction_enclosingInteraction_750514 is really bound\n                     JavaSDM.ensure ( __DEC_interaction_enclosingInteraction_750514 != null );\n\n                     // check isomorphic binding between objects __DEC_interaction_enclosingInteraction_750514 and interaction \n                     JavaSDM.ensure ( !__DEC_interaction_enclosingInteraction_750514.equals (interaction) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_message_sendEvent_217671 = message.getSendEvent ();\n\n                     // check object __DEC_message_sendEvent_217671 is really bound\n                     JavaSDM.ensure ( __DEC_message_sendEvent_217671 != null );\n\n                     // check isomorphic binding between objects __DEC_message_sendEvent_217671 and messageReceive \n                     JavaSDM.ensure ( !__DEC_message_sendEvent_217671.equals (messageReceive) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_interaction_packagedElement_673638 = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n                     // check object __DEC_interaction_packagedElement_673638 is really bound\n                     JavaSDM.ensure ( __DEC_interaction_packagedElement_673638 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_interaction_packagedElement_673638.getPackagedElement().contains(interaction));\n\n                     // check isomorphic binding between objects __DEC_interaction_packagedElement_673638 and _package \n                     JavaSDM.ensure ( !__DEC_interaction_packagedElement_673638.equals (_package) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link message from message to __DEC_message_message_606034\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageTo__DEC_message_message_606034 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_606034.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_message_message_606034 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_606034.next ();\n\n                           // check object __DEC_message_message_606034 is really bound\n                           JavaSDM.ensure ( __DEC_message_message_606034 != null );\n                           // check isomorphic binding between objects __DEC_message_message_606034 and messageReceive \n                           JavaSDM.ensure ( !__DEC_message_message_606034.equals (messageReceive) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_252671\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_252671 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_252671.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_receiveEvent_252671 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_252671.next ();\n\n                           // check object __DEC_messageReceive_receiveEvent_252671 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_252671 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_252671 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_252671.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_745937\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_745937 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_745937.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_sendEvent_745937 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_745937.next ();\n\n                           // check object __DEC_messageReceive_sendEvent_745937 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_sendEvent_745937 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_sendEvent_745937 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_745937.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check link fragment from interaction to interaction\n                  JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                  )));\n\n                  // check link fragment from interaction to interaction\n                  JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                  )));\n\n                  // check object _edge_receiveEvent is really bound\n                  JavaSDM.ensure ( _edge_receiveEvent != null );\n                  // check object _package is really bound\n                  JavaSDM.ensure ( _package != null );\n                  // check object interaction is really bound\n                  JavaSDM.ensure ( interaction != null );\n                  // check object line is really bound\n                  JavaSDM.ensure ( line != null );\n                  // check object message is really bound\n                  JavaSDM.ensure ( message != null );\n                  // check object messageReceive is really bound\n                  JavaSDM.ensure ( messageReceive != null );\n                  // check link fragment from messageReceive to interaction\n                  JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                  ));\n\n                  // check link lifeline from line to interaction\n                  JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                  ));\n\n                  // check link message from message to interaction\n                  JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                  ));\n\n                  // check link message from messageReceive to message\n                  JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                  ));\n\n                  // check link receiveEvent from message to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                  ));\n\n                  // check link sendEvent from message to messageReceive\n                  JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                  )));\n\n                  // check link packagedElement from interaction to _package\n                  JavaSDM.ensure (_package.equals (interaction.eContainer()\n                  ));\n\n                  // check link src from _edge_receiveEvent to message\n                  JavaSDM.ensure (message.equals (_edge_receiveEvent.getSrc ()\n                  ));\n\n                  // check link trg from _edge_receiveEvent to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (_edge_receiveEvent.getTrg ()\n                  ));\n\n                  // check link covered from line to messageReceive\n                  JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,message,interaction,messageReceive,line,_package);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_79(
			EMoflonEdge _edge_receiveEvent);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_interaction_enclosingInteraction_558669 = null;\n      MessageEnd __DEC_message_sendEvent_956190 = null;\n      ModalSequenceDiagram.Package __DEC_interaction_packagedElement_166098 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_718819 = null;\n      MessageEnd __DEC_message_message_718819 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_368480 = null;\n      Message __DEC_messageReceive_receiveEvent_368480 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_827718 = null;\n      Message __DEC_messageReceive_sendEvent_827718 = null;\n      Match match = null;\n      Iterator fujaba__IterMessageReceiveToLine = null;\n      Lifeline line = null;\n      ModalSequenceDiagram.Package _package = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Interaction interaction = null;\n      Message message = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_interaction is really bound\n         JavaSDM.ensure ( _edge_interaction != null );\n         // bind object\n         _TmpObject = _edge_interaction.getSrc ();\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n\n         // bind object\n         interaction = message.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check link fragment from messageReceive to interaction\n         JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n         ));\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // bind object\n         _package = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n         // check object _package is really bound\n         JavaSDM.ensure ( _package != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(_package.getPackagedElement().contains(interaction));\n\n         // check link trg from _edge_interaction to interaction\n         JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n         ));\n\n         // iterate to-many link covered from messageReceive to line\n         fujaba__Success = false;\n\n         fujaba__IterMessageReceiveToLine = new ArrayList(messageReceive.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageReceiveToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterMessageReceiveToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // check link lifeline from line to interaction\n               JavaSDM.ensure (interaction.equals (line.getInteraction ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // negative check for link fragment from interaction\n                  JavaSDM.ensure (interaction.getEnclosingOperand () == null);\n                  // negative check for link fragment from messageReceive\n                  JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_interaction_enclosingInteraction_558669 = interaction.getEnclosingInteraction ();\n\n                     // check object __DEC_interaction_enclosingInteraction_558669 is really bound\n                     JavaSDM.ensure ( __DEC_interaction_enclosingInteraction_558669 != null );\n\n                     // check isomorphic binding between objects __DEC_interaction_enclosingInteraction_558669 and interaction \n                     JavaSDM.ensure ( !__DEC_interaction_enclosingInteraction_558669.equals (interaction) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_message_sendEvent_956190 = message.getSendEvent ();\n\n                     // check object __DEC_message_sendEvent_956190 is really bound\n                     JavaSDM.ensure ( __DEC_message_sendEvent_956190 != null );\n\n                     // check isomorphic binding between objects __DEC_message_sendEvent_956190 and messageReceive \n                     JavaSDM.ensure ( !__DEC_message_sendEvent_956190.equals (messageReceive) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_interaction_packagedElement_166098 = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n                     // check object __DEC_interaction_packagedElement_166098 is really bound\n                     JavaSDM.ensure ( __DEC_interaction_packagedElement_166098 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_interaction_packagedElement_166098.getPackagedElement().contains(interaction));\n\n                     // check isomorphic binding between objects __DEC_interaction_packagedElement_166098 and _package \n                     JavaSDM.ensure ( !__DEC_interaction_packagedElement_166098.equals (_package) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link message from message to __DEC_message_message_718819\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageTo__DEC_message_message_718819 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_718819.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_message_message_718819 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_718819.next ();\n\n                           // check object __DEC_message_message_718819 is really bound\n                           JavaSDM.ensure ( __DEC_message_message_718819 != null );\n                           // check isomorphic binding between objects __DEC_message_message_718819 and messageReceive \n                           JavaSDM.ensure ( !__DEC_message_message_718819.equals (messageReceive) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_368480\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_368480 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_368480.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_receiveEvent_368480 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_368480.next ();\n\n                           // check object __DEC_messageReceive_receiveEvent_368480 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_368480 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_368480 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_368480.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_827718\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_827718 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_827718.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_sendEvent_827718 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_827718.next ();\n\n                           // check object __DEC_messageReceive_sendEvent_827718 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_sendEvent_827718 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_sendEvent_827718 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_827718.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check link fragment from interaction to interaction\n                  JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                  )));\n\n                  // check link fragment from interaction to interaction\n                  JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                  )));\n\n                  // check object _edge_interaction is really bound\n                  JavaSDM.ensure ( _edge_interaction != null );\n                  // check object _package is really bound\n                  JavaSDM.ensure ( _package != null );\n                  // check object interaction is really bound\n                  JavaSDM.ensure ( interaction != null );\n                  // check object line is really bound\n                  JavaSDM.ensure ( line != null );\n                  // check object message is really bound\n                  JavaSDM.ensure ( message != null );\n                  // check object messageReceive is really bound\n                  JavaSDM.ensure ( messageReceive != null );\n                  // check link fragment from messageReceive to interaction\n                  JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                  ));\n\n                  // check link lifeline from line to interaction\n                  JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                  ));\n\n                  // check link message from message to interaction\n                  JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                  ));\n\n                  // check link message from messageReceive to message\n                  JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                  ));\n\n                  // check link receiveEvent from message to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                  ));\n\n                  // check link sendEvent from message to messageReceive\n                  JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                  )));\n\n                  // check link packagedElement from interaction to _package\n                  JavaSDM.ensure (_package.equals (interaction.eContainer()\n                  ));\n\n                  // check link src from _edge_interaction to message\n                  JavaSDM.ensure (message.equals (_edge_interaction.getSrc ()\n                  ));\n\n                  // check link trg from _edge_interaction to interaction\n                  JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n                  ));\n\n                  // check link covered from line to messageReceive\n                  JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,message,interaction,messageReceive,line,_package);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_80(
			EMoflonEdge _edge_interaction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_interaction_enclosingInteraction_701342 = null;\n      MessageEnd __DEC_message_sendEvent_376818 = null;\n      ModalSequenceDiagram.Package __DEC_interaction_packagedElement_911433 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_557998 = null;\n      MessageEnd __DEC_message_message_557998 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_999653 = null;\n      Message __DEC_messageReceive_receiveEvent_999653 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_25651 = null;\n      Message __DEC_messageReceive_sendEvent_25651 = null;\n      Match match = null;\n      Iterator fujaba__IterMessageTo_edge_interaction = null;\n      EMoflonEdge _edge_interaction = null;\n      Iterator fujaba__IterMessageReceiveToLine = null;\n      Lifeline line = null;\n      ModalSequenceDiagram.Package _package = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Interaction interaction = null;\n      Message message = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_message is really bound\n         JavaSDM.ensure ( _edge_message != null );\n         // bind object\n         _TmpObject = _edge_message.getTrg ();\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n\n         // bind object\n         interaction = message.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check link fragment from messageReceive to interaction\n         JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n         ));\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // bind object\n         _package = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n         // check object _package is really bound\n         JavaSDM.ensure ( _package != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(_package.getPackagedElement().contains(interaction));\n\n         // check link src from _edge_message to interaction\n         JavaSDM.ensure (interaction.equals (_edge_message.getSrc ()\n         ));\n\n         // iterate to-many link covered from messageReceive to line\n         fujaba__Success = false;\n\n         fujaba__IterMessageReceiveToLine = new ArrayList(messageReceive.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageReceiveToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterMessageReceiveToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // check link lifeline from line to interaction\n               JavaSDM.ensure (interaction.equals (line.getInteraction ()\n               ));\n\n               // iterate to-many link src from message to _edge_interaction\n               fujaba__Success = false;\n\n               fujaba__IterMessageTo_edge_interaction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,EMoflonEdge.class,\"src\")).iterator ();\n\n               while ( fujaba__IterMessageTo_edge_interaction.hasNext () )\n               {\n                  try\n                  {\n                     _edge_interaction = (EMoflonEdge) fujaba__IterMessageTo_edge_interaction.next ();\n\n                     // check object _edge_interaction is really bound\n                     JavaSDM.ensure ( _edge_interaction != null );\n                     // check isomorphic binding between objects _edge_message and _edge_interaction \n                     JavaSDM.ensure ( !_edge_message.equals (_edge_interaction) );\n\n                     // check link trg from _edge_interaction to interaction\n                     JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from interaction\n                        JavaSDM.ensure (interaction.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_interaction_enclosingInteraction_701342 = interaction.getEnclosingInteraction ();\n\n                           // check object __DEC_interaction_enclosingInteraction_701342 is really bound\n                           JavaSDM.ensure ( __DEC_interaction_enclosingInteraction_701342 != null );\n\n                           // check isomorphic binding between objects __DEC_interaction_enclosingInteraction_701342 and interaction \n                           JavaSDM.ensure ( !__DEC_interaction_enclosingInteraction_701342.equals (interaction) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_message_sendEvent_376818 = message.getSendEvent ();\n\n                           // check object __DEC_message_sendEvent_376818 is really bound\n                           JavaSDM.ensure ( __DEC_message_sendEvent_376818 != null );\n\n                           // check isomorphic binding between objects __DEC_message_sendEvent_376818 and messageReceive \n                           JavaSDM.ensure ( !__DEC_message_sendEvent_376818.equals (messageReceive) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_interaction_packagedElement_911433 = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n                           // check object __DEC_interaction_packagedElement_911433 is really bound\n                           JavaSDM.ensure ( __DEC_interaction_packagedElement_911433 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_interaction_packagedElement_911433.getPackagedElement().contains(interaction));\n\n                           // check isomorphic binding between objects __DEC_interaction_packagedElement_911433 and _package \n                           JavaSDM.ensure ( !__DEC_interaction_packagedElement_911433.equals (_package) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_557998\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_557998 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_557998.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_557998 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_557998.next ();\n\n                                 // check object __DEC_message_message_557998 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_557998 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_557998 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_557998.equals (messageReceive) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_999653\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_999653 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_999653.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_999653 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_999653.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_999653 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_999653 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_999653 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_999653.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_25651\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_25651 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_25651.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_25651 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_25651.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_25651 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_25651 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_25651 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_25651.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check link fragment from interaction to interaction\n                        JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                        )));\n\n                        // check link fragment from interaction to interaction\n                        JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                        )));\n\n                        // check object _edge_interaction is really bound\n                        JavaSDM.ensure ( _edge_interaction != null );\n                        // check object _edge_message is really bound\n                        JavaSDM.ensure ( _edge_message != null );\n                        // check object _package is really bound\n                        JavaSDM.ensure ( _package != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check isomorphic binding between objects _edge_message and _edge_interaction \n                        JavaSDM.ensure ( !_edge_message.equals (_edge_interaction) );\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link packagedElement from interaction to _package\n                        JavaSDM.ensure (_package.equals (interaction.eContainer()\n                        ));\n\n                        // check link src from _edge_interaction to message\n                        JavaSDM.ensure (message.equals (_edge_interaction.getSrc ()\n                        ));\n\n                        // check link src from _edge_message to interaction\n                        JavaSDM.ensure (interaction.equals (_edge_message.getSrc ()\n                        ));\n\n                        // check link trg from _edge_interaction to interaction\n                        JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n                        ));\n\n                        // check link trg from _edge_message to message\n                        JavaSDM.ensure (message.equals (_edge_message.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,message,interaction,messageReceive,line,_package);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_81(EMoflonEdge _edge_message);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_interaction_enclosingInteraction_664633 = null;\n      MessageEnd __DEC_message_sendEvent_511111 = null;\n      ModalSequenceDiagram.Package __DEC_interaction_packagedElement_577423 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_728325 = null;\n      MessageEnd __DEC_message_message_728325 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_376788 = null;\n      Message __DEC_messageReceive_receiveEvent_376788 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_367384 = null;\n      Message __DEC_messageReceive_sendEvent_367384 = null;\n      Match match = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Iterator fujaba__IterInteractionToMessage = null;\n      Message message = null;\n      ModalSequenceDiagram.Package _package = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_interaction is really bound\n         JavaSDM.ensure ( _edge_interaction != null );\n         // bind object\n         _TmpObject = _edge_interaction.getSrc ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_interaction.getTrg ();\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n\n         // check link lifeline from line to interaction\n         JavaSDM.ensure (interaction.equals (line.getInteraction ()\n         ));\n\n         // bind object\n         _package = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n         // check object _package is really bound\n         JavaSDM.ensure ( _package != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(_package.getPackagedElement().contains(interaction));\n\n         // iterate to-many link message from interaction to message\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToMessage = new ArrayList(interaction.getMessage()).iterator ();\n\n         while ( fujaba__IterInteractionToMessage.hasNext () )\n         {\n            try\n            {\n               message = (Message) fujaba__IterInteractionToMessage.next ();\n\n               // check object message is really bound\n               JavaSDM.ensure ( message != null );\n               // bind object\n               _TmpObject = message.getReceiveEvent ();\n\n               // ensure correct type and really bound of object messageReceive\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n               // check link fragment from messageReceive to interaction\n               JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n               ));\n\n               // check link message from messageReceive to message\n               JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n               ));\n\n               // check link covered from line to messageReceive\n               JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // negative check for link fragment from interaction\n                  JavaSDM.ensure (interaction.getEnclosingOperand () == null);\n                  // negative check for link fragment from messageReceive\n                  JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_interaction_enclosingInteraction_664633 = interaction.getEnclosingInteraction ();\n\n                     // check object __DEC_interaction_enclosingInteraction_664633 is really bound\n                     JavaSDM.ensure ( __DEC_interaction_enclosingInteraction_664633 != null );\n\n                     // check isomorphic binding between objects __DEC_interaction_enclosingInteraction_664633 and interaction \n                     JavaSDM.ensure ( !__DEC_interaction_enclosingInteraction_664633.equals (interaction) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_message_sendEvent_511111 = message.getSendEvent ();\n\n                     // check object __DEC_message_sendEvent_511111 is really bound\n                     JavaSDM.ensure ( __DEC_message_sendEvent_511111 != null );\n\n                     // check isomorphic binding between objects __DEC_message_sendEvent_511111 and messageReceive \n                     JavaSDM.ensure ( !__DEC_message_sendEvent_511111.equals (messageReceive) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_interaction_packagedElement_577423 = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n                     // check object __DEC_interaction_packagedElement_577423 is really bound\n                     JavaSDM.ensure ( __DEC_interaction_packagedElement_577423 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_interaction_packagedElement_577423.getPackagedElement().contains(interaction));\n\n                     // check isomorphic binding between objects __DEC_interaction_packagedElement_577423 and _package \n                     JavaSDM.ensure ( !__DEC_interaction_packagedElement_577423.equals (_package) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link message from message to __DEC_message_message_728325\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageTo__DEC_message_message_728325 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_728325.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_message_message_728325 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_728325.next ();\n\n                           // check object __DEC_message_message_728325 is really bound\n                           JavaSDM.ensure ( __DEC_message_message_728325 != null );\n                           // check isomorphic binding between objects __DEC_message_message_728325 and messageReceive \n                           JavaSDM.ensure ( !__DEC_message_message_728325.equals (messageReceive) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_376788\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_376788 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_376788.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_receiveEvent_376788 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_376788.next ();\n\n                           // check object __DEC_messageReceive_receiveEvent_376788 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_376788 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_376788 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_376788.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_367384\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_367384 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_367384.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_sendEvent_367384 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_367384.next ();\n\n                           // check object __DEC_messageReceive_sendEvent_367384 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_sendEvent_367384 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_sendEvent_367384 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_367384.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check link fragment from interaction to interaction\n                  JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                  )));\n\n                  // check link fragment from interaction to interaction\n                  JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                  )));\n\n                  // check object _edge_interaction is really bound\n                  JavaSDM.ensure ( _edge_interaction != null );\n                  // check object _package is really bound\n                  JavaSDM.ensure ( _package != null );\n                  // check object interaction is really bound\n                  JavaSDM.ensure ( interaction != null );\n                  // check object line is really bound\n                  JavaSDM.ensure ( line != null );\n                  // check object message is really bound\n                  JavaSDM.ensure ( message != null );\n                  // check object messageReceive is really bound\n                  JavaSDM.ensure ( messageReceive != null );\n                  // check link fragment from messageReceive to interaction\n                  JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                  ));\n\n                  // check link lifeline from line to interaction\n                  JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                  ));\n\n                  // check link message from message to interaction\n                  JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                  ));\n\n                  // check link message from messageReceive to message\n                  JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                  ));\n\n                  // check link receiveEvent from message to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                  ));\n\n                  // check link sendEvent from message to messageReceive\n                  JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                  )));\n\n                  // check link packagedElement from interaction to _package\n                  JavaSDM.ensure (_package.equals (interaction.eContainer()\n                  ));\n\n                  // check link src from _edge_interaction to line\n                  JavaSDM.ensure (line.equals (_edge_interaction.getSrc ()\n                  ));\n\n                  // check link trg from _edge_interaction to interaction\n                  JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n                  ));\n\n                  // check link covered from line to messageReceive\n                  JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,message,interaction,messageReceive,line,_package);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_82(
			EMoflonEdge _edge_interaction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_interaction_enclosingInteraction_708707 = null;\n      MessageEnd __DEC_message_sendEvent_750377 = null;\n      ModalSequenceDiagram.Package __DEC_interaction_packagedElement_317169 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_661548 = null;\n      MessageEnd __DEC_message_message_661548 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_208641 = null;\n      Message __DEC_messageReceive_receiveEvent_208641 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_20824 = null;\n      Message __DEC_messageReceive_sendEvent_20824 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionTo_edge_interaction = null;\n      EMoflonEdge _edge_interaction = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Iterator fujaba__IterInteractionToMessage = null;\n      Message message = null;\n      Lifeline line = null;\n      ModalSequenceDiagram.Package _package = null;\n      Interaction interaction = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_lifeline is really bound\n         JavaSDM.ensure ( _edge_lifeline != null );\n         // bind object\n         _TmpObject = _edge_lifeline.getSrc ();\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n\n         // bind object\n         _package = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n         // check object _package is really bound\n         JavaSDM.ensure ( _package != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(_package.getPackagedElement().contains(interaction));\n\n         // bind object\n         _TmpObject = _edge_lifeline.getTrg ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // check link lifeline from line to interaction\n         JavaSDM.ensure (interaction.equals (line.getInteraction ()\n         ));\n\n         // iterate to-many link message from interaction to message\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToMessage = new ArrayList(interaction.getMessage()).iterator ();\n\n         while ( fujaba__IterInteractionToMessage.hasNext () )\n         {\n            try\n            {\n               message = (Message) fujaba__IterInteractionToMessage.next ();\n\n               // check object message is really bound\n               JavaSDM.ensure ( message != null );\n               // bind object\n               _TmpObject = message.getReceiveEvent ();\n\n               // ensure correct type and really bound of object messageReceive\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n               // check link fragment from messageReceive to interaction\n               JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n               ));\n\n               // check link message from messageReceive to message\n               JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n               ));\n\n               // check link covered from line to messageReceive\n               JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n               // iterate to-many link trg from interaction to _edge_interaction\n               fujaba__Success = false;\n\n               fujaba__IterInteractionTo_edge_interaction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(interaction,EMoflonEdge.class,\"trg\")).iterator ();\n\n               while ( fujaba__IterInteractionTo_edge_interaction.hasNext () )\n               {\n                  try\n                  {\n                     _edge_interaction = (EMoflonEdge) fujaba__IterInteractionTo_edge_interaction.next ();\n\n                     // check object _edge_interaction is really bound\n                     JavaSDM.ensure ( _edge_interaction != null );\n                     // check isomorphic binding between objects _edge_lifeline and _edge_interaction \n                     JavaSDM.ensure ( !_edge_lifeline.equals (_edge_interaction) );\n\n                     // check link src from _edge_interaction to line\n                     JavaSDM.ensure (line.equals (_edge_interaction.getSrc ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from interaction\n                        JavaSDM.ensure (interaction.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_interaction_enclosingInteraction_708707 = interaction.getEnclosingInteraction ();\n\n                           // check object __DEC_interaction_enclosingInteraction_708707 is really bound\n                           JavaSDM.ensure ( __DEC_interaction_enclosingInteraction_708707 != null );\n\n                           // check isomorphic binding between objects __DEC_interaction_enclosingInteraction_708707 and interaction \n                           JavaSDM.ensure ( !__DEC_interaction_enclosingInteraction_708707.equals (interaction) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_message_sendEvent_750377 = message.getSendEvent ();\n\n                           // check object __DEC_message_sendEvent_750377 is really bound\n                           JavaSDM.ensure ( __DEC_message_sendEvent_750377 != null );\n\n                           // check isomorphic binding between objects __DEC_message_sendEvent_750377 and messageReceive \n                           JavaSDM.ensure ( !__DEC_message_sendEvent_750377.equals (messageReceive) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_interaction_packagedElement_317169 = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n                           // check object __DEC_interaction_packagedElement_317169 is really bound\n                           JavaSDM.ensure ( __DEC_interaction_packagedElement_317169 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_interaction_packagedElement_317169.getPackagedElement().contains(interaction));\n\n                           // check isomorphic binding between objects __DEC_interaction_packagedElement_317169 and _package \n                           JavaSDM.ensure ( !__DEC_interaction_packagedElement_317169.equals (_package) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_661548\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_661548 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_661548.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_661548 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_661548.next ();\n\n                                 // check object __DEC_message_message_661548 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_661548 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_661548 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_661548.equals (messageReceive) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_208641\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_208641 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_208641.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_208641 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_208641.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_208641 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_208641 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_208641 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_208641.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_20824\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_20824 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_20824.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_20824 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_20824.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_20824 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_20824 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_20824 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_20824.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check link fragment from interaction to interaction\n                        JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                        )));\n\n                        // check link fragment from interaction to interaction\n                        JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                        )));\n\n                        // check object _edge_interaction is really bound\n                        JavaSDM.ensure ( _edge_interaction != null );\n                        // check object _edge_lifeline is really bound\n                        JavaSDM.ensure ( _edge_lifeline != null );\n                        // check object _package is really bound\n                        JavaSDM.ensure ( _package != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check isomorphic binding between objects _edge_lifeline and _edge_interaction \n                        JavaSDM.ensure ( !_edge_lifeline.equals (_edge_interaction) );\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link packagedElement from interaction to _package\n                        JavaSDM.ensure (_package.equals (interaction.eContainer()\n                        ));\n\n                        // check link src from _edge_interaction to line\n                        JavaSDM.ensure (line.equals (_edge_interaction.getSrc ()\n                        ));\n\n                        // check link src from _edge_lifeline to interaction\n                        JavaSDM.ensure (interaction.equals (_edge_lifeline.getSrc ()\n                        ));\n\n                        // check link trg from _edge_interaction to interaction\n                        JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n                        ));\n\n                        // check link trg from _edge_lifeline to line\n                        JavaSDM.ensure (line.equals (_edge_lifeline.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,message,interaction,messageReceive,line,_package);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_83(EMoflonEdge _edge_lifeline);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_interaction_enclosingInteraction_906825 = null;\n      MessageEnd __DEC_message_sendEvent_424843 = null;\n      ModalSequenceDiagram.Package __DEC_interaction_packagedElement_771536 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_107599 = null;\n      MessageEnd __DEC_message_message_107599 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_871844 = null;\n      Message __DEC_messageReceive_receiveEvent_871844 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_880545 = null;\n      Message __DEC_messageReceive_sendEvent_880545 = null;\n      Match match = null;\n      Iterator fujaba__IterMessageReceiveToLine = null;\n      Lifeline line = null;\n      ModalSequenceDiagram.Package _package = null;\n      Message message = null;\n      Interaction interaction = null;\n      MessageOccurrenceSpecification messageReceive = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_enclosingInteraction is really bound\n         JavaSDM.ensure ( _edge_enclosingInteraction != null );\n         // bind object\n         _TmpObject = _edge_enclosingInteraction.getSrc ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         interaction = messageReceive.getEnclosingInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         message = messageReceive.getMessage ();\n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n\n         // check link message from message to interaction\n         JavaSDM.ensure (interaction.equals (message.getInteraction ()\n         ));\n\n         // check link receiveEvent from message to messageReceive\n         JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n         ));\n\n         // bind object\n         _package = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n         // check object _package is really bound\n         JavaSDM.ensure ( _package != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(_package.getPackagedElement().contains(interaction));\n\n         // check link trg from _edge_enclosingInteraction to interaction\n         JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n         ));\n\n         // iterate to-many link covered from messageReceive to line\n         fujaba__Success = false;\n\n         fujaba__IterMessageReceiveToLine = new ArrayList(messageReceive.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageReceiveToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterMessageReceiveToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // check link lifeline from line to interaction\n               JavaSDM.ensure (interaction.equals (line.getInteraction ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // negative check for link fragment from interaction\n                  JavaSDM.ensure (interaction.getEnclosingOperand () == null);\n                  // negative check for link fragment from messageReceive\n                  JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_interaction_enclosingInteraction_906825 = interaction.getEnclosingInteraction ();\n\n                     // check object __DEC_interaction_enclosingInteraction_906825 is really bound\n                     JavaSDM.ensure ( __DEC_interaction_enclosingInteraction_906825 != null );\n\n                     // check isomorphic binding between objects __DEC_interaction_enclosingInteraction_906825 and interaction \n                     JavaSDM.ensure ( !__DEC_interaction_enclosingInteraction_906825.equals (interaction) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_message_sendEvent_424843 = message.getSendEvent ();\n\n                     // check object __DEC_message_sendEvent_424843 is really bound\n                     JavaSDM.ensure ( __DEC_message_sendEvent_424843 != null );\n\n                     // check isomorphic binding between objects __DEC_message_sendEvent_424843 and messageReceive \n                     JavaSDM.ensure ( !__DEC_message_sendEvent_424843.equals (messageReceive) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_interaction_packagedElement_771536 = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n                     // check object __DEC_interaction_packagedElement_771536 is really bound\n                     JavaSDM.ensure ( __DEC_interaction_packagedElement_771536 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_interaction_packagedElement_771536.getPackagedElement().contains(interaction));\n\n                     // check isomorphic binding between objects __DEC_interaction_packagedElement_771536 and _package \n                     JavaSDM.ensure ( !__DEC_interaction_packagedElement_771536.equals (_package) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link message from message to __DEC_message_message_107599\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageTo__DEC_message_message_107599 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_107599.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_message_message_107599 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_107599.next ();\n\n                           // check object __DEC_message_message_107599 is really bound\n                           JavaSDM.ensure ( __DEC_message_message_107599 != null );\n                           // check isomorphic binding between objects __DEC_message_message_107599 and messageReceive \n                           JavaSDM.ensure ( !__DEC_message_message_107599.equals (messageReceive) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_871844\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_871844 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_871844.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_receiveEvent_871844 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_871844.next ();\n\n                           // check object __DEC_messageReceive_receiveEvent_871844 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_871844 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_871844 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_871844.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_880545\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_880545 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_880545.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_sendEvent_880545 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_880545.next ();\n\n                           // check object __DEC_messageReceive_sendEvent_880545 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_sendEvent_880545 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_sendEvent_880545 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_880545.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check link fragment from interaction to interaction\n                  JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                  )));\n\n                  // check link fragment from interaction to interaction\n                  JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                  )));\n\n                  // check object _edge_enclosingInteraction is really bound\n                  JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                  // check object _package is really bound\n                  JavaSDM.ensure ( _package != null );\n                  // check object interaction is really bound\n                  JavaSDM.ensure ( interaction != null );\n                  // check object line is really bound\n                  JavaSDM.ensure ( line != null );\n                  // check object message is really bound\n                  JavaSDM.ensure ( message != null );\n                  // check object messageReceive is really bound\n                  JavaSDM.ensure ( messageReceive != null );\n                  // check link fragment from messageReceive to interaction\n                  JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                  ));\n\n                  // check link lifeline from line to interaction\n                  JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                  ));\n\n                  // check link message from message to interaction\n                  JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                  ));\n\n                  // check link message from messageReceive to message\n                  JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                  ));\n\n                  // check link receiveEvent from message to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                  ));\n\n                  // check link sendEvent from message to messageReceive\n                  JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                  )));\n\n                  // check link packagedElement from interaction to _package\n                  JavaSDM.ensure (_package.equals (interaction.eContainer()\n                  ));\n\n                  // check link src from _edge_enclosingInteraction to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (_edge_enclosingInteraction.getSrc ()\n                  ));\n\n                  // check link trg from _edge_enclosingInteraction to interaction\n                  JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                  ));\n\n                  // check link covered from line to messageReceive\n                  JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,message,interaction,messageReceive,line,_package);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_84(
			EMoflonEdge _edge_enclosingInteraction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_interaction_enclosingInteraction_912941 = null;\n      MessageEnd __DEC_message_sendEvent_235429 = null;\n      ModalSequenceDiagram.Package __DEC_interaction_packagedElement_728394 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_805055 = null;\n      MessageEnd __DEC_message_message_805055 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_125577 = null;\n      Message __DEC_messageReceive_receiveEvent_125577 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_181619 = null;\n      Message __DEC_messageReceive_sendEvent_181619 = null;\n      Match match = null;\n      Iterator fujaba__IterMessageReceiveTo_edge_enclosingInteraction = null;\n      EMoflonEdge _edge_enclosingInteraction = null;\n      Iterator fujaba__IterMessageReceiveToLine = null;\n      Lifeline line = null;\n      ModalSequenceDiagram.Package _package = null;\n      Message message = null;\n      Interaction interaction = null;\n      MessageOccurrenceSpecification messageReceive = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_fragment is really bound\n         JavaSDM.ensure ( _edge_fragment != null );\n         // bind object\n         _TmpObject = _edge_fragment.getTrg ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         interaction = messageReceive.getEnclosingInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         message = messageReceive.getMessage ();\n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n\n         // check link message from message to interaction\n         JavaSDM.ensure (interaction.equals (message.getInteraction ()\n         ));\n\n         // check link receiveEvent from message to messageReceive\n         JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n         ));\n\n         // bind object\n         _package = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n         // check object _package is really bound\n         JavaSDM.ensure ( _package != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(_package.getPackagedElement().contains(interaction));\n\n         // check link src from _edge_fragment to interaction\n         JavaSDM.ensure (interaction.equals (_edge_fragment.getSrc ()\n         ));\n\n         // iterate to-many link covered from messageReceive to line\n         fujaba__Success = false;\n\n         fujaba__IterMessageReceiveToLine = new ArrayList(messageReceive.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageReceiveToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterMessageReceiveToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // check link lifeline from line to interaction\n               JavaSDM.ensure (interaction.equals (line.getInteraction ()\n               ));\n\n               // iterate to-many link src from messageReceive to _edge_enclosingInteraction\n               fujaba__Success = false;\n\n               fujaba__IterMessageReceiveTo_edge_enclosingInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,EMoflonEdge.class,\"src\")).iterator ();\n\n               while ( fujaba__IterMessageReceiveTo_edge_enclosingInteraction.hasNext () )\n               {\n                  try\n                  {\n                     _edge_enclosingInteraction = (EMoflonEdge) fujaba__IterMessageReceiveTo_edge_enclosingInteraction.next ();\n\n                     // check object _edge_enclosingInteraction is really bound\n                     JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                     // check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction \n                     JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingInteraction) );\n\n                     // check link trg from _edge_enclosingInteraction to interaction\n                     JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from interaction\n                        JavaSDM.ensure (interaction.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_interaction_enclosingInteraction_912941 = interaction.getEnclosingInteraction ();\n\n                           // check object __DEC_interaction_enclosingInteraction_912941 is really bound\n                           JavaSDM.ensure ( __DEC_interaction_enclosingInteraction_912941 != null );\n\n                           // check isomorphic binding between objects __DEC_interaction_enclosingInteraction_912941 and interaction \n                           JavaSDM.ensure ( !__DEC_interaction_enclosingInteraction_912941.equals (interaction) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_message_sendEvent_235429 = message.getSendEvent ();\n\n                           // check object __DEC_message_sendEvent_235429 is really bound\n                           JavaSDM.ensure ( __DEC_message_sendEvent_235429 != null );\n\n                           // check isomorphic binding between objects __DEC_message_sendEvent_235429 and messageReceive \n                           JavaSDM.ensure ( !__DEC_message_sendEvent_235429.equals (messageReceive) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_interaction_packagedElement_728394 = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n                           // check object __DEC_interaction_packagedElement_728394 is really bound\n                           JavaSDM.ensure ( __DEC_interaction_packagedElement_728394 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_interaction_packagedElement_728394.getPackagedElement().contains(interaction));\n\n                           // check isomorphic binding between objects __DEC_interaction_packagedElement_728394 and _package \n                           JavaSDM.ensure ( !__DEC_interaction_packagedElement_728394.equals (_package) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_805055\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_805055 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_805055.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_805055 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_805055.next ();\n\n                                 // check object __DEC_message_message_805055 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_805055 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_805055 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_805055.equals (messageReceive) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_125577\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_125577 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_125577.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_125577 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_125577.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_125577 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_125577 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_125577 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_125577.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_181619\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_181619 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_181619.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_181619 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_181619.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_181619 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_181619 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_181619 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_181619.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check link fragment from interaction to interaction\n                        JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                        )));\n\n                        // check link fragment from interaction to interaction\n                        JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                        )));\n\n                        // check object _edge_enclosingInteraction is really bound\n                        JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                        // check object _edge_fragment is really bound\n                        JavaSDM.ensure ( _edge_fragment != null );\n                        // check object _package is really bound\n                        JavaSDM.ensure ( _package != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction \n                        JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingInteraction) );\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link packagedElement from interaction to _package\n                        JavaSDM.ensure (_package.equals (interaction.eContainer()\n                        ));\n\n                        // check link src from _edge_enclosingInteraction to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (_edge_enclosingInteraction.getSrc ()\n                        ));\n\n                        // check link src from _edge_fragment to interaction\n                        JavaSDM.ensure (interaction.equals (_edge_fragment.getSrc ()\n                        ));\n\n                        // check link trg from _edge_enclosingInteraction to interaction\n                        JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                        ));\n\n                        // check link trg from _edge_fragment to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (_edge_fragment.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,message,interaction,messageReceive,line,_package);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_85(EMoflonEdge _edge_fragment);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_interaction_enclosingInteraction_118040 = null;\n      MessageEnd __DEC_message_sendEvent_635775 = null;\n      ModalSequenceDiagram.Package __DEC_interaction_packagedElement_755070 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_584761 = null;\n      MessageEnd __DEC_message_message_584761 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_730120 = null;\n      Message __DEC_messageReceive_receiveEvent_730120 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_926000 = null;\n      Message __DEC_messageReceive_sendEvent_926000 = null;\n      Match match = null;\n      Iterator fujaba__IterMessageReceiveToLine = null;\n      Lifeline line = null;\n      ModalSequenceDiagram.Package _package = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Interaction interaction = null;\n      Message message = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_message is really bound\n         JavaSDM.ensure ( _edge_message != null );\n         // bind object\n         _TmpObject = _edge_message.getTrg ();\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n\n         // bind object\n         interaction = message.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check link fragment from messageReceive to interaction\n         JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n         ));\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // bind object\n         _package = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n         // check object _package is really bound\n         JavaSDM.ensure ( _package != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(_package.getPackagedElement().contains(interaction));\n\n         // check link src from _edge_message to messageReceive\n         JavaSDM.ensure (messageReceive.equals (_edge_message.getSrc ()\n         ));\n\n         // iterate to-many link covered from messageReceive to line\n         fujaba__Success = false;\n\n         fujaba__IterMessageReceiveToLine = new ArrayList(messageReceive.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageReceiveToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterMessageReceiveToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // check link lifeline from line to interaction\n               JavaSDM.ensure (interaction.equals (line.getInteraction ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // negative check for link fragment from interaction\n                  JavaSDM.ensure (interaction.getEnclosingOperand () == null);\n                  // negative check for link fragment from messageReceive\n                  JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_interaction_enclosingInteraction_118040 = interaction.getEnclosingInteraction ();\n\n                     // check object __DEC_interaction_enclosingInteraction_118040 is really bound\n                     JavaSDM.ensure ( __DEC_interaction_enclosingInteraction_118040 != null );\n\n                     // check isomorphic binding between objects __DEC_interaction_enclosingInteraction_118040 and interaction \n                     JavaSDM.ensure ( !__DEC_interaction_enclosingInteraction_118040.equals (interaction) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_message_sendEvent_635775 = message.getSendEvent ();\n\n                     // check object __DEC_message_sendEvent_635775 is really bound\n                     JavaSDM.ensure ( __DEC_message_sendEvent_635775 != null );\n\n                     // check isomorphic binding between objects __DEC_message_sendEvent_635775 and messageReceive \n                     JavaSDM.ensure ( !__DEC_message_sendEvent_635775.equals (messageReceive) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_interaction_packagedElement_755070 = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n                     // check object __DEC_interaction_packagedElement_755070 is really bound\n                     JavaSDM.ensure ( __DEC_interaction_packagedElement_755070 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_interaction_packagedElement_755070.getPackagedElement().contains(interaction));\n\n                     // check isomorphic binding between objects __DEC_interaction_packagedElement_755070 and _package \n                     JavaSDM.ensure ( !__DEC_interaction_packagedElement_755070.equals (_package) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link message from message to __DEC_message_message_584761\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageTo__DEC_message_message_584761 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_584761.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_message_message_584761 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_584761.next ();\n\n                           // check object __DEC_message_message_584761 is really bound\n                           JavaSDM.ensure ( __DEC_message_message_584761 != null );\n                           // check isomorphic binding between objects __DEC_message_message_584761 and messageReceive \n                           JavaSDM.ensure ( !__DEC_message_message_584761.equals (messageReceive) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_730120\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_730120 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_730120.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_receiveEvent_730120 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_730120.next ();\n\n                           // check object __DEC_messageReceive_receiveEvent_730120 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_730120 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_730120 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_730120.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_926000\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_926000 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_926000.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_sendEvent_926000 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_926000.next ();\n\n                           // check object __DEC_messageReceive_sendEvent_926000 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_sendEvent_926000 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_sendEvent_926000 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_926000.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check link fragment from interaction to interaction\n                  JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                  )));\n\n                  // check link fragment from interaction to interaction\n                  JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                  )));\n\n                  // check object _edge_message is really bound\n                  JavaSDM.ensure ( _edge_message != null );\n                  // check object _package is really bound\n                  JavaSDM.ensure ( _package != null );\n                  // check object interaction is really bound\n                  JavaSDM.ensure ( interaction != null );\n                  // check object line is really bound\n                  JavaSDM.ensure ( line != null );\n                  // check object message is really bound\n                  JavaSDM.ensure ( message != null );\n                  // check object messageReceive is really bound\n                  JavaSDM.ensure ( messageReceive != null );\n                  // check link fragment from messageReceive to interaction\n                  JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                  ));\n\n                  // check link lifeline from line to interaction\n                  JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                  ));\n\n                  // check link message from message to interaction\n                  JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                  ));\n\n                  // check link message from messageReceive to message\n                  JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                  ));\n\n                  // check link receiveEvent from message to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                  ));\n\n                  // check link sendEvent from message to messageReceive\n                  JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                  )));\n\n                  // check link packagedElement from interaction to _package\n                  JavaSDM.ensure (_package.equals (interaction.eContainer()\n                  ));\n\n                  // check link src from _edge_message to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (_edge_message.getSrc ()\n                  ));\n\n                  // check link trg from _edge_message to message\n                  JavaSDM.ensure (message.equals (_edge_message.getTrg ()\n                  ));\n\n                  // check link covered from line to messageReceive\n                  JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,message,interaction,messageReceive,line,_package);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_86(EMoflonEdge _edge_message);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      PackageDeclaration __DEC_actor_actors_410526 = null;\n      UseCase __DEC_basicFlow_flows_105364 = null;\n      PackageDeclaration __DEC_useCase_useCases_512181 = null;\n      Match match = null;\n      Iterator fujaba__IterUseCaseToBasicFlow = null;\n      BasicFlow basicFlow = null;\n      Iterator fujaba__IterPackageDeclarationToActor = null;\n      Actor actor = null;\n      UseCase useCase = null;\n      PackageDeclaration packageDeclaration = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_useCases is really bound\n         JavaSDM.ensure ( _edge_useCases != null );\n         // bind object\n         _TmpObject = _edge_useCases.getSrc ();\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_useCases.getTrg ();\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n\n         // check link useCases from useCase to packageDeclaration\n         JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n         ));\n\n         // iterate to-many link actors from packageDeclaration to actor\n         fujaba__Success = false;\n\n         fujaba__IterPackageDeclarationToActor = new ArrayList(packageDeclaration.getActors()).iterator ();\n\n         while ( fujaba__IterPackageDeclarationToActor.hasNext () )\n         {\n            try\n            {\n               actor = (Actor) fujaba__IterPackageDeclarationToActor.next ();\n\n               // check object actor is really bound\n               JavaSDM.ensure ( actor != null );\n               // iterate to-many link flows from useCase to basicFlow\n               fujaba__Success = false;\n\n               fujaba__IterUseCaseToBasicFlow = new ArrayList(useCase.getFlows()).iterator ();\n\n               while ( fujaba__IterUseCaseToBasicFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterUseCaseToBasicFlow.next ();\n\n                     // ensure correct type and really bound of object basicFlow\n                     JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n                     basicFlow = (BasicFlow) _TmpObject;\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_actor_actors_410526 = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor.eContainer() : null;\n\n                           // check object __DEC_actor_actors_410526 is really bound\n                           JavaSDM.ensure ( __DEC_actor_actors_410526 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_actor_actors_410526.getActors().contains(actor));\n\n                           // check isomorphic binding between objects __DEC_actor_actors_410526 and packageDeclaration \n                           JavaSDM.ensure ( !__DEC_actor_actors_410526.equals (packageDeclaration) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_basicFlow_flows_105364 = basicFlow.eContainer() instanceof UseCase ? (UseCase) basicFlow.eContainer() : null;\n\n                           // check object __DEC_basicFlow_flows_105364 is really bound\n                           JavaSDM.ensure ( __DEC_basicFlow_flows_105364 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_basicFlow_flows_105364.getFlows().contains(basicFlow));\n\n                           // check isomorphic binding between objects __DEC_basicFlow_flows_105364 and useCase \n                           JavaSDM.ensure ( !__DEC_basicFlow_flows_105364.equals (useCase) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_useCase_useCases_512181 = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase.eContainer() : null;\n\n                           // check object __DEC_useCase_useCases_512181 is really bound\n                           JavaSDM.ensure ( __DEC_useCase_useCases_512181 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_useCase_useCases_512181.getUseCases().contains(useCase));\n\n                           // check isomorphic binding between objects __DEC_useCase_useCases_512181 and packageDeclaration \n                           JavaSDM.ensure ( !__DEC_useCase_useCases_512181.equals (packageDeclaration) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_useCases is really bound\n                        JavaSDM.ensure ( _edge_useCases != null );\n                        // check object actor is really bound\n                        JavaSDM.ensure ( actor != null );\n                        // check object basicFlow is really bound\n                        JavaSDM.ensure ( basicFlow != null );\n                        // check object packageDeclaration is really bound\n                        JavaSDM.ensure ( packageDeclaration != null );\n                        // check object useCase is really bound\n                        JavaSDM.ensure ( useCase != null );\n                        // check link actors from actor to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                        ));\n\n                        // check link flows from basicFlow to useCase\n                        JavaSDM.ensure (useCase.equals (basicFlow.eContainer()\n                        ));\n\n                        // check link src from _edge_useCases to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (_edge_useCases.getSrc ()\n                        ));\n\n                        // check link trg from _edge_useCases to useCase\n                        JavaSDM.ensure (useCase.equals (_edge_useCases.getTrg ()\n                        ));\n\n                        // check link useCases from useCase to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,useCase,actor,packageDeclaration,basicFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_21(EMoflonEdge _edge_useCases);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      PackageDeclaration __DEC_actor_actors_808857 = null;\n      UseCase __DEC_basicFlow_flows_598168 = null;\n      PackageDeclaration __DEC_useCase_useCases_370399 = null;\n      Match match = null;\n      Iterator fujaba__IterUseCaseToBasicFlow = null;\n      BasicFlow basicFlow = null;\n      Iterator fujaba__IterPackageDeclarationToUseCase = null;\n      UseCase useCase = null;\n      Actor actor = null;\n      PackageDeclaration packageDeclaration = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_actors is really bound\n         JavaSDM.ensure ( _edge_actors != null );\n         // bind object\n         _TmpObject = _edge_actors.getSrc ();\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_actors.getTrg ();\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n\n         // check link actors from actor to packageDeclaration\n         JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n         ));\n\n         // iterate to-many link useCases from packageDeclaration to useCase\n         fujaba__Success = false;\n\n         fujaba__IterPackageDeclarationToUseCase = new ArrayList(packageDeclaration.getUseCases()).iterator ();\n\n         while ( fujaba__IterPackageDeclarationToUseCase.hasNext () )\n         {\n            try\n            {\n               useCase = (UseCase) fujaba__IterPackageDeclarationToUseCase.next ();\n\n               // check object useCase is really bound\n               JavaSDM.ensure ( useCase != null );\n               // iterate to-many link flows from useCase to basicFlow\n               fujaba__Success = false;\n\n               fujaba__IterUseCaseToBasicFlow = new ArrayList(useCase.getFlows()).iterator ();\n\n               while ( fujaba__IterUseCaseToBasicFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterUseCaseToBasicFlow.next ();\n\n                     // ensure correct type and really bound of object basicFlow\n                     JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n                     basicFlow = (BasicFlow) _TmpObject;\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_actor_actors_808857 = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor.eContainer() : null;\n\n                           // check object __DEC_actor_actors_808857 is really bound\n                           JavaSDM.ensure ( __DEC_actor_actors_808857 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_actor_actors_808857.getActors().contains(actor));\n\n                           // check isomorphic binding between objects __DEC_actor_actors_808857 and packageDeclaration \n                           JavaSDM.ensure ( !__DEC_actor_actors_808857.equals (packageDeclaration) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_basicFlow_flows_598168 = basicFlow.eContainer() instanceof UseCase ? (UseCase) basicFlow.eContainer() : null;\n\n                           // check object __DEC_basicFlow_flows_598168 is really bound\n                           JavaSDM.ensure ( __DEC_basicFlow_flows_598168 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_basicFlow_flows_598168.getFlows().contains(basicFlow));\n\n                           // check isomorphic binding between objects __DEC_basicFlow_flows_598168 and useCase \n                           JavaSDM.ensure ( !__DEC_basicFlow_flows_598168.equals (useCase) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_useCase_useCases_370399 = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase.eContainer() : null;\n\n                           // check object __DEC_useCase_useCases_370399 is really bound\n                           JavaSDM.ensure ( __DEC_useCase_useCases_370399 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_useCase_useCases_370399.getUseCases().contains(useCase));\n\n                           // check isomorphic binding between objects __DEC_useCase_useCases_370399 and packageDeclaration \n                           JavaSDM.ensure ( !__DEC_useCase_useCases_370399.equals (packageDeclaration) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_actors is really bound\n                        JavaSDM.ensure ( _edge_actors != null );\n                        // check object actor is really bound\n                        JavaSDM.ensure ( actor != null );\n                        // check object basicFlow is really bound\n                        JavaSDM.ensure ( basicFlow != null );\n                        // check object packageDeclaration is really bound\n                        JavaSDM.ensure ( packageDeclaration != null );\n                        // check object useCase is really bound\n                        JavaSDM.ensure ( useCase != null );\n                        // check link actors from actor to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                        ));\n\n                        // check link flows from basicFlow to useCase\n                        JavaSDM.ensure (useCase.equals (basicFlow.eContainer()\n                        ));\n\n                        // check link src from _edge_actors to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (_edge_actors.getSrc ()\n                        ));\n\n                        // check link trg from _edge_actors to actor\n                        JavaSDM.ensure (actor.equals (_edge_actors.getTrg ()\n                        ));\n\n                        // check link useCases from useCase to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,useCase,actor,packageDeclaration,basicFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_22(EMoflonEdge _edge_actors);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_interaction_enclosingInteraction_759117 = null;\n      MessageEnd __DEC_message_sendEvent_156621 = null;\n      ModalSequenceDiagram.Package __DEC_interaction_packagedElement_110799 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_136152 = null;\n      MessageEnd __DEC_message_message_136152 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_572807 = null;\n      Message __DEC_messageReceive_receiveEvent_572807 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_915960 = null;\n      Message __DEC_messageReceive_sendEvent_915960 = null;\n      Match match = null;\n      ModalSequenceDiagram.Package _package = null;\n      Message message = null;\n      Interaction interaction = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Lifeline line = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_coveredBy is really bound\n         JavaSDM.ensure ( _edge_coveredBy != null );\n         // bind object\n         _TmpObject = _edge_coveredBy.getSrc ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_coveredBy.getTrg ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         interaction = messageReceive.getEnclosingInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // check link lifeline from line to interaction\n         JavaSDM.ensure (interaction.equals (line.getInteraction ()\n         ));\n\n         // bind object\n         message = messageReceive.getMessage ();\n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n\n         // check link message from message to interaction\n         JavaSDM.ensure (interaction.equals (message.getInteraction ()\n         ));\n\n         // check link receiveEvent from message to messageReceive\n         JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n         ));\n\n         // bind object\n         _package = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n         // check object _package is really bound\n         JavaSDM.ensure ( _package != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(_package.getPackagedElement().contains(interaction));\n\n         // check link covered from line to messageReceive\n         JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // negative check for link fragment from interaction\n            JavaSDM.ensure (interaction.getEnclosingOperand () == null);\n            // negative check for link fragment from messageReceive\n            JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_interaction_enclosingInteraction_759117 = interaction.getEnclosingInteraction ();\n\n               // check object __DEC_interaction_enclosingInteraction_759117 is really bound\n               JavaSDM.ensure ( __DEC_interaction_enclosingInteraction_759117 != null );\n\n               // check isomorphic binding between objects __DEC_interaction_enclosingInteraction_759117 and interaction \n               JavaSDM.ensure ( !__DEC_interaction_enclosingInteraction_759117.equals (interaction) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_message_sendEvent_156621 = message.getSendEvent ();\n\n               // check object __DEC_message_sendEvent_156621 is really bound\n               JavaSDM.ensure ( __DEC_message_sendEvent_156621 != null );\n\n               // check isomorphic binding between objects __DEC_message_sendEvent_156621 and messageReceive \n               JavaSDM.ensure ( !__DEC_message_sendEvent_156621.equals (messageReceive) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_interaction_packagedElement_110799 = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n               // check object __DEC_interaction_packagedElement_110799 is really bound\n               JavaSDM.ensure ( __DEC_interaction_packagedElement_110799 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_interaction_packagedElement_110799.getPackagedElement().contains(interaction));\n\n               // check isomorphic binding between objects __DEC_interaction_packagedElement_110799 and _package \n               JavaSDM.ensure ( !__DEC_interaction_packagedElement_110799.equals (_package) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link message from message to __DEC_message_message_136152\n               fujaba__Success = false;\n\n               fujaba__IterMessageTo__DEC_message_message_136152 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_136152.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_message_message_136152 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_136152.next ();\n\n                     // check object __DEC_message_message_136152 is really bound\n                     JavaSDM.ensure ( __DEC_message_message_136152 != null );\n                     // check isomorphic binding between objects __DEC_message_message_136152 and messageReceive \n                     JavaSDM.ensure ( !__DEC_message_message_136152.equals (messageReceive) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_572807\n               fujaba__Success = false;\n\n               fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_572807 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_572807.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_messageReceive_receiveEvent_572807 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_572807.next ();\n\n                     // check object __DEC_messageReceive_receiveEvent_572807 is really bound\n                     JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_572807 != null );\n                     // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_572807 and message \n                     JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_572807.equals (message) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_915960\n               fujaba__Success = false;\n\n               fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_915960 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_915960.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_messageReceive_sendEvent_915960 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_915960.next ();\n\n                     // check object __DEC_messageReceive_sendEvent_915960 is really bound\n                     JavaSDM.ensure ( __DEC_messageReceive_sendEvent_915960 != null );\n                     // check isomorphic binding between objects __DEC_messageReceive_sendEvent_915960 and message \n                     JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_915960.equals (message) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check link fragment from interaction to interaction\n            JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n            )));\n\n            // check link fragment from interaction to interaction\n            JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n            )));\n\n            // check object _edge_coveredBy is really bound\n            JavaSDM.ensure ( _edge_coveredBy != null );\n            // check object _package is really bound\n            JavaSDM.ensure ( _package != null );\n            // check object interaction is really bound\n            JavaSDM.ensure ( interaction != null );\n            // check object line is really bound\n            JavaSDM.ensure ( line != null );\n            // check object message is really bound\n            JavaSDM.ensure ( message != null );\n            // check object messageReceive is really bound\n            JavaSDM.ensure ( messageReceive != null );\n            // check link fragment from messageReceive to interaction\n            JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n            ));\n\n            // check link lifeline from line to interaction\n            JavaSDM.ensure (interaction.equals (line.getInteraction ()\n            ));\n\n            // check link message from message to interaction\n            JavaSDM.ensure (interaction.equals (message.getInteraction ()\n            ));\n\n            // check link message from messageReceive to message\n            JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n            ));\n\n            // check link receiveEvent from message to messageReceive\n            JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n            ));\n\n            // check link sendEvent from message to messageReceive\n            JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n            )));\n\n            // check link packagedElement from interaction to _package\n            JavaSDM.ensure (_package.equals (interaction.eContainer()\n            ));\n\n            // check link src from _edge_coveredBy to line\n            JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n            ));\n\n            // check link trg from _edge_coveredBy to messageReceive\n            JavaSDM.ensure (messageReceive.equals (_edge_coveredBy.getTrg ()\n            ));\n\n            // check link covered from line to messageReceive\n            JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,message,interaction,messageReceive,line,_package);\n            if (fujaba__Success)\n            {\n               // statement node \'Ensure that the correct types of elements are matched\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_87(
			EMoflonEdge _edge_coveredBy);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_interaction_enclosingInteraction_597955 = null;\n      MessageEnd __DEC_message_sendEvent_364379 = null;\n      ModalSequenceDiagram.Package __DEC_interaction_packagedElement_805225 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_439870 = null;\n      MessageEnd __DEC_message_message_439870 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_790810 = null;\n      Message __DEC_messageReceive_receiveEvent_790810 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_794975 = null;\n      Message __DEC_messageReceive_sendEvent_794975 = null;\n      Match match = null;\n      Iterator fujaba__IterMessageReceiveTo_edge_coveredBy = null;\n      EMoflonEdge _edge_coveredBy = null;\n      ModalSequenceDiagram.Package _package = null;\n      Message message = null;\n      Interaction interaction = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Lifeline line = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_covered is really bound\n         JavaSDM.ensure ( _edge_covered != null );\n         // bind object\n         _TmpObject = _edge_covered.getTrg ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_covered.getSrc ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         interaction = messageReceive.getEnclosingInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // check link lifeline from line to interaction\n         JavaSDM.ensure (interaction.equals (line.getInteraction ()\n         ));\n\n         // bind object\n         message = messageReceive.getMessage ();\n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n\n         // check link message from message to interaction\n         JavaSDM.ensure (interaction.equals (message.getInteraction ()\n         ));\n\n         // check link receiveEvent from message to messageReceive\n         JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n         ));\n\n         // bind object\n         _package = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n         // check object _package is really bound\n         JavaSDM.ensure ( _package != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(_package.getPackagedElement().contains(interaction));\n\n         // check link covered from line to messageReceive\n         JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n         // iterate to-many link trg from messageReceive to _edge_coveredBy\n         fujaba__Success = false;\n\n         fujaba__IterMessageReceiveTo_edge_coveredBy = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,EMoflonEdge.class,\"trg\")).iterator ();\n\n         while ( fujaba__IterMessageReceiveTo_edge_coveredBy.hasNext () )\n         {\n            try\n            {\n               _edge_coveredBy = (EMoflonEdge) fujaba__IterMessageReceiveTo_edge_coveredBy.next ();\n\n               // check object _edge_coveredBy is really bound\n               JavaSDM.ensure ( _edge_coveredBy != null );\n               // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n               JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n               // check link src from _edge_coveredBy to line\n               JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // negative check for link fragment from interaction\n                  JavaSDM.ensure (interaction.getEnclosingOperand () == null);\n                  // negative check for link fragment from messageReceive\n                  JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_interaction_enclosingInteraction_597955 = interaction.getEnclosingInteraction ();\n\n                     // check object __DEC_interaction_enclosingInteraction_597955 is really bound\n                     JavaSDM.ensure ( __DEC_interaction_enclosingInteraction_597955 != null );\n\n                     // check isomorphic binding between objects __DEC_interaction_enclosingInteraction_597955 and interaction \n                     JavaSDM.ensure ( !__DEC_interaction_enclosingInteraction_597955.equals (interaction) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_message_sendEvent_364379 = message.getSendEvent ();\n\n                     // check object __DEC_message_sendEvent_364379 is really bound\n                     JavaSDM.ensure ( __DEC_message_sendEvent_364379 != null );\n\n                     // check isomorphic binding between objects __DEC_message_sendEvent_364379 and messageReceive \n                     JavaSDM.ensure ( !__DEC_message_sendEvent_364379.equals (messageReceive) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_interaction_packagedElement_805225 = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n                     // check object __DEC_interaction_packagedElement_805225 is really bound\n                     JavaSDM.ensure ( __DEC_interaction_packagedElement_805225 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_interaction_packagedElement_805225.getPackagedElement().contains(interaction));\n\n                     // check isomorphic binding between objects __DEC_interaction_packagedElement_805225 and _package \n                     JavaSDM.ensure ( !__DEC_interaction_packagedElement_805225.equals (_package) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link message from message to __DEC_message_message_439870\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageTo__DEC_message_message_439870 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_439870.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_message_message_439870 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_439870.next ();\n\n                           // check object __DEC_message_message_439870 is really bound\n                           JavaSDM.ensure ( __DEC_message_message_439870 != null );\n                           // check isomorphic binding between objects __DEC_message_message_439870 and messageReceive \n                           JavaSDM.ensure ( !__DEC_message_message_439870.equals (messageReceive) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_790810\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_790810 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_790810.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_receiveEvent_790810 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_790810.next ();\n\n                           // check object __DEC_messageReceive_receiveEvent_790810 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_790810 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_790810 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_790810.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_794975\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_794975 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_794975.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_sendEvent_794975 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_794975.next ();\n\n                           // check object __DEC_messageReceive_sendEvent_794975 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_sendEvent_794975 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_sendEvent_794975 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_794975.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check link fragment from interaction to interaction\n                  JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                  )));\n\n                  // check link fragment from interaction to interaction\n                  JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                  )));\n\n                  // check object _edge_covered is really bound\n                  JavaSDM.ensure ( _edge_covered != null );\n                  // check object _edge_coveredBy is really bound\n                  JavaSDM.ensure ( _edge_coveredBy != null );\n                  // check object _package is really bound\n                  JavaSDM.ensure ( _package != null );\n                  // check object interaction is really bound\n                  JavaSDM.ensure ( interaction != null );\n                  // check object line is really bound\n                  JavaSDM.ensure ( line != null );\n                  // check object message is really bound\n                  JavaSDM.ensure ( message != null );\n                  // check object messageReceive is really bound\n                  JavaSDM.ensure ( messageReceive != null );\n                  // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                  JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                  // check link fragment from messageReceive to interaction\n                  JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                  ));\n\n                  // check link lifeline from line to interaction\n                  JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                  ));\n\n                  // check link message from message to interaction\n                  JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                  ));\n\n                  // check link message from messageReceive to message\n                  JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                  ));\n\n                  // check link receiveEvent from message to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                  ));\n\n                  // check link sendEvent from message to messageReceive\n                  JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                  )));\n\n                  // check link packagedElement from interaction to _package\n                  JavaSDM.ensure (_package.equals (interaction.eContainer()\n                  ));\n\n                  // check link src from _edge_covered to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (_edge_covered.getSrc ()\n                  ));\n\n                  // check link src from _edge_coveredBy to line\n                  JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n                  ));\n\n                  // check link trg from _edge_covered to line\n                  JavaSDM.ensure (line.equals (_edge_covered.getTrg ()\n                  ));\n\n                  // check link trg from _edge_coveredBy to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (_edge_coveredBy.getTrg ()\n                  ));\n\n                  // check link covered from line to messageReceive\n                  JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,message,interaction,messageReceive,line,_package);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_88(EMoflonEdge _edge_covered);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_interaction_enclosingInteraction_736586 = null;\n      MessageEnd __DEC_message_sendEvent_563131 = null;\n      ModalSequenceDiagram.Package __DEC_interaction_packagedElement_280004 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_641488 = null;\n      MessageEnd __DEC_message_message_641488 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_572350 = null;\n      Message __DEC_messageReceive_receiveEvent_572350 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_917287 = null;\n      Message __DEC_messageReceive_sendEvent_917287 = null;\n      Match match = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Iterator fujaba__IterInteractionToMessage = null;\n      Message message = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Interaction interaction = null;\n      ModalSequenceDiagram.Package _package = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_packagedElement is really bound\n         JavaSDM.ensure ( _edge_packagedElement != null );\n         // bind object\n         _TmpObject = _edge_packagedElement.getSrc ();\n\n         // ensure correct type and really bound of object _package\n         JavaSDM.ensure ( _TmpObject instanceof ModalSequenceDiagram.Package );\n         _package = (ModalSequenceDiagram.Package) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_packagedElement.getTrg ();\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n\n         // check link packagedElement from interaction to _package\n         JavaSDM.ensure (_package.equals (interaction.eContainer()\n         ));\n\n         // iterate to-many link lifeline from interaction to line\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n         while ( fujaba__IterInteractionToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // iterate to-many link message from interaction to message\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToMessage = new ArrayList(interaction.getMessage()).iterator ();\n\n               while ( fujaba__IterInteractionToMessage.hasNext () )\n               {\n                  try\n                  {\n                     message = (Message) fujaba__IterInteractionToMessage.next ();\n\n                     // check object message is really bound\n                     JavaSDM.ensure ( message != null );\n                     // bind object\n                     _TmpObject = message.getReceiveEvent ();\n\n                     // ensure correct type and really bound of object messageReceive\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n                     // check link fragment from messageReceive to interaction\n                     JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                     ));\n\n                     // check link message from messageReceive to message\n                     JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                     ));\n\n                     // check link covered from line to messageReceive\n                     JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from interaction\n                        JavaSDM.ensure (interaction.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_interaction_enclosingInteraction_736586 = interaction.getEnclosingInteraction ();\n\n                           // check object __DEC_interaction_enclosingInteraction_736586 is really bound\n                           JavaSDM.ensure ( __DEC_interaction_enclosingInteraction_736586 != null );\n\n                           // check isomorphic binding between objects __DEC_interaction_enclosingInteraction_736586 and interaction \n                           JavaSDM.ensure ( !__DEC_interaction_enclosingInteraction_736586.equals (interaction) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_message_sendEvent_563131 = message.getSendEvent ();\n\n                           // check object __DEC_message_sendEvent_563131 is really bound\n                           JavaSDM.ensure ( __DEC_message_sendEvent_563131 != null );\n\n                           // check isomorphic binding between objects __DEC_message_sendEvent_563131 and messageReceive \n                           JavaSDM.ensure ( !__DEC_message_sendEvent_563131.equals (messageReceive) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_interaction_packagedElement_280004 = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n                           // check object __DEC_interaction_packagedElement_280004 is really bound\n                           JavaSDM.ensure ( __DEC_interaction_packagedElement_280004 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_interaction_packagedElement_280004.getPackagedElement().contains(interaction));\n\n                           // check isomorphic binding between objects __DEC_interaction_packagedElement_280004 and _package \n                           JavaSDM.ensure ( !__DEC_interaction_packagedElement_280004.equals (_package) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_641488\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_641488 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_641488.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_641488 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_641488.next ();\n\n                                 // check object __DEC_message_message_641488 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_641488 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_641488 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_641488.equals (messageReceive) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_572350\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_572350 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_572350.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_572350 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_572350.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_572350 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_572350 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_572350 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_572350.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_917287\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_917287 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_917287.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_917287 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_917287.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_917287 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_917287 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_917287 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_917287.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check link fragment from interaction to interaction\n                        JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                        )));\n\n                        // check link fragment from interaction to interaction\n                        JavaSDM.ensure (!(interaction.equals (interaction.getEnclosingInteraction ()\n                        )));\n\n                        // check object _edge_packagedElement is really bound\n                        JavaSDM.ensure ( _edge_packagedElement != null );\n                        // check object _package is really bound\n                        JavaSDM.ensure ( _package != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link packagedElement from interaction to _package\n                        JavaSDM.ensure (_package.equals (interaction.eContainer()\n                        ));\n\n                        // check link src from _edge_packagedElement to _package\n                        JavaSDM.ensure (_package.equals (_edge_packagedElement.getSrc ()\n                        ));\n\n                        // check link trg from _edge_packagedElement to interaction\n                        JavaSDM.ensure (interaction.equals (_edge_packagedElement.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,message,interaction,messageReceive,line,_package);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_89(
			EMoflonEdge _edge_packagedElement);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      PackageDeclaration __DEC_actor_actors_517332 = null;\n      UseCase __DEC_basicFlow_flows_717574 = null;\n      PackageDeclaration __DEC_useCase_useCases_817891 = null;\n      Match match = null;\n      Iterator fujaba__IterPackageDeclarationToActor = null;\n      Actor actor = null;\n      PackageDeclaration packageDeclaration = null;\n      BasicFlow basicFlow = null;\n      UseCase useCase = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flows is really bound\n         JavaSDM.ensure ( _edge_flows != null );\n         // bind object\n         _TmpObject = _edge_flows.getSrc ();\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flows.getTrg ();\n\n         // ensure correct type and really bound of object basicFlow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         basicFlow = (BasicFlow) _TmpObject;\n\n         // check link flows from basicFlow to useCase\n         JavaSDM.ensure (useCase.equals (basicFlow.eContainer()\n         ));\n\n         // bind object\n         packageDeclaration = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase.eContainer() : null;\n\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(packageDeclaration.getUseCases().contains(useCase));\n\n         // iterate to-many link actors from packageDeclaration to actor\n         fujaba__Success = false;\n\n         fujaba__IterPackageDeclarationToActor = new ArrayList(packageDeclaration.getActors()).iterator ();\n\n         while ( fujaba__IterPackageDeclarationToActor.hasNext () )\n         {\n            try\n            {\n               actor = (Actor) fujaba__IterPackageDeclarationToActor.next ();\n\n               // check object actor is really bound\n               JavaSDM.ensure ( actor != null );\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_actor_actors_517332 = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor.eContainer() : null;\n\n                     // check object __DEC_actor_actors_517332 is really bound\n                     JavaSDM.ensure ( __DEC_actor_actors_517332 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_actor_actors_517332.getActors().contains(actor));\n\n                     // check isomorphic binding between objects __DEC_actor_actors_517332 and packageDeclaration \n                     JavaSDM.ensure ( !__DEC_actor_actors_517332.equals (packageDeclaration) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_basicFlow_flows_717574 = basicFlow.eContainer() instanceof UseCase ? (UseCase) basicFlow.eContainer() : null;\n\n                     // check object __DEC_basicFlow_flows_717574 is really bound\n                     JavaSDM.ensure ( __DEC_basicFlow_flows_717574 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_basicFlow_flows_717574.getFlows().contains(basicFlow));\n\n                     // check isomorphic binding between objects __DEC_basicFlow_flows_717574 and useCase \n                     JavaSDM.ensure ( !__DEC_basicFlow_flows_717574.equals (useCase) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_useCase_useCases_817891 = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase.eContainer() : null;\n\n                     // check object __DEC_useCase_useCases_817891 is really bound\n                     JavaSDM.ensure ( __DEC_useCase_useCases_817891 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_useCase_useCases_817891.getUseCases().contains(useCase));\n\n                     // check isomorphic binding between objects __DEC_useCase_useCases_817891 and packageDeclaration \n                     JavaSDM.ensure ( !__DEC_useCase_useCases_817891.equals (packageDeclaration) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_flows is really bound\n                  JavaSDM.ensure ( _edge_flows != null );\n                  // check object actor is really bound\n                  JavaSDM.ensure ( actor != null );\n                  // check object basicFlow is really bound\n                  JavaSDM.ensure ( basicFlow != null );\n                  // check object packageDeclaration is really bound\n                  JavaSDM.ensure ( packageDeclaration != null );\n                  // check object useCase is really bound\n                  JavaSDM.ensure ( useCase != null );\n                  // check link actors from actor to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                  ));\n\n                  // check link flows from basicFlow to useCase\n                  JavaSDM.ensure (useCase.equals (basicFlow.eContainer()\n                  ));\n\n                  // check link src from _edge_flows to useCase\n                  JavaSDM.ensure (useCase.equals (_edge_flows.getSrc ()\n                  ));\n\n                  // check link trg from _edge_flows to basicFlow\n                  JavaSDM.ensure (basicFlow.equals (_edge_flows.getTrg ()\n                  ));\n\n                  // check link useCases from useCase to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,useCase,actor,packageDeclaration,basicFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_23(EMoflonEdge _edge_flows);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // UseCasePrecondToFoundMessageRule
