/**
 */
package UseCaseToModalSequenceDiagramIntegration.Rules;

import ModalSequenceDiagram.Collaboration;
import ModalSequenceDiagram.ModalSequenceDiagramFactory;
import ModalSequenceDiagram.Model;

import TGGLanguage.csp.*;

import TGGLanguage.modelgenerator.RuleEntryContainer;
import TGGLanguage.modelgenerator.RuleEntryList;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.ModelgeneratorRuleResult;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import UseCaseToModalSequenceDiagramIntegration.PackageDeclarationToPackage;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToCollaboration;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToModalSequenceDiagramIntegrationFactory;
import UseCaseToModalSequenceDiagramIntegration.UseCasesModelToModel;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>UC Package To MSD Package</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see UseCaseToModalSequenceDiagramIntegration.Rules.RulesPackage#getUCPackageToMSDPackage()
 * @model
 * @generated
 */
public interface UCPackageToMSDPackage extends EObject, AbstractRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __useCasesModel_packages_packageDeclaration = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object useCasesModel is really bound\n         JavaSDM.ensure ( useCasesModel != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,useCasesModel,packageDeclaration));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object useCasesModel is really bound\n            JavaSDM.ensure ( useCasesModel != null );\n            // create object __useCasesModel_packages_packageDeclaration\n            __useCasesModel_packages_packageDeclaration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __useCasesModel_packages_packageDeclaration\n            __useCasesModel_packages_packageDeclaration.setName (\"packages\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,packageDeclaration,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__useCasesModel_packages_packageDeclaration,\"toBeTranslatedEdges\");\n\n            // create link\n            __useCasesModel_packages_packageDeclaration.setSrc( useCasesModel);\n\n\n            // create link\n            __useCasesModel_packages_packageDeclaration.setTrg( packageDeclaration);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object useCasesModel is really bound\n            JavaSDM.ensure ( useCasesModel != null );\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,useCasesModel,\"contextNodes\");\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,useCasesModel,packageDeclaration);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, UseCasesModel useCasesModel,
			PackageDeclaration packageDeclaration);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      PackageDeclaration packageDeclaration = null;\n      UseCasesModel useCasesModel = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __useCasesModel_packages_packageDeclaration = null;\n      EMoflonEdge __useCasesModelToModel_source_useCasesModel = null;\n      EMoflonEdge __useCasesModelToModel_target_model = null;\n      CSP csp = null;\n      Model model = null;\n      Iterator fujaba__IterUseCasesModelToUseCasesModelToModel = null;\n      UseCasesModelToModel useCasesModelToModel = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"UCPackageToMSDPackage\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (match.getObject(\"useCasesModel\"));\n\n         // ensure correct type and really bound of object useCasesModel\n         JavaSDM.ensure ( _TmpObject instanceof UseCasesModel );\n         useCasesModel = (UseCasesModel) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link source from useCasesModel to useCasesModelToModel\n         fujaba__Success = false;\n\n         fujaba__IterUseCasesModelToUseCasesModelToModel = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(useCasesModel,UseCasesModelToModel.class,\"source\")).iterator ();\n\n         while ( fujaba__IterUseCasesModelToUseCasesModelToModel.hasNext () )\n         {\n            try\n            {\n               useCasesModelToModel = (UseCasesModelToModel) fujaba__IterUseCasesModelToUseCasesModelToModel.next ();\n\n               // check object useCasesModelToModel is really bound\n               JavaSDM.ensure ( useCasesModelToModel != null );\n               // bind object\n               model = useCasesModelToModel.getTarget ();\n\n               // check object model is really bound\n               JavaSDM.ensure ( model != null );\n\n               // story node \'find context\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check object model is really bound\n                  JavaSDM.ensure ( model != null );\n                  // check object packageDeclaration is really bound\n                  JavaSDM.ensure ( packageDeclaration != null );\n                  // check object useCasesModel is really bound\n                  JavaSDM.ensure ( useCasesModel != null );\n                  // check object useCasesModelToModel is really bound\n                  JavaSDM.ensure ( useCasesModelToModel != null );\n                  // check link packages from packageDeclaration to useCasesModel\n                  JavaSDM.ensure (useCasesModel.equals (packageDeclaration.eContainer()\n                  ));\n\n                  // check link source from useCasesModelToModel to useCasesModel\n                  JavaSDM.ensure (useCasesModel.equals (useCasesModelToModel.getSource ()\n                  ));\n\n                  // check link target from useCasesModelToModel to model\n                  JavaSDM.ensure (model.equals (useCasesModelToModel.getTarget ()\n                  ));\n\n                  // create object isApplicableMatch\n                  isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                  // create object __useCasesModel_packages_packageDeclaration\n                  __useCasesModel_packages_packageDeclaration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __useCasesModelToModel_source_useCasesModel\n                  __useCasesModelToModel_source_useCasesModel = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __useCasesModelToModel_target_model\n                  __useCasesModelToModel_target_model = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // assign attribute __useCasesModel_packages_packageDeclaration\n                  __useCasesModel_packages_packageDeclaration.setName (\"packages\");\n                  // assign attribute __useCasesModelToModel_source_useCasesModel\n                  __useCasesModelToModel_source_useCasesModel.setName (\"source\");\n                  // assign attribute __useCasesModelToModel_target_model\n                  __useCasesModelToModel_target_model.setName (\"target\");\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(useCasesModel);\n\n\n                  // create link\n                  __useCasesModel_packages_packageDeclaration.setSrc( useCasesModel);\n\n\n                  // create link\n                  __useCasesModelToModel_source_useCasesModel.setTrg( useCasesModel);\n\n\n                  // create link\n                  __useCasesModelToModel_target_model.setTrg( model);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(model);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(useCasesModelToModel);\n\n\n                  // create link\n                  __useCasesModelToModel_target_model.setSrc( useCasesModelToModel);\n\n\n                  // create link\n                  __useCasesModelToModel_source_useCasesModel.setSrc( useCasesModelToModel);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                  // create link\n                  __useCasesModel_packages_packageDeclaration.setTrg( packageDeclaration);\n\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCasesModelToModel_source_useCasesModel,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCasesModel_packages_packageDeclaration,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCasesModelToModel_target_model,\"allContextElements\");\n                  // story node \'solve CSP\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,useCasesModel,model,useCasesModelToModel,packageDeclaration));\n\n                     // ensure correct type and really bound of object csp\n                     JavaSDM.ensure ( _TmpObject instanceof CSP );\n                     csp = (CSP) _TmpObject;\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  // statement node \'check CSP\'\n                  fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                  if (fujaba__Success)\n                  {\n                     // story node \'add match to rule result\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object isApplicableMatch is really bound\n                        JavaSDM.ensure ( isApplicableMatch != null );\n                        // check object ruleresult is really bound\n                        JavaSDM.ensure ( ruleresult != null );\n                        // assign attribute ruleresult\n                        ruleresult.setSuccess (true);\n                        // assign attribute isApplicableMatch\n                        isApplicableMatch.setRuleName (\"UCPackageToMSDPackage\");\n\n                        // create link\n                        isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Model model = null;\n      PackageDeclaration packageDeclaration = null;\n      UseCasesModel useCasesModel = null;\n      UseCasesModelToModel useCasesModelToModel = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      ModalSequenceDiagram.Package p = null;\n      PackageDeclarationToPackage packageDeclarationToPackage = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge packageDeclarationToPackage__target__p = null;\n      EMoflonEdge model__packagedElement__p = null;\n      EMoflonEdge packageDeclarationToPackage__source__packageDeclaration = null;\n      EMoflonEdge __useCasesModel_packages_packageDeclaration = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"model\"));\n\n         // ensure correct type and really bound of object model\n         JavaSDM.ensure ( _TmpObject instanceof Model );\n         model = (Model) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCasesModel\"));\n\n         // ensure correct type and really bound of object useCasesModel\n         JavaSDM.ensure ( _TmpObject instanceof UseCasesModel );\n         useCasesModel = (UseCasesModel) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCasesModelToModel\"));\n\n         // ensure correct type and really bound of object useCasesModelToModel\n         JavaSDM.ensure ( _TmpObject instanceof UseCasesModelToModel );\n         useCasesModelToModel = (UseCasesModelToModel) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object p\n         p = ModalSequenceDiagramFactory.eINSTANCE.createPackage();\n\n         // create object packageDeclarationToPackage\n         packageDeclarationToPackage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createPackageDeclarationToPackage();\n\n         // assign attribute p\n         p.setName ((java.lang.String)csp.getAttributeVariable(\"p\",\"name\").getValue());\n\n         // create link\n         \tmodel.getPackagedElement().add(p); // add link\n\n\n         // create link\n         packageDeclarationToPackage.setSource( packageDeclaration);\n\n\n         // create link\n         packageDeclarationToPackage.setTarget( p);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object p is really bound\n         JavaSDM.ensure ( p != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object packageDeclarationToPackage is really bound\n         JavaSDM.ensure ( packageDeclarationToPackage != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,packageDeclarationToPackage,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,p,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,packageDeclaration,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object model is really bound\n         JavaSDM.ensure ( model != null );\n         // check object p is really bound\n         JavaSDM.ensure ( p != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object packageDeclarationToPackage is really bound\n         JavaSDM.ensure ( packageDeclarationToPackage != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object useCasesModel is really bound\n         JavaSDM.ensure ( useCasesModel != null );\n         // check object useCasesModelToModel is really bound\n         JavaSDM.ensure ( useCasesModelToModel != null );\n         // check isomorphic binding between objects p and model \n         JavaSDM.ensure ( !p.equals (model) );\n\n         // check isomorphic binding between objects packageDeclaration and model \n         JavaSDM.ensure ( !packageDeclaration.equals (model) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and model \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (model) );\n\n         // check isomorphic binding between objects useCasesModel and model \n         JavaSDM.ensure ( !useCasesModel.equals (model) );\n\n         // check isomorphic binding between objects useCasesModelToModel and model \n         JavaSDM.ensure ( !useCasesModelToModel.equals (model) );\n\n         // check isomorphic binding between objects packageDeclaration and p \n         JavaSDM.ensure ( !packageDeclaration.equals (p) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and p \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (p) );\n\n         // check isomorphic binding between objects useCasesModel and p \n         JavaSDM.ensure ( !useCasesModel.equals (p) );\n\n         // check isomorphic binding between objects useCasesModelToModel and p \n         JavaSDM.ensure ( !useCasesModelToModel.equals (p) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and packageDeclaration \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCasesModel and packageDeclaration \n         JavaSDM.ensure ( !useCasesModel.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCasesModelToModel and packageDeclaration \n         JavaSDM.ensure ( !useCasesModelToModel.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCasesModel and packageDeclarationToPackage \n         JavaSDM.ensure ( !useCasesModel.equals (packageDeclarationToPackage) );\n\n         // check isomorphic binding between objects useCasesModelToModel and packageDeclarationToPackage \n         JavaSDM.ensure ( !useCasesModelToModel.equals (packageDeclarationToPackage) );\n\n         // check isomorphic binding between objects useCasesModelToModel and useCasesModel \n         JavaSDM.ensure ( !useCasesModelToModel.equals (useCasesModel) );\n\n         // create object packageDeclarationToPackage__target__p\n         packageDeclarationToPackage__target__p = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object model__packagedElement__p\n         model__packagedElement__p = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object packageDeclarationToPackage__source__packageDeclaration\n         packageDeclarationToPackage__source__packageDeclaration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __useCasesModel_packages_packageDeclaration\n         __useCasesModel_packages_packageDeclaration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"UCPackageToMSDPackage\");\n         // assign attribute __useCasesModel_packages_packageDeclaration\n         __useCasesModel_packages_packageDeclaration.setName (\"packages\");\n         // assign attribute model__packagedElement__p\n         model__packagedElement__p.setName (\"packagedElement\");\n         // assign attribute packageDeclarationToPackage__source__packageDeclaration\n         packageDeclarationToPackage__source__packageDeclaration.setName (\"source\");\n         // assign attribute packageDeclarationToPackage__target__p\n         packageDeclarationToPackage__target__p.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,packageDeclarationToPackage__target__p,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,model__packagedElement__p,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,packageDeclarationToPackage__source__packageDeclaration,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__useCasesModel_packages_packageDeclaration,\"translatedEdges\");\n\n         // create link\n         __useCasesModel_packages_packageDeclaration.setSrc( useCasesModel);\n\n\n         // create link\n         model__packagedElement__p.setSrc( model);\n\n\n         // create link\n         __useCasesModel_packages_packageDeclaration.setTrg( packageDeclaration);\n\n\n         // create link\n         packageDeclarationToPackage__source__packageDeclaration.setTrg( packageDeclaration);\n\n\n         // create link\n         packageDeclarationToPackage__target__p.setTrg( p);\n\n\n         // create link\n         model__packagedElement__p.setTrg( p);\n\n\n         // create link\n         packageDeclarationToPackage__source__packageDeclaration.setSrc( packageDeclarationToPackage);\n\n\n         // create link\n         packageDeclarationToPackage__target__p.setSrc( packageDeclarationToPackage);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,useCasesModel,model,useCasesModelToModel,packageDeclaration,p,packageDeclarationToPackage);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"useCasesModel\", useCasesModel);\nmatch.registerObject(\"packageDeclaration\", packageDeclaration);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, UseCasesModel useCasesModel,
			PackageDeclaration packageDeclaration);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, UseCasesModel useCasesModel,
			PackageDeclaration packageDeclaration);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_packageDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(\"packageDeclaration.name\", true, csp);\r\nvar_packageDeclaration_name.setValue(packageDeclaration.getName());\r\nvar_packageDeclaration_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_p_name = CSPFactoryHelper.eINSTANCE.createVariable(\"p.name\", csp);\r\nvar_p_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_packageDeclaration_name,var_p_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"useCasesModel\",useCasesModel);\r\nisApplicableMatch.registerObject(\"model\",model);\r\nisApplicableMatch.registerObject(\"useCasesModelToModel\",useCasesModelToModel);\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			UseCasesModel useCasesModel, Model model,
			UseCasesModelToModel useCasesModelToModel,
			PackageDeclaration packageDeclaration);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"useCasesModel\", useCasesModel);\nruleresult.registerObject(\"model\", model);\nruleresult.registerObject(\"useCasesModelToModel\", useCasesModelToModel);\nruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"p\", p);\nruleresult.registerObject(\"packageDeclarationToPackage\", packageDeclarationToPackage);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult,
			EObject useCasesModel, EObject model, EObject useCasesModelToModel,
			EObject packageDeclaration, EObject p,
			EObject packageDeclarationToPackage);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"packageDeclaration\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getPackageDeclaration());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __model_packagedElement_p = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object model is really bound\n         JavaSDM.ensure ( model != null );\n         // check object p is really bound\n         JavaSDM.ensure ( p != null );\n         // check isomorphic binding between objects p and model \n         JavaSDM.ensure ( !p.equals (model) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,model,p));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object model is really bound\n            JavaSDM.ensure ( model != null );\n            // check object p is really bound\n            JavaSDM.ensure ( p != null );\n            // check isomorphic binding between objects p and model \n            JavaSDM.ensure ( !p.equals (model) );\n\n            // create object __model_packagedElement_p\n            __model_packagedElement_p = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __model_packagedElement_p\n            __model_packagedElement_p.setName (\"packagedElement\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__model_packagedElement_p,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,p,\"toBeTranslatedNodes\");\n\n            // create link\n            __model_packagedElement_p.setSrc( model);\n\n\n            // create link\n            __model_packagedElement_p.setTrg( p);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object model is really bound\n            JavaSDM.ensure ( model != null );\n            // check object p is really bound\n            JavaSDM.ensure ( p != null );\n            // check isomorphic binding between objects p and model \n            JavaSDM.ensure ( !p.equals (model) );\n\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,model,\"contextNodes\");\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,model,p);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, Model model,
			ModalSequenceDiagram.Package p);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Model model = null;\n      ModalSequenceDiagram.Package p = null;\n      EMoflonEdge __useCasesModelToModel_source_useCasesModel = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __useCasesModelToModel_target_model = null;\n      EMoflonEdge __model_packagedElement_p = null;\n      CSP csp = null;\n      UseCasesModel useCasesModel = null;\n      Iterator fujaba__IterModelToUseCasesModelToModel = null;\n      UseCasesModelToModel useCasesModelToModel = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"UCPackageToMSDPackage\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"model\"));\n\n         // ensure correct type and really bound of object model\n         JavaSDM.ensure ( _TmpObject instanceof Model );\n         model = (Model) _TmpObject;\n         _TmpObject = (match.getObject(\"p\"));\n\n         // ensure correct type and really bound of object p\n         JavaSDM.ensure ( _TmpObject instanceof ModalSequenceDiagram.Package );\n         p = (ModalSequenceDiagram.Package) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects p and model \n         JavaSDM.ensure ( !p.equals (model) );\n\n         // iterate to-many link target from model to useCasesModelToModel\n         fujaba__Success = false;\n\n         fujaba__IterModelToUseCasesModelToModel = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(model,UseCasesModelToModel.class,\"target\")).iterator ();\n\n         while ( fujaba__IterModelToUseCasesModelToModel.hasNext () )\n         {\n            try\n            {\n               useCasesModelToModel = (UseCasesModelToModel) fujaba__IterModelToUseCasesModelToModel.next ();\n\n               // check object useCasesModelToModel is really bound\n               JavaSDM.ensure ( useCasesModelToModel != null );\n               // bind object\n               useCasesModel = useCasesModelToModel.getSource ();\n\n               // check object useCasesModel is really bound\n               JavaSDM.ensure ( useCasesModel != null );\n\n               // story node \'find context\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check object model is really bound\n                  JavaSDM.ensure ( model != null );\n                  // check object p is really bound\n                  JavaSDM.ensure ( p != null );\n                  // check object useCasesModel is really bound\n                  JavaSDM.ensure ( useCasesModel != null );\n                  // check object useCasesModelToModel is really bound\n                  JavaSDM.ensure ( useCasesModelToModel != null );\n                  // check isomorphic binding between objects p and model \n                  JavaSDM.ensure ( !p.equals (model) );\n\n                  // check link packagedElement from p to model\n                  JavaSDM.ensure (model.equals (p.eContainer()\n                  ));\n\n                  // check link source from useCasesModelToModel to useCasesModel\n                  JavaSDM.ensure (useCasesModel.equals (useCasesModelToModel.getSource ()\n                  ));\n\n                  // check link target from useCasesModelToModel to model\n                  JavaSDM.ensure (model.equals (useCasesModelToModel.getTarget ()\n                  ));\n\n                  // create object __useCasesModelToModel_source_useCasesModel\n                  __useCasesModelToModel_source_useCasesModel = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object isApplicableMatch\n                  isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                  // create object __useCasesModelToModel_target_model\n                  __useCasesModelToModel_target_model = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __model_packagedElement_p\n                  __model_packagedElement_p = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // assign attribute __model_packagedElement_p\n                  __model_packagedElement_p.setName (\"packagedElement\");\n                  // assign attribute __useCasesModelToModel_source_useCasesModel\n                  __useCasesModelToModel_source_useCasesModel.setName (\"source\");\n                  // assign attribute __useCasesModelToModel_target_model\n                  __useCasesModelToModel_target_model.setName (\"target\");\n\n                  // create link\n                  __useCasesModelToModel_source_useCasesModel.setTrg( useCasesModel);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(useCasesModel);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(model);\n\n\n                  // create link\n                  __useCasesModelToModel_target_model.setTrg( model);\n\n\n                  // create link\n                  __model_packagedElement_p.setSrc( model);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(useCasesModelToModel);\n\n\n                  // create link\n                  __useCasesModelToModel_source_useCasesModel.setSrc( useCasesModelToModel);\n\n\n                  // create link\n                  __useCasesModelToModel_target_model.setSrc( useCasesModelToModel);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(p);\n\n\n                  // create link\n                  __model_packagedElement_p.setTrg( p);\n\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__model_packagedElement_p,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCasesModelToModel_source_useCasesModel,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCasesModelToModel_target_model,\"allContextElements\");\n                  // story node \'solve CSP\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,useCasesModel,model,useCasesModelToModel,p));\n\n                     // ensure correct type and really bound of object csp\n                     JavaSDM.ensure ( _TmpObject instanceof CSP );\n                     csp = (CSP) _TmpObject;\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  // statement node \'check CSP\'\n                  fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                  if (fujaba__Success)\n                  {\n                     // story node \'add match to rule result\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object isApplicableMatch is really bound\n                        JavaSDM.ensure ( isApplicableMatch != null );\n                        // check object ruleresult is really bound\n                        JavaSDM.ensure ( ruleresult != null );\n                        // assign attribute ruleresult\n                        ruleresult.setSuccess (true);\n                        // assign attribute isApplicableMatch\n                        isApplicableMatch.setRuleName (\"UCPackageToMSDPackage\");\n\n                        // create link\n                        isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Model model = null;\n      ModalSequenceDiagram.Package p = null;\n      UseCasesModel useCasesModel = null;\n      UseCasesModelToModel useCasesModelToModel = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      PackageDeclaration packageDeclaration = null;\n      PackageDeclarationToPackage packageDeclarationToPackage = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge useCasesModel__packages__packageDeclaration = null;\n      EMoflonEdge packageDeclarationToPackage__source__packageDeclaration = null;\n      EMoflonEdge packageDeclarationToPackage__target__p = null;\n      EMoflonEdge __model_packagedElement_p = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"model\"));\n\n         // ensure correct type and really bound of object model\n         JavaSDM.ensure ( _TmpObject instanceof Model );\n         model = (Model) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"p\"));\n\n         // ensure correct type and really bound of object p\n         JavaSDM.ensure ( _TmpObject instanceof ModalSequenceDiagram.Package );\n         p = (ModalSequenceDiagram.Package) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCasesModel\"));\n\n         // ensure correct type and really bound of object useCasesModel\n         JavaSDM.ensure ( _TmpObject instanceof UseCasesModel );\n         useCasesModel = (UseCasesModel) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCasesModelToModel\"));\n\n         // ensure correct type and really bound of object useCasesModelToModel\n         JavaSDM.ensure ( _TmpObject instanceof UseCasesModelToModel );\n         useCasesModelToModel = (UseCasesModelToModel) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects p and model \n         JavaSDM.ensure ( !p.equals (model) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object packageDeclaration\n         packageDeclaration = UseCaseDSLFactory.eINSTANCE.createPackageDeclaration();\n\n         // create object packageDeclarationToPackage\n         packageDeclarationToPackage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createPackageDeclarationToPackage();\n\n         // assign attribute packageDeclaration\n         packageDeclaration.setName ((java.lang.String)csp.getAttributeVariable(\"packageDeclaration\",\"name\").getValue());\n\n         // create link\n         packageDeclarationToPackage.setTarget( p);\n\n\n         // create link\n         \tuseCasesModel.getPackages().add(packageDeclaration); // add link\n\n\n         // create link\n         packageDeclarationToPackage.setSource( packageDeclaration);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object p is really bound\n         JavaSDM.ensure ( p != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object packageDeclarationToPackage is really bound\n         JavaSDM.ensure ( packageDeclarationToPackage != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,packageDeclaration,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,packageDeclarationToPackage,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,p,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object model is really bound\n         JavaSDM.ensure ( model != null );\n         // check object p is really bound\n         JavaSDM.ensure ( p != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object packageDeclarationToPackage is really bound\n         JavaSDM.ensure ( packageDeclarationToPackage != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object useCasesModel is really bound\n         JavaSDM.ensure ( useCasesModel != null );\n         // check object useCasesModelToModel is really bound\n         JavaSDM.ensure ( useCasesModelToModel != null );\n         // check isomorphic binding between objects p and model \n         JavaSDM.ensure ( !p.equals (model) );\n\n         // check isomorphic binding between objects packageDeclaration and model \n         JavaSDM.ensure ( !packageDeclaration.equals (model) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and model \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (model) );\n\n         // check isomorphic binding between objects useCasesModel and model \n         JavaSDM.ensure ( !useCasesModel.equals (model) );\n\n         // check isomorphic binding between objects useCasesModelToModel and model \n         JavaSDM.ensure ( !useCasesModelToModel.equals (model) );\n\n         // check isomorphic binding between objects packageDeclaration and p \n         JavaSDM.ensure ( !packageDeclaration.equals (p) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and p \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (p) );\n\n         // check isomorphic binding between objects useCasesModel and p \n         JavaSDM.ensure ( !useCasesModel.equals (p) );\n\n         // check isomorphic binding between objects useCasesModelToModel and p \n         JavaSDM.ensure ( !useCasesModelToModel.equals (p) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and packageDeclaration \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCasesModel and packageDeclaration \n         JavaSDM.ensure ( !useCasesModel.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCasesModelToModel and packageDeclaration \n         JavaSDM.ensure ( !useCasesModelToModel.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCasesModel and packageDeclarationToPackage \n         JavaSDM.ensure ( !useCasesModel.equals (packageDeclarationToPackage) );\n\n         // check isomorphic binding between objects useCasesModelToModel and packageDeclarationToPackage \n         JavaSDM.ensure ( !useCasesModelToModel.equals (packageDeclarationToPackage) );\n\n         // check isomorphic binding between objects useCasesModelToModel and useCasesModel \n         JavaSDM.ensure ( !useCasesModelToModel.equals (useCasesModel) );\n\n         // create object useCasesModel__packages__packageDeclaration\n         useCasesModel__packages__packageDeclaration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object packageDeclarationToPackage__source__packageDeclaration\n         packageDeclarationToPackage__source__packageDeclaration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object packageDeclarationToPackage__target__p\n         packageDeclarationToPackage__target__p = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __model_packagedElement_p\n         __model_packagedElement_p = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"UCPackageToMSDPackage\");\n         // assign attribute useCasesModel__packages__packageDeclaration\n         useCasesModel__packages__packageDeclaration.setName (\"packages\");\n         // assign attribute __model_packagedElement_p\n         __model_packagedElement_p.setName (\"packagedElement\");\n         // assign attribute packageDeclarationToPackage__source__packageDeclaration\n         packageDeclarationToPackage__source__packageDeclaration.setName (\"source\");\n         // assign attribute packageDeclarationToPackage__target__p\n         packageDeclarationToPackage__target__p.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCasesModel__packages__packageDeclaration,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,packageDeclarationToPackage__source__packageDeclaration,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,packageDeclarationToPackage__target__p,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__model_packagedElement_p,\"translatedEdges\");\n\n         // create link\n         useCasesModel__packages__packageDeclaration.setSrc( useCasesModel);\n\n\n         // create link\n         __model_packagedElement_p.setSrc( model);\n\n\n         // create link\n         packageDeclarationToPackage__source__packageDeclaration.setTrg( packageDeclaration);\n\n\n         // create link\n         useCasesModel__packages__packageDeclaration.setTrg( packageDeclaration);\n\n\n         // create link\n         packageDeclarationToPackage__target__p.setTrg( p);\n\n\n         // create link\n         __model_packagedElement_p.setTrg( p);\n\n\n         // create link\n         packageDeclarationToPackage__source__packageDeclaration.setSrc( packageDeclarationToPackage);\n\n\n         // create link\n         packageDeclarationToPackage__target__p.setSrc( packageDeclarationToPackage);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,useCasesModel,model,useCasesModelToModel,packageDeclaration,p,packageDeclarationToPackage);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"model\", model);\nmatch.registerObject(\"p\", p);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, Model model,
			ModalSequenceDiagram.Package p);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, Model model,
			ModalSequenceDiagram.Package p);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_p_name = CSPFactoryHelper.eINSTANCE.createVariable(\"p.name\", true, csp);\r\nvar_p_name.setValue(p.getName());\r\nvar_p_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_packageDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(\"packageDeclaration.name\", csp);\r\nvar_packageDeclaration_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_packageDeclaration_name,var_p_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"useCasesModel\",useCasesModel);\r\nisApplicableMatch.registerObject(\"model\",model);\r\nisApplicableMatch.registerObject(\"useCasesModelToModel\",useCasesModelToModel);\r\nisApplicableMatch.registerObject(\"p\",p);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			UseCasesModel useCasesModel, Model model,
			UseCasesModelToModel useCasesModelToModel,
			ModalSequenceDiagram.Package p);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"useCasesModel\", useCasesModel);\nruleresult.registerObject(\"model\", model);\nruleresult.registerObject(\"useCasesModelToModel\", useCasesModelToModel);\nruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"p\", p);\nruleresult.registerObject(\"packageDeclarationToPackage\", packageDeclarationToPackage);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult,
			EObject useCasesModel, EObject model, EObject useCasesModelToModel,
			EObject packageDeclaration, EObject p,
			EObject packageDeclarationToPackage);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"p\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getPackage());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCasesModel __DEC_packageDeclaration_packages_986212 = null;\n      Match match = null;\n      PackageDeclaration packageDeclaration = null;\n      UseCasesModel useCasesModel = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_packages is really bound\n         JavaSDM.ensure ( _edge_packages != null );\n         // bind object\n         _TmpObject = _edge_packages.getSrc ();\n\n         // ensure correct type and really bound of object useCasesModel\n         JavaSDM.ensure ( _TmpObject instanceof UseCasesModel );\n         useCasesModel = (UseCasesModel) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_packages.getTrg ();\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n\n         // check link packages from packageDeclaration to useCasesModel\n         JavaSDM.ensure (useCasesModel.equals (packageDeclaration.eContainer()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_packageDeclaration_packages_986212 = packageDeclaration.eContainer() instanceof UseCasesModel ? (UseCasesModel) packageDeclaration.eContainer() : null;\n\n               // check object __DEC_packageDeclaration_packages_986212 is really bound\n               JavaSDM.ensure ( __DEC_packageDeclaration_packages_986212 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_packageDeclaration_packages_986212.getPackages().contains(packageDeclaration));\n\n               // check isomorphic binding between objects __DEC_packageDeclaration_packages_986212 and useCasesModel \n               JavaSDM.ensure ( !__DEC_packageDeclaration_packages_986212.equals (useCasesModel) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check object _edge_packages is really bound\n            JavaSDM.ensure ( _edge_packages != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object useCasesModel is really bound\n            JavaSDM.ensure ( useCasesModel != null );\n            // check link packages from packageDeclaration to useCasesModel\n            JavaSDM.ensure (useCasesModel.equals (packageDeclaration.eContainer()\n            ));\n\n            // check link src from _edge_packages to useCasesModel\n            JavaSDM.ensure (useCasesModel.equals (_edge_packages.getSrc ()\n            ));\n\n            // check link trg from _edge_packages to packageDeclaration\n            JavaSDM.ensure (packageDeclaration.equals (_edge_packages.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_FWD(match,useCasesModel,packageDeclaration);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_FWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_4(EMoflonEdge _edge_packages);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      ModalSequenceDiagram.Package __DEC_p_packagedElement_955385 = null;\n      Match match = null;\n      ModalSequenceDiagram.Package p = null;\n      Model model = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_packagedElement is really bound\n         JavaSDM.ensure ( _edge_packagedElement != null );\n         // bind object\n         _TmpObject = _edge_packagedElement.getSrc ();\n\n         // ensure correct type and really bound of object model\n         JavaSDM.ensure ( _TmpObject instanceof Model );\n         model = (Model) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_packagedElement.getTrg ();\n\n         // ensure correct type and really bound of object p\n         JavaSDM.ensure ( _TmpObject instanceof ModalSequenceDiagram.Package );\n         p = (ModalSequenceDiagram.Package) _TmpObject;\n\n         // check isomorphic binding between objects p and model \n         JavaSDM.ensure ( !p.equals (model) );\n\n         // check link packagedElement from p to model\n         JavaSDM.ensure (model.equals (p.eContainer()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_p_packagedElement_955385 = p.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) p.eContainer() : null;\n\n               // check object __DEC_p_packagedElement_955385 is really bound\n               JavaSDM.ensure ( __DEC_p_packagedElement_955385 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_p_packagedElement_955385.getPackagedElement().contains(p));\n\n               // check isomorphic binding between objects __DEC_p_packagedElement_955385 and model \n               JavaSDM.ensure ( !__DEC_p_packagedElement_955385.equals (model) );\n\n               // check isomorphic binding between objects __DEC_p_packagedElement_955385 and p \n               JavaSDM.ensure ( !__DEC_p_packagedElement_955385.equals (p) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check link packagedElement from p to p\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(p,ModalSequenceDiagram.Package.class,\"$eContainer\")\n            .contains (p)));\n\n            // check link packagedElement from p to p\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(p,ModalSequenceDiagram.Package.class,\"$eContainer\")\n            .contains (p)));\n\n            // check object _edge_packagedElement is really bound\n            JavaSDM.ensure ( _edge_packagedElement != null );\n            // check object model is really bound\n            JavaSDM.ensure ( model != null );\n            // check object p is really bound\n            JavaSDM.ensure ( p != null );\n            // check isomorphic binding between objects p and model \n            JavaSDM.ensure ( !p.equals (model) );\n\n            // check link packagedElement from p to model\n            JavaSDM.ensure (model.equals (p.eContainer()\n            ));\n\n            // check link src from _edge_packagedElement to model\n            JavaSDM.ensure (model.equals (_edge_packagedElement.getSrc ()\n            ));\n\n            // check link trg from _edge_packagedElement to p\n            JavaSDM.ensure (p.equals (_edge_packagedElement.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,model,p);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_4(
			EMoflonEdge _edge_packagedElement);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      ModelgeneratorRuleResult ruleResult = null;\n      IsApplicableMatch isApplicableMatch = null;\n      Object _TmpObject = null;\n      CSP csp = null;\n      PackageDeclaration packageDeclaration = null;\n      ModalSequenceDiagram.Package p = null;\n      PackageDeclarationToPackage packageDeclarationToPackage = null;\n      Model model = null;\n      UseCasesModel useCasesModel = null;\n      Iterator fujaba__IterUseCasesModelToModelListToUseCasesModelToModel = null;\n      UseCasesModelToModel useCasesModelToModel = null;\n      Iterator fujaba__IterRuleEntryContainerToUseCasesModelToModelList = null;\n      RuleEntryList useCasesModelToModelList = null;\n\n      // story node \'create result\'\n      try \n      {\n         fujaba__Success = false; \n\n         // create object ruleResult\n         ruleResult = TGGRuntimeFactory.eINSTANCE.createModelgeneratorRuleResult();\n\n         // create object isApplicableMatch\n         isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n         // assign attribute ruleResult\n         ruleResult.setSuccess (false);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'is applicable core\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object ruleEntryContainer is really bound\n         JavaSDM.ensure ( ruleEntryContainer != null );\n         // iterate to-many link ruleEntryList from ruleEntryContainer to useCasesModelToModelList\n         fujaba__Success = false;\n\n         fujaba__IterRuleEntryContainerToUseCasesModelToModelList = new ArrayList(ruleEntryContainer.getRuleEntryList()).iterator ();\n\n         while ( fujaba__IterRuleEntryContainerToUseCasesModelToModelList.hasNext () )\n         {\n            try\n            {\n               useCasesModelToModelList = (RuleEntryList) fujaba__IterRuleEntryContainerToUseCasesModelToModelList.next ();\n\n               // check object useCasesModelToModelList is really bound\n               JavaSDM.ensure ( useCasesModelToModelList != null );\n               // iterate to-many link entryObjects from useCasesModelToModelList to useCasesModelToModel\n               fujaba__Success = false;\n\n               fujaba__IterUseCasesModelToModelListToUseCasesModelToModel = new ArrayList(useCasesModelToModelList.getEntryObjects()).iterator ();\n\n               while ( fujaba__IterUseCasesModelToModelListToUseCasesModelToModel.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterUseCasesModelToModelListToUseCasesModelToModel.next ();\n\n                     // ensure correct type and really bound of object useCasesModelToModel\n                     JavaSDM.ensure ( _TmpObject instanceof UseCasesModelToModel );\n                     useCasesModelToModel = (UseCasesModelToModel) _TmpObject;\n                     // bind object\n                     useCasesModel = useCasesModelToModel.getSource ();\n\n                     // check object useCasesModel is really bound\n                     JavaSDM.ensure ( useCasesModel != null );\n\n                     // bind object\n                     model = useCasesModelToModel.getTarget ();\n\n                     // check object model is really bound\n                     JavaSDM.ensure ( model != null );\n\n                     // story node \'solve CSP\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        _TmpObject = (this.generateModel_solveCsp_BWD(isApplicableMatch,useCasesModel,model,useCasesModelToModel,packageDeclaration,p,packageDeclarationToPackage,ruleResult));\n\n                        // ensure correct type and really bound of object csp\n                        JavaSDM.ensure ( _TmpObject instanceof CSP );\n                        csp = (CSP) _TmpObject;\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n                     // statement node \'check CSP\'\n                     fujaba__Success = this.generateModel_checkCsp_BWD(csp);\n                     if (fujaba__Success)\n                     {\n                        // story node \'perform\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object model is really bound\n                           JavaSDM.ensure ( model != null );\n                           // check object ruleResult is really bound\n                           JavaSDM.ensure ( ruleResult != null );\n                           // check object useCasesModel is really bound\n                           JavaSDM.ensure ( useCasesModel != null );\n                           // check object useCasesModelToModel is really bound\n                           JavaSDM.ensure ( useCasesModelToModel != null );\n                           // create object packageDeclaration\n                           packageDeclaration = UseCaseDSLFactory.eINSTANCE.createPackageDeclaration();\n\n                           // create object p\n                           p = ModalSequenceDiagramFactory.eINSTANCE.createPackage();\n\n                           // create object packageDeclarationToPackage\n                           packageDeclarationToPackage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createPackageDeclarationToPackage();\n\n                           // assign attribute packageDeclaration\n                           packageDeclaration.setName ((java.lang.String)csp.getAttributeVariable(\"packageDeclaration\",\"name\").getValue());\n                           // assign attribute p\n                           p.setName ((java.lang.String)csp.getAttributeVariable(\"p\",\"name\").getValue());\n                           // assign attribute ruleResult\n                           ruleResult.setSuccess (true);\n\n                           // create link\n                           \tuseCasesModel.getPackages().add(packageDeclaration); // add link\n\n\n                           // create link\n                           \tmodel.getPackagedElement().add(p); // add link\n\n\n                           // create link\n                           packageDeclarationToPackage.setSource( packageDeclaration);\n\n\n                           // create link\n                           ruleResult.getSourceObjects().add(packageDeclaration);\n\n\n                           // create link\n                           ruleResult.getTargetObjects().add(p);\n\n\n                           // create link\n                           packageDeclarationToPackage.setTarget( p);\n\n\n                           // create link\n                           ruleResult.getCorrObjects().add(packageDeclarationToPackage);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        return ruleResult;\n\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleResult;'"
	 * @generated
	 */
	ModelgeneratorRuleResult generateModel(
			RuleEntryContainer ruleEntryContainer,
			UseCasesModelToModel useCasesModelToModelDummyParameter);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_packageDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(\"packageDeclaration.name\", csp);\r\nvar_packageDeclaration_name.setType(\"\");\r\nVariable var_p_name = CSPFactoryHelper.eINSTANCE.createVariable(\"p.name\", csp);\r\nvar_p_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_packageDeclaration_name,var_p_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"useCasesModel\",useCasesModel);\r\nisApplicableMatch.registerObject(\"model\",model);\r\nisApplicableMatch.registerObject(\"useCasesModelToModel\",useCasesModelToModel);\r\nreturn csp;'"
	 * @generated
	 */
	CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			UseCasesModel useCasesModel, Model model,
			UseCasesModelToModel useCasesModelToModel,
			PackageDeclaration packageDeclaration,
			ModalSequenceDiagram.Package p,
			PackageDeclarationToPackage packageDeclarationToPackage,
			ModelgeneratorRuleResult ruleResult);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean generateModel_checkCsp_BWD(CSP csp);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // UCPackageToMSDPackage
