/**
 */
package UseCaseToModalSequenceDiagramIntegration.Rules;

import ModalSequenceDiagram.CombinedFragment;
import ModalSequenceDiagram.Constraint;
import ModalSequenceDiagram.Interaction;
import ModalSequenceDiagram.InteractionConstraint;
import ModalSequenceDiagram.InteractionOperand;
import ModalSequenceDiagram.Lifeline;
import ModalSequenceDiagram.LiteralString;
import ModalSequenceDiagram.Message;
import ModalSequenceDiagram.MessageEnd;
import ModalSequenceDiagram.MessageOccurrenceSpecification;
import ModalSequenceDiagram.ModalSequenceDiagramFactory;
import ModalSequenceDiagram.Model;

import TGGLanguage.csp.*;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NamedFlow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import UseCaseToModalSequenceDiagramIntegration.ActorToLifeline;
import UseCaseToModalSequenceDiagramIntegration.FlowToInteractionFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToMessage;
import UseCaseToModalSequenceDiagramIntegration.PackageDeclarationToPackage;
import UseCaseToModalSequenceDiagramIntegration.ParallelStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.StepAlternativeToInteractionOperand;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToInteraction;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToModalSequenceDiagramIntegrationFactory;
import UseCaseToModalSequenceDiagramIntegration.UseCasesModelToModel;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>User Step Nf To Message Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see UseCaseToModalSequenceDiagramIntegration.Rules.RulesPackage#getUserStepNfToMessageRule()
 * @model
 * @generated
 */
public interface UserStepNfToMessageRule extends AbstractRule,
		NormalStepNFToMessageRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __step_actor_actor = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __packageDeclaration_actors_sysActor = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object sysActor is really bound\n         JavaSDM.ensure ( sysActor != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects sysActor and actor \n         JavaSDM.ensure ( !sysActor.equals (actor) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,packageDeclaration,sysActor,actor,flow,useCase,step));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check object sysActor is really bound\n            JavaSDM.ensure ( sysActor != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check isomorphic binding between objects sysActor and actor \n            JavaSDM.ensure ( !sysActor.equals (actor) );\n\n            // create object __step_actor_actor\n            __step_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __flow_steps_step\n            __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __flow_steps_step\n            __flow_steps_step.setName (\"steps\");\n            // assign attribute __step_actor_actor\n            __step_actor_actor.setName (\"actor\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,step,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__step_actor_actor,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flow_steps_step,\"toBeTranslatedEdges\");\n\n            // create link\n            __step_actor_actor.setTrg( actor);\n\n\n            // create link\n            __flow_steps_step.setSrc( flow);\n\n\n            // create link\n            __step_actor_actor.setSrc( step);\n\n\n            // create link\n            __flow_steps_step.setTrg( step);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check object sysActor is really bound\n            JavaSDM.ensure ( sysActor != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check isomorphic binding between objects sysActor and actor \n            JavaSDM.ensure ( !sysActor.equals (actor) );\n\n            // create object __useCase_flows_flow\n            __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __packageDeclaration_actors_sysActor\n            __packageDeclaration_actors_sysActor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __packageDeclaration_actors_actor\n            __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __packageDeclaration_actors_sysActor\n            __packageDeclaration_actors_sysActor.setName (\"actors\");\n            // assign attribute __packageDeclaration_actors_actor\n            __packageDeclaration_actors_actor.setName (\"actors\");\n            // assign attribute __useCase_flows_flow\n            __useCase_flows_flow.setName (\"flows\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__useCase_flows_flow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__packageDeclaration_actors_sysActor,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__packageDeclaration_actors_actor,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,useCase,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,packageDeclaration,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,actor,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,sysActor,\"contextNodes\");\n\n            // create link\n            __packageDeclaration_actors_sysActor.setSrc( packageDeclaration);\n\n\n            // create link\n            __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n            // create link\n            __packageDeclaration_actors_sysActor.setTrg( sysActor);\n\n\n            // create link\n            __packageDeclaration_actors_actor.setTrg( actor);\n\n\n            // create link\n            __useCase_flows_flow.setTrg( flow);\n\n\n            // create link\n            __useCase_flows_flow.setSrc( useCase);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,packageDeclaration,sysActor,actor,flow,useCase,step);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor sysActor, Actor actor,
			NamedFlow flow, UseCase useCase, NormalStep step);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      ActorToLifeline actorToLine = null;\n      CombinedFragment combo = null;\n      NamedFlow flow = null;\n      FlowToInteractionFragment flowToOperand = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      InteractionOperand operand = null;\n      PackageDeclaration packageDeclaration = null;\n      NormalStep step = null;\n      Actor sysActor = null;\n      ActorToLifeline sysActorToSysLine = null;\n      Lifeline sysLine = null;\n      UseCase useCase = null;\n      UseCaseToInteraction useCaseToInteraction = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Message message = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      NormalStepToMessage stepToMessage = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge operand__fragment__messageReceive = null;\n      EMoflonEdge sysLine__coveredBy__operand = null;\n      EMoflonEdge operand__covered__line = null;\n      EMoflonEdge messageSend__message__message = null;\n      EMoflonEdge line__coveredBy__combo = null;\n      EMoflonEdge stepToMessage__target__message = null;\n      EMoflonEdge messageSend__covered__sysLine = null;\n      EMoflonEdge stepToMessage__source__step = null;\n      EMoflonEdge operand__covered__sysLine = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge combo__covered__sysLine = null;\n      EMoflonEdge message__receiveEvent__messageReceive = null;\n      EMoflonEdge __step_actor_actor = null;\n      EMoflonEdge message__sendEvent__messageSend = null;\n      EMoflonEdge combo__covered__line = null;\n      EMoflonEdge message__interaction__interaction = null;\n      EMoflonEdge sysLine__coveredBy__combo = null;\n      EMoflonEdge line__coveredBy__operand = null;\n      EMoflonEdge interaction__message__message = null;\n      EMoflonEdge sysLine__coveredBy__messageSend = null;\n      EMoflonEdge messageReceive__enclosingOperand__operand = null;\n      EMoflonEdge messageReceive__message__message = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"actorToLine\"));\n\n         // ensure correct type and really bound of object actorToLine\n         JavaSDM.ensure ( _TmpObject instanceof ActorToLifeline );\n         actorToLine = (ActorToLifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"combo\"));\n\n         // ensure correct type and really bound of object combo\n         JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n         combo = (CombinedFragment) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof NamedFlow );\n         flow = (NamedFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flowToOperand\"));\n\n         // ensure correct type and really bound of object flowToOperand\n         JavaSDM.ensure ( _TmpObject instanceof FlowToInteractionFragment );\n         flowToOperand = (FlowToInteractionFragment) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"interaction\"));\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"line\"));\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"operand\"));\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"sysActor\"));\n\n         // ensure correct type and really bound of object sysActor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         sysActor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"sysActorToSysLine\"));\n\n         // ensure correct type and really bound of object sysActorToSysLine\n         JavaSDM.ensure ( _TmpObject instanceof ActorToLifeline );\n         sysActorToSysLine = (ActorToLifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"sysLine\"));\n\n         // ensure correct type and really bound of object sysLine\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         sysLine = (Lifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCaseToInteraction\"));\n\n         // ensure correct type and really bound of object useCaseToInteraction\n         JavaSDM.ensure ( _TmpObject instanceof UseCaseToInteraction );\n         useCaseToInteraction = (UseCaseToInteraction) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects sysActor and actor \n         JavaSDM.ensure ( !sysActor.equals (actor) );\n\n         // check isomorphic binding between objects sysActorToSysLine and actorToLine \n         JavaSDM.ensure ( !sysActorToSysLine.equals (actorToLine) );\n\n         // check isomorphic binding between objects sysLine and line \n         JavaSDM.ensure ( !sysLine.equals (line) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object messageSend\n         messageSend = ModalSequenceDiagramFactory.eINSTANCE.createMessageOccurrenceSpecification();\n\n         // create object message\n         message = ModalSequenceDiagramFactory.eINSTANCE.createMessage();\n\n         // create object messageReceive\n         messageReceive = ModalSequenceDiagramFactory.eINSTANCE.createMessageOccurrenceSpecification();\n\n         // create object stepToMessage\n         stepToMessage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createNormalStepToMessage();\n\n         // assign attribute message\n         message.setName ((java.lang.String)csp.getValue(\"message\",\"name\"));\n\n         // create link\n         combo.getCovered().add(sysLine);\n\n\n         // create link\n         operand.getCovered().add(sysLine);\n\n\n         // create link\n         messageSend.getCovered().add(sysLine);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(messageSend,message,\"message\");\n\n         // create link\n         message.setSendEvent( messageSend);\n\n\n         // create link\n         messageReceive.setEnclosingOperand( operand);\n\n\n         // create link\n         line.getCoveredBy().add(operand);\n\n\n         // create link\n         line.getCoveredBy().add(combo);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(messageReceive,message,\"message\");\n\n         // create link\n         message.setReceiveEvent( messageReceive);\n\n\n         // create link\n         stepToMessage.setSource( step);\n\n\n         // create link\n         stepToMessage.setTarget( message);\n\n\n         // create link\n         interaction.getMessage().add(message);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToMessage is really bound\n         JavaSDM.ensure ( stepToMessage != null );\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,step,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageSend,\"createdElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object actorToLine is really bound\n         JavaSDM.ensure ( actorToLine != null );\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object flowToOperand is really bound\n         JavaSDM.ensure ( flowToOperand != null );\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object operand is really bound\n         JavaSDM.ensure ( operand != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToMessage is really bound\n         JavaSDM.ensure ( stepToMessage != null );\n         // check object sysActor is really bound\n         JavaSDM.ensure ( sysActor != null );\n         // check object sysActorToSysLine is really bound\n         JavaSDM.ensure ( sysActorToSysLine != null );\n         // check object sysLine is really bound\n         JavaSDM.ensure ( sysLine != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check object useCaseToInteraction is really bound\n         JavaSDM.ensure ( useCaseToInteraction != null );\n         // check isomorphic binding between objects actorToLine and actor \n         JavaSDM.ensure ( !actorToLine.equals (actor) );\n\n         // check isomorphic binding between objects combo and actor \n         JavaSDM.ensure ( !combo.equals (actor) );\n\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects flowToOperand and actor \n         JavaSDM.ensure ( !flowToOperand.equals (actor) );\n\n         // check isomorphic binding between objects interaction and actor \n         JavaSDM.ensure ( !interaction.equals (actor) );\n\n         // check isomorphic binding between objects line and actor \n         JavaSDM.ensure ( !line.equals (actor) );\n\n         // check isomorphic binding between objects message and actor \n         JavaSDM.ensure ( !message.equals (actor) );\n\n         // check isomorphic binding between objects messageReceive and actor \n         JavaSDM.ensure ( !messageReceive.equals (actor) );\n\n         // check isomorphic binding between objects messageSend and actor \n         JavaSDM.ensure ( !messageSend.equals (actor) );\n\n         // check isomorphic binding between objects operand and actor \n         JavaSDM.ensure ( !operand.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclaration and actor \n         JavaSDM.ensure ( !packageDeclaration.equals (actor) );\n\n         // check isomorphic binding between objects step and actor \n         JavaSDM.ensure ( !step.equals (actor) );\n\n         // check isomorphic binding between objects stepToMessage and actor \n         JavaSDM.ensure ( !stepToMessage.equals (actor) );\n\n         // check isomorphic binding between objects sysActor and actor \n         JavaSDM.ensure ( !sysActor.equals (actor) );\n\n         // check isomorphic binding between objects sysActorToSysLine and actor \n         JavaSDM.ensure ( !sysActorToSysLine.equals (actor) );\n\n         // check isomorphic binding between objects sysLine and actor \n         JavaSDM.ensure ( !sysLine.equals (actor) );\n\n         // check isomorphic binding between objects useCase and actor \n         JavaSDM.ensure ( !useCase.equals (actor) );\n\n         // check isomorphic binding between objects useCaseToInteraction and actor \n         JavaSDM.ensure ( !useCaseToInteraction.equals (actor) );\n\n         // check isomorphic binding between objects combo and actorToLine \n         JavaSDM.ensure ( !combo.equals (actorToLine) );\n\n         // check isomorphic binding between objects flow and actorToLine \n         JavaSDM.ensure ( !flow.equals (actorToLine) );\n\n         // check isomorphic binding between objects flowToOperand and actorToLine \n         JavaSDM.ensure ( !flowToOperand.equals (actorToLine) );\n\n         // check isomorphic binding between objects interaction and actorToLine \n         JavaSDM.ensure ( !interaction.equals (actorToLine) );\n\n         // check isomorphic binding between objects line and actorToLine \n         JavaSDM.ensure ( !line.equals (actorToLine) );\n\n         // check isomorphic binding between objects message and actorToLine \n         JavaSDM.ensure ( !message.equals (actorToLine) );\n\n         // check isomorphic binding between objects messageReceive and actorToLine \n         JavaSDM.ensure ( !messageReceive.equals (actorToLine) );\n\n         // check isomorphic binding between objects messageSend and actorToLine \n         JavaSDM.ensure ( !messageSend.equals (actorToLine) );\n\n         // check isomorphic binding between objects operand and actorToLine \n         JavaSDM.ensure ( !operand.equals (actorToLine) );\n\n         // check isomorphic binding between objects packageDeclaration and actorToLine \n         JavaSDM.ensure ( !packageDeclaration.equals (actorToLine) );\n\n         // check isomorphic binding between objects step and actorToLine \n         JavaSDM.ensure ( !step.equals (actorToLine) );\n\n         // check isomorphic binding between objects stepToMessage and actorToLine \n         JavaSDM.ensure ( !stepToMessage.equals (actorToLine) );\n\n         // check isomorphic binding between objects sysActor and actorToLine \n         JavaSDM.ensure ( !sysActor.equals (actorToLine) );\n\n         // check isomorphic binding between objects sysActorToSysLine and actorToLine \n         JavaSDM.ensure ( !sysActorToSysLine.equals (actorToLine) );\n\n         // check isomorphic binding between objects sysLine and actorToLine \n         JavaSDM.ensure ( !sysLine.equals (actorToLine) );\n\n         // check isomorphic binding between objects useCase and actorToLine \n         JavaSDM.ensure ( !useCase.equals (actorToLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and actorToLine \n         JavaSDM.ensure ( !useCaseToInteraction.equals (actorToLine) );\n\n         // check isomorphic binding between objects flow and combo \n         JavaSDM.ensure ( !flow.equals (combo) );\n\n         // check isomorphic binding between objects flowToOperand and combo \n         JavaSDM.ensure ( !flowToOperand.equals (combo) );\n\n         // check isomorphic binding between objects interaction and combo \n         JavaSDM.ensure ( !interaction.equals (combo) );\n\n         // check isomorphic binding between objects line and combo \n         JavaSDM.ensure ( !line.equals (combo) );\n\n         // check isomorphic binding between objects message and combo \n         JavaSDM.ensure ( !message.equals (combo) );\n\n         // check isomorphic binding between objects messageReceive and combo \n         JavaSDM.ensure ( !messageReceive.equals (combo) );\n\n         // check isomorphic binding between objects messageSend and combo \n         JavaSDM.ensure ( !messageSend.equals (combo) );\n\n         // check isomorphic binding between objects operand and combo \n         JavaSDM.ensure ( !operand.equals (combo) );\n\n         // check isomorphic binding between objects packageDeclaration and combo \n         JavaSDM.ensure ( !packageDeclaration.equals (combo) );\n\n         // check isomorphic binding between objects step and combo \n         JavaSDM.ensure ( !step.equals (combo) );\n\n         // check isomorphic binding between objects stepToMessage and combo \n         JavaSDM.ensure ( !stepToMessage.equals (combo) );\n\n         // check isomorphic binding between objects sysActor and combo \n         JavaSDM.ensure ( !sysActor.equals (combo) );\n\n         // check isomorphic binding between objects sysActorToSysLine and combo \n         JavaSDM.ensure ( !sysActorToSysLine.equals (combo) );\n\n         // check isomorphic binding between objects sysLine and combo \n         JavaSDM.ensure ( !sysLine.equals (combo) );\n\n         // check isomorphic binding between objects useCase and combo \n         JavaSDM.ensure ( !useCase.equals (combo) );\n\n         // check isomorphic binding between objects useCaseToInteraction and combo \n         JavaSDM.ensure ( !useCaseToInteraction.equals (combo) );\n\n         // check isomorphic binding between objects flowToOperand and flow \n         JavaSDM.ensure ( !flowToOperand.equals (flow) );\n\n         // check isomorphic binding between objects interaction and flow \n         JavaSDM.ensure ( !interaction.equals (flow) );\n\n         // check isomorphic binding between objects line and flow \n         JavaSDM.ensure ( !line.equals (flow) );\n\n         // check isomorphic binding between objects message and flow \n         JavaSDM.ensure ( !message.equals (flow) );\n\n         // check isomorphic binding between objects messageReceive and flow \n         JavaSDM.ensure ( !messageReceive.equals (flow) );\n\n         // check isomorphic binding between objects messageSend and flow \n         JavaSDM.ensure ( !messageSend.equals (flow) );\n\n         // check isomorphic binding between objects operand and flow \n         JavaSDM.ensure ( !operand.equals (flow) );\n\n         // check isomorphic binding between objects packageDeclaration and flow \n         JavaSDM.ensure ( !packageDeclaration.equals (flow) );\n\n         // check isomorphic binding between objects step and flow \n         JavaSDM.ensure ( !step.equals (flow) );\n\n         // check isomorphic binding between objects stepToMessage and flow \n         JavaSDM.ensure ( !stepToMessage.equals (flow) );\n\n         // check isomorphic binding between objects sysActor and flow \n         JavaSDM.ensure ( !sysActor.equals (flow) );\n\n         // check isomorphic binding between objects sysActorToSysLine and flow \n         JavaSDM.ensure ( !sysActorToSysLine.equals (flow) );\n\n         // check isomorphic binding between objects sysLine and flow \n         JavaSDM.ensure ( !sysLine.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects useCaseToInteraction and flow \n         JavaSDM.ensure ( !useCaseToInteraction.equals (flow) );\n\n         // check isomorphic binding between objects interaction and flowToOperand \n         JavaSDM.ensure ( !interaction.equals (flowToOperand) );\n\n         // check isomorphic binding between objects line and flowToOperand \n         JavaSDM.ensure ( !line.equals (flowToOperand) );\n\n         // check isomorphic binding between objects message and flowToOperand \n         JavaSDM.ensure ( !message.equals (flowToOperand) );\n\n         // check isomorphic binding between objects messageReceive and flowToOperand \n         JavaSDM.ensure ( !messageReceive.equals (flowToOperand) );\n\n         // check isomorphic binding between objects messageSend and flowToOperand \n         JavaSDM.ensure ( !messageSend.equals (flowToOperand) );\n\n         // check isomorphic binding between objects operand and flowToOperand \n         JavaSDM.ensure ( !operand.equals (flowToOperand) );\n\n         // check isomorphic binding between objects packageDeclaration and flowToOperand \n         JavaSDM.ensure ( !packageDeclaration.equals (flowToOperand) );\n\n         // check isomorphic binding between objects step and flowToOperand \n         JavaSDM.ensure ( !step.equals (flowToOperand) );\n\n         // check isomorphic binding between objects stepToMessage and flowToOperand \n         JavaSDM.ensure ( !stepToMessage.equals (flowToOperand) );\n\n         // check isomorphic binding between objects sysActor and flowToOperand \n         JavaSDM.ensure ( !sysActor.equals (flowToOperand) );\n\n         // check isomorphic binding between objects sysActorToSysLine and flowToOperand \n         JavaSDM.ensure ( !sysActorToSysLine.equals (flowToOperand) );\n\n         // check isomorphic binding between objects sysLine and flowToOperand \n         JavaSDM.ensure ( !sysLine.equals (flowToOperand) );\n\n         // check isomorphic binding between objects useCase and flowToOperand \n         JavaSDM.ensure ( !useCase.equals (flowToOperand) );\n\n         // check isomorphic binding between objects useCaseToInteraction and flowToOperand \n         JavaSDM.ensure ( !useCaseToInteraction.equals (flowToOperand) );\n\n         // check isomorphic binding between objects line and interaction \n         JavaSDM.ensure ( !line.equals (interaction) );\n\n         // check isomorphic binding between objects message and interaction \n         JavaSDM.ensure ( !message.equals (interaction) );\n\n         // check isomorphic binding between objects messageReceive and interaction \n         JavaSDM.ensure ( !messageReceive.equals (interaction) );\n\n         // check isomorphic binding between objects messageSend and interaction \n         JavaSDM.ensure ( !messageSend.equals (interaction) );\n\n         // check isomorphic binding between objects operand and interaction \n         JavaSDM.ensure ( !operand.equals (interaction) );\n\n         // check isomorphic binding between objects packageDeclaration and interaction \n         JavaSDM.ensure ( !packageDeclaration.equals (interaction) );\n\n         // check isomorphic binding between objects step and interaction \n         JavaSDM.ensure ( !step.equals (interaction) );\n\n         // check isomorphic binding between objects stepToMessage and interaction \n         JavaSDM.ensure ( !stepToMessage.equals (interaction) );\n\n         // check isomorphic binding between objects sysActor and interaction \n         JavaSDM.ensure ( !sysActor.equals (interaction) );\n\n         // check isomorphic binding between objects sysActorToSysLine and interaction \n         JavaSDM.ensure ( !sysActorToSysLine.equals (interaction) );\n\n         // check isomorphic binding between objects sysLine and interaction \n         JavaSDM.ensure ( !sysLine.equals (interaction) );\n\n         // check isomorphic binding between objects useCase and interaction \n         JavaSDM.ensure ( !useCase.equals (interaction) );\n\n         // check isomorphic binding between objects useCaseToInteraction and interaction \n         JavaSDM.ensure ( !useCaseToInteraction.equals (interaction) );\n\n         // check isomorphic binding between objects message and line \n         JavaSDM.ensure ( !message.equals (line) );\n\n         // check isomorphic binding between objects messageReceive and line \n         JavaSDM.ensure ( !messageReceive.equals (line) );\n\n         // check isomorphic binding between objects messageSend and line \n         JavaSDM.ensure ( !messageSend.equals (line) );\n\n         // check isomorphic binding between objects operand and line \n         JavaSDM.ensure ( !operand.equals (line) );\n\n         // check isomorphic binding between objects packageDeclaration and line \n         JavaSDM.ensure ( !packageDeclaration.equals (line) );\n\n         // check isomorphic binding between objects step and line \n         JavaSDM.ensure ( !step.equals (line) );\n\n         // check isomorphic binding between objects stepToMessage and line \n         JavaSDM.ensure ( !stepToMessage.equals (line) );\n\n         // check isomorphic binding between objects sysActor and line \n         JavaSDM.ensure ( !sysActor.equals (line) );\n\n         // check isomorphic binding between objects sysActorToSysLine and line \n         JavaSDM.ensure ( !sysActorToSysLine.equals (line) );\n\n         // check isomorphic binding between objects sysLine and line \n         JavaSDM.ensure ( !sysLine.equals (line) );\n\n         // check isomorphic binding between objects useCase and line \n         JavaSDM.ensure ( !useCase.equals (line) );\n\n         // check isomorphic binding between objects useCaseToInteraction and line \n         JavaSDM.ensure ( !useCaseToInteraction.equals (line) );\n\n         // check isomorphic binding between objects messageReceive and message \n         JavaSDM.ensure ( !messageReceive.equals (message) );\n\n         // check isomorphic binding between objects messageSend and message \n         JavaSDM.ensure ( !messageSend.equals (message) );\n\n         // check isomorphic binding between objects operand and message \n         JavaSDM.ensure ( !operand.equals (message) );\n\n         // check isomorphic binding between objects packageDeclaration and message \n         JavaSDM.ensure ( !packageDeclaration.equals (message) );\n\n         // check isomorphic binding between objects step and message \n         JavaSDM.ensure ( !step.equals (message) );\n\n         // check isomorphic binding between objects stepToMessage and message \n         JavaSDM.ensure ( !stepToMessage.equals (message) );\n\n         // check isomorphic binding between objects sysActor and message \n         JavaSDM.ensure ( !sysActor.equals (message) );\n\n         // check isomorphic binding between objects sysActorToSysLine and message \n         JavaSDM.ensure ( !sysActorToSysLine.equals (message) );\n\n         // check isomorphic binding between objects sysLine and message \n         JavaSDM.ensure ( !sysLine.equals (message) );\n\n         // check isomorphic binding between objects useCase and message \n         JavaSDM.ensure ( !useCase.equals (message) );\n\n         // check isomorphic binding between objects useCaseToInteraction and message \n         JavaSDM.ensure ( !useCaseToInteraction.equals (message) );\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check isomorphic binding between objects operand and messageReceive \n         JavaSDM.ensure ( !operand.equals (messageReceive) );\n\n         // check isomorphic binding between objects packageDeclaration and messageReceive \n         JavaSDM.ensure ( !packageDeclaration.equals (messageReceive) );\n\n         // check isomorphic binding between objects step and messageReceive \n         JavaSDM.ensure ( !step.equals (messageReceive) );\n\n         // check isomorphic binding between objects stepToMessage and messageReceive \n         JavaSDM.ensure ( !stepToMessage.equals (messageReceive) );\n\n         // check isomorphic binding between objects sysActor and messageReceive \n         JavaSDM.ensure ( !sysActor.equals (messageReceive) );\n\n         // check isomorphic binding between objects sysActorToSysLine and messageReceive \n         JavaSDM.ensure ( !sysActorToSysLine.equals (messageReceive) );\n\n         // check isomorphic binding between objects sysLine and messageReceive \n         JavaSDM.ensure ( !sysLine.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCase and messageReceive \n         JavaSDM.ensure ( !useCase.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCaseToInteraction and messageReceive \n         JavaSDM.ensure ( !useCaseToInteraction.equals (messageReceive) );\n\n         // check isomorphic binding between objects operand and messageSend \n         JavaSDM.ensure ( !operand.equals (messageSend) );\n\n         // check isomorphic binding between objects packageDeclaration and messageSend \n         JavaSDM.ensure ( !packageDeclaration.equals (messageSend) );\n\n         // check isomorphic binding between objects step and messageSend \n         JavaSDM.ensure ( !step.equals (messageSend) );\n\n         // check isomorphic binding between objects stepToMessage and messageSend \n         JavaSDM.ensure ( !stepToMessage.equals (messageSend) );\n\n         // check isomorphic binding between objects sysActor and messageSend \n         JavaSDM.ensure ( !sysActor.equals (messageSend) );\n\n         // check isomorphic binding between objects sysActorToSysLine and messageSend \n         JavaSDM.ensure ( !sysActorToSysLine.equals (messageSend) );\n\n         // check isomorphic binding between objects sysLine and messageSend \n         JavaSDM.ensure ( !sysLine.equals (messageSend) );\n\n         // check isomorphic binding between objects useCase and messageSend \n         JavaSDM.ensure ( !useCase.equals (messageSend) );\n\n         // check isomorphic binding between objects useCaseToInteraction and messageSend \n         JavaSDM.ensure ( !useCaseToInteraction.equals (messageSend) );\n\n         // check isomorphic binding between objects packageDeclaration and operand \n         JavaSDM.ensure ( !packageDeclaration.equals (operand) );\n\n         // check isomorphic binding between objects step and operand \n         JavaSDM.ensure ( !step.equals (operand) );\n\n         // check isomorphic binding between objects stepToMessage and operand \n         JavaSDM.ensure ( !stepToMessage.equals (operand) );\n\n         // check isomorphic binding between objects sysActor and operand \n         JavaSDM.ensure ( !sysActor.equals (operand) );\n\n         // check isomorphic binding between objects sysActorToSysLine and operand \n         JavaSDM.ensure ( !sysActorToSysLine.equals (operand) );\n\n         // check isomorphic binding between objects sysLine and operand \n         JavaSDM.ensure ( !sysLine.equals (operand) );\n\n         // check isomorphic binding between objects useCase and operand \n         JavaSDM.ensure ( !useCase.equals (operand) );\n\n         // check isomorphic binding between objects useCaseToInteraction and operand \n         JavaSDM.ensure ( !useCaseToInteraction.equals (operand) );\n\n         // check isomorphic binding between objects step and packageDeclaration \n         JavaSDM.ensure ( !step.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects stepToMessage and packageDeclaration \n         JavaSDM.ensure ( !stepToMessage.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects sysActor and packageDeclaration \n         JavaSDM.ensure ( !sysActor.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects sysActorToSysLine and packageDeclaration \n         JavaSDM.ensure ( !sysActorToSysLine.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects sysLine and packageDeclaration \n         JavaSDM.ensure ( !sysLine.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclaration \n         JavaSDM.ensure ( !useCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCaseToInteraction and packageDeclaration \n         JavaSDM.ensure ( !useCaseToInteraction.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects stepToMessage and step \n         JavaSDM.ensure ( !stepToMessage.equals (step) );\n\n         // check isomorphic binding between objects sysActor and step \n         JavaSDM.ensure ( !sysActor.equals (step) );\n\n         // check isomorphic binding between objects sysActorToSysLine and step \n         JavaSDM.ensure ( !sysActorToSysLine.equals (step) );\n\n         // check isomorphic binding between objects sysLine and step \n         JavaSDM.ensure ( !sysLine.equals (step) );\n\n         // check isomorphic binding between objects useCase and step \n         JavaSDM.ensure ( !useCase.equals (step) );\n\n         // check isomorphic binding between objects useCaseToInteraction and step \n         JavaSDM.ensure ( !useCaseToInteraction.equals (step) );\n\n         // check isomorphic binding between objects sysActor and stepToMessage \n         JavaSDM.ensure ( !sysActor.equals (stepToMessage) );\n\n         // check isomorphic binding between objects sysActorToSysLine and stepToMessage \n         JavaSDM.ensure ( !sysActorToSysLine.equals (stepToMessage) );\n\n         // check isomorphic binding between objects sysLine and stepToMessage \n         JavaSDM.ensure ( !sysLine.equals (stepToMessage) );\n\n         // check isomorphic binding between objects useCase and stepToMessage \n         JavaSDM.ensure ( !useCase.equals (stepToMessage) );\n\n         // check isomorphic binding between objects useCaseToInteraction and stepToMessage \n         JavaSDM.ensure ( !useCaseToInteraction.equals (stepToMessage) );\n\n         // check isomorphic binding between objects sysActorToSysLine and sysActor \n         JavaSDM.ensure ( !sysActorToSysLine.equals (sysActor) );\n\n         // check isomorphic binding between objects sysLine and sysActor \n         JavaSDM.ensure ( !sysLine.equals (sysActor) );\n\n         // check isomorphic binding between objects useCase and sysActor \n         JavaSDM.ensure ( !useCase.equals (sysActor) );\n\n         // check isomorphic binding between objects useCaseToInteraction and sysActor \n         JavaSDM.ensure ( !useCaseToInteraction.equals (sysActor) );\n\n         // check isomorphic binding between objects sysLine and sysActorToSysLine \n         JavaSDM.ensure ( !sysLine.equals (sysActorToSysLine) );\n\n         // check isomorphic binding between objects useCase and sysActorToSysLine \n         JavaSDM.ensure ( !useCase.equals (sysActorToSysLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and sysActorToSysLine \n         JavaSDM.ensure ( !useCaseToInteraction.equals (sysActorToSysLine) );\n\n         // check isomorphic binding between objects useCase and sysLine \n         JavaSDM.ensure ( !useCase.equals (sysLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and sysLine \n         JavaSDM.ensure ( !useCaseToInteraction.equals (sysLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and useCase \n         JavaSDM.ensure ( !useCaseToInteraction.equals (useCase) );\n\n         // create object operand__fragment__messageReceive\n         operand__fragment__messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object sysLine__coveredBy__operand\n         sysLine__coveredBy__operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object operand__covered__line\n         operand__covered__line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageSend__message__message\n         messageSend__message__message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object line__coveredBy__combo\n         line__coveredBy__combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object stepToMessage__target__message\n         stepToMessage__target__message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageSend__covered__sysLine\n         messageSend__covered__sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object stepToMessage__source__step\n         stepToMessage__source__step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object operand__covered__sysLine\n         operand__covered__sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __flow_steps_step\n         __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object combo__covered__sysLine\n         combo__covered__sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object message__receiveEvent__messageReceive\n         message__receiveEvent__messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __step_actor_actor\n         __step_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object message__sendEvent__messageSend\n         message__sendEvent__messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object combo__covered__line\n         combo__covered__line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object message__interaction__interaction\n         message__interaction__interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object sysLine__coveredBy__combo\n         sysLine__coveredBy__combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object line__coveredBy__operand\n         line__coveredBy__operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object interaction__message__message\n         interaction__message__message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object sysLine__coveredBy__messageSend\n         sysLine__coveredBy__messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageReceive__enclosingOperand__operand\n         messageReceive__enclosingOperand__operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageReceive__message__message\n         messageReceive__message__message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"UserStepNfToMessageRule\");\n         // assign attribute sysLine__coveredBy__messageSend\n         sysLine__coveredBy__messageSend.setName (\"coveredBy\");\n         // assign attribute messageSend__covered__sysLine\n         messageSend__covered__sysLine.setName (\"covered\");\n         // assign attribute sysLine__coveredBy__operand\n         sysLine__coveredBy__operand.setName (\"coveredBy\");\n         // assign attribute operand__covered__sysLine\n         operand__covered__sysLine.setName (\"covered\");\n         // assign attribute sysLine__coveredBy__combo\n         sysLine__coveredBy__combo.setName (\"coveredBy\");\n         // assign attribute combo__covered__sysLine\n         combo__covered__sysLine.setName (\"covered\");\n         // assign attribute operand__fragment__messageReceive\n         operand__fragment__messageReceive.setName (\"fragment\");\n         // assign attribute messageReceive__enclosingOperand__operand\n         messageReceive__enclosingOperand__operand.setName (\"enclosingOperand\");\n         // assign attribute line__coveredBy__operand\n         line__coveredBy__operand.setName (\"coveredBy\");\n         // assign attribute operand__covered__line\n         operand__covered__line.setName (\"covered\");\n         // assign attribute line__coveredBy__combo\n         line__coveredBy__combo.setName (\"coveredBy\");\n         // assign attribute combo__covered__line\n         combo__covered__line.setName (\"covered\");\n         // assign attribute __flow_steps_step\n         __flow_steps_step.setName (\"steps\");\n         // assign attribute __step_actor_actor\n         __step_actor_actor.setName (\"actor\");\n         // assign attribute message__sendEvent__messageSend\n         message__sendEvent__messageSend.setName (\"sendEvent\");\n         // assign attribute message__receiveEvent__messageReceive\n         message__receiveEvent__messageReceive.setName (\"receiveEvent\");\n         // assign attribute message__interaction__interaction\n         message__interaction__interaction.setName (\"interaction\");\n         // assign attribute interaction__message__message\n         interaction__message__message.setName (\"message\");\n         // assign attribute stepToMessage__source__step\n         stepToMessage__source__step.setName (\"source\");\n         // assign attribute stepToMessage__target__message\n         stepToMessage__target__message.setName (\"target\");\n         // assign attribute messageSend__message__message\n         messageSend__message__message.setName (\"message\");\n         // assign attribute messageReceive__message__message\n         messageReceive__message__message.setName (\"message\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,operand__fragment__messageReceive,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sysLine__coveredBy__operand,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,operand__covered__line,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageSend__message__message,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,line__coveredBy__combo,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage__target__message,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageSend__covered__sysLine,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage__source__step,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,operand__covered__sysLine,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__flow_steps_step,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,combo__covered__sysLine,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message__receiveEvent__messageReceive,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__step_actor_actor,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message__sendEvent__messageSend,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,combo__covered__line,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message__interaction__interaction,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sysLine__coveredBy__combo,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,line__coveredBy__operand,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,interaction__message__message,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sysLine__coveredBy__messageSend,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive__enclosingOperand__operand,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive__message__message,\"createdEdges\");\n\n         // create link\n         __step_actor_actor.setTrg( actor);\n\n\n         // create link\n         sysLine__coveredBy__combo.setSrc( sysLine);\n\n\n         // create link\n         operand__covered__sysLine.setTrg( sysLine);\n\n\n         // create link\n         combo__covered__sysLine.setTrg( sysLine);\n\n\n         // create link\n         messageSend__covered__sysLine.setTrg( sysLine);\n\n\n         // create link\n         sysLine__coveredBy__messageSend.setSrc( sysLine);\n\n\n         // create link\n         sysLine__coveredBy__operand.setSrc( sysLine);\n\n\n         // create link\n         messageSend__covered__sysLine.setSrc( messageSend);\n\n\n         // create link\n         sysLine__coveredBy__messageSend.setTrg( messageSend);\n\n\n         // create link\n         message__sendEvent__messageSend.setTrg( messageSend);\n\n\n         // create link\n         messageSend__message__message.setSrc( messageSend);\n\n\n         // create link\n         sysLine__coveredBy__operand.setTrg( operand);\n\n\n         // create link\n         operand__fragment__messageReceive.setSrc( operand);\n\n\n         // create link\n         messageReceive__enclosingOperand__operand.setTrg( operand);\n\n\n         // create link\n         line__coveredBy__operand.setTrg( operand);\n\n\n         // create link\n         operand__covered__sysLine.setSrc( operand);\n\n\n         // create link\n         operand__covered__line.setSrc( operand);\n\n\n         // create link\n         sysLine__coveredBy__combo.setTrg( combo);\n\n\n         // create link\n         combo__covered__sysLine.setSrc( combo);\n\n\n         // create link\n         combo__covered__line.setSrc( combo);\n\n\n         // create link\n         line__coveredBy__combo.setTrg( combo);\n\n\n         // create link\n         __flow_steps_step.setSrc( flow);\n\n\n         // create link\n         messageReceive__enclosingOperand__operand.setSrc( messageReceive);\n\n\n         // create link\n         message__receiveEvent__messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         operand__fragment__messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         messageReceive__message__message.setSrc( messageReceive);\n\n\n         // create link\n         line__coveredBy__combo.setSrc( line);\n\n\n         // create link\n         combo__covered__line.setTrg( line);\n\n\n         // create link\n         line__coveredBy__operand.setSrc( line);\n\n\n         // create link\n         operand__covered__line.setTrg( line);\n\n\n         // create link\n         __flow_steps_step.setTrg( step);\n\n\n         // create link\n         __step_actor_actor.setSrc( step);\n\n\n         // create link\n         stepToMessage__source__step.setTrg( step);\n\n\n         // create link\n         stepToMessage__target__message.setTrg( message);\n\n\n         // create link\n         messageReceive__message__message.setTrg( message);\n\n\n         // create link\n         message__sendEvent__messageSend.setSrc( message);\n\n\n         // create link\n         message__interaction__interaction.setSrc( message);\n\n\n         // create link\n         interaction__message__message.setTrg( message);\n\n\n         // create link\n         message__receiveEvent__messageReceive.setSrc( message);\n\n\n         // create link\n         messageSend__message__message.setTrg( message);\n\n\n         // create link\n         message__interaction__interaction.setTrg( interaction);\n\n\n         // create link\n         interaction__message__message.setSrc( interaction);\n\n\n         // create link\n         stepToMessage__target__message.setSrc( stepToMessage);\n\n\n         // create link\n         stepToMessage__source__step.setSrc( stepToMessage);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,packageDeclaration,sysActor,actor,sysLine,messageSend,sysActorToSysLine,operand,combo,flow,flowToOperand,messageReceive,line,useCase,useCaseToInteraction,step,message,interaction,stepToMessage,actorToLine);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Actor actor = null;\n      NamedFlow flow = null;\n      PackageDeclaration packageDeclaration = null;\n      NormalStep step = null;\n      Actor sysActor = null;\n      UseCase useCase = null;\n      EMoflonEdge __packageDeclaration_actors_sysActor = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge __sysActorToSysLine_source_sysActor = null;\n      EMoflonEdge __step_actor_actor = null;\n      EMoflonEdge __actorToLine_source_actor = null;\n      EMoflonEdge __sysActorToSysLine_target_sysLine = null;\n      EMoflonEdge __flowToOperand_target_operand = null;\n      EMoflonEdge __combo_operand_operand = null;\n      EMoflonEdge __flowToOperand_source_flow = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge __line_interaction_interaction = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n      EMoflonEdge __actorToLine_target_line = null;\n      EMoflonEdge __useCaseToInteraction_source_useCase = null;\n      EMoflonEdge __useCaseToInteraction_target_interaction = null;\n      CSP csp = null;\n      CombinedFragment combo = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterUseCaseToUseCaseToInteraction = null;\n      UseCaseToInteraction useCaseToInteraction = null;\n      Lifeline line = null;\n      Iterator fujaba__IterActorToActorToLine = null;\n      ActorToLifeline actorToLine = null;\n      Lifeline sysLine = null;\n      Iterator fujaba__IterSysActorToSysActorToSysLine = null;\n      ActorToLifeline sysActorToSysLine = null;\n      InteractionOperand operand = null;\n      Iterator fujaba__IterFlowToFlowToOperand = null;\n      FlowToInteractionFragment flowToOperand = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"UserStepNfToMessageRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (match.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof NamedFlow );\n         flow = (NamedFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (match.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n         _TmpObject = (match.getObject(\"sysActor\"));\n\n         // ensure correct type and really bound of object sysActor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         sysActor = (Actor) _TmpObject;\n         _TmpObject = (match.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects sysActor and actor \n         JavaSDM.ensure ( !sysActor.equals (actor) );\n\n         // iterate to-many link source from flow to flowToOperand\n         fujaba__Success = false;\n\n         fujaba__IterFlowToFlowToOperand = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,FlowToInteractionFragment.class,\"source\")).iterator ();\n\n         while ( fujaba__IterFlowToFlowToOperand.hasNext () )\n         {\n            try\n            {\n               flowToOperand = (FlowToInteractionFragment) fujaba__IterFlowToFlowToOperand.next ();\n\n               // check object flowToOperand is really bound\n               JavaSDM.ensure ( flowToOperand != null );\n               // bind object\n               _TmpObject = flowToOperand.getTarget ();\n\n               // ensure correct type and really bound of object operand\n               JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n               operand = (InteractionOperand) _TmpObject;\n\n               // iterate to-many link source from sysActor to sysActorToSysLine\n               fujaba__Success = false;\n\n               fujaba__IterSysActorToSysActorToSysLine = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(sysActor,ActorToLifeline.class,\"source\")).iterator ();\n\n               while ( fujaba__IterSysActorToSysActorToSysLine.hasNext () )\n               {\n                  try\n                  {\n                     sysActorToSysLine = (ActorToLifeline) fujaba__IterSysActorToSysActorToSysLine.next ();\n\n                     // check object sysActorToSysLine is really bound\n                     JavaSDM.ensure ( sysActorToSysLine != null );\n                     // bind object\n                     sysLine = sysActorToSysLine.getTarget ();\n\n                     // check object sysLine is really bound\n                     JavaSDM.ensure ( sysLine != null );\n\n                     // iterate to-many link source from actor to actorToLine\n                     fujaba__Success = false;\n\n                     fujaba__IterActorToActorToLine = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(actor,ActorToLifeline.class,\"source\")).iterator ();\n\n                     while ( fujaba__IterActorToActorToLine.hasNext () )\n                     {\n                        try\n                        {\n                           actorToLine = (ActorToLifeline) fujaba__IterActorToActorToLine.next ();\n\n                           // check object actorToLine is really bound\n                           JavaSDM.ensure ( actorToLine != null );\n                           // check isomorphic binding between objects sysActorToSysLine and actorToLine \n                           JavaSDM.ensure ( !sysActorToSysLine.equals (actorToLine) );\n\n                           // bind object\n                           line = actorToLine.getTarget ();\n\n                           // check object line is really bound\n                           JavaSDM.ensure ( line != null );\n\n                           // check isomorphic binding between objects sysLine and line \n                           JavaSDM.ensure ( !sysLine.equals (line) );\n\n                           // iterate to-many link source from useCase to useCaseToInteraction\n                           fujaba__Success = false;\n\n                           fujaba__IterUseCaseToUseCaseToInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(useCase,UseCaseToInteraction.class,\"source\")).iterator ();\n\n                           while ( fujaba__IterUseCaseToUseCaseToInteraction.hasNext () )\n                           {\n                              try\n                              {\n                                 useCaseToInteraction = (UseCaseToInteraction) fujaba__IterUseCaseToUseCaseToInteraction.next ();\n\n                                 // check object useCaseToInteraction is really bound\n                                 JavaSDM.ensure ( useCaseToInteraction != null );\n                                 // bind object\n                                 interaction = useCaseToInteraction.getTarget ();\n\n                                 // check object interaction is really bound\n                                 JavaSDM.ensure ( interaction != null );\n\n                                 // story node \'find context\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object actor is really bound\n                                    JavaSDM.ensure ( actor != null );\n                                    // check object actorToLine is really bound\n                                    JavaSDM.ensure ( actorToLine != null );\n                                    // check object flow is really bound\n                                    JavaSDM.ensure ( flow != null );\n                                    // check object flowToOperand is really bound\n                                    JavaSDM.ensure ( flowToOperand != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object operand is really bound\n                                    JavaSDM.ensure ( operand != null );\n                                    // check object packageDeclaration is really bound\n                                    JavaSDM.ensure ( packageDeclaration != null );\n                                    // check object step is really bound\n                                    JavaSDM.ensure ( step != null );\n                                    // check object sysActor is really bound\n                                    JavaSDM.ensure ( sysActor != null );\n                                    // check object sysActorToSysLine is really bound\n                                    JavaSDM.ensure ( sysActorToSysLine != null );\n                                    // check object sysLine is really bound\n                                    JavaSDM.ensure ( sysLine != null );\n                                    // check object useCase is really bound\n                                    JavaSDM.ensure ( useCase != null );\n                                    // check object useCaseToInteraction is really bound\n                                    JavaSDM.ensure ( useCaseToInteraction != null );\n                                    // check isomorphic binding between objects sysActor and actor \n                                    JavaSDM.ensure ( !sysActor.equals (actor) );\n\n                                    // check isomorphic binding between objects sysActorToSysLine and actorToLine \n                                    JavaSDM.ensure ( !sysActorToSysLine.equals (actorToLine) );\n\n                                    // check isomorphic binding between objects sysLine and line \n                                    JavaSDM.ensure ( !sysLine.equals (line) );\n\n                                    // check link actor from step to actor\n                                    JavaSDM.ensure (actor.equals (step.getActor ()\n                                    ));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link actors from actor to packageDeclaration\n                                    JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                                    ));\n\n                                    // check link actors from sysActor to packageDeclaration\n                                    JavaSDM.ensure (packageDeclaration.equals (sysActor.eContainer()\n                                    ));\n\n                                    // check link flows from flow to useCase\n                                    JavaSDM.ensure (useCase.equals (flow.eContainer()\n                                    ));\n\n                                    // bind object\n                                    combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                                    // check object combo is really bound\n                                    JavaSDM.ensure ( combo != null );\n\n                                    // check if contained via correct reference\n                                    JavaSDM.ensure(combo.getOperand().contains(operand));\n\n                                    // check link source from actorToLine to actor\n                                    JavaSDM.ensure (actor.equals (actorToLine.getSource ()\n                                    ));\n\n                                    // check link source from flowToOperand to flow\n                                    JavaSDM.ensure (flow.equals (flowToOperand.getSource ()\n                                    ));\n\n                                    // check link source from sysActorToSysLine to sysActor\n                                    JavaSDM.ensure (sysActor.equals (sysActorToSysLine.getSource ()\n                                    ));\n\n                                    // check link source from useCaseToInteraction to useCase\n                                    JavaSDM.ensure (useCase.equals (useCaseToInteraction.getSource ()\n                                    ));\n\n                                    // check link steps from step to flow\n                                    JavaSDM.ensure (flow.equals (step.eContainer()\n                                    ));\n\n                                    // check link target from actorToLine to line\n                                    JavaSDM.ensure (line.equals (actorToLine.getTarget ()\n                                    ));\n\n                                    // check link target from flowToOperand to operand\n                                    JavaSDM.ensure (operand.equals (flowToOperand.getTarget ()\n                                    ));\n\n                                    // check link target from sysActorToSysLine to sysLine\n                                    JavaSDM.ensure (sysLine.equals (sysActorToSysLine.getTarget ()\n                                    ));\n\n                                    // check link target from useCaseToInteraction to interaction\n                                    JavaSDM.ensure (interaction.equals (useCaseToInteraction.getTarget ()\n                                    ));\n\n                                    // create object __packageDeclaration_actors_sysActor\n                                    __packageDeclaration_actors_sysActor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object isApplicableMatch\n                                    isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                                    // create object __packageDeclaration_actors_actor\n                                    __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __sysActorToSysLine_source_sysActor\n                                    __sysActorToSysLine_source_sysActor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __step_actor_actor\n                                    __step_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __actorToLine_source_actor\n                                    __actorToLine_source_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __sysActorToSysLine_target_sysLine\n                                    __sysActorToSysLine_target_sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __flowToOperand_target_operand\n                                    __flowToOperand_target_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __combo_operand_operand\n                                    __combo_operand_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __flowToOperand_source_flow\n                                    __flowToOperand_source_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __useCase_flows_flow\n                                    __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __flow_steps_step\n                                    __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __line_interaction_interaction\n                                    __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __interaction_lifeline_line\n                                    __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __actorToLine_target_line\n                                    __actorToLine_target_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __useCaseToInteraction_source_useCase\n                                    __useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __useCaseToInteraction_target_interaction\n                                    __useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // assign attribute __packageDeclaration_actors_sysActor\n                                    __packageDeclaration_actors_sysActor.setName (\"actors\");\n                                    // assign attribute __packageDeclaration_actors_actor\n                                    __packageDeclaration_actors_actor.setName (\"actors\");\n                                    // assign attribute __sysActorToSysLine_source_sysActor\n                                    __sysActorToSysLine_source_sysActor.setName (\"source\");\n                                    // assign attribute __sysActorToSysLine_target_sysLine\n                                    __sysActorToSysLine_target_sysLine.setName (\"target\");\n                                    // assign attribute __combo_operand_operand\n                                    __combo_operand_operand.setName (\"operand\");\n                                    // assign attribute __flowToOperand_source_flow\n                                    __flowToOperand_source_flow.setName (\"source\");\n                                    // assign attribute __flowToOperand_target_operand\n                                    __flowToOperand_target_operand.setName (\"target\");\n                                    // assign attribute __useCase_flows_flow\n                                    __useCase_flows_flow.setName (\"flows\");\n                                    // assign attribute __useCaseToInteraction_source_useCase\n                                    __useCaseToInteraction_source_useCase.setName (\"source\");\n                                    // assign attribute __useCaseToInteraction_target_interaction\n                                    __useCaseToInteraction_target_interaction.setName (\"target\");\n                                    // assign attribute __flow_steps_step\n                                    __flow_steps_step.setName (\"steps\");\n                                    // assign attribute __step_actor_actor\n                                    __step_actor_actor.setName (\"actor\");\n                                    // assign attribute __line_interaction_interaction\n                                    __line_interaction_interaction.setName (\"interaction\");\n                                    // assign attribute __interaction_lifeline_line\n                                    __interaction_lifeline_line.setName (\"lifeline\");\n                                    // assign attribute __actorToLine_source_actor\n                                    __actorToLine_source_actor.setName (\"source\");\n                                    // assign attribute __actorToLine_target_line\n                                    __actorToLine_target_line.setName (\"target\");\n\n                                    // create link\n                                    __packageDeclaration_actors_sysActor.setSrc( packageDeclaration);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                                    // create link\n                                    __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(sysActor);\n\n\n                                    // create link\n                                    __packageDeclaration_actors_sysActor.setTrg( sysActor);\n\n\n                                    // create link\n                                    __sysActorToSysLine_source_sysActor.setTrg( sysActor);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(actor);\n\n\n                                    // create link\n                                    __step_actor_actor.setTrg( actor);\n\n\n                                    // create link\n                                    __actorToLine_source_actor.setTrg( actor);\n\n\n                                    // create link\n                                    __packageDeclaration_actors_actor.setTrg( actor);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(sysLine);\n\n\n                                    // create link\n                                    __sysActorToSysLine_target_sysLine.setTrg( sysLine);\n\n\n                                    // create link\n                                    __sysActorToSysLine_source_sysActor.setSrc( sysActorToSysLine);\n\n\n                                    // create link\n                                    __sysActorToSysLine_target_sysLine.setSrc( sysActorToSysLine);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(sysActorToSysLine);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(operand);\n\n\n                                    // create link\n                                    __flowToOperand_target_operand.setTrg( operand);\n\n\n                                    // create link\n                                    __combo_operand_operand.setTrg( operand);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(combo);\n\n\n                                    // create link\n                                    __combo_operand_operand.setSrc( combo);\n\n\n                                    // create link\n                                    __flowToOperand_source_flow.setTrg( flow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(flow);\n\n\n                                    // create link\n                                    __useCase_flows_flow.setTrg( flow);\n\n\n                                    // create link\n                                    __flow_steps_step.setSrc( flow);\n\n\n                                    // create link\n                                    __flowToOperand_source_flow.setSrc( flowToOperand);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(flowToOperand);\n\n\n                                    // create link\n                                    __flowToOperand_target_operand.setSrc( flowToOperand);\n\n\n                                    // create link\n                                    __line_interaction_interaction.setSrc( line);\n\n\n                                    // create link\n                                    __interaction_lifeline_line.setTrg( line);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(line);\n\n\n                                    // create link\n                                    __actorToLine_target_line.setTrg( line);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                                    // create link\n                                    __useCase_flows_flow.setSrc( useCase);\n\n\n                                    // create link\n                                    __useCaseToInteraction_source_useCase.setTrg( useCase);\n\n\n                                    // create link\n                                    __useCaseToInteraction_source_useCase.setSrc( useCaseToInteraction);\n\n\n                                    // create link\n                                    __useCaseToInteraction_target_interaction.setSrc( useCaseToInteraction);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(useCaseToInteraction);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(step);\n\n\n                                    // create link\n                                    __step_actor_actor.setSrc( step);\n\n\n                                    // create link\n                                    __flow_steps_step.setTrg( step);\n\n\n                                    // create link\n                                    __useCaseToInteraction_target_interaction.setTrg( interaction);\n\n\n                                    // create link\n                                    __line_interaction_interaction.setTrg( interaction);\n\n\n                                    // create link\n                                    __interaction_lifeline_line.setSrc( interaction);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(interaction);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(actorToLine);\n\n\n                                    // create link\n                                    __actorToLine_source_actor.setSrc( actorToLine);\n\n\n                                    // create link\n                                    __actorToLine_target_line.setSrc( actorToLine);\n\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowToOperand_target_operand,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_actors_actor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCaseToInteraction_target_interaction,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowToOperand_source_flow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__actorToLine_source_actor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__sysActorToSysLine_source_sysActor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_lifeline_line,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_step,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__sysActorToSysLine_target_sysLine,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_interaction_interaction,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_actors_sysActor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__actorToLine_target_line,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__combo_operand_operand,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__step_actor_actor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCaseToInteraction_source_useCase,\"allContextElements\");\n                                    // story node \'solve CSP\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,packageDeclaration,sysActor,actor,sysLine,sysActorToSysLine,operand,combo,flow,flowToOperand,line,useCase,useCaseToInteraction,step,interaction,actorToLine));\n\n                                       // ensure correct type and really bound of object csp\n                                       JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                       csp = (CSP) _TmpObject;\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    // statement node \'check CSP\'\n                                    fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                                    if (fujaba__Success)\n                                    {\n                                       // story node \'add match to rule result\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // check object isApplicableMatch is really bound\n                                          JavaSDM.ensure ( isApplicableMatch != null );\n                                          // check object ruleresult is really bound\n                                          JavaSDM.ensure ( ruleresult != null );\n                                          // assign attribute isApplicableMatch\n                                          isApplicableMatch.setRuleName (\"UserStepNfToMessageRule\");\n                                          // assign attribute ruleresult\n                                          ruleresult.setSuccess (true);\n\n                                          // create link\n                                          ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"packageDeclaration\", packageDeclaration);\nmatch.registerObject(\"sysActor\", sysActor);\nmatch.registerObject(\"actor\", actor);\nmatch.registerObject(\"flow\", flow);\nmatch.registerObject(\"useCase\", useCase);\nmatch.registerObject(\"step\", step);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor sysActor, Actor actor,
			NamedFlow flow, UseCase useCase, NormalStep step);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"person\");\r\nliteral0.setType(\"String\");\r\nVariable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal1\", true, csp);\r\nliteral1.setValue(\"system\");\r\nliteral1.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.type\", true, csp);\r\nvar_actor_type.setValue(actor.getType());\r\nvar_actor_type.setType(\"EObject\");\r\nVariable var_sysActor_description = CSPFactoryHelper.eINSTANCE.createVariable(\"sysActor.description\", true, csp);\r\nvar_sysActor_description.setValue(sysActor.getDescription());\r\nvar_sysActor_description.setType(\"EObject\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqActorType eqActorType = new EqActorType();EqActorType eqActorType_0 = new EqActorType();\r\n\r\ncsp.getConstraints().add(eqActorType);\r\ncsp.getConstraints().add(eqActorType_0);\r\n\r\n// Solve CSP\r\neqActorType.setRuleName(\"\");\r\neqActorType.solve(var_actor_type,literal0);\r\neqActorType_0.setRuleName(\"\");\r\neqActorType_0.solve(var_sysActor_description,literal1);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor sysActor, Actor actor,
			NamedFlow flow, UseCase useCase, NormalStep step);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(\"step.name\", true, csp);\r\nvar_step_name.setValue(step.getName());\r\nvar_step_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(\"message.name\", csp);\r\nvar_message_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_step_name,var_message_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"sysActor\",sysActor);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"sysLine\",sysLine);\r\nisApplicableMatch.registerObject(\"sysActorToSysLine\",sysActorToSysLine);\r\nisApplicableMatch.registerObject(\"operand\",operand);\r\nisApplicableMatch.registerObject(\"combo\",combo);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"flowToOperand\",flowToOperand);\r\nisApplicableMatch.registerObject(\"line\",line);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"useCaseToInteraction\",useCaseToInteraction);\r\nisApplicableMatch.registerObject(\"step\",step);\r\nisApplicableMatch.registerObject(\"interaction\",interaction);\r\nisApplicableMatch.registerObject(\"actorToLine\",actorToLine);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration, Actor sysActor, Actor actor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			InteractionOperand operand, CombinedFragment combo, NamedFlow flow,
			FlowToInteractionFragment flowToOperand, Lifeline line,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			NormalStep step, Interaction interaction,
			ActorToLifeline actorToLine);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"sysActor\", sysActor);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"sysLine\", sysLine);\nruleresult.registerObject(\"messageSend\", messageSend);\nruleresult.registerObject(\"sysActorToSysLine\", sysActorToSysLine);\nruleresult.registerObject(\"operand\", operand);\nruleresult.registerObject(\"combo\", combo);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"flowToOperand\", flowToOperand);\nruleresult.registerObject(\"messageReceive\", messageReceive);\nruleresult.registerObject(\"line\", line);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"useCaseToInteraction\", useCaseToInteraction);\nruleresult.registerObject(\"step\", step);\nruleresult.registerObject(\"message\", message);\nruleresult.registerObject(\"interaction\", interaction);\nruleresult.registerObject(\"stepToMessage\", stepToMessage);\nruleresult.registerObject(\"actorToLine\", actorToLine);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult,
			EObject packageDeclaration, EObject sysActor, EObject actor,
			EObject sysLine, EObject messageSend, EObject sysActorToSysLine,
			EObject operand, EObject combo, EObject flow,
			EObject flowToOperand, EObject messageReceive, EObject line,
			EObject useCase, EObject useCaseToInteraction, EObject step,
			EObject message, EObject interaction, EObject stepToMessage,
			EObject actorToLine);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"step\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __sysLine_coveredBy_operand = null;\n      EMoflonEdge __line_coveredBy_operand = null;\n      EMoflonEdge __interaction_message_message = null;\n      EMoflonEdge __message_receiveEvent_messageReceive = null;\n      EMoflonEdge __messageSend_message_message = null;\n      EMoflonEdge __messageReceive_enclosingOperand_operand = null;\n      EMoflonEdge __sysLine_coveredBy_combo = null;\n      EMoflonEdge __sysLine_coveredBy_messageSend = null;\n      EMoflonEdge __message_interaction_interaction = null;\n      EMoflonEdge __combo_covered_line = null;\n      EMoflonEdge __line_coveredBy_combo = null;\n      EMoflonEdge __combo_covered_sysLine = null;\n      EMoflonEdge __operand_fragment_messageReceive = null;\n      EMoflonEdge __operand_covered_line = null;\n      EMoflonEdge __message_sendEvent_messageSend = null;\n      EMoflonEdge __operand_covered_sysLine = null;\n      EMoflonEdge __messageReceive_message_message = null;\n      EMoflonEdge __messageSend_covered_sysLine = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n      EMoflonEdge __combo_operand_operand = null;\n      EMoflonEdge __line_interaction_interaction = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object operand is really bound\n         JavaSDM.ensure ( operand != null );\n         // check object sysLine is really bound\n         JavaSDM.ensure ( sysLine != null );\n         // check isomorphic binding between objects sysLine and line \n         JavaSDM.ensure ( !sysLine.equals (line) );\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object combo is really bound\n            JavaSDM.ensure ( combo != null );\n            // check object interaction is really bound\n            JavaSDM.ensure ( interaction != null );\n            // check object line is really bound\n            JavaSDM.ensure ( line != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object message is really bound\n            JavaSDM.ensure ( message != null );\n            // check object messageReceive is really bound\n            JavaSDM.ensure ( messageReceive != null );\n            // check object messageSend is really bound\n            JavaSDM.ensure ( messageSend != null );\n            // check object operand is really bound\n            JavaSDM.ensure ( operand != null );\n            // check object sysLine is really bound\n            JavaSDM.ensure ( sysLine != null );\n            // check isomorphic binding between objects sysLine and line \n            JavaSDM.ensure ( !sysLine.equals (line) );\n\n            // check isomorphic binding between objects messageSend and messageReceive \n            JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n            // create object __sysLine_coveredBy_operand\n            __sysLine_coveredBy_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __line_coveredBy_operand\n            __line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __interaction_message_message\n            __interaction_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __message_receiveEvent_messageReceive\n            __message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageSend_message_message\n            __messageSend_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageReceive_enclosingOperand_operand\n            __messageReceive_enclosingOperand_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __sysLine_coveredBy_combo\n            __sysLine_coveredBy_combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __sysLine_coveredBy_messageSend\n            __sysLine_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __message_interaction_interaction\n            __message_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __combo_covered_line\n            __combo_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __line_coveredBy_combo\n            __line_coveredBy_combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __combo_covered_sysLine\n            __combo_covered_sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __operand_fragment_messageReceive\n            __operand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __operand_covered_line\n            __operand_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __message_sendEvent_messageSend\n            __message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __operand_covered_sysLine\n            __operand_covered_sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageReceive_message_message\n            __messageReceive_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageSend_covered_sysLine\n            __messageSend_covered_sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __sysLine_coveredBy_messageSend\n            __sysLine_coveredBy_messageSend.setName (\"coveredBy\");\n            // assign attribute __messageSend_covered_sysLine\n            __messageSend_covered_sysLine.setName (\"covered\");\n            // assign attribute __sysLine_coveredBy_operand\n            __sysLine_coveredBy_operand.setName (\"coveredBy\");\n            // assign attribute __operand_covered_sysLine\n            __operand_covered_sysLine.setName (\"covered\");\n            // assign attribute __sysLine_coveredBy_combo\n            __sysLine_coveredBy_combo.setName (\"coveredBy\");\n            // assign attribute __combo_covered_sysLine\n            __combo_covered_sysLine.setName (\"covered\");\n            // assign attribute __operand_fragment_messageReceive\n            __operand_fragment_messageReceive.setName (\"fragment\");\n            // assign attribute __messageReceive_enclosingOperand_operand\n            __messageReceive_enclosingOperand_operand.setName (\"enclosingOperand\");\n            // assign attribute __line_coveredBy_operand\n            __line_coveredBy_operand.setName (\"coveredBy\");\n            // assign attribute __operand_covered_line\n            __operand_covered_line.setName (\"covered\");\n            // assign attribute __line_coveredBy_combo\n            __line_coveredBy_combo.setName (\"coveredBy\");\n            // assign attribute __combo_covered_line\n            __combo_covered_line.setName (\"covered\");\n            // assign attribute __message_sendEvent_messageSend\n            __message_sendEvent_messageSend.setName (\"sendEvent\");\n            // assign attribute __message_receiveEvent_messageReceive\n            __message_receiveEvent_messageReceive.setName (\"receiveEvent\");\n            // assign attribute __message_interaction_interaction\n            __message_interaction_interaction.setName (\"interaction\");\n            // assign attribute __interaction_message_message\n            __interaction_message_message.setName (\"message\");\n            // assign attribute __messageSend_message_message\n            __messageSend_message_message.setName (\"message\");\n            // assign attribute __messageReceive_message_message\n            __messageReceive_message_message.setName (\"message\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,messageSend,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__sysLine_coveredBy_operand,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__line_coveredBy_operand,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_message_message,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__message_receiveEvent_messageReceive,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageSend_message_message,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageReceive_enclosingOperand_operand,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__sysLine_coveredBy_combo,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__sysLine_coveredBy_messageSend,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__message_interaction_interaction,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__combo_covered_line,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__line_coveredBy_combo,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__combo_covered_sysLine,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__operand_fragment_messageReceive,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,messageReceive,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__operand_covered_line,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__message_sendEvent_messageSend,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,message,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__operand_covered_sysLine,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageReceive_message_message,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageSend_covered_sysLine,\"toBeTranslatedEdges\");\n\n            // create link\n            __combo_covered_sysLine.setTrg( sysLine);\n\n\n            // create link\n            __messageSend_covered_sysLine.setTrg( sysLine);\n\n\n            // create link\n            __operand_covered_sysLine.setTrg( sysLine);\n\n\n            // create link\n            __sysLine_coveredBy_operand.setSrc( sysLine);\n\n\n            // create link\n            __sysLine_coveredBy_combo.setSrc( sysLine);\n\n\n            // create link\n            __sysLine_coveredBy_messageSend.setSrc( sysLine);\n\n\n            // create link\n            __messageSend_covered_sysLine.setSrc( messageSend);\n\n\n            // create link\n            __messageSend_message_message.setSrc( messageSend);\n\n\n            // create link\n            __sysLine_coveredBy_messageSend.setTrg( messageSend);\n\n\n            // create link\n            __message_sendEvent_messageSend.setTrg( messageSend);\n\n\n            // create link\n            __messageReceive_enclosingOperand_operand.setTrg( operand);\n\n\n            // create link\n            __sysLine_coveredBy_operand.setTrg( operand);\n\n\n            // create link\n            __line_coveredBy_operand.setTrg( operand);\n\n\n            // create link\n            __operand_fragment_messageReceive.setSrc( operand);\n\n\n            // create link\n            __operand_covered_sysLine.setSrc( operand);\n\n\n            // create link\n            __operand_covered_line.setSrc( operand);\n\n\n            // create link\n            __combo_covered_line.setSrc( combo);\n\n\n            // create link\n            __line_coveredBy_combo.setTrg( combo);\n\n\n            // create link\n            __combo_covered_sysLine.setSrc( combo);\n\n\n            // create link\n            __sysLine_coveredBy_combo.setTrg( combo);\n\n\n            // create link\n            __operand_fragment_messageReceive.setTrg( messageReceive);\n\n\n            // create link\n            __messageReceive_enclosingOperand_operand.setSrc( messageReceive);\n\n\n            // create link\n            __message_receiveEvent_messageReceive.setTrg( messageReceive);\n\n\n            // create link\n            __messageReceive_message_message.setSrc( messageReceive);\n\n\n            // create link\n            __line_coveredBy_combo.setSrc( line);\n\n\n            // create link\n            __combo_covered_line.setTrg( line);\n\n\n            // create link\n            __operand_covered_line.setTrg( line);\n\n\n            // create link\n            __line_coveredBy_operand.setSrc( line);\n\n\n            // create link\n            __messageSend_message_message.setTrg( message);\n\n\n            // create link\n            __message_sendEvent_messageSend.setSrc( message);\n\n\n            // create link\n            __messageReceive_message_message.setTrg( message);\n\n\n            // create link\n            __interaction_message_message.setTrg( message);\n\n\n            // create link\n            __message_receiveEvent_messageReceive.setSrc( message);\n\n\n            // create link\n            __message_interaction_interaction.setSrc( message);\n\n\n            // create link\n            __interaction_message_message.setSrc( interaction);\n\n\n            // create link\n            __message_interaction_interaction.setTrg( interaction);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object combo is really bound\n            JavaSDM.ensure ( combo != null );\n            // check object interaction is really bound\n            JavaSDM.ensure ( interaction != null );\n            // check object line is really bound\n            JavaSDM.ensure ( line != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object message is really bound\n            JavaSDM.ensure ( message != null );\n            // check object messageReceive is really bound\n            JavaSDM.ensure ( messageReceive != null );\n            // check object messageSend is really bound\n            JavaSDM.ensure ( messageSend != null );\n            // check object operand is really bound\n            JavaSDM.ensure ( operand != null );\n            // check object sysLine is really bound\n            JavaSDM.ensure ( sysLine != null );\n            // check isomorphic binding between objects sysLine and line \n            JavaSDM.ensure ( !sysLine.equals (line) );\n\n            // check isomorphic binding between objects messageSend and messageReceive \n            JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n            // create object __interaction_lifeline_line\n            __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __combo_operand_operand\n            __combo_operand_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __line_interaction_interaction\n            __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __combo_operand_operand\n            __combo_operand_operand.setName (\"operand\");\n            // assign attribute __line_interaction_interaction\n            __line_interaction_interaction.setName (\"interaction\");\n            // assign attribute __interaction_lifeline_line\n            __interaction_lifeline_line.setName (\"lifeline\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_lifeline_line,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,combo,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,operand,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,line,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,sysLine,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__combo_operand_operand,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__line_interaction_interaction,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,interaction,\"contextNodes\");\n\n            // create link\n            __combo_operand_operand.setTrg( operand);\n\n\n            // create link\n            __combo_operand_operand.setSrc( combo);\n\n\n            // create link\n            __interaction_lifeline_line.setTrg( line);\n\n\n            // create link\n            __line_interaction_interaction.setSrc( line);\n\n\n            // create link\n            __line_interaction_interaction.setTrg( interaction);\n\n\n            // create link\n            __interaction_lifeline_line.setSrc( interaction);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend,
			InteractionOperand operand, CombinedFragment combo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Message message, Interaction interaction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      ActorToLifeline actorToLine = null;\n      CombinedFragment combo = null;\n      NamedFlow flow = null;\n      FlowToInteractionFragment flowToOperand = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      Message message = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      MessageOccurrenceSpecification messageSend = null;\n      InteractionOperand operand = null;\n      PackageDeclaration packageDeclaration = null;\n      Actor sysActor = null;\n      ActorToLifeline sysActorToSysLine = null;\n      Lifeline sysLine = null;\n      UseCase useCase = null;\n      UseCaseToInteraction useCaseToInteraction = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      NormalStep step = null;\n      NormalStepToMessage stepToMessage = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __messageSend_covered_sysLine = null;\n      EMoflonEdge __combo_covered_sysLine = null;\n      EMoflonEdge stepToMessage__source__step = null;\n      EMoflonEdge __sysLine_coveredBy_operand = null;\n      EMoflonEdge __messageSend_message_message = null;\n      EMoflonEdge __messageReceive_message_message = null;\n      EMoflonEdge __line_coveredBy_combo = null;\n      EMoflonEdge __sysLine_coveredBy_combo = null;\n      EMoflonEdge __interaction_message_message = null;\n      EMoflonEdge stepToMessage__target__message = null;\n      EMoflonEdge __combo_covered_line = null;\n      EMoflonEdge __sysLine_coveredBy_messageSend = null;\n      EMoflonEdge step__actor__actor = null;\n      EMoflonEdge __message_receiveEvent_messageReceive = null;\n      EMoflonEdge flow__steps__step = null;\n      EMoflonEdge __message_sendEvent_messageSend = null;\n      EMoflonEdge __operand_fragment_messageReceive = null;\n      EMoflonEdge __message_interaction_interaction = null;\n      EMoflonEdge __line_coveredBy_operand = null;\n      EMoflonEdge __messageReceive_enclosingOperand_operand = null;\n      EMoflonEdge __operand_covered_line = null;\n      EMoflonEdge __operand_covered_sysLine = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"actorToLine\"));\n\n         // ensure correct type and really bound of object actorToLine\n         JavaSDM.ensure ( _TmpObject instanceof ActorToLifeline );\n         actorToLine = (ActorToLifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"combo\"));\n\n         // ensure correct type and really bound of object combo\n         JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n         combo = (CombinedFragment) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof NamedFlow );\n         flow = (NamedFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flowToOperand\"));\n\n         // ensure correct type and really bound of object flowToOperand\n         JavaSDM.ensure ( _TmpObject instanceof FlowToInteractionFragment );\n         flowToOperand = (FlowToInteractionFragment) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"interaction\"));\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"line\"));\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"message\"));\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"messageReceive\"));\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"messageSend\"));\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"operand\"));\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"sysActor\"));\n\n         // ensure correct type and really bound of object sysActor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         sysActor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"sysActorToSysLine\"));\n\n         // ensure correct type and really bound of object sysActorToSysLine\n         JavaSDM.ensure ( _TmpObject instanceof ActorToLifeline );\n         sysActorToSysLine = (ActorToLifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"sysLine\"));\n\n         // ensure correct type and really bound of object sysLine\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         sysLine = (Lifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCaseToInteraction\"));\n\n         // ensure correct type and really bound of object useCaseToInteraction\n         JavaSDM.ensure ( _TmpObject instanceof UseCaseToInteraction );\n         useCaseToInteraction = (UseCaseToInteraction) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects sysActor and actor \n         JavaSDM.ensure ( !sysActor.equals (actor) );\n\n         // check isomorphic binding between objects sysActorToSysLine and actorToLine \n         JavaSDM.ensure ( !sysActorToSysLine.equals (actorToLine) );\n\n         // check isomorphic binding between objects sysLine and line \n         JavaSDM.ensure ( !sysLine.equals (line) );\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object step\n         step = UseCaseDSLFactory.eINSTANCE.createNormalStep();\n\n         // create object stepToMessage\n         stepToMessage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createNormalStepToMessage();\n\n         // assign attribute step\n         step.setName ((java.lang.String)csp.getValue(\"step\",\"name\"));\n\n         // create link\n         stepToMessage.setTarget( message);\n\n\n         // create link\n         step.setActor( actor);\n\n\n         // create link\n         \tflow.getSteps().add(step); // add link\n\n\n         // create link\n         stepToMessage.setSource( step);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToMessage is really bound\n         JavaSDM.ensure ( stepToMessage != null );\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,step,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageSend,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object actorToLine is really bound\n         JavaSDM.ensure ( actorToLine != null );\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object flowToOperand is really bound\n         JavaSDM.ensure ( flowToOperand != null );\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object operand is really bound\n         JavaSDM.ensure ( operand != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToMessage is really bound\n         JavaSDM.ensure ( stepToMessage != null );\n         // check object sysActor is really bound\n         JavaSDM.ensure ( sysActor != null );\n         // check object sysActorToSysLine is really bound\n         JavaSDM.ensure ( sysActorToSysLine != null );\n         // check object sysLine is really bound\n         JavaSDM.ensure ( sysLine != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check object useCaseToInteraction is really bound\n         JavaSDM.ensure ( useCaseToInteraction != null );\n         // check isomorphic binding between objects actorToLine and actor \n         JavaSDM.ensure ( !actorToLine.equals (actor) );\n\n         // check isomorphic binding between objects combo and actor \n         JavaSDM.ensure ( !combo.equals (actor) );\n\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects flowToOperand and actor \n         JavaSDM.ensure ( !flowToOperand.equals (actor) );\n\n         // check isomorphic binding between objects interaction and actor \n         JavaSDM.ensure ( !interaction.equals (actor) );\n\n         // check isomorphic binding between objects line and actor \n         JavaSDM.ensure ( !line.equals (actor) );\n\n         // check isomorphic binding between objects message and actor \n         JavaSDM.ensure ( !message.equals (actor) );\n\n         // check isomorphic binding between objects messageReceive and actor \n         JavaSDM.ensure ( !messageReceive.equals (actor) );\n\n         // check isomorphic binding between objects messageSend and actor \n         JavaSDM.ensure ( !messageSend.equals (actor) );\n\n         // check isomorphic binding between objects operand and actor \n         JavaSDM.ensure ( !operand.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclaration and actor \n         JavaSDM.ensure ( !packageDeclaration.equals (actor) );\n\n         // check isomorphic binding between objects step and actor \n         JavaSDM.ensure ( !step.equals (actor) );\n\n         // check isomorphic binding between objects stepToMessage and actor \n         JavaSDM.ensure ( !stepToMessage.equals (actor) );\n\n         // check isomorphic binding between objects sysActor and actor \n         JavaSDM.ensure ( !sysActor.equals (actor) );\n\n         // check isomorphic binding between objects sysActorToSysLine and actor \n         JavaSDM.ensure ( !sysActorToSysLine.equals (actor) );\n\n         // check isomorphic binding between objects sysLine and actor \n         JavaSDM.ensure ( !sysLine.equals (actor) );\n\n         // check isomorphic binding between objects useCase and actor \n         JavaSDM.ensure ( !useCase.equals (actor) );\n\n         // check isomorphic binding between objects useCaseToInteraction and actor \n         JavaSDM.ensure ( !useCaseToInteraction.equals (actor) );\n\n         // check isomorphic binding between objects combo and actorToLine \n         JavaSDM.ensure ( !combo.equals (actorToLine) );\n\n         // check isomorphic binding between objects flow and actorToLine \n         JavaSDM.ensure ( !flow.equals (actorToLine) );\n\n         // check isomorphic binding between objects flowToOperand and actorToLine \n         JavaSDM.ensure ( !flowToOperand.equals (actorToLine) );\n\n         // check isomorphic binding between objects interaction and actorToLine \n         JavaSDM.ensure ( !interaction.equals (actorToLine) );\n\n         // check isomorphic binding between objects line and actorToLine \n         JavaSDM.ensure ( !line.equals (actorToLine) );\n\n         // check isomorphic binding between objects message and actorToLine \n         JavaSDM.ensure ( !message.equals (actorToLine) );\n\n         // check isomorphic binding between objects messageReceive and actorToLine \n         JavaSDM.ensure ( !messageReceive.equals (actorToLine) );\n\n         // check isomorphic binding between objects messageSend and actorToLine \n         JavaSDM.ensure ( !messageSend.equals (actorToLine) );\n\n         // check isomorphic binding between objects operand and actorToLine \n         JavaSDM.ensure ( !operand.equals (actorToLine) );\n\n         // check isomorphic binding between objects packageDeclaration and actorToLine \n         JavaSDM.ensure ( !packageDeclaration.equals (actorToLine) );\n\n         // check isomorphic binding between objects step and actorToLine \n         JavaSDM.ensure ( !step.equals (actorToLine) );\n\n         // check isomorphic binding between objects stepToMessage and actorToLine \n         JavaSDM.ensure ( !stepToMessage.equals (actorToLine) );\n\n         // check isomorphic binding between objects sysActor and actorToLine \n         JavaSDM.ensure ( !sysActor.equals (actorToLine) );\n\n         // check isomorphic binding between objects sysActorToSysLine and actorToLine \n         JavaSDM.ensure ( !sysActorToSysLine.equals (actorToLine) );\n\n         // check isomorphic binding between objects sysLine and actorToLine \n         JavaSDM.ensure ( !sysLine.equals (actorToLine) );\n\n         // check isomorphic binding between objects useCase and actorToLine \n         JavaSDM.ensure ( !useCase.equals (actorToLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and actorToLine \n         JavaSDM.ensure ( !useCaseToInteraction.equals (actorToLine) );\n\n         // check isomorphic binding between objects flow and combo \n         JavaSDM.ensure ( !flow.equals (combo) );\n\n         // check isomorphic binding between objects flowToOperand and combo \n         JavaSDM.ensure ( !flowToOperand.equals (combo) );\n\n         // check isomorphic binding between objects interaction and combo \n         JavaSDM.ensure ( !interaction.equals (combo) );\n\n         // check isomorphic binding between objects line and combo \n         JavaSDM.ensure ( !line.equals (combo) );\n\n         // check isomorphic binding between objects message and combo \n         JavaSDM.ensure ( !message.equals (combo) );\n\n         // check isomorphic binding between objects messageReceive and combo \n         JavaSDM.ensure ( !messageReceive.equals (combo) );\n\n         // check isomorphic binding between objects messageSend and combo \n         JavaSDM.ensure ( !messageSend.equals (combo) );\n\n         // check isomorphic binding between objects operand and combo \n         JavaSDM.ensure ( !operand.equals (combo) );\n\n         // check isomorphic binding between objects packageDeclaration and combo \n         JavaSDM.ensure ( !packageDeclaration.equals (combo) );\n\n         // check isomorphic binding between objects step and combo \n         JavaSDM.ensure ( !step.equals (combo) );\n\n         // check isomorphic binding between objects stepToMessage and combo \n         JavaSDM.ensure ( !stepToMessage.equals (combo) );\n\n         // check isomorphic binding between objects sysActor and combo \n         JavaSDM.ensure ( !sysActor.equals (combo) );\n\n         // check isomorphic binding between objects sysActorToSysLine and combo \n         JavaSDM.ensure ( !sysActorToSysLine.equals (combo) );\n\n         // check isomorphic binding between objects sysLine and combo \n         JavaSDM.ensure ( !sysLine.equals (combo) );\n\n         // check isomorphic binding between objects useCase and combo \n         JavaSDM.ensure ( !useCase.equals (combo) );\n\n         // check isomorphic binding between objects useCaseToInteraction and combo \n         JavaSDM.ensure ( !useCaseToInteraction.equals (combo) );\n\n         // check isomorphic binding between objects flowToOperand and flow \n         JavaSDM.ensure ( !flowToOperand.equals (flow) );\n\n         // check isomorphic binding between objects interaction and flow \n         JavaSDM.ensure ( !interaction.equals (flow) );\n\n         // check isomorphic binding between objects line and flow \n         JavaSDM.ensure ( !line.equals (flow) );\n\n         // check isomorphic binding between objects message and flow \n         JavaSDM.ensure ( !message.equals (flow) );\n\n         // check isomorphic binding between objects messageReceive and flow \n         JavaSDM.ensure ( !messageReceive.equals (flow) );\n\n         // check isomorphic binding between objects messageSend and flow \n         JavaSDM.ensure ( !messageSend.equals (flow) );\n\n         // check isomorphic binding between objects operand and flow \n         JavaSDM.ensure ( !operand.equals (flow) );\n\n         // check isomorphic binding between objects packageDeclaration and flow \n         JavaSDM.ensure ( !packageDeclaration.equals (flow) );\n\n         // check isomorphic binding between objects step and flow \n         JavaSDM.ensure ( !step.equals (flow) );\n\n         // check isomorphic binding between objects stepToMessage and flow \n         JavaSDM.ensure ( !stepToMessage.equals (flow) );\n\n         // check isomorphic binding between objects sysActor and flow \n         JavaSDM.ensure ( !sysActor.equals (flow) );\n\n         // check isomorphic binding between objects sysActorToSysLine and flow \n         JavaSDM.ensure ( !sysActorToSysLine.equals (flow) );\n\n         // check isomorphic binding between objects sysLine and flow \n         JavaSDM.ensure ( !sysLine.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects useCaseToInteraction and flow \n         JavaSDM.ensure ( !useCaseToInteraction.equals (flow) );\n\n         // check isomorphic binding between objects interaction and flowToOperand \n         JavaSDM.ensure ( !interaction.equals (flowToOperand) );\n\n         // check isomorphic binding between objects line and flowToOperand \n         JavaSDM.ensure ( !line.equals (flowToOperand) );\n\n         // check isomorphic binding between objects message and flowToOperand \n         JavaSDM.ensure ( !message.equals (flowToOperand) );\n\n         // check isomorphic binding between objects messageReceive and flowToOperand \n         JavaSDM.ensure ( !messageReceive.equals (flowToOperand) );\n\n         // check isomorphic binding between objects messageSend and flowToOperand \n         JavaSDM.ensure ( !messageSend.equals (flowToOperand) );\n\n         // check isomorphic binding between objects operand and flowToOperand \n         JavaSDM.ensure ( !operand.equals (flowToOperand) );\n\n         // check isomorphic binding between objects packageDeclaration and flowToOperand \n         JavaSDM.ensure ( !packageDeclaration.equals (flowToOperand) );\n\n         // check isomorphic binding between objects step and flowToOperand \n         JavaSDM.ensure ( !step.equals (flowToOperand) );\n\n         // check isomorphic binding between objects stepToMessage and flowToOperand \n         JavaSDM.ensure ( !stepToMessage.equals (flowToOperand) );\n\n         // check isomorphic binding between objects sysActor and flowToOperand \n         JavaSDM.ensure ( !sysActor.equals (flowToOperand) );\n\n         // check isomorphic binding between objects sysActorToSysLine and flowToOperand \n         JavaSDM.ensure ( !sysActorToSysLine.equals (flowToOperand) );\n\n         // check isomorphic binding between objects sysLine and flowToOperand \n         JavaSDM.ensure ( !sysLine.equals (flowToOperand) );\n\n         // check isomorphic binding between objects useCase and flowToOperand \n         JavaSDM.ensure ( !useCase.equals (flowToOperand) );\n\n         // check isomorphic binding between objects useCaseToInteraction and flowToOperand \n         JavaSDM.ensure ( !useCaseToInteraction.equals (flowToOperand) );\n\n         // check isomorphic binding between objects line and interaction \n         JavaSDM.ensure ( !line.equals (interaction) );\n\n         // check isomorphic binding between objects message and interaction \n         JavaSDM.ensure ( !message.equals (interaction) );\n\n         // check isomorphic binding between objects messageReceive and interaction \n         JavaSDM.ensure ( !messageReceive.equals (interaction) );\n\n         // check isomorphic binding between objects messageSend and interaction \n         JavaSDM.ensure ( !messageSend.equals (interaction) );\n\n         // check isomorphic binding between objects operand and interaction \n         JavaSDM.ensure ( !operand.equals (interaction) );\n\n         // check isomorphic binding between objects packageDeclaration and interaction \n         JavaSDM.ensure ( !packageDeclaration.equals (interaction) );\n\n         // check isomorphic binding between objects step and interaction \n         JavaSDM.ensure ( !step.equals (interaction) );\n\n         // check isomorphic binding between objects stepToMessage and interaction \n         JavaSDM.ensure ( !stepToMessage.equals (interaction) );\n\n         // check isomorphic binding between objects sysActor and interaction \n         JavaSDM.ensure ( !sysActor.equals (interaction) );\n\n         // check isomorphic binding between objects sysActorToSysLine and interaction \n         JavaSDM.ensure ( !sysActorToSysLine.equals (interaction) );\n\n         // check isomorphic binding between objects sysLine and interaction \n         JavaSDM.ensure ( !sysLine.equals (interaction) );\n\n         // check isomorphic binding between objects useCase and interaction \n         JavaSDM.ensure ( !useCase.equals (interaction) );\n\n         // check isomorphic binding between objects useCaseToInteraction and interaction \n         JavaSDM.ensure ( !useCaseToInteraction.equals (interaction) );\n\n         // check isomorphic binding between objects message and line \n         JavaSDM.ensure ( !message.equals (line) );\n\n         // check isomorphic binding between objects messageReceive and line \n         JavaSDM.ensure ( !messageReceive.equals (line) );\n\n         // check isomorphic binding between objects messageSend and line \n         JavaSDM.ensure ( !messageSend.equals (line) );\n\n         // check isomorphic binding between objects operand and line \n         JavaSDM.ensure ( !operand.equals (line) );\n\n         // check isomorphic binding between objects packageDeclaration and line \n         JavaSDM.ensure ( !packageDeclaration.equals (line) );\n\n         // check isomorphic binding between objects step and line \n         JavaSDM.ensure ( !step.equals (line) );\n\n         // check isomorphic binding between objects stepToMessage and line \n         JavaSDM.ensure ( !stepToMessage.equals (line) );\n\n         // check isomorphic binding between objects sysActor and line \n         JavaSDM.ensure ( !sysActor.equals (line) );\n\n         // check isomorphic binding between objects sysActorToSysLine and line \n         JavaSDM.ensure ( !sysActorToSysLine.equals (line) );\n\n         // check isomorphic binding between objects sysLine and line \n         JavaSDM.ensure ( !sysLine.equals (line) );\n\n         // check isomorphic binding between objects useCase and line \n         JavaSDM.ensure ( !useCase.equals (line) );\n\n         // check isomorphic binding between objects useCaseToInteraction and line \n         JavaSDM.ensure ( !useCaseToInteraction.equals (line) );\n\n         // check isomorphic binding between objects messageReceive and message \n         JavaSDM.ensure ( !messageReceive.equals (message) );\n\n         // check isomorphic binding between objects messageSend and message \n         JavaSDM.ensure ( !messageSend.equals (message) );\n\n         // check isomorphic binding between objects operand and message \n         JavaSDM.ensure ( !operand.equals (message) );\n\n         // check isomorphic binding between objects packageDeclaration and message \n         JavaSDM.ensure ( !packageDeclaration.equals (message) );\n\n         // check isomorphic binding between objects step and message \n         JavaSDM.ensure ( !step.equals (message) );\n\n         // check isomorphic binding between objects stepToMessage and message \n         JavaSDM.ensure ( !stepToMessage.equals (message) );\n\n         // check isomorphic binding between objects sysActor and message \n         JavaSDM.ensure ( !sysActor.equals (message) );\n\n         // check isomorphic binding between objects sysActorToSysLine and message \n         JavaSDM.ensure ( !sysActorToSysLine.equals (message) );\n\n         // check isomorphic binding between objects sysLine and message \n         JavaSDM.ensure ( !sysLine.equals (message) );\n\n         // check isomorphic binding between objects useCase and message \n         JavaSDM.ensure ( !useCase.equals (message) );\n\n         // check isomorphic binding between objects useCaseToInteraction and message \n         JavaSDM.ensure ( !useCaseToInteraction.equals (message) );\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check isomorphic binding between objects operand and messageReceive \n         JavaSDM.ensure ( !operand.equals (messageReceive) );\n\n         // check isomorphic binding between objects packageDeclaration and messageReceive \n         JavaSDM.ensure ( !packageDeclaration.equals (messageReceive) );\n\n         // check isomorphic binding between objects step and messageReceive \n         JavaSDM.ensure ( !step.equals (messageReceive) );\n\n         // check isomorphic binding between objects stepToMessage and messageReceive \n         JavaSDM.ensure ( !stepToMessage.equals (messageReceive) );\n\n         // check isomorphic binding between objects sysActor and messageReceive \n         JavaSDM.ensure ( !sysActor.equals (messageReceive) );\n\n         // check isomorphic binding between objects sysActorToSysLine and messageReceive \n         JavaSDM.ensure ( !sysActorToSysLine.equals (messageReceive) );\n\n         // check isomorphic binding between objects sysLine and messageReceive \n         JavaSDM.ensure ( !sysLine.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCase and messageReceive \n         JavaSDM.ensure ( !useCase.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCaseToInteraction and messageReceive \n         JavaSDM.ensure ( !useCaseToInteraction.equals (messageReceive) );\n\n         // check isomorphic binding between objects operand and messageSend \n         JavaSDM.ensure ( !operand.equals (messageSend) );\n\n         // check isomorphic binding between objects packageDeclaration and messageSend \n         JavaSDM.ensure ( !packageDeclaration.equals (messageSend) );\n\n         // check isomorphic binding between objects step and messageSend \n         JavaSDM.ensure ( !step.equals (messageSend) );\n\n         // check isomorphic binding between objects stepToMessage and messageSend \n         JavaSDM.ensure ( !stepToMessage.equals (messageSend) );\n\n         // check isomorphic binding between objects sysActor and messageSend \n         JavaSDM.ensure ( !sysActor.equals (messageSend) );\n\n         // check isomorphic binding between objects sysActorToSysLine and messageSend \n         JavaSDM.ensure ( !sysActorToSysLine.equals (messageSend) );\n\n         // check isomorphic binding between objects sysLine and messageSend \n         JavaSDM.ensure ( !sysLine.equals (messageSend) );\n\n         // check isomorphic binding between objects useCase and messageSend \n         JavaSDM.ensure ( !useCase.equals (messageSend) );\n\n         // check isomorphic binding between objects useCaseToInteraction and messageSend \n         JavaSDM.ensure ( !useCaseToInteraction.equals (messageSend) );\n\n         // check isomorphic binding between objects packageDeclaration and operand \n         JavaSDM.ensure ( !packageDeclaration.equals (operand) );\n\n         // check isomorphic binding between objects step and operand \n         JavaSDM.ensure ( !step.equals (operand) );\n\n         // check isomorphic binding between objects stepToMessage and operand \n         JavaSDM.ensure ( !stepToMessage.equals (operand) );\n\n         // check isomorphic binding between objects sysActor and operand \n         JavaSDM.ensure ( !sysActor.equals (operand) );\n\n         // check isomorphic binding between objects sysActorToSysLine and operand \n         JavaSDM.ensure ( !sysActorToSysLine.equals (operand) );\n\n         // check isomorphic binding between objects sysLine and operand \n         JavaSDM.ensure ( !sysLine.equals (operand) );\n\n         // check isomorphic binding between objects useCase and operand \n         JavaSDM.ensure ( !useCase.equals (operand) );\n\n         // check isomorphic binding between objects useCaseToInteraction and operand \n         JavaSDM.ensure ( !useCaseToInteraction.equals (operand) );\n\n         // check isomorphic binding between objects step and packageDeclaration \n         JavaSDM.ensure ( !step.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects stepToMessage and packageDeclaration \n         JavaSDM.ensure ( !stepToMessage.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects sysActor and packageDeclaration \n         JavaSDM.ensure ( !sysActor.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects sysActorToSysLine and packageDeclaration \n         JavaSDM.ensure ( !sysActorToSysLine.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects sysLine and packageDeclaration \n         JavaSDM.ensure ( !sysLine.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclaration \n         JavaSDM.ensure ( !useCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCaseToInteraction and packageDeclaration \n         JavaSDM.ensure ( !useCaseToInteraction.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects stepToMessage and step \n         JavaSDM.ensure ( !stepToMessage.equals (step) );\n\n         // check isomorphic binding between objects sysActor and step \n         JavaSDM.ensure ( !sysActor.equals (step) );\n\n         // check isomorphic binding between objects sysActorToSysLine and step \n         JavaSDM.ensure ( !sysActorToSysLine.equals (step) );\n\n         // check isomorphic binding between objects sysLine and step \n         JavaSDM.ensure ( !sysLine.equals (step) );\n\n         // check isomorphic binding between objects useCase and step \n         JavaSDM.ensure ( !useCase.equals (step) );\n\n         // check isomorphic binding between objects useCaseToInteraction and step \n         JavaSDM.ensure ( !useCaseToInteraction.equals (step) );\n\n         // check isomorphic binding between objects sysActor and stepToMessage \n         JavaSDM.ensure ( !sysActor.equals (stepToMessage) );\n\n         // check isomorphic binding between objects sysActorToSysLine and stepToMessage \n         JavaSDM.ensure ( !sysActorToSysLine.equals (stepToMessage) );\n\n         // check isomorphic binding between objects sysLine and stepToMessage \n         JavaSDM.ensure ( !sysLine.equals (stepToMessage) );\n\n         // check isomorphic binding between objects useCase and stepToMessage \n         JavaSDM.ensure ( !useCase.equals (stepToMessage) );\n\n         // check isomorphic binding between objects useCaseToInteraction and stepToMessage \n         JavaSDM.ensure ( !useCaseToInteraction.equals (stepToMessage) );\n\n         // check isomorphic binding between objects sysActorToSysLine and sysActor \n         JavaSDM.ensure ( !sysActorToSysLine.equals (sysActor) );\n\n         // check isomorphic binding between objects sysLine and sysActor \n         JavaSDM.ensure ( !sysLine.equals (sysActor) );\n\n         // check isomorphic binding between objects useCase and sysActor \n         JavaSDM.ensure ( !useCase.equals (sysActor) );\n\n         // check isomorphic binding between objects useCaseToInteraction and sysActor \n         JavaSDM.ensure ( !useCaseToInteraction.equals (sysActor) );\n\n         // check isomorphic binding between objects sysLine and sysActorToSysLine \n         JavaSDM.ensure ( !sysLine.equals (sysActorToSysLine) );\n\n         // check isomorphic binding between objects useCase and sysActorToSysLine \n         JavaSDM.ensure ( !useCase.equals (sysActorToSysLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and sysActorToSysLine \n         JavaSDM.ensure ( !useCaseToInteraction.equals (sysActorToSysLine) );\n\n         // check isomorphic binding between objects useCase and sysLine \n         JavaSDM.ensure ( !useCase.equals (sysLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and sysLine \n         JavaSDM.ensure ( !useCaseToInteraction.equals (sysLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and useCase \n         JavaSDM.ensure ( !useCaseToInteraction.equals (useCase) );\n\n         // create object __messageSend_covered_sysLine\n         __messageSend_covered_sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __combo_covered_sysLine\n         __combo_covered_sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object stepToMessage__source__step\n         stepToMessage__source__step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __sysLine_coveredBy_operand\n         __sysLine_coveredBy_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageSend_message_message\n         __messageSend_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageReceive_message_message\n         __messageReceive_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __line_coveredBy_combo\n         __line_coveredBy_combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __sysLine_coveredBy_combo\n         __sysLine_coveredBy_combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __interaction_message_message\n         __interaction_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object stepToMessage__target__message\n         stepToMessage__target__message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __combo_covered_line\n         __combo_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __sysLine_coveredBy_messageSend\n         __sysLine_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object step__actor__actor\n         step__actor__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __message_receiveEvent_messageReceive\n         __message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object flow__steps__step\n         flow__steps__step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __message_sendEvent_messageSend\n         __message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __operand_fragment_messageReceive\n         __operand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __message_interaction_interaction\n         __message_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __line_coveredBy_operand\n         __line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageReceive_enclosingOperand_operand\n         __messageReceive_enclosingOperand_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __operand_covered_line\n         __operand_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __operand_covered_sysLine\n         __operand_covered_sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"UserStepNfToMessageRule\");\n         // assign attribute __sysLine_coveredBy_messageSend\n         __sysLine_coveredBy_messageSend.setName (\"coveredBy\");\n         // assign attribute __messageSend_covered_sysLine\n         __messageSend_covered_sysLine.setName (\"covered\");\n         // assign attribute __sysLine_coveredBy_operand\n         __sysLine_coveredBy_operand.setName (\"coveredBy\");\n         // assign attribute __operand_covered_sysLine\n         __operand_covered_sysLine.setName (\"covered\");\n         // assign attribute __sysLine_coveredBy_combo\n         __sysLine_coveredBy_combo.setName (\"coveredBy\");\n         // assign attribute __combo_covered_sysLine\n         __combo_covered_sysLine.setName (\"covered\");\n         // assign attribute __operand_fragment_messageReceive\n         __operand_fragment_messageReceive.setName (\"fragment\");\n         // assign attribute __messageReceive_enclosingOperand_operand\n         __messageReceive_enclosingOperand_operand.setName (\"enclosingOperand\");\n         // assign attribute __line_coveredBy_operand\n         __line_coveredBy_operand.setName (\"coveredBy\");\n         // assign attribute __operand_covered_line\n         __operand_covered_line.setName (\"covered\");\n         // assign attribute __line_coveredBy_combo\n         __line_coveredBy_combo.setName (\"coveredBy\");\n         // assign attribute __combo_covered_line\n         __combo_covered_line.setName (\"covered\");\n         // assign attribute flow__steps__step\n         flow__steps__step.setName (\"steps\");\n         // assign attribute step__actor__actor\n         step__actor__actor.setName (\"actor\");\n         // assign attribute __message_sendEvent_messageSend\n         __message_sendEvent_messageSend.setName (\"sendEvent\");\n         // assign attribute __message_receiveEvent_messageReceive\n         __message_receiveEvent_messageReceive.setName (\"receiveEvent\");\n         // assign attribute __message_interaction_interaction\n         __message_interaction_interaction.setName (\"interaction\");\n         // assign attribute __interaction_message_message\n         __interaction_message_message.setName (\"message\");\n         // assign attribute stepToMessage__source__step\n         stepToMessage__source__step.setName (\"source\");\n         // assign attribute stepToMessage__target__message\n         stepToMessage__target__message.setName (\"target\");\n         // assign attribute __messageSend_message_message\n         __messageSend_message_message.setName (\"message\");\n         // assign attribute __messageReceive_message_message\n         __messageReceive_message_message.setName (\"message\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageSend_covered_sysLine,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__combo_covered_sysLine,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage__source__step,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__sysLine_coveredBy_operand,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageSend_message_message,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageReceive_message_message,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__line_coveredBy_combo,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__sysLine_coveredBy_combo,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__interaction_message_message,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage__target__message,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__combo_covered_line,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__sysLine_coveredBy_messageSend,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,step__actor__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__message_receiveEvent_messageReceive,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,flow__steps__step,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__message_sendEvent_messageSend,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__operand_fragment_messageReceive,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__message_interaction_interaction,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__line_coveredBy_operand,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageReceive_enclosingOperand_operand,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__operand_covered_line,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__operand_covered_sysLine,\"translatedEdges\");\n\n         // create link\n         step__actor__actor.setTrg( actor);\n\n\n         // create link\n         __sysLine_coveredBy_combo.setSrc( sysLine);\n\n\n         // create link\n         __sysLine_coveredBy_operand.setSrc( sysLine);\n\n\n         // create link\n         __messageSend_covered_sysLine.setTrg( sysLine);\n\n\n         // create link\n         __sysLine_coveredBy_messageSend.setSrc( sysLine);\n\n\n         // create link\n         __combo_covered_sysLine.setTrg( sysLine);\n\n\n         // create link\n         __operand_covered_sysLine.setTrg( sysLine);\n\n\n         // create link\n         __messageSend_message_message.setSrc( messageSend);\n\n\n         // create link\n         __message_sendEvent_messageSend.setTrg( messageSend);\n\n\n         // create link\n         __sysLine_coveredBy_messageSend.setTrg( messageSend);\n\n\n         // create link\n         __messageSend_covered_sysLine.setSrc( messageSend);\n\n\n         // create link\n         __operand_fragment_messageReceive.setSrc( operand);\n\n\n         // create link\n         __sysLine_coveredBy_operand.setTrg( operand);\n\n\n         // create link\n         __operand_covered_line.setSrc( operand);\n\n\n         // create link\n         __operand_covered_sysLine.setSrc( operand);\n\n\n         // create link\n         __line_coveredBy_operand.setTrg( operand);\n\n\n         // create link\n         __messageReceive_enclosingOperand_operand.setTrg( operand);\n\n\n         // create link\n         __combo_covered_line.setSrc( combo);\n\n\n         // create link\n         __line_coveredBy_combo.setTrg( combo);\n\n\n         // create link\n         __sysLine_coveredBy_combo.setTrg( combo);\n\n\n         // create link\n         __combo_covered_sysLine.setSrc( combo);\n\n\n         // create link\n         flow__steps__step.setSrc( flow);\n\n\n         // create link\n         __messageReceive_enclosingOperand_operand.setSrc( messageReceive);\n\n\n         // create link\n         __message_receiveEvent_messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         __messageReceive_message_message.setSrc( messageReceive);\n\n\n         // create link\n         __operand_fragment_messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         __operand_covered_line.setTrg( line);\n\n\n         // create link\n         __line_coveredBy_combo.setSrc( line);\n\n\n         // create link\n         __combo_covered_line.setTrg( line);\n\n\n         // create link\n         __line_coveredBy_operand.setSrc( line);\n\n\n         // create link\n         flow__steps__step.setTrg( step);\n\n\n         // create link\n         step__actor__actor.setSrc( step);\n\n\n         // create link\n         stepToMessage__source__step.setTrg( step);\n\n\n         // create link\n         stepToMessage__target__message.setTrg( message);\n\n\n         // create link\n         __messageReceive_message_message.setTrg( message);\n\n\n         // create link\n         __message_interaction_interaction.setSrc( message);\n\n\n         // create link\n         __message_sendEvent_messageSend.setSrc( message);\n\n\n         // create link\n         __messageSend_message_message.setTrg( message);\n\n\n         // create link\n         __interaction_message_message.setTrg( message);\n\n\n         // create link\n         __message_receiveEvent_messageReceive.setSrc( message);\n\n\n         // create link\n         __message_interaction_interaction.setTrg( interaction);\n\n\n         // create link\n         __interaction_message_message.setSrc( interaction);\n\n\n         // create link\n         stepToMessage__target__message.setSrc( stepToMessage);\n\n\n         // create link\n         stepToMessage__source__step.setSrc( stepToMessage);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,packageDeclaration,sysActor,actor,sysLine,messageSend,sysActorToSysLine,operand,combo,flow,flowToOperand,messageReceive,line,useCase,useCaseToInteraction,step,message,interaction,stepToMessage,actorToLine);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      CombinedFragment combo = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      Message message = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      MessageOccurrenceSpecification messageSend = null;\n      InteractionOperand operand = null;\n      Lifeline sysLine = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge __packageDeclaration_actors_sysActor = null;\n      EMoflonEdge __sysActorToSysLine_source_sysActor = null;\n      EMoflonEdge __actorToLine_source_actor = null;\n      EMoflonEdge __sysLine_coveredBy_messageSend = null;\n      EMoflonEdge __sysActorToSysLine_target_sysLine = null;\n      EMoflonEdge __combo_covered_sysLine = null;\n      EMoflonEdge __messageSend_covered_sysLine = null;\n      EMoflonEdge __operand_covered_sysLine = null;\n      EMoflonEdge __sysLine_coveredBy_combo = null;\n      EMoflonEdge __sysLine_coveredBy_operand = null;\n      EMoflonEdge __message_sendEvent_messageSend = null;\n      EMoflonEdge __messageSend_message_message = null;\n      EMoflonEdge __flowToOperand_target_operand = null;\n      EMoflonEdge __operand_fragment_messageReceive = null;\n      EMoflonEdge __messageReceive_enclosingOperand_operand = null;\n      EMoflonEdge __line_coveredBy_operand = null;\n      EMoflonEdge __operand_covered_line = null;\n      EMoflonEdge __combo_operand_operand = null;\n      EMoflonEdge __combo_covered_line = null;\n      EMoflonEdge __line_coveredBy_combo = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __flowToOperand_source_flow = null;\n      EMoflonEdge __messageReceive_message_message = null;\n      EMoflonEdge __message_receiveEvent_messageReceive = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n      EMoflonEdge __actorToLine_target_line = null;\n      EMoflonEdge __line_interaction_interaction = null;\n      EMoflonEdge __useCaseToInteraction_source_useCase = null;\n      EMoflonEdge __useCaseToInteraction_target_interaction = null;\n      EMoflonEdge __message_interaction_interaction = null;\n      EMoflonEdge __interaction_message_message = null;\n      CSP csp = null;\n      PackageDeclaration packageDeclaration = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterInteractionToUseCaseToInteraction = null;\n      UseCaseToInteraction useCaseToInteraction = null;\n      Actor actor = null;\n      Iterator fujaba__IterLineToActorToLine = null;\n      ActorToLifeline actorToLine = null;\n      Actor sysActor = null;\n      Iterator fujaba__IterSysLineToSysActorToSysLine = null;\n      ActorToLifeline sysActorToSysLine = null;\n      NamedFlow flow = null;\n      Iterator fujaba__IterOperandToFlowToOperand = null;\n      FlowToInteractionFragment flowToOperand = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"UserStepNfToMessageRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"combo\"));\n\n         // ensure correct type and really bound of object combo\n         JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n         combo = (CombinedFragment) _TmpObject;\n         _TmpObject = (match.getObject(\"interaction\"));\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n         _TmpObject = (match.getObject(\"line\"));\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n         _TmpObject = (match.getObject(\"message\"));\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n         _TmpObject = (match.getObject(\"messageReceive\"));\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n         _TmpObject = (match.getObject(\"messageSend\"));\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n         _TmpObject = (match.getObject(\"operand\"));\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n         _TmpObject = (match.getObject(\"sysLine\"));\n\n         // ensure correct type and really bound of object sysLine\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         sysLine = (Lifeline) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects sysLine and line \n         JavaSDM.ensure ( !sysLine.equals (line) );\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // iterate to-many link target from operand to flowToOperand\n         fujaba__Success = false;\n\n         fujaba__IterOperandToFlowToOperand = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(operand,FlowToInteractionFragment.class,\"target\")).iterator ();\n\n         while ( fujaba__IterOperandToFlowToOperand.hasNext () )\n         {\n            try\n            {\n               flowToOperand = (FlowToInteractionFragment) fujaba__IterOperandToFlowToOperand.next ();\n\n               // check object flowToOperand is really bound\n               JavaSDM.ensure ( flowToOperand != null );\n               // bind object\n               _TmpObject = flowToOperand.getSource ();\n\n               // ensure correct type and really bound of object flow\n               JavaSDM.ensure ( _TmpObject instanceof NamedFlow );\n               flow = (NamedFlow) _TmpObject;\n\n               // iterate to-many link target from sysLine to sysActorToSysLine\n               fujaba__Success = false;\n\n               fujaba__IterSysLineToSysActorToSysLine = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(sysLine,ActorToLifeline.class,\"target\")).iterator ();\n\n               while ( fujaba__IterSysLineToSysActorToSysLine.hasNext () )\n               {\n                  try\n                  {\n                     sysActorToSysLine = (ActorToLifeline) fujaba__IterSysLineToSysActorToSysLine.next ();\n\n                     // check object sysActorToSysLine is really bound\n                     JavaSDM.ensure ( sysActorToSysLine != null );\n                     // bind object\n                     sysActor = sysActorToSysLine.getSource ();\n\n                     // check object sysActor is really bound\n                     JavaSDM.ensure ( sysActor != null );\n\n                     // iterate to-many link target from line to actorToLine\n                     fujaba__Success = false;\n\n                     fujaba__IterLineToActorToLine = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(line,ActorToLifeline.class,\"target\")).iterator ();\n\n                     while ( fujaba__IterLineToActorToLine.hasNext () )\n                     {\n                        try\n                        {\n                           actorToLine = (ActorToLifeline) fujaba__IterLineToActorToLine.next ();\n\n                           // check object actorToLine is really bound\n                           JavaSDM.ensure ( actorToLine != null );\n                           // check isomorphic binding between objects sysActorToSysLine and actorToLine \n                           JavaSDM.ensure ( !sysActorToSysLine.equals (actorToLine) );\n\n                           // bind object\n                           actor = actorToLine.getSource ();\n\n                           // check object actor is really bound\n                           JavaSDM.ensure ( actor != null );\n\n                           // check isomorphic binding between objects sysActor and actor \n                           JavaSDM.ensure ( !sysActor.equals (actor) );\n\n                           // iterate to-many link target from interaction to useCaseToInteraction\n                           fujaba__Success = false;\n\n                           fujaba__IterInteractionToUseCaseToInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(interaction,UseCaseToInteraction.class,\"target\")).iterator ();\n\n                           while ( fujaba__IterInteractionToUseCaseToInteraction.hasNext () )\n                           {\n                              try\n                              {\n                                 useCaseToInteraction = (UseCaseToInteraction) fujaba__IterInteractionToUseCaseToInteraction.next ();\n\n                                 // check object useCaseToInteraction is really bound\n                                 JavaSDM.ensure ( useCaseToInteraction != null );\n                                 // bind object\n                                 useCase = useCaseToInteraction.getSource ();\n\n                                 // check object useCase is really bound\n                                 JavaSDM.ensure ( useCase != null );\n\n                                 // story node \'find context\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object actor is really bound\n                                    JavaSDM.ensure ( actor != null );\n                                    // check object actorToLine is really bound\n                                    JavaSDM.ensure ( actorToLine != null );\n                                    // check object combo is really bound\n                                    JavaSDM.ensure ( combo != null );\n                                    // check object flow is really bound\n                                    JavaSDM.ensure ( flow != null );\n                                    // check object flowToOperand is really bound\n                                    JavaSDM.ensure ( flowToOperand != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object message is really bound\n                                    JavaSDM.ensure ( message != null );\n                                    // check object messageReceive is really bound\n                                    JavaSDM.ensure ( messageReceive != null );\n                                    // check object messageSend is really bound\n                                    JavaSDM.ensure ( messageSend != null );\n                                    // check object operand is really bound\n                                    JavaSDM.ensure ( operand != null );\n                                    // check object sysActor is really bound\n                                    JavaSDM.ensure ( sysActor != null );\n                                    // check object sysActorToSysLine is really bound\n                                    JavaSDM.ensure ( sysActorToSysLine != null );\n                                    // check object sysLine is really bound\n                                    JavaSDM.ensure ( sysLine != null );\n                                    // check object useCase is really bound\n                                    JavaSDM.ensure ( useCase != null );\n                                    // check object useCaseToInteraction is really bound\n                                    JavaSDM.ensure ( useCaseToInteraction != null );\n                                    // check isomorphic binding between objects sysActor and actor \n                                    JavaSDM.ensure ( !sysActor.equals (actor) );\n\n                                    // check isomorphic binding between objects sysActorToSysLine and actorToLine \n                                    JavaSDM.ensure ( !sysActorToSysLine.equals (actorToLine) );\n\n                                    // check isomorphic binding between objects sysLine and line \n                                    JavaSDM.ensure ( !sysLine.equals (line) );\n\n                                    // check isomorphic binding between objects messageSend and messageReceive \n                                    JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                    // check link fragment from messageReceive to operand\n                                    JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                                    ));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link message from message to interaction\n                                    JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                                    ));\n\n                                    // check link message from messageReceive to message\n                                    JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                                    ));\n\n                                    // check link message from messageSend to message\n                                    JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                                    ));\n\n                                    // check link sendEvent from message to messageSend\n                                    JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                                    ));\n\n                                    // bind object\n                                    packageDeclaration = sysActor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) sysActor.eContainer() : null;\n\n                                    // check object packageDeclaration is really bound\n                                    JavaSDM.ensure ( packageDeclaration != null );\n\n                                    // check if contained via correct reference\n                                    JavaSDM.ensure(packageDeclaration.getActors().contains(sysActor));\n\n                                    // check link actors from actor to packageDeclaration\n                                    JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                                    ));\n\n                                    // check link flows from flow to useCase\n                                    JavaSDM.ensure (useCase.equals (flow.eContainer()\n                                    ));\n\n                                    // check link operand from operand to combo\n                                    JavaSDM.ensure (combo.equals (operand.eContainer()\n                                    ));\n\n                                    // check link source from actorToLine to actor\n                                    JavaSDM.ensure (actor.equals (actorToLine.getSource ()\n                                    ));\n\n                                    // check link source from flowToOperand to flow\n                                    JavaSDM.ensure (flow.equals (flowToOperand.getSource ()\n                                    ));\n\n                                    // check link source from sysActorToSysLine to sysActor\n                                    JavaSDM.ensure (sysActor.equals (sysActorToSysLine.getSource ()\n                                    ));\n\n                                    // check link source from useCaseToInteraction to useCase\n                                    JavaSDM.ensure (useCase.equals (useCaseToInteraction.getSource ()\n                                    ));\n\n                                    // check link target from actorToLine to line\n                                    JavaSDM.ensure (line.equals (actorToLine.getTarget ()\n                                    ));\n\n                                    // check link target from flowToOperand to operand\n                                    JavaSDM.ensure (operand.equals (flowToOperand.getTarget ()\n                                    ));\n\n                                    // check link target from sysActorToSysLine to sysLine\n                                    JavaSDM.ensure (sysLine.equals (sysActorToSysLine.getTarget ()\n                                    ));\n\n                                    // check link target from useCaseToInteraction to interaction\n                                    JavaSDM.ensure (interaction.equals (useCaseToInteraction.getTarget ()\n                                    ));\n\n                                    // check link covered from line to combo\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                                    // check link covered from combo to sysLine\n                                    JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                                    // check link covered from messageSend to sysLine\n                                    JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                                    // check link covered from line to operand\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                                    // check link covered from operand to sysLine\n                                    JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                                    // create object isApplicableMatch\n                                    isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                                    // create object __packageDeclaration_actors_actor\n                                    __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __packageDeclaration_actors_sysActor\n                                    __packageDeclaration_actors_sysActor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __sysActorToSysLine_source_sysActor\n                                    __sysActorToSysLine_source_sysActor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __actorToLine_source_actor\n                                    __actorToLine_source_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __sysLine_coveredBy_messageSend\n                                    __sysLine_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __sysActorToSysLine_target_sysLine\n                                    __sysActorToSysLine_target_sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __combo_covered_sysLine\n                                    __combo_covered_sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __messageSend_covered_sysLine\n                                    __messageSend_covered_sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __operand_covered_sysLine\n                                    __operand_covered_sysLine = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __sysLine_coveredBy_combo\n                                    __sysLine_coveredBy_combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __sysLine_coveredBy_operand\n                                    __sysLine_coveredBy_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __message_sendEvent_messageSend\n                                    __message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __messageSend_message_message\n                                    __messageSend_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __flowToOperand_target_operand\n                                    __flowToOperand_target_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __operand_fragment_messageReceive\n                                    __operand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __messageReceive_enclosingOperand_operand\n                                    __messageReceive_enclosingOperand_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __line_coveredBy_operand\n                                    __line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __operand_covered_line\n                                    __operand_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __combo_operand_operand\n                                    __combo_operand_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __combo_covered_line\n                                    __combo_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __line_coveredBy_combo\n                                    __line_coveredBy_combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __useCase_flows_flow\n                                    __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __flowToOperand_source_flow\n                                    __flowToOperand_source_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __messageReceive_message_message\n                                    __messageReceive_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __message_receiveEvent_messageReceive\n                                    __message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __interaction_lifeline_line\n                                    __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __actorToLine_target_line\n                                    __actorToLine_target_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __line_interaction_interaction\n                                    __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __useCaseToInteraction_source_useCase\n                                    __useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __useCaseToInteraction_target_interaction\n                                    __useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __message_interaction_interaction\n                                    __message_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __interaction_message_message\n                                    __interaction_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // assign attribute __packageDeclaration_actors_sysActor\n                                    __packageDeclaration_actors_sysActor.setName (\"actors\");\n                                    // assign attribute __packageDeclaration_actors_actor\n                                    __packageDeclaration_actors_actor.setName (\"actors\");\n                                    // assign attribute __sysLine_coveredBy_messageSend\n                                    __sysLine_coveredBy_messageSend.setName (\"coveredBy\");\n                                    // assign attribute __messageSend_covered_sysLine\n                                    __messageSend_covered_sysLine.setName (\"covered\");\n                                    // assign attribute __sysLine_coveredBy_operand\n                                    __sysLine_coveredBy_operand.setName (\"coveredBy\");\n                                    // assign attribute __operand_covered_sysLine\n                                    __operand_covered_sysLine.setName (\"covered\");\n                                    // assign attribute __sysLine_coveredBy_combo\n                                    __sysLine_coveredBy_combo.setName (\"coveredBy\");\n                                    // assign attribute __combo_covered_sysLine\n                                    __combo_covered_sysLine.setName (\"covered\");\n                                    // assign attribute __sysActorToSysLine_source_sysActor\n                                    __sysActorToSysLine_source_sysActor.setName (\"source\");\n                                    // assign attribute __sysActorToSysLine_target_sysLine\n                                    __sysActorToSysLine_target_sysLine.setName (\"target\");\n                                    // assign attribute __combo_operand_operand\n                                    __combo_operand_operand.setName (\"operand\");\n                                    // assign attribute __operand_fragment_messageReceive\n                                    __operand_fragment_messageReceive.setName (\"fragment\");\n                                    // assign attribute __messageReceive_enclosingOperand_operand\n                                    __messageReceive_enclosingOperand_operand.setName (\"enclosingOperand\");\n                                    // assign attribute __flowToOperand_source_flow\n                                    __flowToOperand_source_flow.setName (\"source\");\n                                    // assign attribute __flowToOperand_target_operand\n                                    __flowToOperand_target_operand.setName (\"target\");\n                                    // assign attribute __line_coveredBy_operand\n                                    __line_coveredBy_operand.setName (\"coveredBy\");\n                                    // assign attribute __operand_covered_line\n                                    __operand_covered_line.setName (\"covered\");\n                                    // assign attribute __line_coveredBy_combo\n                                    __line_coveredBy_combo.setName (\"coveredBy\");\n                                    // assign attribute __combo_covered_line\n                                    __combo_covered_line.setName (\"covered\");\n                                    // assign attribute __useCase_flows_flow\n                                    __useCase_flows_flow.setName (\"flows\");\n                                    // assign attribute __useCaseToInteraction_source_useCase\n                                    __useCaseToInteraction_source_useCase.setName (\"source\");\n                                    // assign attribute __useCaseToInteraction_target_interaction\n                                    __useCaseToInteraction_target_interaction.setName (\"target\");\n                                    // assign attribute __message_sendEvent_messageSend\n                                    __message_sendEvent_messageSend.setName (\"sendEvent\");\n                                    // assign attribute __message_receiveEvent_messageReceive\n                                    __message_receiveEvent_messageReceive.setName (\"receiveEvent\");\n                                    // assign attribute __message_interaction_interaction\n                                    __message_interaction_interaction.setName (\"interaction\");\n                                    // assign attribute __interaction_message_message\n                                    __interaction_message_message.setName (\"message\");\n                                    // assign attribute __line_interaction_interaction\n                                    __line_interaction_interaction.setName (\"interaction\");\n                                    // assign attribute __interaction_lifeline_line\n                                    __interaction_lifeline_line.setName (\"lifeline\");\n                                    // assign attribute __messageSend_message_message\n                                    __messageSend_message_message.setName (\"message\");\n                                    // assign attribute __messageReceive_message_message\n                                    __messageReceive_message_message.setName (\"message\");\n                                    // assign attribute __actorToLine_source_actor\n                                    __actorToLine_source_actor.setName (\"source\");\n                                    // assign attribute __actorToLine_target_line\n                                    __actorToLine_target_line.setName (\"target\");\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                                    // create link\n                                    __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n                                    // create link\n                                    __packageDeclaration_actors_sysActor.setSrc( packageDeclaration);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(sysActor);\n\n\n                                    // create link\n                                    __sysActorToSysLine_source_sysActor.setTrg( sysActor);\n\n\n                                    // create link\n                                    __packageDeclaration_actors_sysActor.setTrg( sysActor);\n\n\n                                    // create link\n                                    __packageDeclaration_actors_actor.setTrg( actor);\n\n\n                                    // create link\n                                    __actorToLine_source_actor.setTrg( actor);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(actor);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(sysLine);\n\n\n                                    // create link\n                                    __sysLine_coveredBy_messageSend.setSrc( sysLine);\n\n\n                                    // create link\n                                    __sysActorToSysLine_target_sysLine.setTrg( sysLine);\n\n\n                                    // create link\n                                    __combo_covered_sysLine.setTrg( sysLine);\n\n\n                                    // create link\n                                    __messageSend_covered_sysLine.setTrg( sysLine);\n\n\n                                    // create link\n                                    __operand_covered_sysLine.setTrg( sysLine);\n\n\n                                    // create link\n                                    __sysLine_coveredBy_combo.setSrc( sysLine);\n\n\n                                    // create link\n                                    __sysLine_coveredBy_operand.setSrc( sysLine);\n\n\n                                    // create link\n                                    __message_sendEvent_messageSend.setTrg( messageSend);\n\n\n                                    // create link\n                                    __messageSend_covered_sysLine.setSrc( messageSend);\n\n\n                                    // create link\n                                    __messageSend_message_message.setSrc( messageSend);\n\n\n                                    // create link\n                                    __sysLine_coveredBy_messageSend.setTrg( messageSend);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(messageSend);\n\n\n                                    // create link\n                                    __sysActorToSysLine_target_sysLine.setSrc( sysActorToSysLine);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(sysActorToSysLine);\n\n\n                                    // create link\n                                    __sysActorToSysLine_source_sysActor.setSrc( sysActorToSysLine);\n\n\n                                    // create link\n                                    __flowToOperand_target_operand.setTrg( operand);\n\n\n                                    // create link\n                                    __operand_fragment_messageReceive.setSrc( operand);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(operand);\n\n\n                                    // create link\n                                    __sysLine_coveredBy_operand.setTrg( operand);\n\n\n                                    // create link\n                                    __messageReceive_enclosingOperand_operand.setTrg( operand);\n\n\n                                    // create link\n                                    __line_coveredBy_operand.setTrg( operand);\n\n\n                                    // create link\n                                    __operand_covered_line.setSrc( operand);\n\n\n                                    // create link\n                                    __operand_covered_sysLine.setSrc( operand);\n\n\n                                    // create link\n                                    __combo_operand_operand.setTrg( operand);\n\n\n                                    // create link\n                                    __combo_covered_line.setSrc( combo);\n\n\n                                    // create link\n                                    __combo_covered_sysLine.setSrc( combo);\n\n\n                                    // create link\n                                    __combo_operand_operand.setSrc( combo);\n\n\n                                    // create link\n                                    __sysLine_coveredBy_combo.setTrg( combo);\n\n\n                                    // create link\n                                    __line_coveredBy_combo.setTrg( combo);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(combo);\n\n\n                                    // create link\n                                    __useCase_flows_flow.setTrg( flow);\n\n\n                                    // create link\n                                    __flowToOperand_source_flow.setTrg( flow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(flow);\n\n\n                                    // create link\n                                    __flowToOperand_source_flow.setSrc( flowToOperand);\n\n\n                                    // create link\n                                    __flowToOperand_target_operand.setSrc( flowToOperand);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(flowToOperand);\n\n\n                                    // create link\n                                    __operand_fragment_messageReceive.setTrg( messageReceive);\n\n\n                                    // create link\n                                    __messageReceive_message_message.setSrc( messageReceive);\n\n\n                                    // create link\n                                    __messageReceive_enclosingOperand_operand.setSrc( messageReceive);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(messageReceive);\n\n\n                                    // create link\n                                    __message_receiveEvent_messageReceive.setTrg( messageReceive);\n\n\n                                    // create link\n                                    __interaction_lifeline_line.setTrg( line);\n\n\n                                    // create link\n                                    __operand_covered_line.setTrg( line);\n\n\n                                    // create link\n                                    __actorToLine_target_line.setTrg( line);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(line);\n\n\n                                    // create link\n                                    __line_coveredBy_combo.setSrc( line);\n\n\n                                    // create link\n                                    __line_coveredBy_operand.setSrc( line);\n\n\n                                    // create link\n                                    __line_interaction_interaction.setSrc( line);\n\n\n                                    // create link\n                                    __combo_covered_line.setTrg( line);\n\n\n                                    // create link\n                                    __useCaseToInteraction_source_useCase.setTrg( useCase);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                                    // create link\n                                    __useCase_flows_flow.setSrc( useCase);\n\n\n                                    // create link\n                                    __useCaseToInteraction_target_interaction.setSrc( useCaseToInteraction);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(useCaseToInteraction);\n\n\n                                    // create link\n                                    __useCaseToInteraction_source_useCase.setSrc( useCaseToInteraction);\n\n\n                                    // create link\n                                    __message_interaction_interaction.setSrc( message);\n\n\n                                    // create link\n                                    __messageReceive_message_message.setTrg( message);\n\n\n                                    // create link\n                                    __message_sendEvent_messageSend.setSrc( message);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(message);\n\n\n                                    // create link\n                                    __message_receiveEvent_messageReceive.setSrc( message);\n\n\n                                    // create link\n                                    __interaction_message_message.setTrg( message);\n\n\n                                    // create link\n                                    __messageSend_message_message.setTrg( message);\n\n\n                                    // create link\n                                    __interaction_message_message.setSrc( interaction);\n\n\n                                    // create link\n                                    __useCaseToInteraction_target_interaction.setTrg( interaction);\n\n\n                                    // create link\n                                    __interaction_lifeline_line.setSrc( interaction);\n\n\n                                    // create link\n                                    __line_interaction_interaction.setTrg( interaction);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(interaction);\n\n\n                                    // create link\n                                    __message_interaction_interaction.setTrg( interaction);\n\n\n                                    // create link\n                                    __actorToLine_source_actor.setSrc( actorToLine);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(actorToLine);\n\n\n                                    // create link\n                                    __actorToLine_target_line.setSrc( actorToLine);\n\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__sysLine_coveredBy_operand,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__combo_operand_operand,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__sysLine_coveredBy_combo,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__sysActorToSysLine_target_sysLine,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__combo_covered_line,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_actors_sysActor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__actorToLine_source_actor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__actorToLine_target_line,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__sysLine_coveredBy_messageSend,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageSend_message_message,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__combo_covered_sysLine,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__message_sendEvent_messageSend,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_coveredBy_operand,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_interaction_interaction,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_coveredBy_combo,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_actors_actor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__message_interaction_interaction,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__sysActorToSysLine_source_sysActor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__operand_fragment_messageReceive,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageSend_covered_sysLine,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__operand_covered_sysLine,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageReceive_enclosingOperand_operand,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageReceive_message_message,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__message_receiveEvent_messageReceive,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCaseToInteraction_source_useCase,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_lifeline_line,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowToOperand_target_operand,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__operand_covered_line,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_message_message,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCaseToInteraction_target_interaction,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowToOperand_source_flow,\"allContextElements\");\n                                    // story node \'solve CSP\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,packageDeclaration,sysActor,actor,sysLine,messageSend,sysActorToSysLine,operand,combo,flow,flowToOperand,messageReceive,line,useCase,useCaseToInteraction,message,interaction,actorToLine));\n\n                                       // ensure correct type and really bound of object csp\n                                       JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                       csp = (CSP) _TmpObject;\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    // statement node \'check CSP\'\n                                    fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                                    if (fujaba__Success)\n                                    {\n                                       // story node \'add match to rule result\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // check object isApplicableMatch is really bound\n                                          JavaSDM.ensure ( isApplicableMatch != null );\n                                          // check object ruleresult is really bound\n                                          JavaSDM.ensure ( ruleresult != null );\n                                          // assign attribute isApplicableMatch\n                                          isApplicableMatch.setRuleName (\"UserStepNfToMessageRule\");\n                                          // assign attribute ruleresult\n                                          ruleresult.setSuccess (true);\n\n                                          // create link\n                                          ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"sysLine\", sysLine);\nmatch.registerObject(\"messageSend\", messageSend);\nmatch.registerObject(\"operand\", operand);\nmatch.registerObject(\"combo\", combo);\nmatch.registerObject(\"messageReceive\", messageReceive);\nmatch.registerObject(\"line\", line);\nmatch.registerObject(\"message\", message);\nmatch.registerObject(\"interaction\", interaction);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend,
			InteractionOperand operand, CombinedFragment combo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Message message, Interaction interaction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend,
			InteractionOperand operand, CombinedFragment combo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Message message, Interaction interaction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"person\");\r\nliteral0.setType(\"String\");\r\nVariable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal1\", true, csp);\r\nliteral1.setValue(\"system\");\r\nliteral1.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.type\", true, csp);\r\nvar_actor_type.setValue(actor.getType());\r\nvar_actor_type.setType(\"EObject\");\r\nVariable var_sysActor_description = CSPFactoryHelper.eINSTANCE.createVariable(\"sysActor.description\", true, csp);\r\nvar_sysActor_description.setValue(sysActor.getDescription());\r\nvar_sysActor_description.setType(\"EObject\");\r\nVariable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(\"message.name\", true, csp);\r\nvar_message_name.setValue(message.getName());\r\nvar_message_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(\"step.name\", csp);\r\nvar_step_name.setType(\"\");\r\n\r\n// Create constraints\r\nEqActorType eqActorType = new EqActorType();EqActorType eqActorType_0 = new EqActorType();Eq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eqActorType);\r\ncsp.getConstraints().add(eqActorType_0);\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neqActorType.setRuleName(\"\");\r\neqActorType.solve(var_actor_type,literal0);\r\neqActorType_0.setRuleName(\"\");\r\neqActorType_0.solve(var_sysActor_description,literal1);\r\neq.setRuleName(\"\");\r\neq.solve(var_step_name,var_message_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"sysActor\",sysActor);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"sysLine\",sysLine);\r\nisApplicableMatch.registerObject(\"messageSend\",messageSend);\r\nisApplicableMatch.registerObject(\"sysActorToSysLine\",sysActorToSysLine);\r\nisApplicableMatch.registerObject(\"operand\",operand);\r\nisApplicableMatch.registerObject(\"combo\",combo);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"flowToOperand\",flowToOperand);\r\nisApplicableMatch.registerObject(\"messageReceive\",messageReceive);\r\nisApplicableMatch.registerObject(\"line\",line);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"useCaseToInteraction\",useCaseToInteraction);\r\nisApplicableMatch.registerObject(\"message\",message);\r\nisApplicableMatch.registerObject(\"interaction\",interaction);\r\nisApplicableMatch.registerObject(\"actorToLine\",actorToLine);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration, Actor sysActor, Actor actor,
			Lifeline sysLine, MessageOccurrenceSpecification messageSend,
			ActorToLifeline sysActorToSysLine, InteractionOperand operand,
			CombinedFragment combo, NamedFlow flow,
			FlowToInteractionFragment flowToOperand,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			Message message, Interaction interaction,
			ActorToLifeline actorToLine);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"sysActor\", sysActor);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"sysLine\", sysLine);\nruleresult.registerObject(\"messageSend\", messageSend);\nruleresult.registerObject(\"sysActorToSysLine\", sysActorToSysLine);\nruleresult.registerObject(\"operand\", operand);\nruleresult.registerObject(\"combo\", combo);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"flowToOperand\", flowToOperand);\nruleresult.registerObject(\"messageReceive\", messageReceive);\nruleresult.registerObject(\"line\", line);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"useCaseToInteraction\", useCaseToInteraction);\nruleresult.registerObject(\"step\", step);\nruleresult.registerObject(\"message\", message);\nruleresult.registerObject(\"interaction\", interaction);\nruleresult.registerObject(\"stepToMessage\", stepToMessage);\nruleresult.registerObject(\"actorToLine\", actorToLine);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult,
			EObject packageDeclaration, EObject sysActor, EObject actor,
			EObject sysLine, EObject messageSend, EObject sysActorToSysLine,
			EObject operand, EObject combo, EObject flow,
			EObject flowToOperand, EObject messageReceive, EObject line,
			EObject useCase, EObject useCaseToInteraction, EObject step,
			EObject message, EObject interaction, EObject stepToMessage,
			EObject actorToLine);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"messageSend\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification()) && match.getObject(\"messageReceive\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification()) && match.getObject(\"message\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessage());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_232750 = null;\n      InteractionOperand __DEC_messageReceive_fragment_114138 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_432131 = null;\n      InteractionOperand __DEC_messageSend_fragment_593444 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_306358 = null;\n      Message __DEC_messageReceive_receiveEvent_306358 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_656126 = null;\n      Message __DEC_messageSend_receiveEvent_656126 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_767370 = null;\n      Message __DEC_messageReceive_sendEvent_767370 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_427061 = null;\n      Message __DEC_messageSend_sendEvent_427061 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_966033 = null;\n      MessageEnd __DEC_message_message_966033 = null;\n      Match match = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterComboToLine = null;\n      Lifeline line = null;\n      Iterator fujaba__IterSysLineToCombo = null;\n      CombinedFragment combo = null;\n      Iterator fujaba__IterSysLineToOperand = null;\n      InteractionOperand operand = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Lifeline sysLine = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_coveredBy is really bound\n         JavaSDM.ensure ( _edge_coveredBy != null );\n         // bind object\n         _TmpObject = _edge_coveredBy.getSrc ();\n\n         // ensure correct type and really bound of object sysLine\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         sysLine = (Lifeline) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_coveredBy.getTrg ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         message = messageSend.getMessage ();\n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // check link sendEvent from message to messageSend\n         JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n         ));\n\n         // check link covered from messageSend to sysLine\n         JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n         // iterate to-many link covered from sysLine to operand\n         fujaba__Success = false;\n\n         fujaba__IterSysLineToOperand = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n         while ( fujaba__IterSysLineToOperand.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterSysLineToOperand.next ();\n\n               // ensure correct type and really bound of object operand\n               JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n               operand = (InteractionOperand) _TmpObject;\n               // check link fragment from messageReceive to operand\n               JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n               ));\n\n               // iterate to-many link covered from sysLine to combo\n               fujaba__Success = false;\n\n               fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterSysLineToCombo.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterSysLineToCombo.next ();\n\n                     // ensure correct type and really bound of object combo\n                     JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n                     combo = (CombinedFragment) _TmpObject;\n                     // check link operand from operand to combo\n                     JavaSDM.ensure (combo.equals (operand.eContainer()\n                     ));\n\n                     // iterate to-many link covered from combo to line\n                     fujaba__Success = false;\n\n                     fujaba__IterComboToLine = new ArrayList(combo.getCovered()).iterator ();\n\n                     while ( fujaba__IterComboToLine.hasNext () )\n                     {\n                        try\n                        {\n                           line = (Lifeline) fujaba__IterComboToLine.next ();\n\n                           // check object line is really bound\n                           JavaSDM.ensure ( line != null );\n                           // check isomorphic binding between objects sysLine and line \n                           JavaSDM.ensure ( !sysLine.equals (line) );\n\n                           // bind object\n                           interaction = line.getInteraction ();\n\n                           // check object interaction is really bound\n                           JavaSDM.ensure ( interaction != null );\n\n                           // check link message from message to interaction\n                           JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                           ));\n\n                           // check link covered from line to operand\n                           JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_enclosingInteraction_232750 = messageReceive.getEnclosingInteraction ();\n\n                                 // check object __DEC_messageReceive_enclosingInteraction_232750 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_232750 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_232750 and interaction \n                                 JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_232750.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_fragment_114138 = messageReceive.getEnclosingOperand ();\n\n                                 // check object __DEC_messageReceive_fragment_114138 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_fragment_114138 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_fragment_114138 and operand \n                                 JavaSDM.ensure ( !__DEC_messageReceive_fragment_114138.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_enclosingInteraction_432131 = messageSend.getEnclosingInteraction ();\n\n                                 // check object __DEC_messageSend_enclosingInteraction_432131 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_432131 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_432131 and interaction \n                                 JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_432131.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_fragment_593444 = messageSend.getEnclosingOperand ();\n\n                                 // check object __DEC_messageSend_fragment_593444 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_fragment_593444 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_fragment_593444 and operand \n                                 JavaSDM.ensure ( !__DEC_messageSend_fragment_593444.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_306358\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_306358 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_306358.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_receiveEvent_306358 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_306358.next ();\n\n                                       // check object __DEC_messageReceive_receiveEvent_306358 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_306358 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_306358 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_306358.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_656126\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_656126 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_656126.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_receiveEvent_656126 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_656126.next ();\n\n                                       // check object __DEC_messageSend_receiveEvent_656126 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_receiveEvent_656126 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_receiveEvent_656126 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_656126.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_767370\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_767370 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_767370.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_sendEvent_767370 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_767370.next ();\n\n                                       // check object __DEC_messageReceive_sendEvent_767370 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_sendEvent_767370 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_sendEvent_767370 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_767370.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_427061\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_427061 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_427061.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_sendEvent_427061 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_427061.next ();\n\n                                       // check object __DEC_messageSend_sendEvent_427061 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_sendEvent_427061 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_sendEvent_427061 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_sendEvent_427061.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link message from message to __DEC_message_message_966033\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageTo__DEC_message_message_966033 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_966033.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_message_message_966033 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_966033.next ();\n\n                                       // check object __DEC_message_message_966033 is really bound\n                                       JavaSDM.ensure ( __DEC_message_message_966033 != null );\n                                       // check isomorphic binding between objects __DEC_message_message_966033 and messageReceive \n                                       JavaSDM.ensure ( !__DEC_message_message_966033.equals (messageReceive) );\n\n                                       // check isomorphic binding between objects __DEC_message_message_966033 and messageSend \n                                       JavaSDM.ensure ( !__DEC_message_message_966033.equals (messageSend) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_coveredBy is really bound\n                              JavaSDM.ensure ( _edge_coveredBy != null );\n                              // check object combo is really bound\n                              JavaSDM.ensure ( combo != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object message is really bound\n                              JavaSDM.ensure ( message != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object operand is really bound\n                              JavaSDM.ensure ( operand != null );\n                              // check object sysLine is really bound\n                              JavaSDM.ensure ( sysLine != null );\n                              // check isomorphic binding between objects sysLine and line \n                              JavaSDM.ensure ( !sysLine.equals (line) );\n\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from messageReceive to operand\n                              JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                              ));\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from messageSend to operand\n                              JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                              )));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link message from message to interaction\n                              JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                              ));\n\n                              // check link message from messageReceive to message\n                              JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                              ));\n\n                              // check link message from messageSend to message\n                              JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                              ));\n\n                              // check link receiveEvent from message to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                              ));\n\n                              // check link receiveEvent from message to messageSend\n                              JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                              )));\n\n                              // check link sendEvent from message to messageSend\n                              JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                              ));\n\n                              // check link sendEvent from message to messageReceive\n                              JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                              )));\n\n                              // check link operand from operand to combo\n                              JavaSDM.ensure (combo.equals (operand.eContainer()\n                              ));\n\n                              // check link src from _edge_coveredBy to sysLine\n                              JavaSDM.ensure (sysLine.equals (_edge_coveredBy.getSrc ()\n                              ));\n\n                              // check link trg from _edge_coveredBy to messageSend\n                              JavaSDM.ensure (messageSend.equals (_edge_coveredBy.getTrg ()\n                              ));\n\n                              // check link covered from line to combo\n                              JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                              // check link covered from combo to sysLine\n                              JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                              // check link covered from messageSend to sysLine\n                              JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                              // check link covered from line to operand\n                              JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                              // check link covered from operand to sysLine\n                              JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_160(
			EMoflonEdge _edge_coveredBy);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_1073 = null;\n      InteractionOperand __DEC_messageReceive_fragment_393929 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_638902 = null;\n      InteractionOperand __DEC_messageSend_fragment_61314 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_315010 = null;\n      Message __DEC_messageReceive_receiveEvent_315010 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_935228 = null;\n      Message __DEC_messageSend_receiveEvent_935228 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_439854 = null;\n      Message __DEC_messageReceive_sendEvent_439854 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_912008 = null;\n      Message __DEC_messageSend_sendEvent_912008 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_21769 = null;\n      MessageEnd __DEC_message_message_21769 = null;\n      Match match = null;\n      Iterator fujaba__IterSysLineTo_edge_coveredBy = null;\n      EMoflonEdge _edge_coveredBy = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterOperandToLine = null;\n      Lifeline line = null;\n      CombinedFragment combo = null;\n      Iterator fujaba__IterSysLineToOperand = null;\n      InteractionOperand operand = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      MessageOccurrenceSpecification messageSend = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_covered is really bound\n         JavaSDM.ensure ( _edge_covered != null );\n         // bind object\n         _TmpObject = _edge_covered.getSrc ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         message = messageSend.getMessage ();\n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // check link sendEvent from message to messageSend\n         JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n         ));\n\n         // bind object\n         _TmpObject = _edge_covered.getTrg ();\n\n         // ensure correct type and really bound of object sysLine\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         sysLine = (Lifeline) _TmpObject;\n\n         // check link covered from messageSend to sysLine\n         JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n         // iterate to-many link covered from sysLine to operand\n         fujaba__Success = false;\n\n         fujaba__IterSysLineToOperand = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n         while ( fujaba__IterSysLineToOperand.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterSysLineToOperand.next ();\n\n               // ensure correct type and really bound of object operand\n               JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n               operand = (InteractionOperand) _TmpObject;\n               // check link fragment from messageReceive to operand\n               JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n               ));\n\n               // bind object\n               combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n               // check object combo is really bound\n               JavaSDM.ensure ( combo != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(combo.getOperand().contains(operand));\n\n               // check link covered from combo to sysLine\n               JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n               // iterate to-many link covered from operand to line\n               fujaba__Success = false;\n\n               fujaba__IterOperandToLine = new ArrayList(operand.getCovered()).iterator ();\n\n               while ( fujaba__IterOperandToLine.hasNext () )\n               {\n                  try\n                  {\n                     line = (Lifeline) fujaba__IterOperandToLine.next ();\n\n                     // check object line is really bound\n                     JavaSDM.ensure ( line != null );\n                     // check isomorphic binding between objects sysLine and line \n                     JavaSDM.ensure ( !sysLine.equals (line) );\n\n                     // bind object\n                     interaction = line.getInteraction ();\n\n                     // check object interaction is really bound\n                     JavaSDM.ensure ( interaction != null );\n\n                     // check link message from message to interaction\n                     JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                     ));\n\n                     // check link covered from line to combo\n                     JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                     // iterate to-many link src from sysLine to _edge_coveredBy\n                     fujaba__Success = false;\n\n                     fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(sysLine,EMoflonEdge.class,\"src\")).iterator ();\n\n                     while ( fujaba__IterSysLineTo_edge_coveredBy.hasNext () )\n                     {\n                        try\n                        {\n                           _edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy.next ();\n\n                           // check object _edge_coveredBy is really bound\n                           JavaSDM.ensure ( _edge_coveredBy != null );\n                           // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                           JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                           // check link trg from _edge_coveredBy to messageSend\n                           JavaSDM.ensure (messageSend.equals (_edge_coveredBy.getTrg ()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_enclosingInteraction_1073 = messageReceive.getEnclosingInteraction ();\n\n                                 // check object __DEC_messageReceive_enclosingInteraction_1073 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_1073 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_1073 and interaction \n                                 JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_1073.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_fragment_393929 = messageReceive.getEnclosingOperand ();\n\n                                 // check object __DEC_messageReceive_fragment_393929 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_fragment_393929 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_fragment_393929 and operand \n                                 JavaSDM.ensure ( !__DEC_messageReceive_fragment_393929.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_enclosingInteraction_638902 = messageSend.getEnclosingInteraction ();\n\n                                 // check object __DEC_messageSend_enclosingInteraction_638902 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_638902 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_638902 and interaction \n                                 JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_638902.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_fragment_61314 = messageSend.getEnclosingOperand ();\n\n                                 // check object __DEC_messageSend_fragment_61314 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_fragment_61314 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_fragment_61314 and operand \n                                 JavaSDM.ensure ( !__DEC_messageSend_fragment_61314.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_315010\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_315010 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_315010.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_receiveEvent_315010 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_315010.next ();\n\n                                       // check object __DEC_messageReceive_receiveEvent_315010 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_315010 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_315010 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_315010.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_935228\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_935228 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_935228.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_receiveEvent_935228 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_935228.next ();\n\n                                       // check object __DEC_messageSend_receiveEvent_935228 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_receiveEvent_935228 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_receiveEvent_935228 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_935228.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_439854\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_439854 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_439854.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_sendEvent_439854 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_439854.next ();\n\n                                       // check object __DEC_messageReceive_sendEvent_439854 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_sendEvent_439854 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_sendEvent_439854 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_439854.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_912008\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_912008 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_912008.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_sendEvent_912008 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_912008.next ();\n\n                                       // check object __DEC_messageSend_sendEvent_912008 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_sendEvent_912008 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_sendEvent_912008 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_sendEvent_912008.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link message from message to __DEC_message_message_21769\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageTo__DEC_message_message_21769 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_21769.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_message_message_21769 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_21769.next ();\n\n                                       // check object __DEC_message_message_21769 is really bound\n                                       JavaSDM.ensure ( __DEC_message_message_21769 != null );\n                                       // check isomorphic binding between objects __DEC_message_message_21769 and messageReceive \n                                       JavaSDM.ensure ( !__DEC_message_message_21769.equals (messageReceive) );\n\n                                       // check isomorphic binding between objects __DEC_message_message_21769 and messageSend \n                                       JavaSDM.ensure ( !__DEC_message_message_21769.equals (messageSend) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_covered is really bound\n                              JavaSDM.ensure ( _edge_covered != null );\n                              // check object _edge_coveredBy is really bound\n                              JavaSDM.ensure ( _edge_coveredBy != null );\n                              // check object combo is really bound\n                              JavaSDM.ensure ( combo != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object message is really bound\n                              JavaSDM.ensure ( message != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object operand is really bound\n                              JavaSDM.ensure ( operand != null );\n                              // check object sysLine is really bound\n                              JavaSDM.ensure ( sysLine != null );\n                              // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                              JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                              // check isomorphic binding between objects sysLine and line \n                              JavaSDM.ensure ( !sysLine.equals (line) );\n\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from messageReceive to operand\n                              JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                              ));\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from messageSend to operand\n                              JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                              )));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link message from message to interaction\n                              JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                              ));\n\n                              // check link message from messageReceive to message\n                              JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                              ));\n\n                              // check link message from messageSend to message\n                              JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                              ));\n\n                              // check link receiveEvent from message to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                              ));\n\n                              // check link receiveEvent from message to messageSend\n                              JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                              )));\n\n                              // check link sendEvent from message to messageSend\n                              JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                              ));\n\n                              // check link sendEvent from message to messageReceive\n                              JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                              )));\n\n                              // check link operand from operand to combo\n                              JavaSDM.ensure (combo.equals (operand.eContainer()\n                              ));\n\n                              // check link src from _edge_covered to messageSend\n                              JavaSDM.ensure (messageSend.equals (_edge_covered.getSrc ()\n                              ));\n\n                              // check link src from _edge_coveredBy to sysLine\n                              JavaSDM.ensure (sysLine.equals (_edge_coveredBy.getSrc ()\n                              ));\n\n                              // check link trg from _edge_covered to sysLine\n                              JavaSDM.ensure (sysLine.equals (_edge_covered.getTrg ()\n                              ));\n\n                              // check link trg from _edge_coveredBy to messageSend\n                              JavaSDM.ensure (messageSend.equals (_edge_coveredBy.getTrg ()\n                              ));\n\n                              // check link covered from line to combo\n                              JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                              // check link covered from combo to sysLine\n                              JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                              // check link covered from messageSend to sysLine\n                              JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                              // check link covered from line to operand\n                              JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                              // check link covered from operand to sysLine\n                              JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_161(EMoflonEdge _edge_covered);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_243863 = null;\n      InteractionOperand __DEC_messageReceive_fragment_308241 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_688979 = null;\n      InteractionOperand __DEC_messageSend_fragment_700425 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_45545 = null;\n      Message __DEC_messageReceive_receiveEvent_45545 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_662421 = null;\n      Message __DEC_messageSend_receiveEvent_662421 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_943688 = null;\n      Message __DEC_messageReceive_sendEvent_943688 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_368388 = null;\n      Message __DEC_messageSend_sendEvent_368388 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_272350 = null;\n      MessageEnd __DEC_message_message_272350 = null;\n      Match match = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterSysLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterOperandToLine = null;\n      Lifeline line = null;\n      CombinedFragment combo = null;\n      InteractionOperand operand = null;\n      Lifeline sysLine = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_coveredBy is really bound\n         JavaSDM.ensure ( _edge_coveredBy != null );\n         // bind object\n         _TmpObject = _edge_coveredBy.getSrc ();\n\n         // ensure correct type and really bound of object sysLine\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         sysLine = (Lifeline) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_coveredBy.getTrg ();\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n\n         // bind object\n         combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(combo.getOperand().contains(operand));\n\n         // check link covered from combo to sysLine\n         JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n         // check link covered from operand to sysLine\n         JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n         // iterate to-many link covered from operand to line\n         fujaba__Success = false;\n\n         fujaba__IterOperandToLine = new ArrayList(operand.getCovered()).iterator ();\n\n         while ( fujaba__IterOperandToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterOperandToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // check isomorphic binding between objects sysLine and line \n               JavaSDM.ensure ( !sysLine.equals (line) );\n\n               // bind object\n               interaction = line.getInteraction ();\n\n               // check object interaction is really bound\n               JavaSDM.ensure ( interaction != null );\n\n               // check link covered from line to combo\n               JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n               // iterate to-many link covered from sysLine to messageSend\n               fujaba__Success = false;\n\n               fujaba__IterSysLineToMessageSend = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterSysLineToMessageSend.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterSysLineToMessageSend.next ();\n\n                     // ensure correct type and really bound of object messageSend\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                     // bind object\n                     message = messageSend.getMessage ();\n\n                     // check object message is really bound\n                     JavaSDM.ensure ( message != null );\n\n                     // check link message from message to interaction\n                     JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                     ));\n\n                     // bind object\n                     _TmpObject = message.getReceiveEvent ();\n\n                     // ensure correct type and really bound of object messageReceive\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n                     // check isomorphic binding between objects messageSend and messageReceive \n                     JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                     // check link fragment from messageReceive to operand\n                     JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                     ));\n\n                     // check link message from messageReceive to message\n                     JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                     ));\n\n                     // check link sendEvent from message to messageSend\n                     JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_messageReceive_enclosingInteraction_243863 = messageReceive.getEnclosingInteraction ();\n\n                           // check object __DEC_messageReceive_enclosingInteraction_243863 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_243863 != null );\n\n                           // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_243863 and interaction \n                           JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_243863.equals (interaction) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_messageReceive_fragment_308241 = messageReceive.getEnclosingOperand ();\n\n                           // check object __DEC_messageReceive_fragment_308241 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_fragment_308241 != null );\n\n                           // check isomorphic binding between objects __DEC_messageReceive_fragment_308241 and operand \n                           JavaSDM.ensure ( !__DEC_messageReceive_fragment_308241.equals (operand) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_messageSend_enclosingInteraction_688979 = messageSend.getEnclosingInteraction ();\n\n                           // check object __DEC_messageSend_enclosingInteraction_688979 is really bound\n                           JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_688979 != null );\n\n                           // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_688979 and interaction \n                           JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_688979.equals (interaction) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_messageSend_fragment_700425 = messageSend.getEnclosingOperand ();\n\n                           // check object __DEC_messageSend_fragment_700425 is really bound\n                           JavaSDM.ensure ( __DEC_messageSend_fragment_700425 != null );\n\n                           // check isomorphic binding between objects __DEC_messageSend_fragment_700425 and operand \n                           JavaSDM.ensure ( !__DEC_messageSend_fragment_700425.equals (operand) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_45545\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_45545 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_45545.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_45545 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_45545.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_45545 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_45545 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_45545 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_45545.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_662421\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_662421 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_662421.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_receiveEvent_662421 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_662421.next ();\n\n                                 // check object __DEC_messageSend_receiveEvent_662421 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_receiveEvent_662421 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_receiveEvent_662421 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_662421.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_943688\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_943688 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_943688.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_943688 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_943688.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_943688 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_943688 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_943688 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_943688.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_368388\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_368388 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_368388.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_sendEvent_368388 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_368388.next ();\n\n                                 // check object __DEC_messageSend_sendEvent_368388 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_sendEvent_368388 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_sendEvent_368388 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_sendEvent_368388.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_272350\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_272350 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_272350.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_272350 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_272350.next ();\n\n                                 // check object __DEC_message_message_272350 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_272350 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_272350 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_272350.equals (messageReceive) );\n\n                                 // check isomorphic binding between objects __DEC_message_message_272350 and messageSend \n                                 JavaSDM.ensure ( !__DEC_message_message_272350.equals (messageSend) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_coveredBy is really bound\n                        JavaSDM.ensure ( _edge_coveredBy != null );\n                        // check object combo is really bound\n                        JavaSDM.ensure ( combo != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check object messageSend is really bound\n                        JavaSDM.ensure ( messageSend != null );\n                        // check object operand is really bound\n                        JavaSDM.ensure ( operand != null );\n                        // check object sysLine is really bound\n                        JavaSDM.ensure ( sysLine != null );\n                        // check isomorphic binding between objects sysLine and line \n                        JavaSDM.ensure ( !sysLine.equals (line) );\n\n                        // check isomorphic binding between objects messageSend and messageReceive \n                        JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                        // check link fragment from messageReceive to operand\n                        JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                        ));\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                        )));\n\n                        // check link fragment from messageSend to interaction\n                        JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                        )));\n\n                        // check link fragment from messageSend to operand\n                        JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                        )));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link message from messageSend to message\n                        JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link receiveEvent from message to messageSend\n                        JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                        )));\n\n                        // check link sendEvent from message to messageSend\n                        JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link operand from operand to combo\n                        JavaSDM.ensure (combo.equals (operand.eContainer()\n                        ));\n\n                        // check link src from _edge_coveredBy to sysLine\n                        JavaSDM.ensure (sysLine.equals (_edge_coveredBy.getSrc ()\n                        ));\n\n                        // check link trg from _edge_coveredBy to operand\n                        JavaSDM.ensure (operand.equals (_edge_coveredBy.getTrg ()\n                        ));\n\n                        // check link covered from line to combo\n                        JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                        // check link covered from combo to sysLine\n                        JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                        // check link covered from messageSend to sysLine\n                        JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                        // check link covered from line to operand\n                        JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                        // check link covered from operand to sysLine\n                        JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_162(
			EMoflonEdge _edge_coveredBy);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_93939 = null;\n      InteractionOperand __DEC_messageReceive_fragment_383600 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_467884 = null;\n      InteractionOperand __DEC_messageSend_fragment_793518 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_482848 = null;\n      Message __DEC_messageReceive_receiveEvent_482848 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_318455 = null;\n      Message __DEC_messageSend_receiveEvent_318455 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_698042 = null;\n      Message __DEC_messageReceive_sendEvent_698042 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_723894 = null;\n      Message __DEC_messageSend_sendEvent_723894 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_822308 = null;\n      MessageEnd __DEC_message_message_822308 = null;\n      Match match = null;\n      Iterator fujaba__IterSysLineTo_edge_coveredBy = null;\n      EMoflonEdge _edge_coveredBy = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterSysLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterComboToLine = null;\n      Lifeline line = null;\n      Iterator fujaba__IterSysLineToCombo = null;\n      CombinedFragment combo = null;\n      Lifeline sysLine = null;\n      InteractionOperand operand = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_covered is really bound\n         JavaSDM.ensure ( _edge_covered != null );\n         // bind object\n         _TmpObject = _edge_covered.getSrc ();\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_covered.getTrg ();\n\n         // ensure correct type and really bound of object sysLine\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         sysLine = (Lifeline) _TmpObject;\n\n         // check link covered from operand to sysLine\n         JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n         // iterate to-many link covered from sysLine to combo\n         fujaba__Success = false;\n\n         fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n         while ( fujaba__IterSysLineToCombo.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterSysLineToCombo.next ();\n\n               // ensure correct type and really bound of object combo\n               JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n               combo = (CombinedFragment) _TmpObject;\n               // check link operand from operand to combo\n               JavaSDM.ensure (combo.equals (operand.eContainer()\n               ));\n\n               // iterate to-many link covered from combo to line\n               fujaba__Success = false;\n\n               fujaba__IterComboToLine = new ArrayList(combo.getCovered()).iterator ();\n\n               while ( fujaba__IterComboToLine.hasNext () )\n               {\n                  try\n                  {\n                     line = (Lifeline) fujaba__IterComboToLine.next ();\n\n                     // check object line is really bound\n                     JavaSDM.ensure ( line != null );\n                     // check isomorphic binding between objects sysLine and line \n                     JavaSDM.ensure ( !sysLine.equals (line) );\n\n                     // bind object\n                     interaction = line.getInteraction ();\n\n                     // check object interaction is really bound\n                     JavaSDM.ensure ( interaction != null );\n\n                     // check link covered from line to operand\n                     JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                     // iterate to-many link covered from sysLine to messageSend\n                     fujaba__Success = false;\n\n                     fujaba__IterSysLineToMessageSend = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n                     while ( fujaba__IterSysLineToMessageSend.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterSysLineToMessageSend.next ();\n\n                           // ensure correct type and really bound of object messageSend\n                           JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                           messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                           // bind object\n                           message = messageSend.getMessage ();\n\n                           // check object message is really bound\n                           JavaSDM.ensure ( message != null );\n\n                           // check link message from message to interaction\n                           JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                           ));\n\n                           // bind object\n                           _TmpObject = message.getReceiveEvent ();\n\n                           // ensure correct type and really bound of object messageReceive\n                           JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                           messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n                           // check isomorphic binding between objects messageSend and messageReceive \n                           JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                           // check link fragment from messageReceive to operand\n                           JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                           ));\n\n                           // check link message from messageReceive to message\n                           JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                           ));\n\n                           // check link sendEvent from message to messageSend\n                           JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                           ));\n\n                           // iterate to-many link src from sysLine to _edge_coveredBy\n                           fujaba__Success = false;\n\n                           fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(sysLine,EMoflonEdge.class,\"src\")).iterator ();\n\n                           while ( fujaba__IterSysLineTo_edge_coveredBy.hasNext () )\n                           {\n                              try\n                              {\n                                 _edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy.next ();\n\n                                 // check object _edge_coveredBy is really bound\n                                 JavaSDM.ensure ( _edge_coveredBy != null );\n                                 // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                                 JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                                 // check link trg from _edge_coveredBy to operand\n                                 JavaSDM.ensure (operand.equals (_edge_coveredBy.getTrg ()\n                                 ));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_enclosingInteraction_93939 = messageReceive.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageReceive_enclosingInteraction_93939 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_93939 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_93939 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_93939.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_fragment_383600 = messageReceive.getEnclosingOperand ();\n\n                                       // check object __DEC_messageReceive_fragment_383600 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_fragment_383600 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_fragment_383600 and operand \n                                       JavaSDM.ensure ( !__DEC_messageReceive_fragment_383600.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_enclosingInteraction_467884 = messageSend.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageSend_enclosingInteraction_467884 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_467884 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_467884 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_467884.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_fragment_793518 = messageSend.getEnclosingOperand ();\n\n                                       // check object __DEC_messageSend_fragment_793518 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_fragment_793518 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_fragment_793518 and operand \n                                       JavaSDM.ensure ( !__DEC_messageSend_fragment_793518.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_482848\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_482848 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_482848.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_receiveEvent_482848 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_482848.next ();\n\n                                             // check object __DEC_messageReceive_receiveEvent_482848 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_482848 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_482848 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_482848.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_318455\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_318455 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_318455.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_receiveEvent_318455 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_318455.next ();\n\n                                             // check object __DEC_messageSend_receiveEvent_318455 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_receiveEvent_318455 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_receiveEvent_318455 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_318455.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_698042\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_698042 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_698042.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_sendEvent_698042 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_698042.next ();\n\n                                             // check object __DEC_messageReceive_sendEvent_698042 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_sendEvent_698042 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_sendEvent_698042 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_698042.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_723894\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_723894 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_723894.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_sendEvent_723894 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_723894.next ();\n\n                                             // check object __DEC_messageSend_sendEvent_723894 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_sendEvent_723894 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_sendEvent_723894 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_sendEvent_723894.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link message from message to __DEC_message_message_822308\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageTo__DEC_message_message_822308 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_822308.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_message_message_822308 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_822308.next ();\n\n                                             // check object __DEC_message_message_822308 is really bound\n                                             JavaSDM.ensure ( __DEC_message_message_822308 != null );\n                                             // check isomorphic binding between objects __DEC_message_message_822308 and messageReceive \n                                             JavaSDM.ensure ( !__DEC_message_message_822308.equals (messageReceive) );\n\n                                             // check isomorphic binding between objects __DEC_message_message_822308 and messageSend \n                                             JavaSDM.ensure ( !__DEC_message_message_822308.equals (messageSend) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_covered is really bound\n                                    JavaSDM.ensure ( _edge_covered != null );\n                                    // check object _edge_coveredBy is really bound\n                                    JavaSDM.ensure ( _edge_coveredBy != null );\n                                    // check object combo is really bound\n                                    JavaSDM.ensure ( combo != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object message is really bound\n                                    JavaSDM.ensure ( message != null );\n                                    // check object messageReceive is really bound\n                                    JavaSDM.ensure ( messageReceive != null );\n                                    // check object messageSend is really bound\n                                    JavaSDM.ensure ( messageSend != null );\n                                    // check object operand is really bound\n                                    JavaSDM.ensure ( operand != null );\n                                    // check object sysLine is really bound\n                                    JavaSDM.ensure ( sysLine != null );\n                                    // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                                    JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                                    // check isomorphic binding between objects sysLine and line \n                                    JavaSDM.ensure ( !sysLine.equals (line) );\n\n                                    // check isomorphic binding between objects messageSend and messageReceive \n                                    JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                    // check link fragment from messageReceive to operand\n                                    JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                                    ));\n\n                                    // check link fragment from messageReceive to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to operand\n                                    JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                                    )));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link message from message to interaction\n                                    JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                                    ));\n\n                                    // check link message from messageReceive to message\n                                    JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                                    ));\n\n                                    // check link message from messageSend to message\n                                    JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageSend\n                                    JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                                    )));\n\n                                    // check link sendEvent from message to messageSend\n                                    JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                                    ));\n\n                                    // check link sendEvent from message to messageReceive\n                                    JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                                    )));\n\n                                    // check link operand from operand to combo\n                                    JavaSDM.ensure (combo.equals (operand.eContainer()\n                                    ));\n\n                                    // check link src from _edge_covered to operand\n                                    JavaSDM.ensure (operand.equals (_edge_covered.getSrc ()\n                                    ));\n\n                                    // check link src from _edge_coveredBy to sysLine\n                                    JavaSDM.ensure (sysLine.equals (_edge_coveredBy.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_covered to sysLine\n                                    JavaSDM.ensure (sysLine.equals (_edge_covered.getTrg ()\n                                    ));\n\n                                    // check link trg from _edge_coveredBy to operand\n                                    JavaSDM.ensure (operand.equals (_edge_coveredBy.getTrg ()\n                                    ));\n\n                                    // check link covered from line to combo\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                                    // check link covered from combo to sysLine\n                                    JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                                    // check link covered from messageSend to sysLine\n                                    JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                                    // check link covered from line to operand\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                                    // check link covered from operand to sysLine\n                                    JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_BWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_163(EMoflonEdge _edge_covered);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_598942 = null;\n      InteractionOperand __DEC_messageReceive_fragment_217534 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_739679 = null;\n      InteractionOperand __DEC_messageSend_fragment_654521 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_138315 = null;\n      Message __DEC_messageReceive_receiveEvent_138315 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_69218 = null;\n      Message __DEC_messageSend_receiveEvent_69218 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_318558 = null;\n      Message __DEC_messageReceive_sendEvent_318558 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_482156 = null;\n      Message __DEC_messageSend_sendEvent_482156 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_157989 = null;\n      MessageEnd __DEC_message_message_157989 = null;\n      Match match = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterComboToLine = null;\n      Lifeline line = null;\n      CombinedFragment combo = null;\n      Iterator fujaba__IterSysLineToOperand = null;\n      InteractionOperand operand = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterSysLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Lifeline sysLine = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_coveredBy is really bound\n         JavaSDM.ensure ( _edge_coveredBy != null );\n         // bind object\n         _TmpObject = _edge_coveredBy.getSrc ();\n\n         // ensure correct type and really bound of object sysLine\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         sysLine = (Lifeline) _TmpObject;\n\n         // iterate to-many link covered from sysLine to messageSend\n         fujaba__Success = false;\n\n         fujaba__IterSysLineToMessageSend = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n         while ( fujaba__IterSysLineToMessageSend.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterSysLineToMessageSend.next ();\n\n               // ensure correct type and really bound of object messageSend\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageSend = (MessageOccurrenceSpecification) _TmpObject;\n               // bind object\n               message = messageSend.getMessage ();\n\n               // check object message is really bound\n               JavaSDM.ensure ( message != null );\n\n               // bind object\n               _TmpObject = message.getReceiveEvent ();\n\n               // ensure correct type and really bound of object messageReceive\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n               // check isomorphic binding between objects messageSend and messageReceive \n               JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n               // check link message from messageReceive to message\n               JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n               ));\n\n               // check link sendEvent from message to messageSend\n               JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n               ));\n\n               // iterate to-many link covered from sysLine to operand\n               fujaba__Success = false;\n\n               fujaba__IterSysLineToOperand = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterSysLineToOperand.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterSysLineToOperand.next ();\n\n                     // ensure correct type and really bound of object operand\n                     JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                     operand = (InteractionOperand) _TmpObject;\n                     // check link fragment from messageReceive to operand\n                     JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                     ));\n\n                     // bind object\n                     _TmpObject = _edge_coveredBy.getTrg ();\n\n                     // ensure correct type and really bound of object combo\n                     JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n                     combo = (CombinedFragment) _TmpObject;\n\n                     // check link operand from operand to combo\n                     JavaSDM.ensure (combo.equals (operand.eContainer()\n                     ));\n\n                     // check link covered from combo to sysLine\n                     JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                     // iterate to-many link covered from combo to line\n                     fujaba__Success = false;\n\n                     fujaba__IterComboToLine = new ArrayList(combo.getCovered()).iterator ();\n\n                     while ( fujaba__IterComboToLine.hasNext () )\n                     {\n                        try\n                        {\n                           line = (Lifeline) fujaba__IterComboToLine.next ();\n\n                           // check object line is really bound\n                           JavaSDM.ensure ( line != null );\n                           // check isomorphic binding between objects sysLine and line \n                           JavaSDM.ensure ( !sysLine.equals (line) );\n\n                           // bind object\n                           interaction = line.getInteraction ();\n\n                           // check object interaction is really bound\n                           JavaSDM.ensure ( interaction != null );\n\n                           // check link message from message to interaction\n                           JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                           ));\n\n                           // check link covered from line to operand\n                           JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_enclosingInteraction_598942 = messageReceive.getEnclosingInteraction ();\n\n                                 // check object __DEC_messageReceive_enclosingInteraction_598942 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_598942 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_598942 and interaction \n                                 JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_598942.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_fragment_217534 = messageReceive.getEnclosingOperand ();\n\n                                 // check object __DEC_messageReceive_fragment_217534 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_fragment_217534 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_fragment_217534 and operand \n                                 JavaSDM.ensure ( !__DEC_messageReceive_fragment_217534.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_enclosingInteraction_739679 = messageSend.getEnclosingInteraction ();\n\n                                 // check object __DEC_messageSend_enclosingInteraction_739679 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_739679 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_739679 and interaction \n                                 JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_739679.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_fragment_654521 = messageSend.getEnclosingOperand ();\n\n                                 // check object __DEC_messageSend_fragment_654521 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_fragment_654521 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_fragment_654521 and operand \n                                 JavaSDM.ensure ( !__DEC_messageSend_fragment_654521.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_138315\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_138315 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_138315.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_receiveEvent_138315 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_138315.next ();\n\n                                       // check object __DEC_messageReceive_receiveEvent_138315 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_138315 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_138315 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_138315.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_69218\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_69218 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_69218.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_receiveEvent_69218 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_69218.next ();\n\n                                       // check object __DEC_messageSend_receiveEvent_69218 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_receiveEvent_69218 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_receiveEvent_69218 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_69218.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_318558\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_318558 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_318558.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_sendEvent_318558 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_318558.next ();\n\n                                       // check object __DEC_messageReceive_sendEvent_318558 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_sendEvent_318558 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_sendEvent_318558 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_318558.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_482156\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_482156 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_482156.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_sendEvent_482156 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_482156.next ();\n\n                                       // check object __DEC_messageSend_sendEvent_482156 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_sendEvent_482156 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_sendEvent_482156 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_sendEvent_482156.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link message from message to __DEC_message_message_157989\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageTo__DEC_message_message_157989 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_157989.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_message_message_157989 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_157989.next ();\n\n                                       // check object __DEC_message_message_157989 is really bound\n                                       JavaSDM.ensure ( __DEC_message_message_157989 != null );\n                                       // check isomorphic binding between objects __DEC_message_message_157989 and messageReceive \n                                       JavaSDM.ensure ( !__DEC_message_message_157989.equals (messageReceive) );\n\n                                       // check isomorphic binding between objects __DEC_message_message_157989 and messageSend \n                                       JavaSDM.ensure ( !__DEC_message_message_157989.equals (messageSend) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_coveredBy is really bound\n                              JavaSDM.ensure ( _edge_coveredBy != null );\n                              // check object combo is really bound\n                              JavaSDM.ensure ( combo != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object message is really bound\n                              JavaSDM.ensure ( message != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object operand is really bound\n                              JavaSDM.ensure ( operand != null );\n                              // check object sysLine is really bound\n                              JavaSDM.ensure ( sysLine != null );\n                              // check isomorphic binding between objects sysLine and line \n                              JavaSDM.ensure ( !sysLine.equals (line) );\n\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from messageReceive to operand\n                              JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                              ));\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from messageSend to operand\n                              JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                              )));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link message from message to interaction\n                              JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                              ));\n\n                              // check link message from messageReceive to message\n                              JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                              ));\n\n                              // check link message from messageSend to message\n                              JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                              ));\n\n                              // check link receiveEvent from message to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                              ));\n\n                              // check link receiveEvent from message to messageSend\n                              JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                              )));\n\n                              // check link sendEvent from message to messageSend\n                              JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                              ));\n\n                              // check link sendEvent from message to messageReceive\n                              JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                              )));\n\n                              // check link operand from operand to combo\n                              JavaSDM.ensure (combo.equals (operand.eContainer()\n                              ));\n\n                              // check link src from _edge_coveredBy to sysLine\n                              JavaSDM.ensure (sysLine.equals (_edge_coveredBy.getSrc ()\n                              ));\n\n                              // check link trg from _edge_coveredBy to combo\n                              JavaSDM.ensure (combo.equals (_edge_coveredBy.getTrg ()\n                              ));\n\n                              // check link covered from line to combo\n                              JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                              // check link covered from combo to sysLine\n                              JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                              // check link covered from messageSend to sysLine\n                              JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                              // check link covered from line to operand\n                              JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                              // check link covered from operand to sysLine\n                              JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_164(
			EMoflonEdge _edge_coveredBy);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_123681 = null;\n      InteractionOperand __DEC_messageReceive_fragment_714286 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_249648 = null;\n      InteractionOperand __DEC_messageSend_fragment_193790 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_113460 = null;\n      Message __DEC_messageReceive_receiveEvent_113460 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_389853 = null;\n      Message __DEC_messageSend_receiveEvent_389853 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_797706 = null;\n      Message __DEC_messageReceive_sendEvent_797706 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_716884 = null;\n      Message __DEC_messageSend_sendEvent_716884 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_639809 = null;\n      MessageEnd __DEC_message_message_639809 = null;\n      Match match = null;\n      Iterator fujaba__IterSysLineTo_edge_coveredBy = null;\n      EMoflonEdge _edge_coveredBy = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterSysLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Iterator fujaba__IterSysLineToOperand = null;\n      InteractionOperand operand = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterComboToLine = null;\n      Lifeline line = null;\n      Lifeline sysLine = null;\n      CombinedFragment combo = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_covered is really bound\n         JavaSDM.ensure ( _edge_covered != null );\n         // bind object\n         _TmpObject = _edge_covered.getSrc ();\n\n         // ensure correct type and really bound of object combo\n         JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n         combo = (CombinedFragment) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_covered.getTrg ();\n\n         // ensure correct type and really bound of object sysLine\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         sysLine = (Lifeline) _TmpObject;\n\n         // check link covered from combo to sysLine\n         JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n         // iterate to-many link covered from combo to line\n         fujaba__Success = false;\n\n         fujaba__IterComboToLine = new ArrayList(combo.getCovered()).iterator ();\n\n         while ( fujaba__IterComboToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterComboToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // check isomorphic binding between objects sysLine and line \n               JavaSDM.ensure ( !sysLine.equals (line) );\n\n               // bind object\n               interaction = line.getInteraction ();\n\n               // check object interaction is really bound\n               JavaSDM.ensure ( interaction != null );\n\n               // iterate to-many link covered from sysLine to operand\n               fujaba__Success = false;\n\n               fujaba__IterSysLineToOperand = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterSysLineToOperand.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterSysLineToOperand.next ();\n\n                     // ensure correct type and really bound of object operand\n                     JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                     operand = (InteractionOperand) _TmpObject;\n                     // check link operand from operand to combo\n                     JavaSDM.ensure (combo.equals (operand.eContainer()\n                     ));\n\n                     // check link covered from line to operand\n                     JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                     // iterate to-many link covered from sysLine to messageSend\n                     fujaba__Success = false;\n\n                     fujaba__IterSysLineToMessageSend = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n                     while ( fujaba__IterSysLineToMessageSend.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterSysLineToMessageSend.next ();\n\n                           // ensure correct type and really bound of object messageSend\n                           JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                           messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                           // bind object\n                           message = messageSend.getMessage ();\n\n                           // check object message is really bound\n                           JavaSDM.ensure ( message != null );\n\n                           // check link message from message to interaction\n                           JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                           ));\n\n                           // bind object\n                           _TmpObject = message.getReceiveEvent ();\n\n                           // ensure correct type and really bound of object messageReceive\n                           JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                           messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n                           // check isomorphic binding between objects messageSend and messageReceive \n                           JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                           // check link fragment from messageReceive to operand\n                           JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                           ));\n\n                           // check link message from messageReceive to message\n                           JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                           ));\n\n                           // check link sendEvent from message to messageSend\n                           JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                           ));\n\n                           // iterate to-many link src from sysLine to _edge_coveredBy\n                           fujaba__Success = false;\n\n                           fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(sysLine,EMoflonEdge.class,\"src\")).iterator ();\n\n                           while ( fujaba__IterSysLineTo_edge_coveredBy.hasNext () )\n                           {\n                              try\n                              {\n                                 _edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy.next ();\n\n                                 // check object _edge_coveredBy is really bound\n                                 JavaSDM.ensure ( _edge_coveredBy != null );\n                                 // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                                 JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                                 // check link trg from _edge_coveredBy to combo\n                                 JavaSDM.ensure (combo.equals (_edge_coveredBy.getTrg ()\n                                 ));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_enclosingInteraction_123681 = messageReceive.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageReceive_enclosingInteraction_123681 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_123681 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_123681 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_123681.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_fragment_714286 = messageReceive.getEnclosingOperand ();\n\n                                       // check object __DEC_messageReceive_fragment_714286 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_fragment_714286 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_fragment_714286 and operand \n                                       JavaSDM.ensure ( !__DEC_messageReceive_fragment_714286.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_enclosingInteraction_249648 = messageSend.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageSend_enclosingInteraction_249648 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_249648 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_249648 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_249648.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_fragment_193790 = messageSend.getEnclosingOperand ();\n\n                                       // check object __DEC_messageSend_fragment_193790 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_fragment_193790 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_fragment_193790 and operand \n                                       JavaSDM.ensure ( !__DEC_messageSend_fragment_193790.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_113460\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_113460 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_113460.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_receiveEvent_113460 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_113460.next ();\n\n                                             // check object __DEC_messageReceive_receiveEvent_113460 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_113460 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_113460 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_113460.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_389853\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_389853 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_389853.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_receiveEvent_389853 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_389853.next ();\n\n                                             // check object __DEC_messageSend_receiveEvent_389853 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_receiveEvent_389853 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_receiveEvent_389853 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_389853.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_797706\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_797706 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_797706.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_sendEvent_797706 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_797706.next ();\n\n                                             // check object __DEC_messageReceive_sendEvent_797706 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_sendEvent_797706 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_sendEvent_797706 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_797706.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_716884\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_716884 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_716884.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_sendEvent_716884 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_716884.next ();\n\n                                             // check object __DEC_messageSend_sendEvent_716884 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_sendEvent_716884 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_sendEvent_716884 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_sendEvent_716884.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link message from message to __DEC_message_message_639809\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageTo__DEC_message_message_639809 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_639809.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_message_message_639809 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_639809.next ();\n\n                                             // check object __DEC_message_message_639809 is really bound\n                                             JavaSDM.ensure ( __DEC_message_message_639809 != null );\n                                             // check isomorphic binding between objects __DEC_message_message_639809 and messageReceive \n                                             JavaSDM.ensure ( !__DEC_message_message_639809.equals (messageReceive) );\n\n                                             // check isomorphic binding between objects __DEC_message_message_639809 and messageSend \n                                             JavaSDM.ensure ( !__DEC_message_message_639809.equals (messageSend) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_covered is really bound\n                                    JavaSDM.ensure ( _edge_covered != null );\n                                    // check object _edge_coveredBy is really bound\n                                    JavaSDM.ensure ( _edge_coveredBy != null );\n                                    // check object combo is really bound\n                                    JavaSDM.ensure ( combo != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object message is really bound\n                                    JavaSDM.ensure ( message != null );\n                                    // check object messageReceive is really bound\n                                    JavaSDM.ensure ( messageReceive != null );\n                                    // check object messageSend is really bound\n                                    JavaSDM.ensure ( messageSend != null );\n                                    // check object operand is really bound\n                                    JavaSDM.ensure ( operand != null );\n                                    // check object sysLine is really bound\n                                    JavaSDM.ensure ( sysLine != null );\n                                    // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                                    JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                                    // check isomorphic binding between objects sysLine and line \n                                    JavaSDM.ensure ( !sysLine.equals (line) );\n\n                                    // check isomorphic binding between objects messageSend and messageReceive \n                                    JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                    // check link fragment from messageReceive to operand\n                                    JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                                    ));\n\n                                    // check link fragment from messageReceive to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to operand\n                                    JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                                    )));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link message from message to interaction\n                                    JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                                    ));\n\n                                    // check link message from messageReceive to message\n                                    JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                                    ));\n\n                                    // check link message from messageSend to message\n                                    JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageSend\n                                    JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                                    )));\n\n                                    // check link sendEvent from message to messageSend\n                                    JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                                    ));\n\n                                    // check link sendEvent from message to messageReceive\n                                    JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                                    )));\n\n                                    // check link operand from operand to combo\n                                    JavaSDM.ensure (combo.equals (operand.eContainer()\n                                    ));\n\n                                    // check link src from _edge_covered to combo\n                                    JavaSDM.ensure (combo.equals (_edge_covered.getSrc ()\n                                    ));\n\n                                    // check link src from _edge_coveredBy to sysLine\n                                    JavaSDM.ensure (sysLine.equals (_edge_coveredBy.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_covered to sysLine\n                                    JavaSDM.ensure (sysLine.equals (_edge_covered.getTrg ()\n                                    ));\n\n                                    // check link trg from _edge_coveredBy to combo\n                                    JavaSDM.ensure (combo.equals (_edge_coveredBy.getTrg ()\n                                    ));\n\n                                    // check link covered from line to combo\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                                    // check link covered from combo to sysLine\n                                    JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                                    // check link covered from messageSend to sysLine\n                                    JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                                    // check link covered from line to operand\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                                    // check link covered from operand to sysLine\n                                    JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_BWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_165(EMoflonEdge _edge_covered);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_210551 = null;\n      InteractionOperand __DEC_messageReceive_fragment_287198 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_876761 = null;\n      InteractionOperand __DEC_messageSend_fragment_577159 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_185348 = null;\n      Message __DEC_messageReceive_receiveEvent_185348 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_147266 = null;\n      Message __DEC_messageSend_receiveEvent_147266 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_640538 = null;\n      Message __DEC_messageReceive_sendEvent_640538 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_642554 = null;\n      Message __DEC_messageSend_sendEvent_642554 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_224450 = null;\n      MessageEnd __DEC_message_message_224450 = null;\n      Match match = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterSysLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Iterator fujaba__IterOperandToSysLine = null;\n      Lifeline sysLine = null;\n      CombinedFragment combo = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterOperandToLine = null;\n      Lifeline line = null;\n      InteractionOperand operand = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_fragment is really bound\n         JavaSDM.ensure ( _edge_fragment != null );\n         // bind object\n         _TmpObject = _edge_fragment.getSrc ();\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n\n         // iterate to-many link covered from operand to line\n         fujaba__Success = false;\n\n         fujaba__IterOperandToLine = new ArrayList(operand.getCovered()).iterator ();\n\n         while ( fujaba__IterOperandToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterOperandToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // bind object\n               interaction = line.getInteraction ();\n\n               // check object interaction is really bound\n               JavaSDM.ensure ( interaction != null );\n\n               // bind object\n               combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n               // check object combo is really bound\n               JavaSDM.ensure ( combo != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(combo.getOperand().contains(operand));\n\n               // check link covered from line to combo\n               JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n               // iterate to-many link covered from operand to sysLine\n               fujaba__Success = false;\n\n               fujaba__IterOperandToSysLine = new ArrayList(operand.getCovered()).iterator ();\n\n               while ( fujaba__IterOperandToSysLine.hasNext () )\n               {\n                  try\n                  {\n                     sysLine = (Lifeline) fujaba__IterOperandToSysLine.next ();\n\n                     // check object sysLine is really bound\n                     JavaSDM.ensure ( sysLine != null );\n                     // check isomorphic binding between objects sysLine and line \n                     JavaSDM.ensure ( !sysLine.equals (line) );\n\n                     // check link covered from combo to sysLine\n                     JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                     // iterate to-many link covered from sysLine to messageSend\n                     fujaba__Success = false;\n\n                     fujaba__IterSysLineToMessageSend = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n                     while ( fujaba__IterSysLineToMessageSend.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterSysLineToMessageSend.next ();\n\n                           // ensure correct type and really bound of object messageSend\n                           JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                           messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                           // bind object\n                           message = messageSend.getMessage ();\n\n                           // check object message is really bound\n                           JavaSDM.ensure ( message != null );\n\n                           // check link message from message to interaction\n                           JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                           ));\n\n                           // bind object\n                           _TmpObject = message.getReceiveEvent ();\n\n                           // ensure correct type and really bound of object messageReceive\n                           JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                           messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n                           // check isomorphic binding between objects messageSend and messageReceive \n                           JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                           // check link fragment from messageReceive to operand\n                           JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                           ));\n\n                           // check link message from messageReceive to message\n                           JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                           ));\n\n                           // check link sendEvent from message to messageSend\n                           JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                           ));\n\n                           // check link trg from _edge_fragment to messageReceive\n                           JavaSDM.ensure (messageReceive.equals (_edge_fragment.getTrg ()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_enclosingInteraction_210551 = messageReceive.getEnclosingInteraction ();\n\n                                 // check object __DEC_messageReceive_enclosingInteraction_210551 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_210551 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_210551 and interaction \n                                 JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_210551.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_fragment_287198 = messageReceive.getEnclosingOperand ();\n\n                                 // check object __DEC_messageReceive_fragment_287198 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_fragment_287198 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_fragment_287198 and operand \n                                 JavaSDM.ensure ( !__DEC_messageReceive_fragment_287198.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_enclosingInteraction_876761 = messageSend.getEnclosingInteraction ();\n\n                                 // check object __DEC_messageSend_enclosingInteraction_876761 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_876761 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_876761 and interaction \n                                 JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_876761.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_fragment_577159 = messageSend.getEnclosingOperand ();\n\n                                 // check object __DEC_messageSend_fragment_577159 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_fragment_577159 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_fragment_577159 and operand \n                                 JavaSDM.ensure ( !__DEC_messageSend_fragment_577159.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_185348\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_185348 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_185348.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_receiveEvent_185348 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_185348.next ();\n\n                                       // check object __DEC_messageReceive_receiveEvent_185348 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_185348 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_185348 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_185348.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_147266\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_147266 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_147266.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_receiveEvent_147266 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_147266.next ();\n\n                                       // check object __DEC_messageSend_receiveEvent_147266 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_receiveEvent_147266 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_receiveEvent_147266 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_147266.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_640538\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_640538 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_640538.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_sendEvent_640538 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_640538.next ();\n\n                                       // check object __DEC_messageReceive_sendEvent_640538 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_sendEvent_640538 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_sendEvent_640538 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_640538.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_642554\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_642554 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_642554.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_sendEvent_642554 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_642554.next ();\n\n                                       // check object __DEC_messageSend_sendEvent_642554 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_sendEvent_642554 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_sendEvent_642554 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_sendEvent_642554.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link message from message to __DEC_message_message_224450\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageTo__DEC_message_message_224450 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_224450.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_message_message_224450 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_224450.next ();\n\n                                       // check object __DEC_message_message_224450 is really bound\n                                       JavaSDM.ensure ( __DEC_message_message_224450 != null );\n                                       // check isomorphic binding between objects __DEC_message_message_224450 and messageReceive \n                                       JavaSDM.ensure ( !__DEC_message_message_224450.equals (messageReceive) );\n\n                                       // check isomorphic binding between objects __DEC_message_message_224450 and messageSend \n                                       JavaSDM.ensure ( !__DEC_message_message_224450.equals (messageSend) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_fragment is really bound\n                              JavaSDM.ensure ( _edge_fragment != null );\n                              // check object combo is really bound\n                              JavaSDM.ensure ( combo != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object message is really bound\n                              JavaSDM.ensure ( message != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object operand is really bound\n                              JavaSDM.ensure ( operand != null );\n                              // check object sysLine is really bound\n                              JavaSDM.ensure ( sysLine != null );\n                              // check isomorphic binding between objects sysLine and line \n                              JavaSDM.ensure ( !sysLine.equals (line) );\n\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from messageReceive to operand\n                              JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                              ));\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from messageSend to operand\n                              JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                              )));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link message from message to interaction\n                              JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                              ));\n\n                              // check link message from messageReceive to message\n                              JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                              ));\n\n                              // check link message from messageSend to message\n                              JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                              ));\n\n                              // check link receiveEvent from message to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                              ));\n\n                              // check link receiveEvent from message to messageSend\n                              JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                              )));\n\n                              // check link sendEvent from message to messageSend\n                              JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                              ));\n\n                              // check link sendEvent from message to messageReceive\n                              JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                              )));\n\n                              // check link operand from operand to combo\n                              JavaSDM.ensure (combo.equals (operand.eContainer()\n                              ));\n\n                              // check link src from _edge_fragment to operand\n                              JavaSDM.ensure (operand.equals (_edge_fragment.getSrc ()\n                              ));\n\n                              // check link trg from _edge_fragment to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (_edge_fragment.getTrg ()\n                              ));\n\n                              // check link covered from line to combo\n                              JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                              // check link covered from combo to sysLine\n                              JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                              // check link covered from messageSend to sysLine\n                              JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                              // check link covered from line to operand\n                              JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                              // check link covered from operand to sysLine\n                              JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_166(
			EMoflonEdge _edge_fragment);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_373650 = null;\n      InteractionOperand __DEC_messageReceive_fragment_938687 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_857790 = null;\n      InteractionOperand __DEC_messageSend_fragment_759730 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_220570 = null;\n      Message __DEC_messageReceive_receiveEvent_220570 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_818336 = null;\n      Message __DEC_messageSend_receiveEvent_818336 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_396349 = null;\n      Message __DEC_messageReceive_sendEvent_396349 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_393999 = null;\n      Message __DEC_messageSend_sendEvent_393999 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_707937 = null;\n      MessageEnd __DEC_message_message_707937 = null;\n      Match match = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterSysLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Iterator fujaba__IterOperandToSysLine = null;\n      Lifeline sysLine = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterOperandToLine = null;\n      Lifeline line = null;\n      CombinedFragment combo = null;\n      Iterator fujaba__IterOperandTo_edge_fragment = null;\n      EMoflonEdge _edge_fragment = null;\n      InteractionOperand operand = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_enclosingOperand is really bound\n         JavaSDM.ensure ( _edge_enclosingOperand != null );\n         // bind object\n         _TmpObject = _edge_enclosingOperand.getTrg ();\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n\n         // iterate to-many link src from operand to _edge_fragment\n         fujaba__Success = false;\n\n         fujaba__IterOperandTo_edge_fragment = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(operand,EMoflonEdge.class,\"src\")).iterator ();\n\n         while ( fujaba__IterOperandTo_edge_fragment.hasNext () )\n         {\n            try\n            {\n               _edge_fragment = (EMoflonEdge) fujaba__IterOperandTo_edge_fragment.next ();\n\n               // check object _edge_fragment is really bound\n               JavaSDM.ensure ( _edge_fragment != null );\n               // check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand \n               JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingOperand) );\n\n               // bind object\n               combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n               // check object combo is really bound\n               JavaSDM.ensure ( combo != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(combo.getOperand().contains(operand));\n\n               // iterate to-many link covered from operand to line\n               fujaba__Success = false;\n\n               fujaba__IterOperandToLine = new ArrayList(operand.getCovered()).iterator ();\n\n               while ( fujaba__IterOperandToLine.hasNext () )\n               {\n                  try\n                  {\n                     line = (Lifeline) fujaba__IterOperandToLine.next ();\n\n                     // check object line is really bound\n                     JavaSDM.ensure ( line != null );\n                     // bind object\n                     interaction = line.getInteraction ();\n\n                     // check object interaction is really bound\n                     JavaSDM.ensure ( interaction != null );\n\n                     // check link covered from line to combo\n                     JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                     // iterate to-many link covered from operand to sysLine\n                     fujaba__Success = false;\n\n                     fujaba__IterOperandToSysLine = new ArrayList(operand.getCovered()).iterator ();\n\n                     while ( fujaba__IterOperandToSysLine.hasNext () )\n                     {\n                        try\n                        {\n                           sysLine = (Lifeline) fujaba__IterOperandToSysLine.next ();\n\n                           // check object sysLine is really bound\n                           JavaSDM.ensure ( sysLine != null );\n                           // check isomorphic binding between objects sysLine and line \n                           JavaSDM.ensure ( !sysLine.equals (line) );\n\n                           // check link covered from combo to sysLine\n                           JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                           // iterate to-many link covered from sysLine to messageSend\n                           fujaba__Success = false;\n\n                           fujaba__IterSysLineToMessageSend = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n                           while ( fujaba__IterSysLineToMessageSend.hasNext () )\n                           {\n                              try\n                              {\n                                 _TmpObject =  fujaba__IterSysLineToMessageSend.next ();\n\n                                 // ensure correct type and really bound of object messageSend\n                                 JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                                 messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                                 // bind object\n                                 message = messageSend.getMessage ();\n\n                                 // check object message is really bound\n                                 JavaSDM.ensure ( message != null );\n\n                                 // check link message from message to interaction\n                                 JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                                 ));\n\n                                 // bind object\n                                 _TmpObject = message.getReceiveEvent ();\n\n                                 // ensure correct type and really bound of object messageReceive\n                                 JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                                 messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n                                 // check isomorphic binding between objects messageSend and messageReceive \n                                 JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                 // check link fragment from messageReceive to operand\n                                 JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                                 ));\n\n                                 // check link message from messageReceive to message\n                                 JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                                 ));\n\n                                 // check link sendEvent from message to messageSend\n                                 JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                                 ));\n\n                                 // check link src from _edge_enclosingOperand to messageReceive\n                                 JavaSDM.ensure (messageReceive.equals (_edge_enclosingOperand.getSrc ()\n                                 ));\n\n                                 // check link trg from _edge_fragment to messageReceive\n                                 JavaSDM.ensure (messageReceive.equals (_edge_fragment.getTrg ()\n                                 ));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_enclosingInteraction_373650 = messageReceive.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageReceive_enclosingInteraction_373650 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_373650 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_373650 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_373650.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_fragment_938687 = messageReceive.getEnclosingOperand ();\n\n                                       // check object __DEC_messageReceive_fragment_938687 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_fragment_938687 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_fragment_938687 and operand \n                                       JavaSDM.ensure ( !__DEC_messageReceive_fragment_938687.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_enclosingInteraction_857790 = messageSend.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageSend_enclosingInteraction_857790 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_857790 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_857790 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_857790.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_fragment_759730 = messageSend.getEnclosingOperand ();\n\n                                       // check object __DEC_messageSend_fragment_759730 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_fragment_759730 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_fragment_759730 and operand \n                                       JavaSDM.ensure ( !__DEC_messageSend_fragment_759730.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_220570\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_220570 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_220570.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_receiveEvent_220570 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_220570.next ();\n\n                                             // check object __DEC_messageReceive_receiveEvent_220570 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_220570 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_220570 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_220570.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_818336\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_818336 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_818336.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_receiveEvent_818336 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_818336.next ();\n\n                                             // check object __DEC_messageSend_receiveEvent_818336 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_receiveEvent_818336 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_receiveEvent_818336 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_818336.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_396349\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_396349 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_396349.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_sendEvent_396349 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_396349.next ();\n\n                                             // check object __DEC_messageReceive_sendEvent_396349 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_sendEvent_396349 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_sendEvent_396349 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_396349.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_393999\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_393999 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_393999.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_sendEvent_393999 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_393999.next ();\n\n                                             // check object __DEC_messageSend_sendEvent_393999 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_sendEvent_393999 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_sendEvent_393999 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_sendEvent_393999.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link message from message to __DEC_message_message_707937\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageTo__DEC_message_message_707937 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_707937.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_message_message_707937 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_707937.next ();\n\n                                             // check object __DEC_message_message_707937 is really bound\n                                             JavaSDM.ensure ( __DEC_message_message_707937 != null );\n                                             // check isomorphic binding between objects __DEC_message_message_707937 and messageReceive \n                                             JavaSDM.ensure ( !__DEC_message_message_707937.equals (messageReceive) );\n\n                                             // check isomorphic binding between objects __DEC_message_message_707937 and messageSend \n                                             JavaSDM.ensure ( !__DEC_message_message_707937.equals (messageSend) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_enclosingOperand is really bound\n                                    JavaSDM.ensure ( _edge_enclosingOperand != null );\n                                    // check object _edge_fragment is really bound\n                                    JavaSDM.ensure ( _edge_fragment != null );\n                                    // check object combo is really bound\n                                    JavaSDM.ensure ( combo != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object message is really bound\n                                    JavaSDM.ensure ( message != null );\n                                    // check object messageReceive is really bound\n                                    JavaSDM.ensure ( messageReceive != null );\n                                    // check object messageSend is really bound\n                                    JavaSDM.ensure ( messageSend != null );\n                                    // check object operand is really bound\n                                    JavaSDM.ensure ( operand != null );\n                                    // check object sysLine is really bound\n                                    JavaSDM.ensure ( sysLine != null );\n                                    // check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand \n                                    JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingOperand) );\n\n                                    // check isomorphic binding between objects sysLine and line \n                                    JavaSDM.ensure ( !sysLine.equals (line) );\n\n                                    // check isomorphic binding between objects messageSend and messageReceive \n                                    JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                    // check link fragment from messageReceive to operand\n                                    JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                                    ));\n\n                                    // check link fragment from messageReceive to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to operand\n                                    JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                                    )));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link message from message to interaction\n                                    JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                                    ));\n\n                                    // check link message from messageReceive to message\n                                    JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                                    ));\n\n                                    // check link message from messageSend to message\n                                    JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageSend\n                                    JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                                    )));\n\n                                    // check link sendEvent from message to messageSend\n                                    JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                                    ));\n\n                                    // check link sendEvent from message to messageReceive\n                                    JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                                    )));\n\n                                    // check link operand from operand to combo\n                                    JavaSDM.ensure (combo.equals (operand.eContainer()\n                                    ));\n\n                                    // check link src from _edge_enclosingOperand to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (_edge_enclosingOperand.getSrc ()\n                                    ));\n\n                                    // check link src from _edge_fragment to operand\n                                    JavaSDM.ensure (operand.equals (_edge_fragment.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_enclosingOperand to operand\n                                    JavaSDM.ensure (operand.equals (_edge_enclosingOperand.getTrg ()\n                                    ));\n\n                                    // check link trg from _edge_fragment to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (_edge_fragment.getTrg ()\n                                    ));\n\n                                    // check link covered from line to combo\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                                    // check link covered from combo to sysLine\n                                    JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                                    // check link covered from messageSend to sysLine\n                                    JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                                    // check link covered from line to operand\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                                    // check link covered from operand to sysLine\n                                    JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_BWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_167(
			EMoflonEdge _edge_enclosingOperand);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_411300 = null;\n      InteractionOperand __DEC_messageReceive_fragment_907804 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_533089 = null;\n      InteractionOperand __DEC_messageSend_fragment_829521 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_942702 = null;\n      Message __DEC_messageReceive_receiveEvent_942702 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_480439 = null;\n      Message __DEC_messageSend_receiveEvent_480439 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_701926 = null;\n      Message __DEC_messageReceive_sendEvent_701926 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_919529 = null;\n      Message __DEC_messageSend_sendEvent_919529 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_195637 = null;\n      MessageEnd __DEC_message_message_195637 = null;\n      Match match = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterSysLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Iterator fujaba__IterOperandToSysLine = null;\n      Lifeline sysLine = null;\n      CombinedFragment combo = null;\n      InteractionOperand operand = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_coveredBy is really bound\n         JavaSDM.ensure ( _edge_coveredBy != null );\n         // bind object\n         _TmpObject = _edge_coveredBy.getSrc ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // bind object\n         interaction = line.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         _TmpObject = _edge_coveredBy.getTrg ();\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n\n         // bind object\n         combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(combo.getOperand().contains(operand));\n\n         // check link covered from line to combo\n         JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n         // check link covered from line to operand\n         JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n         // iterate to-many link covered from operand to sysLine\n         fujaba__Success = false;\n\n         fujaba__IterOperandToSysLine = new ArrayList(operand.getCovered()).iterator ();\n\n         while ( fujaba__IterOperandToSysLine.hasNext () )\n         {\n            try\n            {\n               sysLine = (Lifeline) fujaba__IterOperandToSysLine.next ();\n\n               // check object sysLine is really bound\n               JavaSDM.ensure ( sysLine != null );\n               // check isomorphic binding between objects sysLine and line \n               JavaSDM.ensure ( !sysLine.equals (line) );\n\n               // check link covered from combo to sysLine\n               JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n               // iterate to-many link covered from sysLine to messageSend\n               fujaba__Success = false;\n\n               fujaba__IterSysLineToMessageSend = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterSysLineToMessageSend.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterSysLineToMessageSend.next ();\n\n                     // ensure correct type and really bound of object messageSend\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                     // bind object\n                     message = messageSend.getMessage ();\n\n                     // check object message is really bound\n                     JavaSDM.ensure ( message != null );\n\n                     // check link message from message to interaction\n                     JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                     ));\n\n                     // bind object\n                     _TmpObject = message.getReceiveEvent ();\n\n                     // ensure correct type and really bound of object messageReceive\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n                     // check isomorphic binding between objects messageSend and messageReceive \n                     JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                     // check link fragment from messageReceive to operand\n                     JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                     ));\n\n                     // check link message from messageReceive to message\n                     JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                     ));\n\n                     // check link sendEvent from message to messageSend\n                     JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_messageReceive_enclosingInteraction_411300 = messageReceive.getEnclosingInteraction ();\n\n                           // check object __DEC_messageReceive_enclosingInteraction_411300 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_411300 != null );\n\n                           // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_411300 and interaction \n                           JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_411300.equals (interaction) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_messageReceive_fragment_907804 = messageReceive.getEnclosingOperand ();\n\n                           // check object __DEC_messageReceive_fragment_907804 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_fragment_907804 != null );\n\n                           // check isomorphic binding between objects __DEC_messageReceive_fragment_907804 and operand \n                           JavaSDM.ensure ( !__DEC_messageReceive_fragment_907804.equals (operand) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_messageSend_enclosingInteraction_533089 = messageSend.getEnclosingInteraction ();\n\n                           // check object __DEC_messageSend_enclosingInteraction_533089 is really bound\n                           JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_533089 != null );\n\n                           // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_533089 and interaction \n                           JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_533089.equals (interaction) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_messageSend_fragment_829521 = messageSend.getEnclosingOperand ();\n\n                           // check object __DEC_messageSend_fragment_829521 is really bound\n                           JavaSDM.ensure ( __DEC_messageSend_fragment_829521 != null );\n\n                           // check isomorphic binding between objects __DEC_messageSend_fragment_829521 and operand \n                           JavaSDM.ensure ( !__DEC_messageSend_fragment_829521.equals (operand) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_942702\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_942702 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_942702.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_942702 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_942702.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_942702 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_942702 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_942702 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_942702.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_480439\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_480439 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_480439.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_receiveEvent_480439 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_480439.next ();\n\n                                 // check object __DEC_messageSend_receiveEvent_480439 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_receiveEvent_480439 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_receiveEvent_480439 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_480439.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_701926\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_701926 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_701926.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_701926 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_701926.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_701926 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_701926 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_701926 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_701926.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_919529\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_919529 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_919529.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_sendEvent_919529 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_919529.next ();\n\n                                 // check object __DEC_messageSend_sendEvent_919529 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_sendEvent_919529 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_sendEvent_919529 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_sendEvent_919529.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_195637\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_195637 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_195637.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_195637 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_195637.next ();\n\n                                 // check object __DEC_message_message_195637 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_195637 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_195637 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_195637.equals (messageReceive) );\n\n                                 // check isomorphic binding between objects __DEC_message_message_195637 and messageSend \n                                 JavaSDM.ensure ( !__DEC_message_message_195637.equals (messageSend) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_coveredBy is really bound\n                        JavaSDM.ensure ( _edge_coveredBy != null );\n                        // check object combo is really bound\n                        JavaSDM.ensure ( combo != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check object messageSend is really bound\n                        JavaSDM.ensure ( messageSend != null );\n                        // check object operand is really bound\n                        JavaSDM.ensure ( operand != null );\n                        // check object sysLine is really bound\n                        JavaSDM.ensure ( sysLine != null );\n                        // check isomorphic binding between objects sysLine and line \n                        JavaSDM.ensure ( !sysLine.equals (line) );\n\n                        // check isomorphic binding between objects messageSend and messageReceive \n                        JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                        // check link fragment from messageReceive to operand\n                        JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                        ));\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                        )));\n\n                        // check link fragment from messageSend to interaction\n                        JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                        )));\n\n                        // check link fragment from messageSend to operand\n                        JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                        )));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link message from messageSend to message\n                        JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link receiveEvent from message to messageSend\n                        JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                        )));\n\n                        // check link sendEvent from message to messageSend\n                        JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link operand from operand to combo\n                        JavaSDM.ensure (combo.equals (operand.eContainer()\n                        ));\n\n                        // check link src from _edge_coveredBy to line\n                        JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n                        ));\n\n                        // check link trg from _edge_coveredBy to operand\n                        JavaSDM.ensure (operand.equals (_edge_coveredBy.getTrg ()\n                        ));\n\n                        // check link covered from line to combo\n                        JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                        // check link covered from combo to sysLine\n                        JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                        // check link covered from messageSend to sysLine\n                        JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                        // check link covered from line to operand\n                        JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                        // check link covered from operand to sysLine\n                        JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_168(
			EMoflonEdge _edge_coveredBy);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_123193 = null;\n      InteractionOperand __DEC_messageReceive_fragment_737572 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_369438 = null;\n      InteractionOperand __DEC_messageSend_fragment_550232 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_213812 = null;\n      Message __DEC_messageReceive_receiveEvent_213812 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_770698 = null;\n      Message __DEC_messageSend_receiveEvent_770698 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_942644 = null;\n      Message __DEC_messageReceive_sendEvent_942644 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_201917 = null;\n      Message __DEC_messageSend_sendEvent_201917 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_745394 = null;\n      MessageEnd __DEC_message_message_745394 = null;\n      Match match = null;\n      Iterator fujaba__IterOperandTo_edge_coveredBy = null;\n      EMoflonEdge _edge_coveredBy = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterSysLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Iterator fujaba__IterOperandToSysLine = null;\n      Lifeline sysLine = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      CombinedFragment combo = null;\n      InteractionOperand operand = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_covered is really bound\n         JavaSDM.ensure ( _edge_covered != null );\n         // bind object\n         _TmpObject = _edge_covered.getSrc ();\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n\n         // bind object\n         combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(combo.getOperand().contains(operand));\n\n         // bind object\n         _TmpObject = _edge_covered.getTrg ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // bind object\n         interaction = line.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // check link covered from line to combo\n         JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n         // check link covered from line to operand\n         JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n         // iterate to-many link covered from operand to sysLine\n         fujaba__Success = false;\n\n         fujaba__IterOperandToSysLine = new ArrayList(operand.getCovered()).iterator ();\n\n         while ( fujaba__IterOperandToSysLine.hasNext () )\n         {\n            try\n            {\n               sysLine = (Lifeline) fujaba__IterOperandToSysLine.next ();\n\n               // check object sysLine is really bound\n               JavaSDM.ensure ( sysLine != null );\n               // check isomorphic binding between objects sysLine and line \n               JavaSDM.ensure ( !sysLine.equals (line) );\n\n               // check link covered from combo to sysLine\n               JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n               // iterate to-many link covered from sysLine to messageSend\n               fujaba__Success = false;\n\n               fujaba__IterSysLineToMessageSend = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterSysLineToMessageSend.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterSysLineToMessageSend.next ();\n\n                     // ensure correct type and really bound of object messageSend\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                     // bind object\n                     message = messageSend.getMessage ();\n\n                     // check object message is really bound\n                     JavaSDM.ensure ( message != null );\n\n                     // check link message from message to interaction\n                     JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                     ));\n\n                     // bind object\n                     _TmpObject = message.getReceiveEvent ();\n\n                     // ensure correct type and really bound of object messageReceive\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n                     // check isomorphic binding between objects messageSend and messageReceive \n                     JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                     // check link fragment from messageReceive to operand\n                     JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                     ));\n\n                     // check link message from messageReceive to message\n                     JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                     ));\n\n                     // check link sendEvent from message to messageSend\n                     JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                     ));\n\n                     // iterate to-many link trg from operand to _edge_coveredBy\n                     fujaba__Success = false;\n\n                     fujaba__IterOperandTo_edge_coveredBy = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(operand,EMoflonEdge.class,\"trg\")).iterator ();\n\n                     while ( fujaba__IterOperandTo_edge_coveredBy.hasNext () )\n                     {\n                        try\n                        {\n                           _edge_coveredBy = (EMoflonEdge) fujaba__IterOperandTo_edge_coveredBy.next ();\n\n                           // check object _edge_coveredBy is really bound\n                           JavaSDM.ensure ( _edge_coveredBy != null );\n                           // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                           JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                           // check link src from _edge_coveredBy to line\n                           JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_enclosingInteraction_123193 = messageReceive.getEnclosingInteraction ();\n\n                                 // check object __DEC_messageReceive_enclosingInteraction_123193 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_123193 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_123193 and interaction \n                                 JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_123193.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_fragment_737572 = messageReceive.getEnclosingOperand ();\n\n                                 // check object __DEC_messageReceive_fragment_737572 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_fragment_737572 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_fragment_737572 and operand \n                                 JavaSDM.ensure ( !__DEC_messageReceive_fragment_737572.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_enclosingInteraction_369438 = messageSend.getEnclosingInteraction ();\n\n                                 // check object __DEC_messageSend_enclosingInteraction_369438 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_369438 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_369438 and interaction \n                                 JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_369438.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_fragment_550232 = messageSend.getEnclosingOperand ();\n\n                                 // check object __DEC_messageSend_fragment_550232 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_fragment_550232 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_fragment_550232 and operand \n                                 JavaSDM.ensure ( !__DEC_messageSend_fragment_550232.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_213812\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_213812 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_213812.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_receiveEvent_213812 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_213812.next ();\n\n                                       // check object __DEC_messageReceive_receiveEvent_213812 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_213812 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_213812 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_213812.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_770698\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_770698 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_770698.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_receiveEvent_770698 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_770698.next ();\n\n                                       // check object __DEC_messageSend_receiveEvent_770698 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_receiveEvent_770698 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_receiveEvent_770698 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_770698.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_942644\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_942644 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_942644.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_sendEvent_942644 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_942644.next ();\n\n                                       // check object __DEC_messageReceive_sendEvent_942644 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_sendEvent_942644 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_sendEvent_942644 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_942644.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_201917\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_201917 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_201917.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_sendEvent_201917 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_201917.next ();\n\n                                       // check object __DEC_messageSend_sendEvent_201917 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_sendEvent_201917 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_sendEvent_201917 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_sendEvent_201917.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link message from message to __DEC_message_message_745394\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageTo__DEC_message_message_745394 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_745394.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_message_message_745394 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_745394.next ();\n\n                                       // check object __DEC_message_message_745394 is really bound\n                                       JavaSDM.ensure ( __DEC_message_message_745394 != null );\n                                       // check isomorphic binding between objects __DEC_message_message_745394 and messageReceive \n                                       JavaSDM.ensure ( !__DEC_message_message_745394.equals (messageReceive) );\n\n                                       // check isomorphic binding between objects __DEC_message_message_745394 and messageSend \n                                       JavaSDM.ensure ( !__DEC_message_message_745394.equals (messageSend) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_covered is really bound\n                              JavaSDM.ensure ( _edge_covered != null );\n                              // check object _edge_coveredBy is really bound\n                              JavaSDM.ensure ( _edge_coveredBy != null );\n                              // check object combo is really bound\n                              JavaSDM.ensure ( combo != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object message is really bound\n                              JavaSDM.ensure ( message != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object operand is really bound\n                              JavaSDM.ensure ( operand != null );\n                              // check object sysLine is really bound\n                              JavaSDM.ensure ( sysLine != null );\n                              // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                              JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                              // check isomorphic binding between objects sysLine and line \n                              JavaSDM.ensure ( !sysLine.equals (line) );\n\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from messageReceive to operand\n                              JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                              ));\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from messageSend to operand\n                              JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                              )));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link message from message to interaction\n                              JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                              ));\n\n                              // check link message from messageReceive to message\n                              JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                              ));\n\n                              // check link message from messageSend to message\n                              JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                              ));\n\n                              // check link receiveEvent from message to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                              ));\n\n                              // check link receiveEvent from message to messageSend\n                              JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                              )));\n\n                              // check link sendEvent from message to messageSend\n                              JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                              ));\n\n                              // check link sendEvent from message to messageReceive\n                              JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                              )));\n\n                              // check link operand from operand to combo\n                              JavaSDM.ensure (combo.equals (operand.eContainer()\n                              ));\n\n                              // check link src from _edge_covered to operand\n                              JavaSDM.ensure (operand.equals (_edge_covered.getSrc ()\n                              ));\n\n                              // check link src from _edge_coveredBy to line\n                              JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n                              ));\n\n                              // check link trg from _edge_covered to line\n                              JavaSDM.ensure (line.equals (_edge_covered.getTrg ()\n                              ));\n\n                              // check link trg from _edge_coveredBy to operand\n                              JavaSDM.ensure (operand.equals (_edge_coveredBy.getTrg ()\n                              ));\n\n                              // check link covered from line to combo\n                              JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                              // check link covered from combo to sysLine\n                              JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                              // check link covered from messageSend to sysLine\n                              JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                              // check link covered from line to operand\n                              JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                              // check link covered from operand to sysLine\n                              JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_169(EMoflonEdge _edge_covered);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_407957 = null;\n      InteractionOperand __DEC_messageReceive_fragment_459901 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_705685 = null;\n      InteractionOperand __DEC_messageSend_fragment_600620 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_288258 = null;\n      Message __DEC_messageReceive_receiveEvent_288258 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_279995 = null;\n      Message __DEC_messageSend_receiveEvent_279995 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_107824 = null;\n      Message __DEC_messageReceive_sendEvent_107824 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_824959 = null;\n      Message __DEC_messageSend_sendEvent_824959 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_407282 = null;\n      MessageEnd __DEC_message_message_407282 = null;\n      Match match = null;\n      Iterator fujaba__IterSysLineToOperand = null;\n      InteractionOperand operand = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterSysLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Iterator fujaba__IterComboToSysLine = null;\n      Lifeline sysLine = null;\n      CombinedFragment combo = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_coveredBy is really bound\n         JavaSDM.ensure ( _edge_coveredBy != null );\n         // bind object\n         _TmpObject = _edge_coveredBy.getSrc ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // bind object\n         interaction = line.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         _TmpObject = _edge_coveredBy.getTrg ();\n\n         // ensure correct type and really bound of object combo\n         JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n         combo = (CombinedFragment) _TmpObject;\n\n         // check link covered from line to combo\n         JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n         // iterate to-many link covered from combo to sysLine\n         fujaba__Success = false;\n\n         fujaba__IterComboToSysLine = new ArrayList(combo.getCovered()).iterator ();\n\n         while ( fujaba__IterComboToSysLine.hasNext () )\n         {\n            try\n            {\n               sysLine = (Lifeline) fujaba__IterComboToSysLine.next ();\n\n               // check object sysLine is really bound\n               JavaSDM.ensure ( sysLine != null );\n               // check isomorphic binding between objects sysLine and line \n               JavaSDM.ensure ( !sysLine.equals (line) );\n\n               // iterate to-many link covered from sysLine to messageSend\n               fujaba__Success = false;\n\n               fujaba__IterSysLineToMessageSend = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterSysLineToMessageSend.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterSysLineToMessageSend.next ();\n\n                     // ensure correct type and really bound of object messageSend\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                     // bind object\n                     message = messageSend.getMessage ();\n\n                     // check object message is really bound\n                     JavaSDM.ensure ( message != null );\n\n                     // check link message from message to interaction\n                     JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                     ));\n\n                     // bind object\n                     _TmpObject = message.getReceiveEvent ();\n\n                     // ensure correct type and really bound of object messageReceive\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n                     // check isomorphic binding between objects messageSend and messageReceive \n                     JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                     // check link message from messageReceive to message\n                     JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                     ));\n\n                     // check link sendEvent from message to messageSend\n                     JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                     ));\n\n                     // iterate to-many link covered from sysLine to operand\n                     fujaba__Success = false;\n\n                     fujaba__IterSysLineToOperand = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n                     while ( fujaba__IterSysLineToOperand.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterSysLineToOperand.next ();\n\n                           // ensure correct type and really bound of object operand\n                           JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                           operand = (InteractionOperand) _TmpObject;\n                           // check link fragment from messageReceive to operand\n                           JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                           ));\n\n                           // check link operand from operand to combo\n                           JavaSDM.ensure (combo.equals (operand.eContainer()\n                           ));\n\n                           // check link covered from line to operand\n                           JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_enclosingInteraction_407957 = messageReceive.getEnclosingInteraction ();\n\n                                 // check object __DEC_messageReceive_enclosingInteraction_407957 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_407957 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_407957 and interaction \n                                 JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_407957.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_fragment_459901 = messageReceive.getEnclosingOperand ();\n\n                                 // check object __DEC_messageReceive_fragment_459901 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_fragment_459901 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_fragment_459901 and operand \n                                 JavaSDM.ensure ( !__DEC_messageReceive_fragment_459901.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_enclosingInteraction_705685 = messageSend.getEnclosingInteraction ();\n\n                                 // check object __DEC_messageSend_enclosingInteraction_705685 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_705685 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_705685 and interaction \n                                 JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_705685.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_fragment_600620 = messageSend.getEnclosingOperand ();\n\n                                 // check object __DEC_messageSend_fragment_600620 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_fragment_600620 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_fragment_600620 and operand \n                                 JavaSDM.ensure ( !__DEC_messageSend_fragment_600620.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_288258\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_288258 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_288258.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_receiveEvent_288258 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_288258.next ();\n\n                                       // check object __DEC_messageReceive_receiveEvent_288258 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_288258 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_288258 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_288258.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_279995\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_279995 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_279995.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_receiveEvent_279995 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_279995.next ();\n\n                                       // check object __DEC_messageSend_receiveEvent_279995 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_receiveEvent_279995 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_receiveEvent_279995 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_279995.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_107824\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_107824 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_107824.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_sendEvent_107824 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_107824.next ();\n\n                                       // check object __DEC_messageReceive_sendEvent_107824 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_sendEvent_107824 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_sendEvent_107824 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_107824.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_824959\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_824959 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_824959.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_sendEvent_824959 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_824959.next ();\n\n                                       // check object __DEC_messageSend_sendEvent_824959 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_sendEvent_824959 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_sendEvent_824959 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_sendEvent_824959.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link message from message to __DEC_message_message_407282\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageTo__DEC_message_message_407282 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_407282.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_message_message_407282 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_407282.next ();\n\n                                       // check object __DEC_message_message_407282 is really bound\n                                       JavaSDM.ensure ( __DEC_message_message_407282 != null );\n                                       // check isomorphic binding between objects __DEC_message_message_407282 and messageReceive \n                                       JavaSDM.ensure ( !__DEC_message_message_407282.equals (messageReceive) );\n\n                                       // check isomorphic binding between objects __DEC_message_message_407282 and messageSend \n                                       JavaSDM.ensure ( !__DEC_message_message_407282.equals (messageSend) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_coveredBy is really bound\n                              JavaSDM.ensure ( _edge_coveredBy != null );\n                              // check object combo is really bound\n                              JavaSDM.ensure ( combo != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object message is really bound\n                              JavaSDM.ensure ( message != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object operand is really bound\n                              JavaSDM.ensure ( operand != null );\n                              // check object sysLine is really bound\n                              JavaSDM.ensure ( sysLine != null );\n                              // check isomorphic binding between objects sysLine and line \n                              JavaSDM.ensure ( !sysLine.equals (line) );\n\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from messageReceive to operand\n                              JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                              ));\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from messageSend to operand\n                              JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                              )));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link message from message to interaction\n                              JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                              ));\n\n                              // check link message from messageReceive to message\n                              JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                              ));\n\n                              // check link message from messageSend to message\n                              JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                              ));\n\n                              // check link receiveEvent from message to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                              ));\n\n                              // check link receiveEvent from message to messageSend\n                              JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                              )));\n\n                              // check link sendEvent from message to messageSend\n                              JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                              ));\n\n                              // check link sendEvent from message to messageReceive\n                              JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                              )));\n\n                              // check link operand from operand to combo\n                              JavaSDM.ensure (combo.equals (operand.eContainer()\n                              ));\n\n                              // check link src from _edge_coveredBy to line\n                              JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n                              ));\n\n                              // check link trg from _edge_coveredBy to combo\n                              JavaSDM.ensure (combo.equals (_edge_coveredBy.getTrg ()\n                              ));\n\n                              // check link covered from line to combo\n                              JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                              // check link covered from combo to sysLine\n                              JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                              // check link covered from messageSend to sysLine\n                              JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                              // check link covered from line to operand\n                              JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                              // check link covered from operand to sysLine\n                              JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_170(
			EMoflonEdge _edge_coveredBy);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_436733 = null;\n      InteractionOperand __DEC_messageReceive_fragment_779736 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_95608 = null;\n      InteractionOperand __DEC_messageSend_fragment_783281 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_886668 = null;\n      Message __DEC_messageReceive_receiveEvent_886668 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_430486 = null;\n      Message __DEC_messageSend_receiveEvent_430486 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_870556 = null;\n      Message __DEC_messageReceive_sendEvent_870556 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_748795 = null;\n      Message __DEC_messageSend_sendEvent_748795 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_314687 = null;\n      MessageEnd __DEC_message_message_314687 = null;\n      Match match = null;\n      Iterator fujaba__IterComboTo_edge_coveredBy = null;\n      EMoflonEdge _edge_coveredBy = null;\n      Iterator fujaba__IterSysLineToOperand = null;\n      InteractionOperand operand = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterSysLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Iterator fujaba__IterComboToSysLine = null;\n      Lifeline sysLine = null;\n      CombinedFragment combo = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_covered is really bound\n         JavaSDM.ensure ( _edge_covered != null );\n         // bind object\n         _TmpObject = _edge_covered.getTrg ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // bind object\n         interaction = line.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         _TmpObject = _edge_covered.getSrc ();\n\n         // ensure correct type and really bound of object combo\n         JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n         combo = (CombinedFragment) _TmpObject;\n\n         // check link covered from line to combo\n         JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n         // iterate to-many link covered from combo to sysLine\n         fujaba__Success = false;\n\n         fujaba__IterComboToSysLine = new ArrayList(combo.getCovered()).iterator ();\n\n         while ( fujaba__IterComboToSysLine.hasNext () )\n         {\n            try\n            {\n               sysLine = (Lifeline) fujaba__IterComboToSysLine.next ();\n\n               // check object sysLine is really bound\n               JavaSDM.ensure ( sysLine != null );\n               // check isomorphic binding between objects sysLine and line \n               JavaSDM.ensure ( !sysLine.equals (line) );\n\n               // iterate to-many link covered from sysLine to messageSend\n               fujaba__Success = false;\n\n               fujaba__IterSysLineToMessageSend = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterSysLineToMessageSend.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterSysLineToMessageSend.next ();\n\n                     // ensure correct type and really bound of object messageSend\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                     // bind object\n                     message = messageSend.getMessage ();\n\n                     // check object message is really bound\n                     JavaSDM.ensure ( message != null );\n\n                     // check link message from message to interaction\n                     JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                     ));\n\n                     // bind object\n                     _TmpObject = message.getReceiveEvent ();\n\n                     // ensure correct type and really bound of object messageReceive\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n                     // check isomorphic binding between objects messageSend and messageReceive \n                     JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                     // check link message from messageReceive to message\n                     JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                     ));\n\n                     // check link sendEvent from message to messageSend\n                     JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                     ));\n\n                     // iterate to-many link covered from sysLine to operand\n                     fujaba__Success = false;\n\n                     fujaba__IterSysLineToOperand = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n                     while ( fujaba__IterSysLineToOperand.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterSysLineToOperand.next ();\n\n                           // ensure correct type and really bound of object operand\n                           JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                           operand = (InteractionOperand) _TmpObject;\n                           // check link fragment from messageReceive to operand\n                           JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                           ));\n\n                           // check link operand from operand to combo\n                           JavaSDM.ensure (combo.equals (operand.eContainer()\n                           ));\n\n                           // check link covered from line to operand\n                           JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                           // iterate to-many link trg from combo to _edge_coveredBy\n                           fujaba__Success = false;\n\n                           fujaba__IterComboTo_edge_coveredBy = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(combo,EMoflonEdge.class,\"trg\")).iterator ();\n\n                           while ( fujaba__IterComboTo_edge_coveredBy.hasNext () )\n                           {\n                              try\n                              {\n                                 _edge_coveredBy = (EMoflonEdge) fujaba__IterComboTo_edge_coveredBy.next ();\n\n                                 // check object _edge_coveredBy is really bound\n                                 JavaSDM.ensure ( _edge_coveredBy != null );\n                                 // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                                 JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                                 // check link src from _edge_coveredBy to line\n                                 JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n                                 ));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_enclosingInteraction_436733 = messageReceive.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageReceive_enclosingInteraction_436733 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_436733 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_436733 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_436733.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_fragment_779736 = messageReceive.getEnclosingOperand ();\n\n                                       // check object __DEC_messageReceive_fragment_779736 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_fragment_779736 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_fragment_779736 and operand \n                                       JavaSDM.ensure ( !__DEC_messageReceive_fragment_779736.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_enclosingInteraction_95608 = messageSend.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageSend_enclosingInteraction_95608 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_95608 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_95608 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_95608.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_fragment_783281 = messageSend.getEnclosingOperand ();\n\n                                       // check object __DEC_messageSend_fragment_783281 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_fragment_783281 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_fragment_783281 and operand \n                                       JavaSDM.ensure ( !__DEC_messageSend_fragment_783281.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_886668\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_886668 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_886668.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_receiveEvent_886668 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_886668.next ();\n\n                                             // check object __DEC_messageReceive_receiveEvent_886668 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_886668 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_886668 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_886668.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_430486\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_430486 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_430486.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_receiveEvent_430486 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_430486.next ();\n\n                                             // check object __DEC_messageSend_receiveEvent_430486 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_receiveEvent_430486 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_receiveEvent_430486 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_430486.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_870556\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_870556 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_870556.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_sendEvent_870556 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_870556.next ();\n\n                                             // check object __DEC_messageReceive_sendEvent_870556 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_sendEvent_870556 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_sendEvent_870556 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_870556.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_748795\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_748795 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_748795.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_sendEvent_748795 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_748795.next ();\n\n                                             // check object __DEC_messageSend_sendEvent_748795 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_sendEvent_748795 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_sendEvent_748795 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_sendEvent_748795.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link message from message to __DEC_message_message_314687\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageTo__DEC_message_message_314687 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_314687.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_message_message_314687 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_314687.next ();\n\n                                             // check object __DEC_message_message_314687 is really bound\n                                             JavaSDM.ensure ( __DEC_message_message_314687 != null );\n                                             // check isomorphic binding between objects __DEC_message_message_314687 and messageReceive \n                                             JavaSDM.ensure ( !__DEC_message_message_314687.equals (messageReceive) );\n\n                                             // check isomorphic binding between objects __DEC_message_message_314687 and messageSend \n                                             JavaSDM.ensure ( !__DEC_message_message_314687.equals (messageSend) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_covered is really bound\n                                    JavaSDM.ensure ( _edge_covered != null );\n                                    // check object _edge_coveredBy is really bound\n                                    JavaSDM.ensure ( _edge_coveredBy != null );\n                                    // check object combo is really bound\n                                    JavaSDM.ensure ( combo != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object message is really bound\n                                    JavaSDM.ensure ( message != null );\n                                    // check object messageReceive is really bound\n                                    JavaSDM.ensure ( messageReceive != null );\n                                    // check object messageSend is really bound\n                                    JavaSDM.ensure ( messageSend != null );\n                                    // check object operand is really bound\n                                    JavaSDM.ensure ( operand != null );\n                                    // check object sysLine is really bound\n                                    JavaSDM.ensure ( sysLine != null );\n                                    // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                                    JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                                    // check isomorphic binding between objects sysLine and line \n                                    JavaSDM.ensure ( !sysLine.equals (line) );\n\n                                    // check isomorphic binding between objects messageSend and messageReceive \n                                    JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                    // check link fragment from messageReceive to operand\n                                    JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                                    ));\n\n                                    // check link fragment from messageReceive to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to operand\n                                    JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                                    )));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link message from message to interaction\n                                    JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                                    ));\n\n                                    // check link message from messageReceive to message\n                                    JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                                    ));\n\n                                    // check link message from messageSend to message\n                                    JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageSend\n                                    JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                                    )));\n\n                                    // check link sendEvent from message to messageSend\n                                    JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                                    ));\n\n                                    // check link sendEvent from message to messageReceive\n                                    JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                                    )));\n\n                                    // check link operand from operand to combo\n                                    JavaSDM.ensure (combo.equals (operand.eContainer()\n                                    ));\n\n                                    // check link src from _edge_covered to combo\n                                    JavaSDM.ensure (combo.equals (_edge_covered.getSrc ()\n                                    ));\n\n                                    // check link src from _edge_coveredBy to line\n                                    JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_covered to line\n                                    JavaSDM.ensure (line.equals (_edge_covered.getTrg ()\n                                    ));\n\n                                    // check link trg from _edge_coveredBy to combo\n                                    JavaSDM.ensure (combo.equals (_edge_coveredBy.getTrg ()\n                                    ));\n\n                                    // check link covered from line to combo\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                                    // check link covered from combo to sysLine\n                                    JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                                    // check link covered from messageSend to sysLine\n                                    JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                                    // check link covered from line to operand\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                                    // check link covered from operand to sysLine\n                                    JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_BWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_171(EMoflonEdge _edge_covered);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_step_steps_590124 = null;\n      Match match = null;\n      Iterator fujaba__IterPackageDeclarationToSysActor = null;\n      Actor sysActor = null;\n      PackageDeclaration packageDeclaration = null;\n      Actor actor = null;\n      NormalStep step = null;\n      UseCase useCase = null;\n      NamedFlow flow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_steps is really bound\n         JavaSDM.ensure ( _edge_steps != null );\n         // bind object\n         _TmpObject = _edge_steps.getSrc ();\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof NamedFlow );\n         flow = (NamedFlow) _TmpObject;\n\n         // bind object\n         useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow.eContainer() : null;\n\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(useCase.getFlows().contains(flow));\n\n         // bind object\n         _TmpObject = _edge_steps.getTrg ();\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n\n         // bind object\n         actor = step.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // bind object\n         packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor.eContainer() : null;\n\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(packageDeclaration.getActors().contains(actor));\n\n         // check link steps from step to flow\n         JavaSDM.ensure (flow.equals (step.eContainer()\n         ));\n\n         // iterate to-many link actors from packageDeclaration to sysActor\n         fujaba__Success = false;\n\n         fujaba__IterPackageDeclarationToSysActor = new ArrayList(packageDeclaration.getActors()).iterator ();\n\n         while ( fujaba__IterPackageDeclarationToSysActor.hasNext () )\n         {\n            try\n            {\n               sysActor = (Actor) fujaba__IterPackageDeclarationToSysActor.next ();\n\n               // check object sysActor is really bound\n               JavaSDM.ensure ( sysActor != null );\n               // check isomorphic binding between objects sysActor and actor \n               JavaSDM.ensure ( !sysActor.equals (actor) );\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_step_steps_590124 = step.eContainer() instanceof Flow ? (Flow) step.eContainer() : null;\n\n                     // check object __DEC_step_steps_590124 is really bound\n                     JavaSDM.ensure ( __DEC_step_steps_590124 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_step_steps_590124.getSteps().contains(step));\n\n                     // check isomorphic binding between objects __DEC_step_steps_590124 and flow \n                     JavaSDM.ensure ( !__DEC_step_steps_590124.equals (flow) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_steps is really bound\n                  JavaSDM.ensure ( _edge_steps != null );\n                  // check object actor is really bound\n                  JavaSDM.ensure ( actor != null );\n                  // check object flow is really bound\n                  JavaSDM.ensure ( flow != null );\n                  // check object packageDeclaration is really bound\n                  JavaSDM.ensure ( packageDeclaration != null );\n                  // check object step is really bound\n                  JavaSDM.ensure ( step != null );\n                  // check object sysActor is really bound\n                  JavaSDM.ensure ( sysActor != null );\n                  // check object useCase is really bound\n                  JavaSDM.ensure ( useCase != null );\n                  // check isomorphic binding between objects sysActor and actor \n                  JavaSDM.ensure ( !sysActor.equals (actor) );\n\n                  // check link actor from step to actor\n                  JavaSDM.ensure (actor.equals (step.getActor ()\n                  ));\n\n                  // check link actors from actor to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                  ));\n\n                  // check link actors from sysActor to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (sysActor.eContainer()\n                  ));\n\n                  // check link flows from flow to useCase\n                  JavaSDM.ensure (useCase.equals (flow.eContainer()\n                  ));\n\n                  // check link src from _edge_steps to flow\n                  JavaSDM.ensure (flow.equals (_edge_steps.getSrc ()\n                  ));\n\n                  // check link steps from step to flow\n                  JavaSDM.ensure (flow.equals (step.eContainer()\n                  ));\n\n                  // check link trg from _edge_steps to step\n                  JavaSDM.ensure (step.equals (_edge_steps.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,packageDeclaration,sysActor,actor,flow,useCase,step);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_36(EMoflonEdge _edge_steps);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_step_steps_355513 = null;\n      Match match = null;\n      Iterator fujaba__IterPackageDeclarationToSysActor = null;\n      Actor sysActor = null;\n      PackageDeclaration packageDeclaration = null;\n      Actor actor = null;\n      UseCase useCase = null;\n      NamedFlow flow = null;\n      NormalStep step = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_actor is really bound\n         JavaSDM.ensure ( _edge_actor != null );\n         // bind object\n         _TmpObject = _edge_actor.getSrc ();\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n\n         // bind object\n         _TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step.eContainer() : null;\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof NamedFlow );\n         flow = (NamedFlow) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(step));\n\n         // bind object\n         useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow.eContainer() : null;\n\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(useCase.getFlows().contains(flow));\n\n         // bind object\n         _TmpObject = _edge_actor.getTrg ();\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n\n         // check link actor from step to actor\n         JavaSDM.ensure (actor.equals (step.getActor ()\n         ));\n\n         // bind object\n         packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor.eContainer() : null;\n\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(packageDeclaration.getActors().contains(actor));\n\n         // iterate to-many link actors from packageDeclaration to sysActor\n         fujaba__Success = false;\n\n         fujaba__IterPackageDeclarationToSysActor = new ArrayList(packageDeclaration.getActors()).iterator ();\n\n         while ( fujaba__IterPackageDeclarationToSysActor.hasNext () )\n         {\n            try\n            {\n               sysActor = (Actor) fujaba__IterPackageDeclarationToSysActor.next ();\n\n               // check object sysActor is really bound\n               JavaSDM.ensure ( sysActor != null );\n               // check isomorphic binding between objects sysActor and actor \n               JavaSDM.ensure ( !sysActor.equals (actor) );\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_step_steps_355513 = step.eContainer() instanceof Flow ? (Flow) step.eContainer() : null;\n\n                     // check object __DEC_step_steps_355513 is really bound\n                     JavaSDM.ensure ( __DEC_step_steps_355513 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_step_steps_355513.getSteps().contains(step));\n\n                     // check isomorphic binding between objects __DEC_step_steps_355513 and flow \n                     JavaSDM.ensure ( !__DEC_step_steps_355513.equals (flow) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_actor is really bound\n                  JavaSDM.ensure ( _edge_actor != null );\n                  // check object actor is really bound\n                  JavaSDM.ensure ( actor != null );\n                  // check object flow is really bound\n                  JavaSDM.ensure ( flow != null );\n                  // check object packageDeclaration is really bound\n                  JavaSDM.ensure ( packageDeclaration != null );\n                  // check object step is really bound\n                  JavaSDM.ensure ( step != null );\n                  // check object sysActor is really bound\n                  JavaSDM.ensure ( sysActor != null );\n                  // check object useCase is really bound\n                  JavaSDM.ensure ( useCase != null );\n                  // check isomorphic binding between objects sysActor and actor \n                  JavaSDM.ensure ( !sysActor.equals (actor) );\n\n                  // check link actor from step to actor\n                  JavaSDM.ensure (actor.equals (step.getActor ()\n                  ));\n\n                  // check link actors from actor to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                  ));\n\n                  // check link actors from sysActor to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (sysActor.eContainer()\n                  ));\n\n                  // check link flows from flow to useCase\n                  JavaSDM.ensure (useCase.equals (flow.eContainer()\n                  ));\n\n                  // check link src from _edge_actor to step\n                  JavaSDM.ensure (step.equals (_edge_actor.getSrc ()\n                  ));\n\n                  // check link steps from step to flow\n                  JavaSDM.ensure (flow.equals (step.eContainer()\n                  ));\n\n                  // check link trg from _edge_actor to actor\n                  JavaSDM.ensure (actor.equals (_edge_actor.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,packageDeclaration,sysActor,actor,flow,useCase,step);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_37(EMoflonEdge _edge_actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_445578 = null;\n      InteractionOperand __DEC_messageReceive_fragment_490398 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_838197 = null;\n      InteractionOperand __DEC_messageSend_fragment_584864 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_312021 = null;\n      Message __DEC_messageReceive_receiveEvent_312021 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_2090 = null;\n      Message __DEC_messageSend_receiveEvent_2090 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_865765 = null;\n      Message __DEC_messageReceive_sendEvent_865765 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_819961 = null;\n      Message __DEC_messageSend_sendEvent_819961 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_845927 = null;\n      MessageEnd __DEC_message_message_845927 = null;\n      Match match = null;\n      Iterator fujaba__IterSysLineToOperand = null;\n      InteractionOperand operand = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterComboToLine = null;\n      Lifeline line = null;\n      Iterator fujaba__IterSysLineToCombo = null;\n      CombinedFragment combo = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      MessageOccurrenceSpecification messageSend = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sendEvent is really bound\n         JavaSDM.ensure ( _edge_sendEvent != null );\n         // bind object\n         _TmpObject = _edge_sendEvent.getTrg ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         message = messageSend.getMessage ();\n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // check link sendEvent from message to messageSend\n         JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n         ));\n\n         // check link src from _edge_sendEvent to message\n         JavaSDM.ensure (message.equals (_edge_sendEvent.getSrc ()\n         ));\n\n         // iterate to-many link covered from messageSend to sysLine\n         fujaba__Success = false;\n\n         fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageSendToSysLine.hasNext () )\n         {\n            try\n            {\n               sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n               // check object sysLine is really bound\n               JavaSDM.ensure ( sysLine != null );\n               // iterate to-many link covered from sysLine to combo\n               fujaba__Success = false;\n\n               fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterSysLineToCombo.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterSysLineToCombo.next ();\n\n                     // ensure correct type and really bound of object combo\n                     JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n                     combo = (CombinedFragment) _TmpObject;\n                     // iterate to-many link covered from combo to line\n                     fujaba__Success = false;\n\n                     fujaba__IterComboToLine = new ArrayList(combo.getCovered()).iterator ();\n\n                     while ( fujaba__IterComboToLine.hasNext () )\n                     {\n                        try\n                        {\n                           line = (Lifeline) fujaba__IterComboToLine.next ();\n\n                           // check object line is really bound\n                           JavaSDM.ensure ( line != null );\n                           // check isomorphic binding between objects sysLine and line \n                           JavaSDM.ensure ( !sysLine.equals (line) );\n\n                           // bind object\n                           interaction = line.getInteraction ();\n\n                           // check object interaction is really bound\n                           JavaSDM.ensure ( interaction != null );\n\n                           // check link message from message to interaction\n                           JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                           ));\n\n                           // iterate to-many link covered from sysLine to operand\n                           fujaba__Success = false;\n\n                           fujaba__IterSysLineToOperand = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n                           while ( fujaba__IterSysLineToOperand.hasNext () )\n                           {\n                              try\n                              {\n                                 _TmpObject =  fujaba__IterSysLineToOperand.next ();\n\n                                 // ensure correct type and really bound of object operand\n                                 JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                                 operand = (InteractionOperand) _TmpObject;\n                                 // check link fragment from messageReceive to operand\n                                 JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                                 ));\n\n                                 // check link operand from operand to combo\n                                 JavaSDM.ensure (combo.equals (operand.eContainer()\n                                 ));\n\n                                 // check link covered from line to operand\n                                 JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_enclosingInteraction_445578 = messageReceive.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageReceive_enclosingInteraction_445578 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_445578 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_445578 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_445578.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_fragment_490398 = messageReceive.getEnclosingOperand ();\n\n                                       // check object __DEC_messageReceive_fragment_490398 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_fragment_490398 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_fragment_490398 and operand \n                                       JavaSDM.ensure ( !__DEC_messageReceive_fragment_490398.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_enclosingInteraction_838197 = messageSend.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageSend_enclosingInteraction_838197 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_838197 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_838197 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_838197.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_fragment_584864 = messageSend.getEnclosingOperand ();\n\n                                       // check object __DEC_messageSend_fragment_584864 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_fragment_584864 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_fragment_584864 and operand \n                                       JavaSDM.ensure ( !__DEC_messageSend_fragment_584864.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_312021\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_312021 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_312021.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_receiveEvent_312021 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_312021.next ();\n\n                                             // check object __DEC_messageReceive_receiveEvent_312021 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_312021 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_312021 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_312021.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_2090\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_2090 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_2090.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_receiveEvent_2090 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_2090.next ();\n\n                                             // check object __DEC_messageSend_receiveEvent_2090 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_receiveEvent_2090 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_receiveEvent_2090 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_2090.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_865765\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_865765 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_865765.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_sendEvent_865765 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_865765.next ();\n\n                                             // check object __DEC_messageReceive_sendEvent_865765 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_sendEvent_865765 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_sendEvent_865765 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_865765.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_819961\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_819961 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_819961.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_sendEvent_819961 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_819961.next ();\n\n                                             // check object __DEC_messageSend_sendEvent_819961 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_sendEvent_819961 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_sendEvent_819961 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_sendEvent_819961.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link message from message to __DEC_message_message_845927\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageTo__DEC_message_message_845927 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_845927.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_message_message_845927 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_845927.next ();\n\n                                             // check object __DEC_message_message_845927 is really bound\n                                             JavaSDM.ensure ( __DEC_message_message_845927 != null );\n                                             // check isomorphic binding between objects __DEC_message_message_845927 and messageReceive \n                                             JavaSDM.ensure ( !__DEC_message_message_845927.equals (messageReceive) );\n\n                                             // check isomorphic binding between objects __DEC_message_message_845927 and messageSend \n                                             JavaSDM.ensure ( !__DEC_message_message_845927.equals (messageSend) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_sendEvent is really bound\n                                    JavaSDM.ensure ( _edge_sendEvent != null );\n                                    // check object combo is really bound\n                                    JavaSDM.ensure ( combo != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object message is really bound\n                                    JavaSDM.ensure ( message != null );\n                                    // check object messageReceive is really bound\n                                    JavaSDM.ensure ( messageReceive != null );\n                                    // check object messageSend is really bound\n                                    JavaSDM.ensure ( messageSend != null );\n                                    // check object operand is really bound\n                                    JavaSDM.ensure ( operand != null );\n                                    // check object sysLine is really bound\n                                    JavaSDM.ensure ( sysLine != null );\n                                    // check isomorphic binding between objects sysLine and line \n                                    JavaSDM.ensure ( !sysLine.equals (line) );\n\n                                    // check isomorphic binding between objects messageSend and messageReceive \n                                    JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                    // check link fragment from messageReceive to operand\n                                    JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                                    ));\n\n                                    // check link fragment from messageReceive to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to operand\n                                    JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                                    )));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link message from message to interaction\n                                    JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                                    ));\n\n                                    // check link message from messageReceive to message\n                                    JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                                    ));\n\n                                    // check link message from messageSend to message\n                                    JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageSend\n                                    JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                                    )));\n\n                                    // check link sendEvent from message to messageSend\n                                    JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                                    ));\n\n                                    // check link sendEvent from message to messageReceive\n                                    JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                                    )));\n\n                                    // check link operand from operand to combo\n                                    JavaSDM.ensure (combo.equals (operand.eContainer()\n                                    ));\n\n                                    // check link src from _edge_sendEvent to message\n                                    JavaSDM.ensure (message.equals (_edge_sendEvent.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_sendEvent to messageSend\n                                    JavaSDM.ensure (messageSend.equals (_edge_sendEvent.getTrg ()\n                                    ));\n\n                                    // check link covered from line to combo\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                                    // check link covered from combo to sysLine\n                                    JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                                    // check link covered from messageSend to sysLine\n                                    JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                                    // check link covered from line to operand\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                                    // check link covered from operand to sysLine\n                                    JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_BWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_172(
			EMoflonEdge _edge_sendEvent);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_573997 = null;\n      InteractionOperand __DEC_messageReceive_fragment_459216 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_925349 = null;\n      InteractionOperand __DEC_messageSend_fragment_671485 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_433299 = null;\n      Message __DEC_messageReceive_receiveEvent_433299 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_324393 = null;\n      Message __DEC_messageSend_receiveEvent_324393 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_494611 = null;\n      Message __DEC_messageReceive_sendEvent_494611 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_941256 = null;\n      Message __DEC_messageSend_sendEvent_941256 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_48551 = null;\n      MessageEnd __DEC_message_message_48551 = null;\n      Match match = null;\n      Iterator fujaba__IterSysLineToOperand = null;\n      InteractionOperand operand = null;\n      Iterator fujaba__IterComboToLine = null;\n      Lifeline line = null;\n      Iterator fujaba__IterSysLineToCombo = null;\n      CombinedFragment combo = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageSend = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Interaction interaction = null;\n      Message message = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_receiveEvent is really bound\n         JavaSDM.ensure ( _edge_receiveEvent != null );\n         // bind object\n         _TmpObject = _edge_receiveEvent.getSrc ();\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n\n         // bind object\n         interaction = message.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // bind object\n         _TmpObject = message.getSendEvent ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check link message from messageSend to message\n         JavaSDM.ensure (message.equals (messageSend.getMessage ()\n         ));\n\n         // check link trg from _edge_receiveEvent to messageReceive\n         JavaSDM.ensure (messageReceive.equals (_edge_receiveEvent.getTrg ()\n         ));\n\n         // iterate to-many link covered from messageSend to sysLine\n         fujaba__Success = false;\n\n         fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageSendToSysLine.hasNext () )\n         {\n            try\n            {\n               sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n               // check object sysLine is really bound\n               JavaSDM.ensure ( sysLine != null );\n               // iterate to-many link covered from sysLine to combo\n               fujaba__Success = false;\n\n               fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterSysLineToCombo.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterSysLineToCombo.next ();\n\n                     // ensure correct type and really bound of object combo\n                     JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n                     combo = (CombinedFragment) _TmpObject;\n                     // iterate to-many link covered from combo to line\n                     fujaba__Success = false;\n\n                     fujaba__IterComboToLine = new ArrayList(combo.getCovered()).iterator ();\n\n                     while ( fujaba__IterComboToLine.hasNext () )\n                     {\n                        try\n                        {\n                           line = (Lifeline) fujaba__IterComboToLine.next ();\n\n                           // check object line is really bound\n                           JavaSDM.ensure ( line != null );\n                           // check isomorphic binding between objects sysLine and line \n                           JavaSDM.ensure ( !sysLine.equals (line) );\n\n                           // check link lifeline from line to interaction\n                           JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                           ));\n\n                           // iterate to-many link covered from sysLine to operand\n                           fujaba__Success = false;\n\n                           fujaba__IterSysLineToOperand = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n                           while ( fujaba__IterSysLineToOperand.hasNext () )\n                           {\n                              try\n                              {\n                                 _TmpObject =  fujaba__IterSysLineToOperand.next ();\n\n                                 // ensure correct type and really bound of object operand\n                                 JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                                 operand = (InteractionOperand) _TmpObject;\n                                 // check link fragment from messageReceive to operand\n                                 JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                                 ));\n\n                                 // check link operand from operand to combo\n                                 JavaSDM.ensure (combo.equals (operand.eContainer()\n                                 ));\n\n                                 // check link covered from line to operand\n                                 JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_enclosingInteraction_573997 = messageReceive.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageReceive_enclosingInteraction_573997 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_573997 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_573997 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_573997.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_fragment_459216 = messageReceive.getEnclosingOperand ();\n\n                                       // check object __DEC_messageReceive_fragment_459216 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_fragment_459216 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_fragment_459216 and operand \n                                       JavaSDM.ensure ( !__DEC_messageReceive_fragment_459216.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_enclosingInteraction_925349 = messageSend.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageSend_enclosingInteraction_925349 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_925349 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_925349 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_925349.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_fragment_671485 = messageSend.getEnclosingOperand ();\n\n                                       // check object __DEC_messageSend_fragment_671485 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_fragment_671485 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_fragment_671485 and operand \n                                       JavaSDM.ensure ( !__DEC_messageSend_fragment_671485.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_433299\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_433299 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_433299.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_receiveEvent_433299 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_433299.next ();\n\n                                             // check object __DEC_messageReceive_receiveEvent_433299 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_433299 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_433299 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_433299.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_324393\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_324393 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_324393.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_receiveEvent_324393 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_324393.next ();\n\n                                             // check object __DEC_messageSend_receiveEvent_324393 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_receiveEvent_324393 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_receiveEvent_324393 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_324393.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_494611\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_494611 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_494611.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_sendEvent_494611 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_494611.next ();\n\n                                             // check object __DEC_messageReceive_sendEvent_494611 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_sendEvent_494611 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_sendEvent_494611 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_494611.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_941256\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_941256 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_941256.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_sendEvent_941256 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_941256.next ();\n\n                                             // check object __DEC_messageSend_sendEvent_941256 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_sendEvent_941256 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_sendEvent_941256 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_sendEvent_941256.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link message from message to __DEC_message_message_48551\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageTo__DEC_message_message_48551 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_48551.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_message_message_48551 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_48551.next ();\n\n                                             // check object __DEC_message_message_48551 is really bound\n                                             JavaSDM.ensure ( __DEC_message_message_48551 != null );\n                                             // check isomorphic binding between objects __DEC_message_message_48551 and messageReceive \n                                             JavaSDM.ensure ( !__DEC_message_message_48551.equals (messageReceive) );\n\n                                             // check isomorphic binding between objects __DEC_message_message_48551 and messageSend \n                                             JavaSDM.ensure ( !__DEC_message_message_48551.equals (messageSend) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_receiveEvent is really bound\n                                    JavaSDM.ensure ( _edge_receiveEvent != null );\n                                    // check object combo is really bound\n                                    JavaSDM.ensure ( combo != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object message is really bound\n                                    JavaSDM.ensure ( message != null );\n                                    // check object messageReceive is really bound\n                                    JavaSDM.ensure ( messageReceive != null );\n                                    // check object messageSend is really bound\n                                    JavaSDM.ensure ( messageSend != null );\n                                    // check object operand is really bound\n                                    JavaSDM.ensure ( operand != null );\n                                    // check object sysLine is really bound\n                                    JavaSDM.ensure ( sysLine != null );\n                                    // check isomorphic binding between objects sysLine and line \n                                    JavaSDM.ensure ( !sysLine.equals (line) );\n\n                                    // check isomorphic binding between objects messageSend and messageReceive \n                                    JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                    // check link fragment from messageReceive to operand\n                                    JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                                    ));\n\n                                    // check link fragment from messageReceive to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to operand\n                                    JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                                    )));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link message from message to interaction\n                                    JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                                    ));\n\n                                    // check link message from messageReceive to message\n                                    JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                                    ));\n\n                                    // check link message from messageSend to message\n                                    JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageSend\n                                    JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                                    )));\n\n                                    // check link sendEvent from message to messageSend\n                                    JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                                    ));\n\n                                    // check link sendEvent from message to messageReceive\n                                    JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                                    )));\n\n                                    // check link operand from operand to combo\n                                    JavaSDM.ensure (combo.equals (operand.eContainer()\n                                    ));\n\n                                    // check link src from _edge_receiveEvent to message\n                                    JavaSDM.ensure (message.equals (_edge_receiveEvent.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_receiveEvent to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (_edge_receiveEvent.getTrg ()\n                                    ));\n\n                                    // check link covered from line to combo\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                                    // check link covered from combo to sysLine\n                                    JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                                    // check link covered from messageSend to sysLine\n                                    JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                                    // check link covered from line to operand\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                                    // check link covered from operand to sysLine\n                                    JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_BWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_173(
			EMoflonEdge _edge_receiveEvent);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_248959 = null;\n      InteractionOperand __DEC_messageReceive_fragment_577277 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_264519 = null;\n      InteractionOperand __DEC_messageSend_fragment_323796 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_299498 = null;\n      Message __DEC_messageReceive_receiveEvent_299498 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_809272 = null;\n      Message __DEC_messageSend_receiveEvent_809272 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_882738 = null;\n      Message __DEC_messageReceive_sendEvent_882738 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_836431 = null;\n      Message __DEC_messageSend_sendEvent_836431 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_552365 = null;\n      MessageEnd __DEC_message_message_552365 = null;\n      Match match = null;\n      Iterator fujaba__IterSysLineToOperand = null;\n      InteractionOperand operand = null;\n      Iterator fujaba__IterComboToLine = null;\n      Lifeline line = null;\n      Iterator fujaba__IterSysLineToCombo = null;\n      CombinedFragment combo = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageSend = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Interaction interaction = null;\n      Message message = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_interaction is really bound\n         JavaSDM.ensure ( _edge_interaction != null );\n         // bind object\n         _TmpObject = _edge_interaction.getSrc ();\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n\n         // bind object\n         interaction = message.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // bind object\n         _TmpObject = message.getSendEvent ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check link message from messageSend to message\n         JavaSDM.ensure (message.equals (messageSend.getMessage ()\n         ));\n\n         // check link trg from _edge_interaction to interaction\n         JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n         ));\n\n         // iterate to-many link covered from messageSend to sysLine\n         fujaba__Success = false;\n\n         fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageSendToSysLine.hasNext () )\n         {\n            try\n            {\n               sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n               // check object sysLine is really bound\n               JavaSDM.ensure ( sysLine != null );\n               // iterate to-many link covered from sysLine to combo\n               fujaba__Success = false;\n\n               fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterSysLineToCombo.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterSysLineToCombo.next ();\n\n                     // ensure correct type and really bound of object combo\n                     JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n                     combo = (CombinedFragment) _TmpObject;\n                     // iterate to-many link covered from combo to line\n                     fujaba__Success = false;\n\n                     fujaba__IterComboToLine = new ArrayList(combo.getCovered()).iterator ();\n\n                     while ( fujaba__IterComboToLine.hasNext () )\n                     {\n                        try\n                        {\n                           line = (Lifeline) fujaba__IterComboToLine.next ();\n\n                           // check object line is really bound\n                           JavaSDM.ensure ( line != null );\n                           // check isomorphic binding between objects sysLine and line \n                           JavaSDM.ensure ( !sysLine.equals (line) );\n\n                           // check link lifeline from line to interaction\n                           JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                           ));\n\n                           // iterate to-many link covered from sysLine to operand\n                           fujaba__Success = false;\n\n                           fujaba__IterSysLineToOperand = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n                           while ( fujaba__IterSysLineToOperand.hasNext () )\n                           {\n                              try\n                              {\n                                 _TmpObject =  fujaba__IterSysLineToOperand.next ();\n\n                                 // ensure correct type and really bound of object operand\n                                 JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                                 operand = (InteractionOperand) _TmpObject;\n                                 // check link fragment from messageReceive to operand\n                                 JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                                 ));\n\n                                 // check link operand from operand to combo\n                                 JavaSDM.ensure (combo.equals (operand.eContainer()\n                                 ));\n\n                                 // check link covered from line to operand\n                                 JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_enclosingInteraction_248959 = messageReceive.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageReceive_enclosingInteraction_248959 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_248959 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_248959 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_248959.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_fragment_577277 = messageReceive.getEnclosingOperand ();\n\n                                       // check object __DEC_messageReceive_fragment_577277 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_fragment_577277 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_fragment_577277 and operand \n                                       JavaSDM.ensure ( !__DEC_messageReceive_fragment_577277.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_enclosingInteraction_264519 = messageSend.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageSend_enclosingInteraction_264519 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_264519 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_264519 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_264519.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_fragment_323796 = messageSend.getEnclosingOperand ();\n\n                                       // check object __DEC_messageSend_fragment_323796 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_fragment_323796 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_fragment_323796 and operand \n                                       JavaSDM.ensure ( !__DEC_messageSend_fragment_323796.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_299498\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_299498 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_299498.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_receiveEvent_299498 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_299498.next ();\n\n                                             // check object __DEC_messageReceive_receiveEvent_299498 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_299498 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_299498 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_299498.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_809272\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_809272 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_809272.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_receiveEvent_809272 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_809272.next ();\n\n                                             // check object __DEC_messageSend_receiveEvent_809272 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_receiveEvent_809272 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_receiveEvent_809272 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_809272.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_882738\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_882738 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_882738.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_sendEvent_882738 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_882738.next ();\n\n                                             // check object __DEC_messageReceive_sendEvent_882738 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_sendEvent_882738 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_sendEvent_882738 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_882738.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_836431\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_836431 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_836431.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_sendEvent_836431 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_836431.next ();\n\n                                             // check object __DEC_messageSend_sendEvent_836431 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_sendEvent_836431 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_sendEvent_836431 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_sendEvent_836431.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link message from message to __DEC_message_message_552365\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageTo__DEC_message_message_552365 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_552365.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_message_message_552365 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_552365.next ();\n\n                                             // check object __DEC_message_message_552365 is really bound\n                                             JavaSDM.ensure ( __DEC_message_message_552365 != null );\n                                             // check isomorphic binding between objects __DEC_message_message_552365 and messageReceive \n                                             JavaSDM.ensure ( !__DEC_message_message_552365.equals (messageReceive) );\n\n                                             // check isomorphic binding between objects __DEC_message_message_552365 and messageSend \n                                             JavaSDM.ensure ( !__DEC_message_message_552365.equals (messageSend) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_interaction is really bound\n                                    JavaSDM.ensure ( _edge_interaction != null );\n                                    // check object combo is really bound\n                                    JavaSDM.ensure ( combo != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object message is really bound\n                                    JavaSDM.ensure ( message != null );\n                                    // check object messageReceive is really bound\n                                    JavaSDM.ensure ( messageReceive != null );\n                                    // check object messageSend is really bound\n                                    JavaSDM.ensure ( messageSend != null );\n                                    // check object operand is really bound\n                                    JavaSDM.ensure ( operand != null );\n                                    // check object sysLine is really bound\n                                    JavaSDM.ensure ( sysLine != null );\n                                    // check isomorphic binding between objects sysLine and line \n                                    JavaSDM.ensure ( !sysLine.equals (line) );\n\n                                    // check isomorphic binding between objects messageSend and messageReceive \n                                    JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                    // check link fragment from messageReceive to operand\n                                    JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                                    ));\n\n                                    // check link fragment from messageReceive to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to operand\n                                    JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                                    )));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link message from message to interaction\n                                    JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                                    ));\n\n                                    // check link message from messageReceive to message\n                                    JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                                    ));\n\n                                    // check link message from messageSend to message\n                                    JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageSend\n                                    JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                                    )));\n\n                                    // check link sendEvent from message to messageSend\n                                    JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                                    ));\n\n                                    // check link sendEvent from message to messageReceive\n                                    JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                                    )));\n\n                                    // check link operand from operand to combo\n                                    JavaSDM.ensure (combo.equals (operand.eContainer()\n                                    ));\n\n                                    // check link src from _edge_interaction to message\n                                    JavaSDM.ensure (message.equals (_edge_interaction.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_interaction to interaction\n                                    JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n                                    ));\n\n                                    // check link covered from line to combo\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                                    // check link covered from combo to sysLine\n                                    JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                                    // check link covered from messageSend to sysLine\n                                    JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                                    // check link covered from line to operand\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                                    // check link covered from operand to sysLine\n                                    JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_BWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_174(
			EMoflonEdge _edge_interaction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_531173 = null;\n      InteractionOperand __DEC_messageReceive_fragment_370389 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_540911 = null;\n      InteractionOperand __DEC_messageSend_fragment_282387 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_601475 = null;\n      Message __DEC_messageReceive_receiveEvent_601475 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_805414 = null;\n      Message __DEC_messageSend_receiveEvent_805414 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_201182 = null;\n      Message __DEC_messageReceive_sendEvent_201182 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_513601 = null;\n      Message __DEC_messageSend_sendEvent_513601 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_155216 = null;\n      MessageEnd __DEC_message_message_155216 = null;\n      Match match = null;\n      Iterator fujaba__IterMessageTo_edge_interaction = null;\n      EMoflonEdge _edge_interaction = null;\n      Iterator fujaba__IterOperandToLine = null;\n      Lifeline line = null;\n      CombinedFragment combo = null;\n      Iterator fujaba__IterSysLineToOperand = null;\n      InteractionOperand operand = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageSend = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Interaction interaction = null;\n      Message message = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_message is really bound\n         JavaSDM.ensure ( _edge_message != null );\n         // bind object\n         _TmpObject = _edge_message.getTrg ();\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n\n         // bind object\n         interaction = message.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // bind object\n         _TmpObject = message.getSendEvent ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check link message from messageSend to message\n         JavaSDM.ensure (message.equals (messageSend.getMessage ()\n         ));\n\n         // check link src from _edge_message to interaction\n         JavaSDM.ensure (interaction.equals (_edge_message.getSrc ()\n         ));\n\n         // iterate to-many link covered from messageSend to sysLine\n         fujaba__Success = false;\n\n         fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageSendToSysLine.hasNext () )\n         {\n            try\n            {\n               sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n               // check object sysLine is really bound\n               JavaSDM.ensure ( sysLine != null );\n               // iterate to-many link covered from sysLine to operand\n               fujaba__Success = false;\n\n               fujaba__IterSysLineToOperand = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterSysLineToOperand.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterSysLineToOperand.next ();\n\n                     // ensure correct type and really bound of object operand\n                     JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                     operand = (InteractionOperand) _TmpObject;\n                     // check link fragment from messageReceive to operand\n                     JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                     ));\n\n                     // bind object\n                     combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                     // check object combo is really bound\n                     JavaSDM.ensure ( combo != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(combo.getOperand().contains(operand));\n\n                     // check link covered from combo to sysLine\n                     JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                     // iterate to-many link covered from operand to line\n                     fujaba__Success = false;\n\n                     fujaba__IterOperandToLine = new ArrayList(operand.getCovered()).iterator ();\n\n                     while ( fujaba__IterOperandToLine.hasNext () )\n                     {\n                        try\n                        {\n                           line = (Lifeline) fujaba__IterOperandToLine.next ();\n\n                           // check object line is really bound\n                           JavaSDM.ensure ( line != null );\n                           // check isomorphic binding between objects sysLine and line \n                           JavaSDM.ensure ( !sysLine.equals (line) );\n\n                           // check link lifeline from line to interaction\n                           JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                           ));\n\n                           // check link covered from line to combo\n                           JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                           // iterate to-many link src from message to _edge_interaction\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo_edge_interaction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,EMoflonEdge.class,\"src\")).iterator ();\n\n                           while ( fujaba__IterMessageTo_edge_interaction.hasNext () )\n                           {\n                              try\n                              {\n                                 _edge_interaction = (EMoflonEdge) fujaba__IterMessageTo_edge_interaction.next ();\n\n                                 // check object _edge_interaction is really bound\n                                 JavaSDM.ensure ( _edge_interaction != null );\n                                 // check isomorphic binding between objects _edge_message and _edge_interaction \n                                 JavaSDM.ensure ( !_edge_message.equals (_edge_interaction) );\n\n                                 // check link trg from _edge_interaction to interaction\n                                 JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n                                 ));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_enclosingInteraction_531173 = messageReceive.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageReceive_enclosingInteraction_531173 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_531173 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_531173 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_531173.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_fragment_370389 = messageReceive.getEnclosingOperand ();\n\n                                       // check object __DEC_messageReceive_fragment_370389 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_fragment_370389 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_fragment_370389 and operand \n                                       JavaSDM.ensure ( !__DEC_messageReceive_fragment_370389.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_enclosingInteraction_540911 = messageSend.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageSend_enclosingInteraction_540911 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_540911 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_540911 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_540911.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_fragment_282387 = messageSend.getEnclosingOperand ();\n\n                                       // check object __DEC_messageSend_fragment_282387 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_fragment_282387 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_fragment_282387 and operand \n                                       JavaSDM.ensure ( !__DEC_messageSend_fragment_282387.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_601475\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_601475 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_601475.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_receiveEvent_601475 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_601475.next ();\n\n                                             // check object __DEC_messageReceive_receiveEvent_601475 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_601475 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_601475 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_601475.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_805414\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_805414 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_805414.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_receiveEvent_805414 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_805414.next ();\n\n                                             // check object __DEC_messageSend_receiveEvent_805414 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_receiveEvent_805414 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_receiveEvent_805414 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_805414.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_201182\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_201182 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_201182.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_sendEvent_201182 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_201182.next ();\n\n                                             // check object __DEC_messageReceive_sendEvent_201182 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_sendEvent_201182 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_sendEvent_201182 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_201182.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_513601\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_513601 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_513601.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_sendEvent_513601 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_513601.next ();\n\n                                             // check object __DEC_messageSend_sendEvent_513601 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_sendEvent_513601 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_sendEvent_513601 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_sendEvent_513601.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link message from message to __DEC_message_message_155216\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageTo__DEC_message_message_155216 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_155216.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_message_message_155216 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_155216.next ();\n\n                                             // check object __DEC_message_message_155216 is really bound\n                                             JavaSDM.ensure ( __DEC_message_message_155216 != null );\n                                             // check isomorphic binding between objects __DEC_message_message_155216 and messageReceive \n                                             JavaSDM.ensure ( !__DEC_message_message_155216.equals (messageReceive) );\n\n                                             // check isomorphic binding between objects __DEC_message_message_155216 and messageSend \n                                             JavaSDM.ensure ( !__DEC_message_message_155216.equals (messageSend) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_interaction is really bound\n                                    JavaSDM.ensure ( _edge_interaction != null );\n                                    // check object _edge_message is really bound\n                                    JavaSDM.ensure ( _edge_message != null );\n                                    // check object combo is really bound\n                                    JavaSDM.ensure ( combo != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object message is really bound\n                                    JavaSDM.ensure ( message != null );\n                                    // check object messageReceive is really bound\n                                    JavaSDM.ensure ( messageReceive != null );\n                                    // check object messageSend is really bound\n                                    JavaSDM.ensure ( messageSend != null );\n                                    // check object operand is really bound\n                                    JavaSDM.ensure ( operand != null );\n                                    // check object sysLine is really bound\n                                    JavaSDM.ensure ( sysLine != null );\n                                    // check isomorphic binding between objects _edge_message and _edge_interaction \n                                    JavaSDM.ensure ( !_edge_message.equals (_edge_interaction) );\n\n                                    // check isomorphic binding between objects sysLine and line \n                                    JavaSDM.ensure ( !sysLine.equals (line) );\n\n                                    // check isomorphic binding between objects messageSend and messageReceive \n                                    JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                    // check link fragment from messageReceive to operand\n                                    JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                                    ));\n\n                                    // check link fragment from messageReceive to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to operand\n                                    JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                                    )));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link message from message to interaction\n                                    JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                                    ));\n\n                                    // check link message from messageReceive to message\n                                    JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                                    ));\n\n                                    // check link message from messageSend to message\n                                    JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageSend\n                                    JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                                    )));\n\n                                    // check link sendEvent from message to messageSend\n                                    JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                                    ));\n\n                                    // check link sendEvent from message to messageReceive\n                                    JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                                    )));\n\n                                    // check link operand from operand to combo\n                                    JavaSDM.ensure (combo.equals (operand.eContainer()\n                                    ));\n\n                                    // check link src from _edge_interaction to message\n                                    JavaSDM.ensure (message.equals (_edge_interaction.getSrc ()\n                                    ));\n\n                                    // check link src from _edge_message to interaction\n                                    JavaSDM.ensure (interaction.equals (_edge_message.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_interaction to interaction\n                                    JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n                                    ));\n\n                                    // check link trg from _edge_message to message\n                                    JavaSDM.ensure (message.equals (_edge_message.getTrg ()\n                                    ));\n\n                                    // check link covered from line to combo\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                                    // check link covered from combo to sysLine\n                                    JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                                    // check link covered from messageSend to sysLine\n                                    JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                                    // check link covered from line to operand\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                                    // check link covered from operand to sysLine\n                                    JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_BWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_175(EMoflonEdge _edge_message);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_903341 = null;\n      InteractionOperand __DEC_messageReceive_fragment_88088 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_822050 = null;\n      InteractionOperand __DEC_messageSend_fragment_108090 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_892075 = null;\n      Message __DEC_messageReceive_receiveEvent_892075 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_578344 = null;\n      Message __DEC_messageSend_receiveEvent_578344 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_68572 = null;\n      Message __DEC_messageReceive_sendEvent_68572 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_242180 = null;\n      Message __DEC_messageSend_sendEvent_242180 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_783304 = null;\n      MessageEnd __DEC_message_message_783304 = null;\n      Match match = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterOperandToLine = null;\n      Lifeline line = null;\n      CombinedFragment combo = null;\n      Iterator fujaba__IterSysLineToOperand = null;\n      InteractionOperand operand = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      MessageOccurrenceSpecification messageSend = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_message is really bound\n         JavaSDM.ensure ( _edge_message != null );\n         // bind object\n         _TmpObject = _edge_message.getSrc ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         message = messageSend.getMessage ();\n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // check link sendEvent from message to messageSend\n         JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n         ));\n\n         // check link trg from _edge_message to message\n         JavaSDM.ensure (message.equals (_edge_message.getTrg ()\n         ));\n\n         // iterate to-many link covered from messageSend to sysLine\n         fujaba__Success = false;\n\n         fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageSendToSysLine.hasNext () )\n         {\n            try\n            {\n               sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n               // check object sysLine is really bound\n               JavaSDM.ensure ( sysLine != null );\n               // iterate to-many link covered from sysLine to operand\n               fujaba__Success = false;\n\n               fujaba__IterSysLineToOperand = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterSysLineToOperand.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterSysLineToOperand.next ();\n\n                     // ensure correct type and really bound of object operand\n                     JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                     operand = (InteractionOperand) _TmpObject;\n                     // check link fragment from messageReceive to operand\n                     JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                     ));\n\n                     // bind object\n                     combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                     // check object combo is really bound\n                     JavaSDM.ensure ( combo != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(combo.getOperand().contains(operand));\n\n                     // check link covered from combo to sysLine\n                     JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                     // iterate to-many link covered from operand to line\n                     fujaba__Success = false;\n\n                     fujaba__IterOperandToLine = new ArrayList(operand.getCovered()).iterator ();\n\n                     while ( fujaba__IterOperandToLine.hasNext () )\n                     {\n                        try\n                        {\n                           line = (Lifeline) fujaba__IterOperandToLine.next ();\n\n                           // check object line is really bound\n                           JavaSDM.ensure ( line != null );\n                           // check isomorphic binding between objects sysLine and line \n                           JavaSDM.ensure ( !sysLine.equals (line) );\n\n                           // bind object\n                           interaction = line.getInteraction ();\n\n                           // check object interaction is really bound\n                           JavaSDM.ensure ( interaction != null );\n\n                           // check link message from message to interaction\n                           JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                           ));\n\n                           // check link covered from line to combo\n                           JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_enclosingInteraction_903341 = messageReceive.getEnclosingInteraction ();\n\n                                 // check object __DEC_messageReceive_enclosingInteraction_903341 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_903341 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_903341 and interaction \n                                 JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_903341.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_fragment_88088 = messageReceive.getEnclosingOperand ();\n\n                                 // check object __DEC_messageReceive_fragment_88088 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_fragment_88088 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_fragment_88088 and operand \n                                 JavaSDM.ensure ( !__DEC_messageReceive_fragment_88088.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_enclosingInteraction_822050 = messageSend.getEnclosingInteraction ();\n\n                                 // check object __DEC_messageSend_enclosingInteraction_822050 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_822050 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_822050 and interaction \n                                 JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_822050.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_fragment_108090 = messageSend.getEnclosingOperand ();\n\n                                 // check object __DEC_messageSend_fragment_108090 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_fragment_108090 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_fragment_108090 and operand \n                                 JavaSDM.ensure ( !__DEC_messageSend_fragment_108090.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_892075\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_892075 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_892075.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_receiveEvent_892075 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_892075.next ();\n\n                                       // check object __DEC_messageReceive_receiveEvent_892075 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_892075 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_892075 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_892075.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_578344\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_578344 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_578344.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_receiveEvent_578344 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_578344.next ();\n\n                                       // check object __DEC_messageSend_receiveEvent_578344 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_receiveEvent_578344 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_receiveEvent_578344 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_578344.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_68572\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_68572 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_68572.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_sendEvent_68572 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_68572.next ();\n\n                                       // check object __DEC_messageReceive_sendEvent_68572 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_sendEvent_68572 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_sendEvent_68572 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_68572.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_242180\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_242180 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_242180.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_sendEvent_242180 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_242180.next ();\n\n                                       // check object __DEC_messageSend_sendEvent_242180 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_sendEvent_242180 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_sendEvent_242180 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_sendEvent_242180.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link message from message to __DEC_message_message_783304\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageTo__DEC_message_message_783304 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_783304.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_message_message_783304 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_783304.next ();\n\n                                       // check object __DEC_message_message_783304 is really bound\n                                       JavaSDM.ensure ( __DEC_message_message_783304 != null );\n                                       // check isomorphic binding between objects __DEC_message_message_783304 and messageReceive \n                                       JavaSDM.ensure ( !__DEC_message_message_783304.equals (messageReceive) );\n\n                                       // check isomorphic binding between objects __DEC_message_message_783304 and messageSend \n                                       JavaSDM.ensure ( !__DEC_message_message_783304.equals (messageSend) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_message is really bound\n                              JavaSDM.ensure ( _edge_message != null );\n                              // check object combo is really bound\n                              JavaSDM.ensure ( combo != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object message is really bound\n                              JavaSDM.ensure ( message != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object operand is really bound\n                              JavaSDM.ensure ( operand != null );\n                              // check object sysLine is really bound\n                              JavaSDM.ensure ( sysLine != null );\n                              // check isomorphic binding between objects sysLine and line \n                              JavaSDM.ensure ( !sysLine.equals (line) );\n\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from messageReceive to operand\n                              JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                              ));\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from messageSend to operand\n                              JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                              )));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link message from message to interaction\n                              JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                              ));\n\n                              // check link message from messageReceive to message\n                              JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                              ));\n\n                              // check link message from messageSend to message\n                              JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                              ));\n\n                              // check link receiveEvent from message to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                              ));\n\n                              // check link receiveEvent from message to messageSend\n                              JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                              )));\n\n                              // check link sendEvent from message to messageSend\n                              JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                              ));\n\n                              // check link sendEvent from message to messageReceive\n                              JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                              )));\n\n                              // check link operand from operand to combo\n                              JavaSDM.ensure (combo.equals (operand.eContainer()\n                              ));\n\n                              // check link src from _edge_message to messageSend\n                              JavaSDM.ensure (messageSend.equals (_edge_message.getSrc ()\n                              ));\n\n                              // check link trg from _edge_message to message\n                              JavaSDM.ensure (message.equals (_edge_message.getTrg ()\n                              ));\n\n                              // check link covered from line to combo\n                              JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                              // check link covered from combo to sysLine\n                              JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                              // check link covered from messageSend to sysLine\n                              JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                              // check link covered from line to operand\n                              JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                              // check link covered from operand to sysLine\n                              JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_176(EMoflonEdge _edge_message);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Interaction __DEC_messageReceive_enclosingInteraction_649091 = null;\n      InteractionOperand __DEC_messageReceive_fragment_9642 = null;\n      Interaction __DEC_messageSend_enclosingInteraction_595512 = null;\n      InteractionOperand __DEC_messageSend_fragment_684338 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_36424 = null;\n      Message __DEC_messageReceive_receiveEvent_36424 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_469722 = null;\n      Message __DEC_messageSend_receiveEvent_469722 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_89389 = null;\n      Message __DEC_messageReceive_sendEvent_89389 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_288622 = null;\n      Message __DEC_messageSend_sendEvent_288622 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_745561 = null;\n      MessageEnd __DEC_message_message_745561 = null;\n      Match match = null;\n      Iterator fujaba__IterComboToLine = null;\n      Lifeline line = null;\n      Iterator fujaba__IterSysLineToCombo = null;\n      CombinedFragment combo = null;\n      Iterator fujaba__IterSysLineToOperand = null;\n      InteractionOperand operand = null;\n      Iterator fujaba__IterMessageSendToSysLine = null;\n      Lifeline sysLine = null;\n      MessageOccurrenceSpecification messageSend = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Interaction interaction = null;\n      Message message = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_message is really bound\n         JavaSDM.ensure ( _edge_message != null );\n         // bind object\n         _TmpObject = _edge_message.getTrg ();\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n\n         // bind object\n         interaction = message.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // bind object\n         _TmpObject = message.getSendEvent ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check link message from messageSend to message\n         JavaSDM.ensure (message.equals (messageSend.getMessage ()\n         ));\n\n         // check link src from _edge_message to messageReceive\n         JavaSDM.ensure (messageReceive.equals (_edge_message.getSrc ()\n         ));\n\n         // iterate to-many link covered from messageSend to sysLine\n         fujaba__Success = false;\n\n         fujaba__IterMessageSendToSysLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageSendToSysLine.hasNext () )\n         {\n            try\n            {\n               sysLine = (Lifeline) fujaba__IterMessageSendToSysLine.next ();\n\n               // check object sysLine is really bound\n               JavaSDM.ensure ( sysLine != null );\n               // iterate to-many link covered from sysLine to operand\n               fujaba__Success = false;\n\n               fujaba__IterSysLineToOperand = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterSysLineToOperand.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterSysLineToOperand.next ();\n\n                     // ensure correct type and really bound of object operand\n                     JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                     operand = (InteractionOperand) _TmpObject;\n                     // check link fragment from messageReceive to operand\n                     JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                     ));\n\n                     // iterate to-many link covered from sysLine to combo\n                     fujaba__Success = false;\n\n                     fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy()).iterator ();\n\n                     while ( fujaba__IterSysLineToCombo.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterSysLineToCombo.next ();\n\n                           // ensure correct type and really bound of object combo\n                           JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n                           combo = (CombinedFragment) _TmpObject;\n                           // check link operand from operand to combo\n                           JavaSDM.ensure (combo.equals (operand.eContainer()\n                           ));\n\n                           // iterate to-many link covered from combo to line\n                           fujaba__Success = false;\n\n                           fujaba__IterComboToLine = new ArrayList(combo.getCovered()).iterator ();\n\n                           while ( fujaba__IterComboToLine.hasNext () )\n                           {\n                              try\n                              {\n                                 line = (Lifeline) fujaba__IterComboToLine.next ();\n\n                                 // check object line is really bound\n                                 JavaSDM.ensure ( line != null );\n                                 // check isomorphic binding between objects sysLine and line \n                                 JavaSDM.ensure ( !sysLine.equals (line) );\n\n                                 // check link lifeline from line to interaction\n                                 JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                 ));\n\n                                 // check link covered from line to operand\n                                 JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_enclosingInteraction_649091 = messageReceive.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageReceive_enclosingInteraction_649091 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_enclosingInteraction_649091 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_649091 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageReceive_enclosingInteraction_649091.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_fragment_9642 = messageReceive.getEnclosingOperand ();\n\n                                       // check object __DEC_messageReceive_fragment_9642 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_fragment_9642 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_fragment_9642 and operand \n                                       JavaSDM.ensure ( !__DEC_messageReceive_fragment_9642.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_enclosingInteraction_595512 = messageSend.getEnclosingInteraction ();\n\n                                       // check object __DEC_messageSend_enclosingInteraction_595512 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_enclosingInteraction_595512 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_595512 and interaction \n                                       JavaSDM.ensure ( !__DEC_messageSend_enclosingInteraction_595512.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_fragment_684338 = messageSend.getEnclosingOperand ();\n\n                                       // check object __DEC_messageSend_fragment_684338 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_fragment_684338 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_fragment_684338 and operand \n                                       JavaSDM.ensure ( !__DEC_messageSend_fragment_684338.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_36424\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_36424 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_36424.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_receiveEvent_36424 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_36424.next ();\n\n                                             // check object __DEC_messageReceive_receiveEvent_36424 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_36424 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_36424 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_36424.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_469722\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_469722 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_469722.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_receiveEvent_469722 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_469722.next ();\n\n                                             // check object __DEC_messageSend_receiveEvent_469722 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_receiveEvent_469722 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_receiveEvent_469722 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_469722.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_89389\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_89389 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_89389.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageReceive_sendEvent_89389 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_89389.next ();\n\n                                             // check object __DEC_messageReceive_sendEvent_89389 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_sendEvent_89389 != null );\n                                             // check isomorphic binding between objects __DEC_messageReceive_sendEvent_89389 and message \n                                             JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_89389.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_288622\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_288622 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_288622.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_messageSend_sendEvent_288622 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_288622.next ();\n\n                                             // check object __DEC_messageSend_sendEvent_288622 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_sendEvent_288622 != null );\n                                             // check isomorphic binding between objects __DEC_messageSend_sendEvent_288622 and message \n                                             JavaSDM.ensure ( !__DEC_messageSend_sendEvent_288622.equals (message) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link message from message to __DEC_message_message_745561\n                                       fujaba__Success = false;\n\n                                       fujaba__IterMessageTo__DEC_message_message_745561 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_745561.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_message_message_745561 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_745561.next ();\n\n                                             // check object __DEC_message_message_745561 is really bound\n                                             JavaSDM.ensure ( __DEC_message_message_745561 != null );\n                                             // check isomorphic binding between objects __DEC_message_message_745561 and messageReceive \n                                             JavaSDM.ensure ( !__DEC_message_message_745561.equals (messageReceive) );\n\n                                             // check isomorphic binding between objects __DEC_message_message_745561 and messageSend \n                                             JavaSDM.ensure ( !__DEC_message_message_745561.equals (messageSend) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_message is really bound\n                                    JavaSDM.ensure ( _edge_message != null );\n                                    // check object combo is really bound\n                                    JavaSDM.ensure ( combo != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object message is really bound\n                                    JavaSDM.ensure ( message != null );\n                                    // check object messageReceive is really bound\n                                    JavaSDM.ensure ( messageReceive != null );\n                                    // check object messageSend is really bound\n                                    JavaSDM.ensure ( messageSend != null );\n                                    // check object operand is really bound\n                                    JavaSDM.ensure ( operand != null );\n                                    // check object sysLine is really bound\n                                    JavaSDM.ensure ( sysLine != null );\n                                    // check isomorphic binding between objects sysLine and line \n                                    JavaSDM.ensure ( !sysLine.equals (line) );\n\n                                    // check isomorphic binding between objects messageSend and messageReceive \n                                    JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                    // check link fragment from messageReceive to operand\n                                    JavaSDM.ensure (operand.equals (messageReceive.getEnclosingOperand ()\n                                    ));\n\n                                    // check link fragment from messageReceive to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageReceive.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to interaction\n                                    JavaSDM.ensure (!(interaction.equals (messageSend.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from messageSend to operand\n                                    JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                                    )));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link message from message to interaction\n                                    JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                                    ));\n\n                                    // check link message from messageReceive to message\n                                    JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                                    ));\n\n                                    // check link message from messageSend to message\n                                    JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                                    ));\n\n                                    // check link receiveEvent from message to messageSend\n                                    JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                                    )));\n\n                                    // check link sendEvent from message to messageSend\n                                    JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                                    ));\n\n                                    // check link sendEvent from message to messageReceive\n                                    JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                                    )));\n\n                                    // check link operand from operand to combo\n                                    JavaSDM.ensure (combo.equals (operand.eContainer()\n                                    ));\n\n                                    // check link src from _edge_message to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (_edge_message.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_message to message\n                                    JavaSDM.ensure (message.equals (_edge_message.getTrg ()\n                                    ));\n\n                                    // check link covered from line to combo\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (combo));\n\n                                    // check link covered from combo to sysLine\n                                    JavaSDM.ensure (combo.getCovered ().contains (sysLine));\n\n                                    // check link covered from messageSend to sysLine\n                                    JavaSDM.ensure (messageSend.getCovered ().contains (sysLine));\n\n                                    // check link covered from line to operand\n                                    JavaSDM.ensure (line.getCoveredBy ().contains (operand));\n\n                                    // check link covered from operand to sysLine\n                                    JavaSDM.ensure (operand.getCovered ().contains (sysLine));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_BWD(match,sysLine,messageSend,operand,combo,messageReceive,line,message,interaction);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_BWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_177(EMoflonEdge _edge_message);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // UserStepNfToMessageRule
