<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;WAIT&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, true, csp);&#xD;&#xA;var_step_type.setValue(step.getType());&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqStepType eqStepType = new EqStepType();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;ASYNCH_SIGNAL&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;FOUND&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, true, csp);&#xD;&#xA;var_step_name.setValue(step.getName());&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, csp);&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, csp);&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, csp);&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal0);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal1);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;message&quot;, message);&#xA;ruleresult.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;actorToLine&quot;, actorToLine);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;ASYNCH_SIGNAL&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;FOUND&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, true, csp);&#xD;&#xA;var_message_messageSort.setValue(message.getMessageSort());&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, true, csp);&#xD;&#xA;var_message_messageKind.setValue(message.getMessageKind());&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal0);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;message&quot;, message);&#xA;match.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;match.registerObject(&quot;line&quot;, line);&#xA;match.registerObject(&quot;interaction&quot;, interaction);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;WAIT&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, true, csp);&#xD;&#xA;var_message_name.setValue(message.getName());&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, csp);&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqStepType eqStepType = new EqStepType();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal0);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;message&quot;,message);&#xD;&#xA;isApplicableMatch.registerObject(&quot;messageReceive&quot;,messageReceive);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;message&quot;, message);&#xA;ruleresult.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;actorToLine&quot;, actorToLine);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;message&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessage()) &amp;&amp; match.getObject(&quot;messageReceive&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;SEND&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, true, csp);&#xD;&#xA;var_step_type.setValue(step.getType());&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqStepType eqStepType = new EqStepType();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;ASYNCH_SIGNAL&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;LOST&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, true, csp);&#xD;&#xA;var_step_name.setValue(step.getName());&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, csp);&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, csp);&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, csp);&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal0);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal1);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;message&quot;, message);&#xA;ruleresult.registerObject(&quot;messageSend&quot;, messageSend);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;actorToLine&quot;, actorToLine);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;ASYNCH_SIGNAL&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;LOST&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, true, csp);&#xD;&#xA;var_message_messageSort.setValue(message.getMessageSort());&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, true, csp);&#xD;&#xA;var_message_messageKind.setValue(message.getMessageKind());&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal0);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;message&quot;, message);&#xA;match.registerObject(&quot;messageSend&quot;, messageSend);&#xA;match.registerObject(&quot;line&quot;, line);&#xA;match.registerObject(&quot;interaction&quot;, interaction);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;SEND&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, true, csp);&#xD;&#xA;var_message_name.setValue(message.getName());&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, csp);&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqStepType eqStepType = new EqStepType();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal0);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;message&quot;,message);&#xD;&#xA;isApplicableMatch.registerObject(&quot;messageSend&quot;,messageSend);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;message&quot;, message);&#xA;ruleresult.registerObject(&quot;messageSend&quot;, messageSend);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;actorToLine&quot;, actorToLine);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;message&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessage()) &amp;&amp; match.getObject(&quot;messageSend&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCasesModel&quot;, useCasesModel);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCasesModel&quot;,useCasesModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCasesModel&quot;, useCasesModel);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;useCasesModelToModel&quot;, useCasesModelToModel);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;useCasesModel&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getUseCasesModel());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;model&quot;, model);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCasesModel&quot;, useCasesModel);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;useCasesModelToModel&quot;, useCasesModelToModel);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;model&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getModel());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCasesModel&quot;, useCasesModel);&#xA;match.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_packageDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;packageDeclaration.name&quot;, true, csp);&#xD;&#xA;var_packageDeclaration_name.setValue(packageDeclaration.getName());&#xD;&#xA;var_packageDeclaration_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_p_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.name&quot;, csp);&#xD;&#xA;var_p_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_packageDeclaration_name,var_p_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCasesModel&quot;,useCasesModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCasesModelToModel&quot;,useCasesModelToModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCasesModel&quot;, useCasesModel);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;useCasesModelToModel&quot;, useCasesModelToModel);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;packageDeclarationToPackage&quot;, packageDeclarationToPackage);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;packageDeclaration&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getPackageDeclaration());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;model&quot;, model);&#xA;match.registerObject(&quot;p&quot;, p);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_p_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.name&quot;, true, csp);&#xD;&#xA;var_p_name.setValue(p.getName());&#xD;&#xA;var_p_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_packageDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;packageDeclaration.name&quot;, csp);&#xD;&#xA;var_packageDeclaration_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_packageDeclaration_name,var_p_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCasesModel&quot;,useCasesModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCasesModelToModel&quot;,useCasesModelToModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCasesModel&quot;, useCasesModel);&#xA;ruleresult.registerObject(&quot;model&quot;, model);&#xA;ruleresult.registerObject(&quot;useCasesModelToModel&quot;, useCasesModelToModel);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;packageDeclarationToPackage&quot;, packageDeclarationToPackage);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;p&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getPackage());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;basicFlow&quot;, basicFlow);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.name&quot;, true, csp);&#xD;&#xA;var_useCase_name.setValue(useCase.getName());&#xD;&#xA;var_useCase_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_interaction_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;interaction.name&quot;, csp);&#xD;&#xA;var_interaction_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_useCase_name,var_interaction_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_package&quot;,_package);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclarationToPackage&quot;,packageDeclarationToPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;basicFlow&quot;,basicFlow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;_package&quot;, _package);&#xA;ruleresult.registerObject(&quot;packageDeclarationToPackage&quot;, packageDeclarationToPackage);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;basicFlow&quot;, basicFlow);&#xA;ruleresult.registerObject(&quot;basicFlowToInteraction&quot;, basicFlowToInteraction);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;useCase&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getUseCase()) &amp;&amp; match.getObject(&quot;basicFlow&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getBasicFlow());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;_package&quot;, _package);&#xA;match.registerObject(&quot;interaction&quot;, interaction);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_interaction_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;interaction.name&quot;, true, csp);&#xD;&#xA;var_interaction_name.setValue(interaction.getName());&#xD;&#xA;var_interaction_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.name&quot;, csp);&#xD;&#xA;var_useCase_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_useCase_name,var_interaction_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_package&quot;,_package);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclarationToPackage&quot;,packageDeclarationToPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;_package&quot;, _package);&#xA;ruleresult.registerObject(&quot;packageDeclarationToPackage&quot;, packageDeclarationToPackage);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;basicFlow&quot;, basicFlow);&#xA;ruleresult.registerObject(&quot;basicFlowToInteraction&quot;, basicFlowToInteraction);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;interaction&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getInteraction());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, true, csp);&#xD;&#xA;var_actor_name.setValue(actor.getName());&#xD;&#xA;var_actor_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_line_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;line.name&quot;, csp);&#xD;&#xA;var_line_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_actor_name,var_line_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclarationToP&quot;,packageDeclarationToP);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;packageDeclarationToP&quot;, packageDeclarationToP);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;actorToLine&quot;, actorToLine);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;actor&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getActor());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;p&quot;, p);&#xA;match.registerObject(&quot;line&quot;, line);&#xA;match.registerObject(&quot;interaction&quot;, interaction);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_line_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;line.name&quot;, true, csp);&#xD;&#xA;var_line_name.setValue(line.getName());&#xD;&#xA;var_line_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, csp);&#xD;&#xA;var_actor_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_actor_name,var_line_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclarationToP&quot;,packageDeclarationToP);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;packageDeclarationToP&quot;, packageDeclarationToP);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;actorToLine&quot;, actorToLine);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;line&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getLifeline());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;ALT&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, true, csp);&#xD;&#xA;var_step_type.setValue(step.getType());&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqStepType eqStepType = new EqStepType();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;alt&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE.createVariable(&quot;combo.interactionOperator&quot;, csp);&#xD;&#xA;var_combo_interactionOperator.setType(&quot;ModalSequenceDiagram.InteractionOperatorKind&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqInterOperKind eqInterOperKind = new EqInterOperKind();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqInterOperKind);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqInterOperKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqInterOperKind.solve(var_combo_interactionOperator,literal0);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;actorToLine&quot;, actorToLine);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;combo&quot;, combo);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;stepToCombo&quot;, stepToCombo);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;alt&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE.createVariable(&quot;combo.interactionOperator&quot;, true, csp);&#xD;&#xA;var_combo_interactionOperator.setValue(combo.getInteractionOperator());&#xD;&#xA;var_combo_interactionOperator.setType(&quot;ModalSequenceDiagram.InteractionOperatorKind&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqInterOperKind eqInterOperKind = new EqInterOperKind();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqInterOperKind);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqInterOperKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqInterOperKind.solve(var_combo_interactionOperator,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;interaction&quot;, interaction);&#xA;match.registerObject(&quot;combo&quot;, combo);&#xA;match.registerObject(&quot;line&quot;, line);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;ALT&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, csp);&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqStepType eqStepType = new EqStepType();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal0);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;combo&quot;,combo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;actorToLine&quot;, actorToLine);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;combo&quot;, combo);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;stepToCombo&quot;, stepToCombo);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;combo&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getCombinedFragment());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;par&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE.createVariable(&quot;combo.interactionOperator&quot;, csp);&#xD;&#xA;var_combo_interactionOperator.setType(&quot;ModalSequenceDiagram.InteractionOperatorKind&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqInterOperKind eqInterOperKind = new EqInterOperKind();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqInterOperKind);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqInterOperKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqInterOperKind.solve(var_combo_interactionOperator,literal0);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;combo&quot;, combo);&#xA;ruleresult.registerObject(&quot;stepToCombo&quot;, stepToCombo);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getParallelStep());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;par&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE.createVariable(&quot;combo.interactionOperator&quot;, true, csp);&#xD;&#xA;var_combo_interactionOperator.setValue(combo.getInteractionOperator());&#xD;&#xA;var_combo_interactionOperator.setType(&quot;ModalSequenceDiagram.InteractionOperatorKind&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqInterOperKind eqInterOperKind = new EqInterOperKind();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqInterOperKind);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqInterOperKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqInterOperKind.solve(var_combo_interactionOperator,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;interaction&quot;, interaction);&#xA;match.registerObject(&quot;combo&quot;, combo);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;combo&quot;,combo);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;combo&quot;, combo);&#xA;ruleresult.registerObject(&quot;stepToCombo&quot;, stepToCombo);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;combo&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getCombinedFragment());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;parFlow&quot;, parFlow);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_parFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parFlow.name&quot;, true, csp);&#xD;&#xA;var_parFlow_name.setValue(parFlow.getName());&#xD;&#xA;var_parFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spec.value&quot;, csp);&#xD;&#xA;var_spec_value.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_parFlow_name,var_spec_value);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;combo&quot;,combo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepToCombo&quot;,stepToCombo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parFlow&quot;,parFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;combo&quot;, combo);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;stepToCombo&quot;, stepToCombo);&#xA;ruleresult.registerObject(&quot;parFlow&quot;, parFlow);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;operand&quot;, operand);&#xA;ruleresult.registerObject(&quot;parFlowToOperand&quot;, parFlowToOperand);&#xA;ruleresult.registerObject(&quot;guard&quot;, guard);&#xA;ruleresult.registerObject(&quot;spec&quot;, spec);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;parFlow&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getParallelFlow());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;combo&quot;, combo);&#xA;match.registerObject(&quot;operand&quot;, operand);&#xA;match.registerObject(&quot;guard&quot;, guard);&#xA;match.registerObject(&quot;spec&quot;, spec);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spec.value&quot;, true, csp);&#xD;&#xA;var_spec_value.setValue(spec.getValue());&#xD;&#xA;var_spec_value.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_parFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parFlow.name&quot;, csp);&#xD;&#xA;var_parFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_parFlow_name,var_spec_value);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;combo&quot;,combo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepToCombo&quot;,stepToCombo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;operand&quot;,operand);&#xD;&#xA;isApplicableMatch.registerObject(&quot;guard&quot;,guard);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spec&quot;,spec);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;combo&quot;, combo);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;stepToCombo&quot;, stepToCombo);&#xA;ruleresult.registerObject(&quot;parFlow&quot;, parFlow);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;operand&quot;, operand);&#xA;ruleresult.registerObject(&quot;parFlowToOperand&quot;, parFlowToOperand);&#xA;ruleresult.registerObject(&quot;guard&quot;, guard);&#xA;ruleresult.registerObject(&quot;spec&quot;, spec);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;operand&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getInteractionOperand()) &amp;&amp; match.getObject(&quot;guard&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getInteractionConstraint()) &amp;&amp; match.getObject(&quot;spec&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getLiteralString());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;system&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;precond&quot;, precond);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;ASYNCH_SIGNAL&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;found&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_precond_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;precond.name&quot;, true, csp);&#xD;&#xA;var_precond_name.setValue(precond.getName());&#xD;&#xA;var_precond_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, csp);&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, csp);&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, csp);&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_precond_name,var_message_name);&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal0);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal1);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;precond&quot;,precond);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;precond&quot;, precond);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;message&quot;, message);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;actorToLine&quot;, actorToLine);&#xA;ruleresult.registerObject(&quot;precondToMessage&quot;, precondToMessage);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;precond&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getUCCondition());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;ASYNCH_SIGNAL&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;found&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, true, csp);&#xD;&#xA;var_message_messageSort.setValue(message.getMessageSort());&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, true, csp);&#xD;&#xA;var_message_messageKind.setValue(message.getMessageKind());&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal0);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;message&quot;, message);&#xA;match.registerObject(&quot;interaction&quot;, interaction);&#xA;match.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;match.registerObject(&quot;line&quot;, line);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;system&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, true, csp);&#xD;&#xA;var_message_name.setValue(message.getName());&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_precond_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;precond.name&quot;, csp);&#xD;&#xA;var_precond_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal0);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_precond_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;message&quot;,message);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;messageReceive&quot;,messageReceive);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;precond&quot;, precond);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;message&quot;, message);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;actorToLine&quot;, actorToLine);&#xA;ruleresult.registerObject(&quot;precondToMessage&quot;, precondToMessage);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;message&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessage()) &amp;&amp; match.getObject(&quot;messageReceive&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;system&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;PERFORM&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, true, csp);&#xD;&#xA;var_step_type.setValue(step.getType());&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();EqStepType eqStepType = new EqStepType();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal0);&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;ASYNCH_CALL&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;COMPLETE&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, true, csp);&#xD;&#xA;var_step_name.setValue(step.getName());&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, csp);&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, csp);&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, csp);&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal0);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal1);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowToInteraction&quot;,flowToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;messageSend&quot;, messageSend);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowToInteraction&quot;, flowToInteraction);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;message&quot;, message);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;ASYNCH_CALL&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;COMPLETE&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, true, csp);&#xD;&#xA;var_message_messageSort.setValue(message.getMessageSort());&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, true, csp);&#xD;&#xA;var_message_messageKind.setValue(message.getMessageKind());&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal0);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;line&quot;, line);&#xA;match.registerObject(&quot;messageSend&quot;, messageSend);&#xA;match.registerObject(&quot;interaction&quot;, interaction);&#xA;match.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;match.registerObject(&quot;message&quot;, message);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;system&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;PERFORM&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, true, csp);&#xD;&#xA;var_message_name.setValue(message.getName());&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, csp);&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();EqStepType eqStepType = new EqStepType();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal0);&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal1);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;messageSend&quot;,messageSend);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;messageReceive&quot;,messageReceive);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowToInteraction&quot;,flowToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;message&quot;,message);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;messageSend&quot;, messageSend);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowToInteraction&quot;, flowToInteraction);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;message&quot;, message);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;messageSend&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification()) &amp;&amp; match.getObject(&quot;messageReceive&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification()) &amp;&amp; match.getObject(&quot;message&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessage());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;alt&quot;, alt);&#xA;match.registerObject(&quot;altFlow&quot;, altFlow);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt.condition&quot;, true, csp);&#xD;&#xA;var_alt_condition.setValue(alt.getCondition());&#xD;&#xA;var_alt_condition.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.name&quot;, true, csp);&#xD;&#xA;var_altFlow_name.setValue(altFlow.getName());&#xD;&#xA;var_altFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spec.value&quot;, csp);&#xD;&#xA;var_spec_value.setType(&quot;String&quot;);&#xD;&#xA;Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;guard.name&quot;, csp);&#xD;&#xA;var_guard_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_alt_condition,var_spec_value);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_altFlow_name,var_guard_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;combo&quot;,combo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepToCombo&quot;,stepToCombo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;alt&quot;,alt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlow&quot;,altFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;altFlowToOperand&quot;, altFlowToOperand);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;actorToLine&quot;, actorToLine);&#xA;ruleresult.registerObject(&quot;combo&quot;, combo);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;stepToCombo&quot;, stepToCombo);&#xA;ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;operand&quot;, operand);&#xA;ruleresult.registerObject(&quot;altToOperand&quot;, altToOperand);&#xA;ruleresult.registerObject(&quot;guard&quot;, guard);&#xA;ruleresult.registerObject(&quot;spec&quot;, spec);&#xA;ruleresult.registerObject(&quot;altFlow&quot;, altFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;alt&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getAlternativeFlowAlternative()) &amp;&amp; match.getObject(&quot;altFlow&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getAlternativeFlow());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;combo&quot;, combo);&#xA;match.registerObject(&quot;operand&quot;, operand);&#xA;match.registerObject(&quot;guard&quot;, guard);&#xA;match.registerObject(&quot;spec&quot;, spec);&#xA;match.registerObject(&quot;line&quot;, line);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spec.value&quot;, true, csp);&#xD;&#xA;var_spec_value.setValue(spec.getValue());&#xD;&#xA;var_spec_value.setType(&quot;String&quot;);&#xD;&#xA;Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;guard.name&quot;, true, csp);&#xD;&#xA;var_guard_name.setValue(guard.getName());&#xD;&#xA;var_guard_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt.condition&quot;, csp);&#xD;&#xA;var_alt_condition.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.name&quot;, csp);&#xD;&#xA;var_altFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_alt_condition,var_spec_value);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_altFlow_name,var_guard_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;combo&quot;,combo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepToCombo&quot;,stepToCombo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;operand&quot;,operand);&#xD;&#xA;isApplicableMatch.registerObject(&quot;guard&quot;,guard);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spec&quot;,spec);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;altFlowToOperand&quot;, altFlowToOperand);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;actorToLine&quot;, actorToLine);&#xA;ruleresult.registerObject(&quot;combo&quot;, combo);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;stepToCombo&quot;, stepToCombo);&#xA;ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;operand&quot;, operand);&#xA;ruleresult.registerObject(&quot;altToOperand&quot;, altToOperand);&#xA;ruleresult.registerObject(&quot;guard&quot;, guard);&#xA;ruleresult.registerObject(&quot;spec&quot;, spec);&#xA;ruleresult.registerObject(&quot;altFlow&quot;, altFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;operand&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getInteractionOperand()) &amp;&amp; match.getObject(&quot;guard&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getInteractionConstraint()) &amp;&amp; match.getObject(&quot;spec&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getLiteralString());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;person&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;system&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xD;&#xA;literal2.setValue(&quot;PERFORM&quot;);&#xD;&#xA;literal2.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_sysActor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sysActor.type&quot;, true, csp);&#xD;&#xA;var_sysActor_type.setValue(sysActor.getType());&#xD;&#xA;var_sysActor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, true, csp);&#xD;&#xA;var_step_type.setValue(step.getType());&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();EqActorType eqActorType_0 = new EqActorType();EqStepType eqStepType = new EqStepType();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eqActorType_0);&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal0);&#xD;&#xA;eqActorType_0.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType_0.solve(var_sysActor_type,literal1);&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal2);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;sysActor&quot;, sysActor);&#xA;match.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;ASYNCH_CALL&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;COMPLETE&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, true, csp);&#xD;&#xA;var_step_name.setValue(step.getName());&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, csp);&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, csp);&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, csp);&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal0);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal1);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysActor&quot;,sysActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysLine&quot;,sysLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysActorToSysLine&quot;,sysActorToSysLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowToInteraction&quot;,flowToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;sysActor&quot;, sysActor);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;sysLine&quot;, sysLine);&#xA;ruleresult.registerObject(&quot;sysActorToSysLine&quot;, sysActorToSysLine);&#xA;ruleresult.registerObject(&quot;messageSend&quot;, messageSend);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowToInteraction&quot;, flowToInteraction);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;message&quot;, message);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;actorToLine&quot;, actorToLine);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;ASYNCH_CALL&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;COMPLETE&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, true, csp);&#xD;&#xA;var_message_messageSort.setValue(message.getMessageSort());&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, true, csp);&#xD;&#xA;var_message_messageKind.setValue(message.getMessageKind());&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal0);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;sysLine&quot;, sysLine);&#xA;match.registerObject(&quot;messageSend&quot;, messageSend);&#xA;match.registerObject(&quot;interaction&quot;, interaction);&#xA;match.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;match.registerObject(&quot;message&quot;, message);&#xA;match.registerObject(&quot;line&quot;, line);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;person&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;system&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xD;&#xA;literal2.setValue(&quot;PERFORM&quot;);&#xD;&#xA;literal2.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_sysActor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sysActor.type&quot;, true, csp);&#xD;&#xA;var_sysActor_type.setValue(sysActor.getType());&#xD;&#xA;var_sysActor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, true, csp);&#xD;&#xA;var_message_name.setValue(message.getName());&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, csp);&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();EqActorType eqActorType_0 = new EqActorType();EqStepType eqStepType = new EqStepType();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eqActorType_0);&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal0);&#xD;&#xA;eqActorType_0.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType_0.solve(var_sysActor_type,literal1);&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal2);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysActor&quot;,sysActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysLine&quot;,sysLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysActorToSysLine&quot;,sysActorToSysLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;messageSend&quot;,messageSend);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;messageReceive&quot;,messageReceive);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowToInteraction&quot;,flowToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;message&quot;,message);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;sysActor&quot;, sysActor);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;sysLine&quot;, sysLine);&#xA;ruleresult.registerObject(&quot;sysActorToSysLine&quot;, sysActorToSysLine);&#xA;ruleresult.registerObject(&quot;messageSend&quot;, messageSend);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowToInteraction&quot;, flowToInteraction);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;message&quot;, message);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;actorToLine&quot;, actorToLine);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;messageSend&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification()) &amp;&amp; match.getObject(&quot;messageReceive&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification()) &amp;&amp; match.getObject(&quot;message&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessage());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;system&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;PERFORM&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, true, csp);&#xD;&#xA;var_step_type.setValue(step.getType());&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();EqStepType eqStepType = new EqStepType();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal0);&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;ASYNCH_CALL&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;COMPLETE&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, true, csp);&#xD;&#xA;var_step_name.setValue(step.getName());&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, csp);&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, csp);&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, csp);&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal0);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal1);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;operand&quot;,operand);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowToOperand&quot;,flowToOperand);&#xD;&#xA;isApplicableMatch.registerObject(&quot;combo&quot;,combo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;messageSend&quot;, messageSend);&#xA;ruleresult.registerObject(&quot;operand&quot;, operand);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowToOperand&quot;, flowToOperand);&#xA;ruleresult.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;ruleresult.registerObject(&quot;combo&quot;, combo);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;message&quot;, message);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;ASYNCH_CALL&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;COMPLETE&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, true, csp);&#xD;&#xA;var_message_messageSort.setValue(message.getMessageSort());&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, true, csp);&#xD;&#xA;var_message_messageKind.setValue(message.getMessageKind());&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal0);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;line&quot;, line);&#xA;match.registerObject(&quot;messageSend&quot;, messageSend);&#xA;match.registerObject(&quot;operand&quot;, operand);&#xA;match.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;match.registerObject(&quot;combo&quot;, combo);&#xA;match.registerObject(&quot;message&quot;, message);&#xA;match.registerObject(&quot;interaction&quot;, interaction);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;system&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;PERFORM&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, true, csp);&#xD;&#xA;var_message_name.setValue(message.getName());&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, csp);&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();EqStepType eqStepType = new EqStepType();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal0);&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal1);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;messageSend&quot;,messageSend);&#xD;&#xA;isApplicableMatch.registerObject(&quot;operand&quot;,operand);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowToOperand&quot;,flowToOperand);&#xD;&#xA;isApplicableMatch.registerObject(&quot;messageReceive&quot;,messageReceive);&#xD;&#xA;isApplicableMatch.registerObject(&quot;combo&quot;,combo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;message&quot;,message);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;messageSend&quot;, messageSend);&#xA;ruleresult.registerObject(&quot;operand&quot;, operand);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowToOperand&quot;, flowToOperand);&#xA;ruleresult.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;ruleresult.registerObject(&quot;combo&quot;, combo);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;message&quot;, message);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;messageSend&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification()) &amp;&amp; match.getObject(&quot;messageReceive&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification()) &amp;&amp; match.getObject(&quot;message&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessage());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;person&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;system&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xD;&#xA;literal2.setValue(&quot;PERFORM&quot;);&#xD;&#xA;literal2.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_sysActor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sysActor.type&quot;, true, csp);&#xD;&#xA;var_sysActor_type.setValue(sysActor.getType());&#xD;&#xA;var_sysActor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, true, csp);&#xD;&#xA;var_step_type.setValue(step.getType());&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();EqActorType eqActorType_0 = new EqActorType();EqStepType eqStepType = new EqStepType();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eqActorType_0);&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal0);&#xD;&#xA;eqActorType_0.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType_0.solve(var_sysActor_type,literal1);&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal2);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;match.registerObject(&quot;sysActor&quot;, sysActor);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;ASYNCH_CALL&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;COMPLETE&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, true, csp);&#xD;&#xA;var_step_name.setValue(step.getName());&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, csp);&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, csp);&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, csp);&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal0);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal1);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysActor&quot;,sysActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysLine&quot;,sysLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysActorToSysLine&quot;,sysActorToSysLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;operand&quot;,operand);&#xD;&#xA;isApplicableMatch.registerObject(&quot;combo&quot;,combo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowToOperand&quot;,flowToOperand);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;sysActor&quot;, sysActor);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;sysLine&quot;, sysLine);&#xA;ruleresult.registerObject(&quot;messageSend&quot;, messageSend);&#xA;ruleresult.registerObject(&quot;sysActorToSysLine&quot;, sysActorToSysLine);&#xA;ruleresult.registerObject(&quot;operand&quot;, operand);&#xA;ruleresult.registerObject(&quot;combo&quot;, combo);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowToOperand&quot;, flowToOperand);&#xA;ruleresult.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;message&quot;, message);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;actorToLine&quot;, actorToLine);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;ASYNCH_CALL&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;COMPLETE&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, true, csp);&#xD;&#xA;var_message_messageSort.setValue(message.getMessageSort());&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, true, csp);&#xD;&#xA;var_message_messageKind.setValue(message.getMessageKind());&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal0);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;sysLine&quot;, sysLine);&#xA;match.registerObject(&quot;messageSend&quot;, messageSend);&#xA;match.registerObject(&quot;operand&quot;, operand);&#xA;match.registerObject(&quot;combo&quot;, combo);&#xA;match.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;match.registerObject(&quot;line&quot;, line);&#xA;match.registerObject(&quot;message&quot;, message);&#xA;match.registerObject(&quot;interaction&quot;, interaction);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;person&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;system&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xD;&#xA;literal2.setValue(&quot;PERFORM&quot;);&#xD;&#xA;literal2.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_sysActor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sysActor.type&quot;, true, csp);&#xD;&#xA;var_sysActor_type.setValue(sysActor.getType());&#xD;&#xA;var_sysActor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, true, csp);&#xD;&#xA;var_message_name.setValue(message.getName());&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, csp);&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();EqActorType eqActorType_0 = new EqActorType();EqStepType eqStepType = new EqStepType();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eqActorType_0);&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal0);&#xD;&#xA;eqActorType_0.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType_0.solve(var_sysActor_type,literal1);&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal2);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysActor&quot;,sysActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysLine&quot;,sysLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;messageSend&quot;,messageSend);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysActorToSysLine&quot;,sysActorToSysLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;operand&quot;,operand);&#xD;&#xA;isApplicableMatch.registerObject(&quot;combo&quot;,combo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowToOperand&quot;,flowToOperand);&#xD;&#xA;isApplicableMatch.registerObject(&quot;messageReceive&quot;,messageReceive);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;message&quot;,message);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;sysActor&quot;, sysActor);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;sysLine&quot;, sysLine);&#xA;ruleresult.registerObject(&quot;messageSend&quot;, messageSend);&#xA;ruleresult.registerObject(&quot;sysActorToSysLine&quot;, sysActorToSysLine);&#xA;ruleresult.registerObject(&quot;operand&quot;, operand);&#xA;ruleresult.registerObject(&quot;combo&quot;, combo);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowToOperand&quot;, flowToOperand);&#xA;ruleresult.registerObject(&quot;messageReceive&quot;, messageReceive);&#xA;ruleresult.registerObject(&quot;line&quot;, line);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;message&quot;, message);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;interaction&quot;, interaction);&#xA;ruleresult.registerObject(&quot;useCaseToInteraction&quot;, useCaseToInteraction);&#xA;ruleresult.registerObject(&quot;actorToLine&quot;, actorToLine);&#xA;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;messageSend&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification()) &amp;&amp; match.getObject(&quot;messageReceive&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification()) &amp;&amp; match.getObject(&quot;message&quot;).eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessage());">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;WAIT&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;ASYNCH_SIGNAL&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xD;&#xA;literal2.setValue(&quot;FOUND&quot;);&#xD;&#xA;literal2.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, csp);&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, csp);&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, csp);&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, csp);&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqStepType eqStepType = new EqStepType();EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal0);&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal1);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal2);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;SEND&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;ASYNCH_SIGNAL&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xD;&#xA;literal2.setValue(&quot;LOST&quot;);&#xD;&#xA;literal2.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, csp);&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, csp);&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, csp);&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, csp);&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqStepType eqStepType = new EqStepType();EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal0);&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal1);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal2);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_packageDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;packageDeclaration.name&quot;, csp);&#xD;&#xA;var_packageDeclaration_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.name&quot;, csp);&#xD;&#xA;var_p_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_packageDeclaration_name,var_p_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCasesModel&quot;,useCasesModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;model&quot;,model);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCasesModelToModel&quot;,useCasesModelToModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.name&quot;, csp);&#xD;&#xA;var_useCase_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_interaction_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;interaction.name&quot;, csp);&#xD;&#xA;var_interaction_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_useCase_name,var_interaction_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_package&quot;,_package);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclarationToPackage&quot;,packageDeclarationToPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, csp);&#xD;&#xA;var_actor_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_line_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;line.name&quot;, csp);&#xD;&#xA;var_line_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_actor_name,var_line_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclarationToP&quot;,packageDeclarationToP);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;ALT&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;alt&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, csp);&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE.createVariable(&quot;combo.interactionOperator&quot;, csp);&#xD;&#xA;var_combo_interactionOperator.setType(&quot;ModalSequenceDiagram.InteractionOperatorKind&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqStepType eqStepType = new EqStepType();EqInterOperKind eqInterOperKind = new EqInterOperKind();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;csp.getConstraints().add(eqInterOperKind);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal0);&#xD;&#xA;eqInterOperKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqInterOperKind.solve(var_combo_interactionOperator,literal1);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;par&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE.createVariable(&quot;combo.interactionOperator&quot;, csp);&#xD;&#xA;var_combo_interactionOperator.setType(&quot;ModalSequenceDiagram.InteractionOperatorKind&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqInterOperKind eqInterOperKind = new EqInterOperKind();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqInterOperKind);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqInterOperKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqInterOperKind.solve(var_combo_interactionOperator,literal0);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_parFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parFlow.name&quot;, csp);&#xD;&#xA;var_parFlow_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spec.value&quot;, csp);&#xD;&#xA;var_spec_value.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_parFlow_name,var_spec_value);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;combo&quot;,combo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepToCombo&quot;,stepToCombo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;system&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;ASYNCH_SIGNAL&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xD;&#xA;literal2.setValue(&quot;found&quot;);&#xD;&#xA;literal2.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_precond_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;precond.name&quot;, csp);&#xD;&#xA;var_precond_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, csp);&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, csp);&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, csp);&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal0);&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal1);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal2);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_precond_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;system&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;PERFORM&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xD;&#xA;literal2.setValue(&quot;ASYNCH_CALL&quot;);&#xD;&#xA;literal2.setType(&quot;&quot;);&#xD;&#xA;Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal3&quot;, true, csp);&#xD;&#xA;literal3.setValue(&quot;COMPLETE&quot;);&#xD;&#xA;literal3.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, csp);&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, csp);&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, csp);&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, csp);&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();EqStepType eqStepType = new EqStepType();EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal0);&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal1);&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal2);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal3);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowToInteraction&quot;,flowToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt.condition&quot;, csp);&#xD;&#xA;var_alt_condition.setType(&quot;String&quot;);&#xD;&#xA;Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spec.value&quot;, csp);&#xD;&#xA;var_spec_value.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.name&quot;, csp);&#xD;&#xA;var_altFlow_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;guard.name&quot;, csp);&#xD;&#xA;var_guard_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_alt_condition,var_spec_value);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_altFlow_name,var_guard_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;combo&quot;,combo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepToCombo&quot;,stepToCombo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;person&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;system&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xD;&#xA;literal2.setValue(&quot;PERFORM&quot;);&#xD;&#xA;literal2.setType(&quot;&quot;);&#xD;&#xA;Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal3&quot;, true, csp);&#xD;&#xA;literal3.setValue(&quot;ASYNCH_CALL&quot;);&#xD;&#xA;literal3.setType(&quot;&quot;);&#xD;&#xA;Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal4&quot;, true, csp);&#xD;&#xA;literal4.setValue(&quot;COMPLETE&quot;);&#xD;&#xA;literal4.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_sysActor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sysActor.type&quot;, true, csp);&#xD;&#xA;var_sysActor_type.setValue(sysActor.getType());&#xD;&#xA;var_sysActor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, csp);&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, csp);&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, csp);&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, csp);&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();EqActorType eqActorType_0 = new EqActorType();EqStepType eqStepType = new EqStepType();EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eqActorType_0);&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal0);&#xD;&#xA;eqActorType_0.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType_0.solve(var_sysActor_type,literal1);&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal2);&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal3);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal4);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysActor&quot;,sysActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysLine&quot;,sysLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysActorToSysLine&quot;,sysActorToSysLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowToInteraction&quot;,flowToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;system&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;PERFORM&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xD;&#xA;literal2.setValue(&quot;ASYNCH_CALL&quot;);&#xD;&#xA;literal2.setType(&quot;&quot;);&#xD;&#xA;Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal3&quot;, true, csp);&#xD;&#xA;literal3.setValue(&quot;COMPLETE&quot;);&#xD;&#xA;literal3.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, csp);&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, csp);&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, csp);&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, csp);&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();EqStepType eqStepType = new EqStepType();EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal0);&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal1);&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal2);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal3);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;operand&quot;,operand);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowToOperand&quot;,flowToOperand);&#xD;&#xA;isApplicableMatch.registerObject(&quot;combo&quot;,combo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;person&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;system&quot;);&#xD;&#xA;literal1.setType(&quot;&quot;);&#xD;&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xD;&#xA;literal2.setValue(&quot;PERFORM&quot;);&#xD;&#xA;literal2.setType(&quot;&quot;);&#xD;&#xA;Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal3&quot;, true, csp);&#xD;&#xA;literal3.setValue(&quot;ASYNCH_CALL&quot;);&#xD;&#xA;literal3.setType(&quot;&quot;);&#xD;&#xA;Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal4&quot;, true, csp);&#xD;&#xA;literal4.setValue(&quot;COMPLETE&quot;);&#xD;&#xA;literal4.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_sysActor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sysActor.type&quot;, true, csp);&#xD;&#xA;var_sysActor_type.setValue(sysActor.getType());&#xD;&#xA;var_sysActor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.type&quot;, csp);&#xD;&#xA;var_step_type.setType(&quot;UseCaseDSL.StepType&quot;);&#xD;&#xA;Variable var_message_messageSort = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageSort&quot;, csp);&#xD;&#xA;var_message_messageSort.setType(&quot;ModalSequenceDiagram.MessageSort&quot;);&#xD;&#xA;Variable var_message_messageKind = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.messageKind&quot;, csp);&#xD;&#xA;var_message_messageKind.setType(&quot;ModalSequenceDiagram.MessageKind&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;message.name&quot;, csp);&#xD;&#xA;var_message_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();EqActorType eqActorType_0 = new EqActorType();EqStepType eqStepType = new EqStepType();EqMessageSort eqMessageSort = new EqMessageSort();EqMessageKind eqMessageKind = new EqMessageKind();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eqActorType_0);&#xD;&#xA;csp.getConstraints().add(eqStepType);&#xD;&#xA;csp.getConstraints().add(eqMessageSort);&#xD;&#xA;csp.getConstraints().add(eqMessageKind);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal0);&#xD;&#xA;eqActorType_0.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType_0.solve(var_sysActor_type,literal1);&#xD;&#xA;eqStepType.setRuleName(&quot;&quot;);&#xD;&#xA;eqStepType.solve(var_step_type,literal2);&#xD;&#xA;eqMessageSort.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageSort.solve(var_message_messageSort,literal3);&#xD;&#xA;eqMessageKind.setRuleName(&quot;&quot;);&#xD;&#xA;eqMessageKind.solve(var_message_messageKind,literal4);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_step_name,var_message_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysActor&quot;,sysActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysLine&quot;,sysLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sysActorToSysLine&quot;,sysActorToSysLine);&#xD;&#xA;isApplicableMatch.registerObject(&quot;operand&quot;,operand);&#xD;&#xA;isApplicableMatch.registerObject(&quot;combo&quot;,combo);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowToOperand&quot;,flowToOperand);&#xD;&#xA;isApplicableMatch.registerObject(&quot;line&quot;,line);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;interaction&quot;,interaction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseToInteraction&quot;,useCaseToInteraction);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorToLine&quot;,actorToLine);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/WaitStepToFoundMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SendStepToLostMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCModelToMSDModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UCPackageToMSDPackage"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCaseToInteractionRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ActorToLifelineRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/AltStepToComboRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelStepToCombinedFragmentRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/ParallelFlowToOperandRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UseCasePrecondToFoundMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepBFToMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/StepAltToOperandRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepBFMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/SystemStepNFToMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseToModalSequenceDiagramIntegration/model/UseCaseToModalSequenceDiagramIntegration.ecore#//Rules/UserStepNfToMessageRule"/>
  </importInjectionEntries>
</sdmUtil:CompilerInjection>
