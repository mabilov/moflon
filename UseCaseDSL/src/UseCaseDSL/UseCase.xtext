grammar UseCaseDSL.UseCase with org.eclipse.xtext.common.Terminals

//generate scenario "http://de.abilov.dsl.scenario"
import "platform:/plugin/UseCaseDSL/model/UseCaseDSL.ecore"

UseCasesModel: packages += PackageDeclaration*;

PackageDeclaration: 'package' name = QualifiedName 
	(description = STRING)? 
	('actors' actors += Actor+ )? 
	useCases += UseCase*
	'end package';

UseCase: 'usecase' name = ID 
	(description = STRING)? 
	('extends' superCase = [UseCase|ID])? 
	(('preconditions' preconditions += UCCondition+)? &
		('postcondition' postconditions += UCCondition+)?) 
	flows += Flow*
	'end usecase';

UCCondition: name=STRING;	
Actor: name = ID 
	'as' type = ActorType
	(description = STRING)?  
	('extends' extends=[Actor|ID])?;

Step: NormalStep | ParallelStep;

Flow: BasicFlow | NamedFlow;

BasicFlow: 'basic flow' {BasicFlow} 
	steps += Step*
	'end flow'
	('with postcondition' finalState = UCCondition)?;

NamedFlow: ExceptionFlow | AlternativeFlow | ParallelFlow;

ExceptionFlow: 'exception flow' name = ID 
	'if' condition = STRING 'then' 
	steps += Step*
	'end flow'
	('with postcondition' finalState = UCCondition)?;

AlternativeFlow: 'alternative flow' name = ID
	steps += Step*
	'end flow'
	('with postcondition' finalState = UCCondition)?;

ParallelFlow: 'parallel flow' name = ID
	steps += Step*
	'end flow'
	('with postcondition' finalState = UCCondition)?;

StepAlternative: Condition | LocalAlternative | AlternativeFlowAlternative;

Condition: 'if' condition = STRING 'then' 
	('continue with step' continuation = [Step|ID])?;

LocalAlternative: 'if' condition = STRING 'then' 
	((description = STRING) | ('invoke usecase' invokedUseCase = [UseCase|ID]))
	('continue with step' continuation = [Step|ID])?;

AlternativeFlowAlternative: 'if' condition = STRING 'then' 
	'alternative flow' ref = [NamedFlow|ID]
	('continue with step' continuation = [Step|ID])?;

ParallelStep: 'parallel step' name = ID 
	(label = STRING)? 
	invokedFlows += [ParallelFlow|ID] (',' invokedFlows += [ParallelFlow])*
	('next' next = [Step|ID])?;

NormalStep: 'step' name = ID 
	(label = STRING)?
	type = StepType 
	'by' actor = [Actor|ID]  
	(('alternatives' stepAlternative += StepAlternative+ 'else') |
		('invoke usecase' invokedUseCase = [UseCase|ID]))?
	('next' next = [Step|ID])?;

QualifiedName: ID ('.' ID)*;
	
enum ActorType: PERSON='person' | SYSTEM = 'system' | ORGANIZATION = 'organization';
enum StepType: WAIT = 'wait' | SEND = 'send' | PERFORM = 'perform' | CALL = 'call' | ALT = 'alt';