/**
 * generated by Xtext
 */
package UseCaseDSL.formatting2;

import UseCaseDSL.Actor;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NamedFlow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.Step;
import UseCaseDSL.StepAlternative;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLPackage;
import UseCaseDSL.UseCasesModel;
import UseCaseDSL.services.UseCaseGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class UseCaseFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private UseCaseGrammarAccess _useCaseGrammarAccess;
  
  protected void _format(final UseCasesModel usecasesmodel, @Extension final IFormattableDocument document) {
    EList<PackageDeclaration> _packages = usecasesmodel.getPackages();
    for (final PackageDeclaration packages : _packages) {
      this.format(packages, document);
    }
  }
  
  protected void _format(final PackageDeclaration packageDeclaration, @Extension final IFormattableDocument document) {
    ISemanticRegion _regionForKeyword = this.regionAccess.regionForKeyword(packageDeclaration, "actors");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_regionForKeyword, _function);
    boolean first = true;
    EList<Actor> _actors = packageDeclaration.getActors();
    for (final Actor actor : _actors) {
      {
        this.format(actor, document);
        final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Actor>append(actor, _function_1);
      }
    }
    EList<UseCase> _useCases = packageDeclaration.getUseCases();
    for (final UseCase useCase : _useCases) {
      {
        this.format(useCase, document);
        final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<UseCase>prepend(useCase, _function_1);
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.noIndentation();
        };
        document.<UseCase>prepend(useCase, _function_2);
      }
    }
  }
  
  protected void _format(final UseCase useCase, @Extension final IFormattableDocument document) {
    ISemanticRegion open = this.regionAccess.regionForKeyword(useCase, "preconditions");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(open, _function);
    EList<Flow> _flows = useCase.getFlows();
    for (final Flow flow : _flows) {
      if ((flow instanceof BasicFlow)) {
        final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<BasicFlow>prepend(((BasicFlow)flow), _function_1);
        this.format(((BasicFlow) flow), document);
      }
    }
    EList<Flow> _flows_1 = useCase.getFlows();
    for (final Flow flow_1 : _flows_1) {
      if ((flow_1 instanceof NamedFlow)) {
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<NamedFlow>prepend(((NamedFlow)flow_1), _function_2);
        this.format(((NamedFlow) flow_1), document);
      }
    }
  }
  
  protected void _format(final BasicFlow flow, @Extension final IFormattableDocument document) {
    final ISemanticRegion open = this.regionAccess.regionForKeyword(flow, "basic flow");
    final ISemanticRegion close = this.regionAccess.regionForKeyword(flow, "end flow");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(open, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_1);
    EList<Step> _steps = flow.getSteps();
    for (final Step step : _steps) {
      {
        this.format(step, document);
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Step>append(step, _function_2);
      }
    }
  }
  
  protected void _format(final NamedFlow flow, @Extension final IFormattableDocument document) {
    ISemanticRegion open = this.regionAccess.regionForFeature(flow, UseCaseDSLPackage.Literals.NAMED_FLOW__NAME);
    final ISemanticRegion close = this.regionAccess.regionForKeyword(flow, "end flow");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(open, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_1);
    EList<Step> _steps = flow.getSteps();
    for (final Step step : _steps) {
      {
        this.format(step, document);
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Step>append(step, _function_2);
      }
    }
    ISemanticRegion _regionForKeyword = this.regionAccess.regionForKeyword(flow, "end flow");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noIndentation();
    };
    document.prepend(_regionForKeyword, _function_2);
  }
  
  protected void _format(final NormalStep step, @Extension final IFormattableDocument document) {
    ISemanticRegion _regionForKeyword = this.regionAccess.regionForKeyword(step, "alternatives");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    ISemanticRegion open = document.prepend(_regionForKeyword, _function);
    ISemanticRegion close = this.regionAccess.regionForKeyword(step, "else");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_1);
    EList<StepAlternative> _stepAlternative = step.getStepAlternative();
    for (final StepAlternative alt : _stepAlternative) {
      {
        this.format(alt, document);
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<StepAlternative>prepend(alt, _function_2);
      }
    }
    ISemanticRegion _regionForKeyword_1 = this.regionAccess.regionForKeyword(step, "else");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_regionForKeyword_1, _function_2);
  }
  
  public void format(final Object flow, final IFormattableDocument document) {
    if (flow instanceof XtextResource) {
      _format((XtextResource)flow, document);
      return;
    } else if (flow instanceof BasicFlow) {
      _format((BasicFlow)flow, document);
      return;
    } else if (flow instanceof NamedFlow) {
      _format((NamedFlow)flow, document);
      return;
    } else if (flow instanceof NormalStep) {
      _format((NormalStep)flow, document);
      return;
    } else if (flow instanceof PackageDeclaration) {
      _format((PackageDeclaration)flow, document);
      return;
    } else if (flow instanceof UseCase) {
      _format((UseCase)flow, document);
      return;
    } else if (flow instanceof UseCasesModel) {
      _format((UseCasesModel)flow, document);
      return;
    } else if (flow == null) {
      _format((Void)null, document);
      return;
    } else if (flow != null) {
      _format(flow, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(flow, document).toString());
    }
  }
}
