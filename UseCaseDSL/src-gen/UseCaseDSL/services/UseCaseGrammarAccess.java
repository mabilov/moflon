/*
 * generated by Xtext
 */
package UseCaseDSL.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class UseCaseGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class UseCasesModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UseCasesModel");
		private final Assignment cPackagesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPackagesPackageDeclarationParserRuleCall_0 = (RuleCall)cPackagesAssignment.eContents().get(0);
		
		//UseCasesModel:
		//	packages+=PackageDeclaration*;
		@Override public ParserRule getRule() { return rule; }

		//packages+=PackageDeclaration*
		public Assignment getPackagesAssignment() { return cPackagesAssignment; }

		//PackageDeclaration
		public RuleCall getPackagesPackageDeclarationParserRuleCall_0() { return cPackagesPackageDeclarationParserRuleCall_0; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cActorsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cActorsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cActorsActorParserRuleCall_3_1_0 = (RuleCall)cActorsAssignment_3_1.eContents().get(0);
		private final Assignment cUseCasesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUseCasesUseCaseParserRuleCall_4_0 = (RuleCall)cUseCasesAssignment_4.eContents().get(0);
		private final Keyword cEndPackageKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PackageDeclaration:
		//	"package" name=QualifiedName description=STRING? ("actors" actors+=Actor+)? useCases+=UseCase* "end package";
		@Override public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName description=STRING? ("actors" actors+=Actor+)? useCases+=UseCase* "end package"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//("actors" actors+=Actor+)?
		public Group getGroup_3() { return cGroup_3; }

		//"actors"
		public Keyword getActorsKeyword_3_0() { return cActorsKeyword_3_0; }

		//actors+=Actor+
		public Assignment getActorsAssignment_3_1() { return cActorsAssignment_3_1; }

		//Actor
		public RuleCall getActorsActorParserRuleCall_3_1_0() { return cActorsActorParserRuleCall_3_1_0; }

		//useCases+=UseCase*
		public Assignment getUseCasesAssignment_4() { return cUseCasesAssignment_4; }

		//UseCase
		public RuleCall getUseCasesUseCaseParserRuleCall_4_0() { return cUseCasesUseCaseParserRuleCall_4_0; }

		//"end package"
		public Keyword getEndPackageKeyword_5() { return cEndPackageKeyword_5; }
	}

	public class UseCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UseCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsecaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperCaseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperCaseUseCaseCrossReference_3_1_0 = (CrossReference)cSuperCaseAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperCaseUseCaseIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSuperCaseUseCaseCrossReference_3_1_0.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cPreconditionsKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cPreconditionsAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cPreconditionsUCConditionParserRuleCall_4_0_1_0 = (RuleCall)cPreconditionsAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cPostconditionKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cPostconditionsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cPostconditionsUCConditionParserRuleCall_4_1_1_0 = (RuleCall)cPostconditionsAssignment_4_1_1.eContents().get(0);
		private final Assignment cFlowsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFlowsFlowParserRuleCall_5_0 = (RuleCall)cFlowsAssignment_5.eContents().get(0);
		private final Keyword cEndUsecaseKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//UseCase:
		//	"usecase" name=ID description=STRING? ("extends" superCase=[UseCase])? (("preconditions"
		//	preconditions+=UCCondition+)? & ("postcondition" postconditions+=UCCondition+)?) flows+=Flow* "end usecase";
		@Override public ParserRule getRule() { return rule; }

		//"usecase" name=ID description=STRING? ("extends" superCase=[UseCase])? (("preconditions" preconditions+=UCCondition+)? &
		//("postcondition" postconditions+=UCCondition+)?) flows+=Flow* "end usecase"
		public Group getGroup() { return cGroup; }

		//"usecase"
		public Keyword getUsecaseKeyword_0() { return cUsecaseKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//("extends" superCase=[UseCase])?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superCase=[UseCase]
		public Assignment getSuperCaseAssignment_3_1() { return cSuperCaseAssignment_3_1; }

		//[UseCase]
		public CrossReference getSuperCaseUseCaseCrossReference_3_1_0() { return cSuperCaseUseCaseCrossReference_3_1_0; }

		//ID
		public RuleCall getSuperCaseUseCaseIDTerminalRuleCall_3_1_0_1() { return cSuperCaseUseCaseIDTerminalRuleCall_3_1_0_1; }

		//("preconditions" preconditions+=UCCondition+)? & ("postcondition" postconditions+=UCCondition+)?
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//("preconditions" preconditions+=UCCondition+)?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"preconditions"
		public Keyword getPreconditionsKeyword_4_0_0() { return cPreconditionsKeyword_4_0_0; }

		//preconditions+=UCCondition+
		public Assignment getPreconditionsAssignment_4_0_1() { return cPreconditionsAssignment_4_0_1; }

		//UCCondition
		public RuleCall getPreconditionsUCConditionParserRuleCall_4_0_1_0() { return cPreconditionsUCConditionParserRuleCall_4_0_1_0; }

		//("postcondition" postconditions+=UCCondition+)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"postcondition"
		public Keyword getPostconditionKeyword_4_1_0() { return cPostconditionKeyword_4_1_0; }

		//postconditions+=UCCondition+
		public Assignment getPostconditionsAssignment_4_1_1() { return cPostconditionsAssignment_4_1_1; }

		//UCCondition
		public RuleCall getPostconditionsUCConditionParserRuleCall_4_1_1_0() { return cPostconditionsUCConditionParserRuleCall_4_1_1_0; }

		//flows+=Flow*
		public Assignment getFlowsAssignment_5() { return cFlowsAssignment_5; }

		//Flow
		public RuleCall getFlowsFlowParserRuleCall_5_0() { return cFlowsFlowParserRuleCall_5_0; }

		//"end usecase"
		public Keyword getEndUsecaseKeyword_6() { return cEndUsecaseKeyword_6; }
	}

	public class UCConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UCCondition");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//UCCondition:
		//	name=STRING;
		@Override public ParserRule getRule() { return rule; }

		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}

	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeActorTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExtendsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cExtendsActorCrossReference_4_1_0 = (CrossReference)cExtendsAssignment_4_1.eContents().get(0);
		private final RuleCall cExtendsActorIDTerminalRuleCall_4_1_0_1 = (RuleCall)cExtendsActorCrossReference_4_1_0.eContents().get(1);
		
		//Actor:
		//	name=ID "as" type=ActorType description=STRING? ("extends" extends=[Actor])?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "as" type=ActorType description=STRING? ("extends" extends=[Actor])?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//type=ActorType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ActorType
		public RuleCall getTypeActorTypeEnumRuleCall_2_0() { return cTypeActorTypeEnumRuleCall_2_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }

		//("extends" extends=[Actor])?
		public Group getGroup_4() { return cGroup_4; }

		//"extends"
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }

		//extends=[Actor]
		public Assignment getExtendsAssignment_4_1() { return cExtendsAssignment_4_1; }

		//[Actor]
		public CrossReference getExtendsActorCrossReference_4_1_0() { return cExtendsActorCrossReference_4_1_0; }

		//ID
		public RuleCall getExtendsActorIDTerminalRuleCall_4_1_0_1() { return cExtendsActorIDTerminalRuleCall_4_1_0_1; }
	}

	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Step");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNormalStepParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParallelStepParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Step:
		//	NormalStep | ParallelStep;
		@Override public ParserRule getRule() { return rule; }

		//NormalStep | ParallelStep
		public Alternatives getAlternatives() { return cAlternatives; }

		//NormalStep
		public RuleCall getNormalStepParserRuleCall_0() { return cNormalStepParserRuleCall_0; }

		//ParallelStep
		public RuleCall getParallelStepParserRuleCall_1() { return cParallelStepParserRuleCall_1; }
	}

	public class FlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Flow");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicFlowParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNamedFlowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Flow:
		//	BasicFlow | NamedFlow;
		@Override public ParserRule getRule() { return rule; }

		//BasicFlow | NamedFlow
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicFlow
		public RuleCall getBasicFlowParserRuleCall_0() { return cBasicFlowParserRuleCall_0; }

		//NamedFlow
		public RuleCall getNamedFlowParserRuleCall_1() { return cNamedFlowParserRuleCall_1; }
	}

	public class BasicFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBasicFlowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cBasicFlowAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cStepsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStepsStepParserRuleCall_2_0 = (RuleCall)cStepsAssignment_2.eContents().get(0);
		private final Keyword cEndFlowKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithPostconditionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFinalStateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFinalStateUCConditionParserRuleCall_4_1_0 = (RuleCall)cFinalStateAssignment_4_1.eContents().get(0);
		
		//BasicFlow:
		//	"basic flow" {BasicFlow} steps+=Step* "end flow" ("with postcondition" finalState=UCCondition)?;
		@Override public ParserRule getRule() { return rule; }

		//"basic flow" {BasicFlow} steps+=Step* "end flow" ("with postcondition" finalState=UCCondition)?
		public Group getGroup() { return cGroup; }

		//"basic flow"
		public Keyword getBasicFlowKeyword_0() { return cBasicFlowKeyword_0; }

		//{BasicFlow}
		public Action getBasicFlowAction_1() { return cBasicFlowAction_1; }

		//steps+=Step*
		public Assignment getStepsAssignment_2() { return cStepsAssignment_2; }

		//Step
		public RuleCall getStepsStepParserRuleCall_2_0() { return cStepsStepParserRuleCall_2_0; }

		//"end flow"
		public Keyword getEndFlowKeyword_3() { return cEndFlowKeyword_3; }

		//("with postcondition" finalState=UCCondition)?
		public Group getGroup_4() { return cGroup_4; }

		//"with postcondition"
		public Keyword getWithPostconditionKeyword_4_0() { return cWithPostconditionKeyword_4_0; }

		//finalState=UCCondition
		public Assignment getFinalStateAssignment_4_1() { return cFinalStateAssignment_4_1; }

		//UCCondition
		public RuleCall getFinalStateUCConditionParserRuleCall_4_1_0() { return cFinalStateUCConditionParserRuleCall_4_1_0; }
	}

	public class NamedFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedFlow");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExceptionFlowParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAlternativeFlowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParallelFlowParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NamedFlow:
		//	ExceptionFlow | AlternativeFlow | ParallelFlow;
		@Override public ParserRule getRule() { return rule; }

		//ExceptionFlow | AlternativeFlow | ParallelFlow
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExceptionFlow
		public RuleCall getExceptionFlowParserRuleCall_0() { return cExceptionFlowParserRuleCall_0; }

		//AlternativeFlow
		public RuleCall getAlternativeFlowParserRuleCall_1() { return cAlternativeFlowParserRuleCall_1; }

		//ParallelFlow
		public RuleCall getParallelFlowParserRuleCall_2() { return cParallelFlowParserRuleCall_2; }
	}

	public class ExceptionFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExceptionFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExceptionFlowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionSTRINGTerminalRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStepsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStepsStepParserRuleCall_5_0 = (RuleCall)cStepsAssignment_5.eContents().get(0);
		private final Keyword cEndFlowKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWithPostconditionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFinalStateAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFinalStateUCConditionParserRuleCall_7_1_0 = (RuleCall)cFinalStateAssignment_7_1.eContents().get(0);
		
		//ExceptionFlow:
		//	"exception flow" name=ID "if" condition=STRING "then" steps+=Step* "end flow" ("with postcondition"
		//	finalState=UCCondition)?;
		@Override public ParserRule getRule() { return rule; }

		//"exception flow" name=ID "if" condition=STRING "then" steps+=Step* "end flow" ("with postcondition"
		//finalState=UCCondition)?
		public Group getGroup() { return cGroup; }

		//"exception flow"
		public Keyword getExceptionFlowKeyword_0() { return cExceptionFlowKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"if"
		public Keyword getIfKeyword_2() { return cIfKeyword_2; }

		//condition=STRING
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_3_0() { return cConditionSTRINGTerminalRuleCall_3_0; }

		//"then"
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }

		//steps+=Step*
		public Assignment getStepsAssignment_5() { return cStepsAssignment_5; }

		//Step
		public RuleCall getStepsStepParserRuleCall_5_0() { return cStepsStepParserRuleCall_5_0; }

		//"end flow"
		public Keyword getEndFlowKeyword_6() { return cEndFlowKeyword_6; }

		//("with postcondition" finalState=UCCondition)?
		public Group getGroup_7() { return cGroup_7; }

		//"with postcondition"
		public Keyword getWithPostconditionKeyword_7_0() { return cWithPostconditionKeyword_7_0; }

		//finalState=UCCondition
		public Assignment getFinalStateAssignment_7_1() { return cFinalStateAssignment_7_1; }

		//UCCondition
		public RuleCall getFinalStateUCConditionParserRuleCall_7_1_0() { return cFinalStateUCConditionParserRuleCall_7_1_0; }
	}

	public class AlternativeFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlternativeFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlternativeFlowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cStepsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStepsStepParserRuleCall_2_0 = (RuleCall)cStepsAssignment_2.eContents().get(0);
		private final Keyword cEndFlowKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithPostconditionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFinalStateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFinalStateUCConditionParserRuleCall_4_1_0 = (RuleCall)cFinalStateAssignment_4_1.eContents().get(0);
		
		//AlternativeFlow:
		//	"alternative flow" name=ID steps+=Step* "end flow" ("with postcondition" finalState=UCCondition)?;
		@Override public ParserRule getRule() { return rule; }

		//"alternative flow" name=ID steps+=Step* "end flow" ("with postcondition" finalState=UCCondition)?
		public Group getGroup() { return cGroup; }

		//"alternative flow"
		public Keyword getAlternativeFlowKeyword_0() { return cAlternativeFlowKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//steps+=Step*
		public Assignment getStepsAssignment_2() { return cStepsAssignment_2; }

		//Step
		public RuleCall getStepsStepParserRuleCall_2_0() { return cStepsStepParserRuleCall_2_0; }

		//"end flow"
		public Keyword getEndFlowKeyword_3() { return cEndFlowKeyword_3; }

		//("with postcondition" finalState=UCCondition)?
		public Group getGroup_4() { return cGroup_4; }

		//"with postcondition"
		public Keyword getWithPostconditionKeyword_4_0() { return cWithPostconditionKeyword_4_0; }

		//finalState=UCCondition
		public Assignment getFinalStateAssignment_4_1() { return cFinalStateAssignment_4_1; }

		//UCCondition
		public RuleCall getFinalStateUCConditionParserRuleCall_4_1_0() { return cFinalStateUCConditionParserRuleCall_4_1_0; }
	}

	public class ParallelFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParallelFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParallelFlowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cStepsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStepsStepParserRuleCall_2_0 = (RuleCall)cStepsAssignment_2.eContents().get(0);
		private final Keyword cEndFlowKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithPostconditionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFinalStateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFinalStateUCConditionParserRuleCall_4_1_0 = (RuleCall)cFinalStateAssignment_4_1.eContents().get(0);
		
		//ParallelFlow:
		//	"parallel flow" name=ID steps+=Step* "end flow" ("with postcondition" finalState=UCCondition)?;
		@Override public ParserRule getRule() { return rule; }

		//"parallel flow" name=ID steps+=Step* "end flow" ("with postcondition" finalState=UCCondition)?
		public Group getGroup() { return cGroup; }

		//"parallel flow"
		public Keyword getParallelFlowKeyword_0() { return cParallelFlowKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//steps+=Step*
		public Assignment getStepsAssignment_2() { return cStepsAssignment_2; }

		//Step
		public RuleCall getStepsStepParserRuleCall_2_0() { return cStepsStepParserRuleCall_2_0; }

		//"end flow"
		public Keyword getEndFlowKeyword_3() { return cEndFlowKeyword_3; }

		//("with postcondition" finalState=UCCondition)?
		public Group getGroup_4() { return cGroup_4; }

		//"with postcondition"
		public Keyword getWithPostconditionKeyword_4_0() { return cWithPostconditionKeyword_4_0; }

		//finalState=UCCondition
		public Assignment getFinalStateAssignment_4_1() { return cFinalStateAssignment_4_1; }

		//UCCondition
		public RuleCall getFinalStateUCConditionParserRuleCall_4_1_0() { return cFinalStateUCConditionParserRuleCall_4_1_0; }
	}

	public class StepAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StepAlternative");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalAlternativeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAlternativeFlowAlternativeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//StepAlternative:
		//	Condition | LocalAlternative | AlternativeFlowAlternative;
		@Override public ParserRule getRule() { return rule; }

		//Condition | LocalAlternative | AlternativeFlowAlternative
		public Alternatives getAlternatives() { return cAlternatives; }

		//Condition
		public RuleCall getConditionParserRuleCall_0() { return cConditionParserRuleCall_0; }

		//LocalAlternative
		public RuleCall getLocalAlternativeParserRuleCall_1() { return cLocalAlternativeParserRuleCall_1; }

		//AlternativeFlowAlternative
		public RuleCall getAlternativeFlowAlternativeParserRuleCall_2() { return cAlternativeFlowAlternativeParserRuleCall_2; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionSTRINGTerminalRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cContinueWithStepKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContinuationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cContinuationStepCrossReference_3_1_0 = (CrossReference)cContinuationAssignment_3_1.eContents().get(0);
		private final RuleCall cContinuationStepIDTerminalRuleCall_3_1_0_1 = (RuleCall)cContinuationStepCrossReference_3_1_0.eContents().get(1);
		
		//Condition:
		//	"if" condition=STRING "then" ("continue with step" continuation=[Step])?;
		@Override public ParserRule getRule() { return rule; }

		//"if" condition=STRING "then" ("continue with step" continuation=[Step])?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//condition=STRING
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_1_0() { return cConditionSTRINGTerminalRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//("continue with step" continuation=[Step])?
		public Group getGroup_3() { return cGroup_3; }

		//"continue with step"
		public Keyword getContinueWithStepKeyword_3_0() { return cContinueWithStepKeyword_3_0; }

		//continuation=[Step]
		public Assignment getContinuationAssignment_3_1() { return cContinuationAssignment_3_1; }

		//[Step]
		public CrossReference getContinuationStepCrossReference_3_1_0() { return cContinuationStepCrossReference_3_1_0; }

		//ID
		public RuleCall getContinuationStepIDTerminalRuleCall_3_1_0_1() { return cContinuationStepIDTerminalRuleCall_3_1_0_1; }
	}

	public class LocalAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionSTRINGTerminalRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0_0 = (RuleCall)cDescriptionAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cInvokeUsecaseKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cInvokedUseCaseAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cInvokedUseCaseUseCaseCrossReference_3_1_1_0 = (CrossReference)cInvokedUseCaseAssignment_3_1_1.eContents().get(0);
		private final RuleCall cInvokedUseCaseUseCaseIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cInvokedUseCaseUseCaseCrossReference_3_1_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cContinueWithStepKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContinuationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cContinuationStepCrossReference_4_1_0 = (CrossReference)cContinuationAssignment_4_1.eContents().get(0);
		private final RuleCall cContinuationStepIDTerminalRuleCall_4_1_0_1 = (RuleCall)cContinuationStepCrossReference_4_1_0.eContents().get(1);
		
		//LocalAlternative:
		//	"if" condition=STRING "then" (description=STRING | "invoke usecase" invokedUseCase=[UseCase]) ("continue with step"
		//	continuation=[Step])?;
		@Override public ParserRule getRule() { return rule; }

		//"if" condition=STRING "then" (description=STRING | "invoke usecase" invokedUseCase=[UseCase]) ("continue with step"
		//continuation=[Step])?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//condition=STRING
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_1_0() { return cConditionSTRINGTerminalRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//description=STRING | "invoke usecase" invokedUseCase=[UseCase]
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//description=STRING
		public Assignment getDescriptionAssignment_3_0() { return cDescriptionAssignment_3_0; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0_0() { return cDescriptionSTRINGTerminalRuleCall_3_0_0; }

		//"invoke usecase" invokedUseCase=[UseCase]
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"invoke usecase"
		public Keyword getInvokeUsecaseKeyword_3_1_0() { return cInvokeUsecaseKeyword_3_1_0; }

		//invokedUseCase=[UseCase]
		public Assignment getInvokedUseCaseAssignment_3_1_1() { return cInvokedUseCaseAssignment_3_1_1; }

		//[UseCase]
		public CrossReference getInvokedUseCaseUseCaseCrossReference_3_1_1_0() { return cInvokedUseCaseUseCaseCrossReference_3_1_1_0; }

		//ID
		public RuleCall getInvokedUseCaseUseCaseIDTerminalRuleCall_3_1_1_0_1() { return cInvokedUseCaseUseCaseIDTerminalRuleCall_3_1_1_0_1; }

		//("continue with step" continuation=[Step])?
		public Group getGroup_4() { return cGroup_4; }

		//"continue with step"
		public Keyword getContinueWithStepKeyword_4_0() { return cContinueWithStepKeyword_4_0; }

		//continuation=[Step]
		public Assignment getContinuationAssignment_4_1() { return cContinuationAssignment_4_1; }

		//[Step]
		public CrossReference getContinuationStepCrossReference_4_1_0() { return cContinuationStepCrossReference_4_1_0; }

		//ID
		public RuleCall getContinuationStepIDTerminalRuleCall_4_1_0_1() { return cContinuationStepIDTerminalRuleCall_4_1_0_1; }
	}

	public class AlternativeFlowAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlternativeFlowAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionSTRINGTerminalRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAlternativeFlowKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRefNamedFlowCrossReference_4_0 = (CrossReference)cRefAssignment_4.eContents().get(0);
		private final RuleCall cRefNamedFlowIDTerminalRuleCall_4_0_1 = (RuleCall)cRefNamedFlowCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cContinueWithStepKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cContinuationAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cContinuationStepCrossReference_5_1_0 = (CrossReference)cContinuationAssignment_5_1.eContents().get(0);
		private final RuleCall cContinuationStepIDTerminalRuleCall_5_1_0_1 = (RuleCall)cContinuationStepCrossReference_5_1_0.eContents().get(1);
		
		//AlternativeFlowAlternative:
		//	"if" condition=STRING "then" "alternative flow" ref=[NamedFlow] ("continue with step" continuation=[Step])?;
		@Override public ParserRule getRule() { return rule; }

		//"if" condition=STRING "then" "alternative flow" ref=[NamedFlow] ("continue with step" continuation=[Step])?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//condition=STRING
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_1_0() { return cConditionSTRINGTerminalRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//"alternative flow"
		public Keyword getAlternativeFlowKeyword_3() { return cAlternativeFlowKeyword_3; }

		//ref=[NamedFlow]
		public Assignment getRefAssignment_4() { return cRefAssignment_4; }

		//[NamedFlow]
		public CrossReference getRefNamedFlowCrossReference_4_0() { return cRefNamedFlowCrossReference_4_0; }

		//ID
		public RuleCall getRefNamedFlowIDTerminalRuleCall_4_0_1() { return cRefNamedFlowIDTerminalRuleCall_4_0_1; }

		//("continue with step" continuation=[Step])?
		public Group getGroup_5() { return cGroup_5; }

		//"continue with step"
		public Keyword getContinueWithStepKeyword_5_0() { return cContinueWithStepKeyword_5_0; }

		//continuation=[Step]
		public Assignment getContinuationAssignment_5_1() { return cContinuationAssignment_5_1; }

		//[Step]
		public CrossReference getContinuationStepCrossReference_5_1_0() { return cContinuationStepCrossReference_5_1_0; }

		//ID
		public RuleCall getContinuationStepIDTerminalRuleCall_5_1_0_1() { return cContinuationStepIDTerminalRuleCall_5_1_0_1; }
	}

	public class ParallelStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParallelStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParallelStepKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final Assignment cInvokedFlowsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInvokedFlowsParallelFlowCrossReference_3_0 = (CrossReference)cInvokedFlowsAssignment_3.eContents().get(0);
		private final RuleCall cInvokedFlowsParallelFlowIDTerminalRuleCall_3_0_1 = (RuleCall)cInvokedFlowsParallelFlowCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInvokedFlowsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cInvokedFlowsParallelFlowCrossReference_4_1_0 = (CrossReference)cInvokedFlowsAssignment_4_1.eContents().get(0);
		private final RuleCall cInvokedFlowsParallelFlowIDTerminalRuleCall_4_1_0_1 = (RuleCall)cInvokedFlowsParallelFlowCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cNextKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cNextAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cNextStepCrossReference_5_1_0 = (CrossReference)cNextAssignment_5_1.eContents().get(0);
		private final RuleCall cNextStepIDTerminalRuleCall_5_1_0_1 = (RuleCall)cNextStepCrossReference_5_1_0.eContents().get(1);
		
		//ParallelStep:
		//	"parallel step" name=ID label=STRING? invokedFlows+=[ParallelFlow] ("," invokedFlows+=[ParallelFlow])* ("next"
		//	next=[Step])?;
		@Override public ParserRule getRule() { return rule; }

		//"parallel step" name=ID label=STRING? invokedFlows+=[ParallelFlow] ("," invokedFlows+=[ParallelFlow])* ("next"
		//next=[Step])?
		public Group getGroup() { return cGroup; }

		//"parallel step"
		public Keyword getParallelStepKeyword_0() { return cParallelStepKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//label=STRING?
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }

		//invokedFlows+=[ParallelFlow]
		public Assignment getInvokedFlowsAssignment_3() { return cInvokedFlowsAssignment_3; }

		//[ParallelFlow]
		public CrossReference getInvokedFlowsParallelFlowCrossReference_3_0() { return cInvokedFlowsParallelFlowCrossReference_3_0; }

		//ID
		public RuleCall getInvokedFlowsParallelFlowIDTerminalRuleCall_3_0_1() { return cInvokedFlowsParallelFlowIDTerminalRuleCall_3_0_1; }

		//("," invokedFlows+=[ParallelFlow])*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//invokedFlows+=[ParallelFlow]
		public Assignment getInvokedFlowsAssignment_4_1() { return cInvokedFlowsAssignment_4_1; }

		//[ParallelFlow]
		public CrossReference getInvokedFlowsParallelFlowCrossReference_4_1_0() { return cInvokedFlowsParallelFlowCrossReference_4_1_0; }

		//ID
		public RuleCall getInvokedFlowsParallelFlowIDTerminalRuleCall_4_1_0_1() { return cInvokedFlowsParallelFlowIDTerminalRuleCall_4_1_0_1; }

		//("next" next=[Step])?
		public Group getGroup_5() { return cGroup_5; }

		//"next"
		public Keyword getNextKeyword_5_0() { return cNextKeyword_5_0; }

		//next=[Step]
		public Assignment getNextAssignment_5_1() { return cNextAssignment_5_1; }

		//[Step]
		public CrossReference getNextStepCrossReference_5_1_0() { return cNextStepCrossReference_5_1_0; }

		//ID
		public RuleCall getNextStepIDTerminalRuleCall_5_1_0_1() { return cNextStepIDTerminalRuleCall_5_1_0_1; }
	}

	public class NormalStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NormalStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStepKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeStepTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cByKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cActorActorCrossReference_5_0 = (CrossReference)cActorAssignment_5.eContents().get(0);
		private final RuleCall cActorActorIDTerminalRuleCall_5_0_1 = (RuleCall)cActorActorCrossReference_5_0.eContents().get(1);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cAlternativesKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cStepAlternativeAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cStepAlternativeStepAlternativeParserRuleCall_6_0_1_0 = (RuleCall)cStepAlternativeAssignment_6_0_1.eContents().get(0);
		private final Keyword cElseKeyword_6_0_2 = (Keyword)cGroup_6_0.eContents().get(2);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cInvokeUsecaseKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cInvokedUseCaseAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final CrossReference cInvokedUseCaseUseCaseCrossReference_6_1_1_0 = (CrossReference)cInvokedUseCaseAssignment_6_1_1.eContents().get(0);
		private final RuleCall cInvokedUseCaseUseCaseIDTerminalRuleCall_6_1_1_0_1 = (RuleCall)cInvokedUseCaseUseCaseCrossReference_6_1_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cNextKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cNextAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cNextStepCrossReference_7_1_0 = (CrossReference)cNextAssignment_7_1.eContents().get(0);
		private final RuleCall cNextStepIDTerminalRuleCall_7_1_0_1 = (RuleCall)cNextStepCrossReference_7_1_0.eContents().get(1);
		
		//NormalStep:
		//	"step" name=ID label=STRING? type=StepType "by" actor=[Actor] ("alternatives" stepAlternative+=StepAlternative+
		//	"else" | "invoke usecase" invokedUseCase=[UseCase])? ("next" next=[Step])?;
		@Override public ParserRule getRule() { return rule; }

		//"step" name=ID label=STRING? type=StepType "by" actor=[Actor] ("alternatives" stepAlternative+=StepAlternative+ "else" |
		//"invoke usecase" invokedUseCase=[UseCase])? ("next" next=[Step])?
		public Group getGroup() { return cGroup; }

		//"step"
		public Keyword getStepKeyword_0() { return cStepKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//label=STRING?
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }

		//type=StepType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//StepType
		public RuleCall getTypeStepTypeEnumRuleCall_3_0() { return cTypeStepTypeEnumRuleCall_3_0; }

		//"by"
		public Keyword getByKeyword_4() { return cByKeyword_4; }

		//actor=[Actor]
		public Assignment getActorAssignment_5() { return cActorAssignment_5; }

		//[Actor]
		public CrossReference getActorActorCrossReference_5_0() { return cActorActorCrossReference_5_0; }

		//ID
		public RuleCall getActorActorIDTerminalRuleCall_5_0_1() { return cActorActorIDTerminalRuleCall_5_0_1; }

		//("alternatives" stepAlternative+=StepAlternative+ "else" | "invoke usecase" invokedUseCase=[UseCase])?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"alternatives" stepAlternative+=StepAlternative+ "else"
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"alternatives"
		public Keyword getAlternativesKeyword_6_0_0() { return cAlternativesKeyword_6_0_0; }

		//stepAlternative+=StepAlternative+
		public Assignment getStepAlternativeAssignment_6_0_1() { return cStepAlternativeAssignment_6_0_1; }

		//StepAlternative
		public RuleCall getStepAlternativeStepAlternativeParserRuleCall_6_0_1_0() { return cStepAlternativeStepAlternativeParserRuleCall_6_0_1_0; }

		//"else"
		public Keyword getElseKeyword_6_0_2() { return cElseKeyword_6_0_2; }

		//"invoke usecase" invokedUseCase=[UseCase]
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"invoke usecase"
		public Keyword getInvokeUsecaseKeyword_6_1_0() { return cInvokeUsecaseKeyword_6_1_0; }

		//invokedUseCase=[UseCase]
		public Assignment getInvokedUseCaseAssignment_6_1_1() { return cInvokedUseCaseAssignment_6_1_1; }

		//[UseCase]
		public CrossReference getInvokedUseCaseUseCaseCrossReference_6_1_1_0() { return cInvokedUseCaseUseCaseCrossReference_6_1_1_0; }

		//ID
		public RuleCall getInvokedUseCaseUseCaseIDTerminalRuleCall_6_1_1_0_1() { return cInvokedUseCaseUseCaseIDTerminalRuleCall_6_1_1_0_1; }

		//("next" next=[Step])?
		public Group getGroup_7() { return cGroup_7; }

		//"next"
		public Keyword getNextKeyword_7_0() { return cNextKeyword_7_0; }

		//next=[Step]
		public Assignment getNextAssignment_7_1() { return cNextAssignment_7_1; }

		//[Step]
		public CrossReference getNextStepCrossReference_7_1_0() { return cNextStepCrossReference_7_1_0; }

		//ID
		public RuleCall getNextStepIDTerminalRuleCall_7_1_0_1() { return cNextStepIDTerminalRuleCall_7_1_0_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class ActorTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ActorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPERSONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPERSONPersonKeyword_0_0 = (Keyword)cPERSONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSYSTEMEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSYSTEMSystemKeyword_1_0 = (Keyword)cSYSTEMEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cORGANIZATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cORGANIZATIONOrganizationKeyword_2_0 = (Keyword)cORGANIZATIONEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ActorType:
		//	PERSON="person" | SYSTEM="system" | ORGANIZATION="organization";
		public EnumRule getRule() { return rule; }

		//PERSON="person" | SYSTEM="system" | ORGANIZATION="organization"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PERSON="person"
		public EnumLiteralDeclaration getPERSONEnumLiteralDeclaration_0() { return cPERSONEnumLiteralDeclaration_0; }

		//"person"
		public Keyword getPERSONPersonKeyword_0_0() { return cPERSONPersonKeyword_0_0; }

		//SYSTEM="system"
		public EnumLiteralDeclaration getSYSTEMEnumLiteralDeclaration_1() { return cSYSTEMEnumLiteralDeclaration_1; }

		//"system"
		public Keyword getSYSTEMSystemKeyword_1_0() { return cSYSTEMSystemKeyword_1_0; }

		//ORGANIZATION="organization"
		public EnumLiteralDeclaration getORGANIZATIONEnumLiteralDeclaration_2() { return cORGANIZATIONEnumLiteralDeclaration_2; }

		//"organization"
		public Keyword getORGANIZATIONOrganizationKeyword_2_0() { return cORGANIZATIONOrganizationKeyword_2_0; }
	}

	public class StepTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "StepType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWAITEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWAITWaitKeyword_0_0 = (Keyword)cWAITEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSENDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSENDSendKeyword_1_0 = (Keyword)cSENDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPERFORMEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPERFORMPerformKeyword_2_0 = (Keyword)cPERFORMEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCALLEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCALLCallKeyword_3_0 = (Keyword)cCALLEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cALTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cALTAltKeyword_4_0 = (Keyword)cALTEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum StepType:
		//	WAIT="wait" | SEND="send" | PERFORM="perform" | CALL="call" | ALT="alt";
		public EnumRule getRule() { return rule; }

		//WAIT="wait" | SEND="send" | PERFORM="perform" | CALL="call" | ALT="alt"
		public Alternatives getAlternatives() { return cAlternatives; }

		//WAIT="wait"
		public EnumLiteralDeclaration getWAITEnumLiteralDeclaration_0() { return cWAITEnumLiteralDeclaration_0; }

		//"wait"
		public Keyword getWAITWaitKeyword_0_0() { return cWAITWaitKeyword_0_0; }

		//SEND="send"
		public EnumLiteralDeclaration getSENDEnumLiteralDeclaration_1() { return cSENDEnumLiteralDeclaration_1; }

		//"send"
		public Keyword getSENDSendKeyword_1_0() { return cSENDSendKeyword_1_0; }

		//PERFORM="perform"
		public EnumLiteralDeclaration getPERFORMEnumLiteralDeclaration_2() { return cPERFORMEnumLiteralDeclaration_2; }

		//"perform"
		public Keyword getPERFORMPerformKeyword_2_0() { return cPERFORMPerformKeyword_2_0; }

		//CALL="call"
		public EnumLiteralDeclaration getCALLEnumLiteralDeclaration_3() { return cCALLEnumLiteralDeclaration_3; }

		//"call"
		public Keyword getCALLCallKeyword_3_0() { return cCALLCallKeyword_3_0; }

		//ALT="alt"
		public EnumLiteralDeclaration getALTEnumLiteralDeclaration_4() { return cALTEnumLiteralDeclaration_4; }

		//"alt"
		public Keyword getALTAltKeyword_4_0() { return cALTAltKeyword_4_0; }
	}
	
	private final UseCasesModelElements pUseCasesModel;
	private final PackageDeclarationElements pPackageDeclaration;
	private final UseCaseElements pUseCase;
	private final UCConditionElements pUCCondition;
	private final ActorElements pActor;
	private final StepElements pStep;
	private final FlowElements pFlow;
	private final BasicFlowElements pBasicFlow;
	private final NamedFlowElements pNamedFlow;
	private final ExceptionFlowElements pExceptionFlow;
	private final AlternativeFlowElements pAlternativeFlow;
	private final ParallelFlowElements pParallelFlow;
	private final StepAlternativeElements pStepAlternative;
	private final ConditionElements pCondition;
	private final LocalAlternativeElements pLocalAlternative;
	private final AlternativeFlowAlternativeElements pAlternativeFlowAlternative;
	private final ParallelStepElements pParallelStep;
	private final NormalStepElements pNormalStep;
	private final QualifiedNameElements pQualifiedName;
	private final ActorTypeElements unknownRuleActorType;
	private final StepTypeElements unknownRuleStepType;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UseCaseGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUseCasesModel = new UseCasesModelElements();
		this.pPackageDeclaration = new PackageDeclarationElements();
		this.pUseCase = new UseCaseElements();
		this.pUCCondition = new UCConditionElements();
		this.pActor = new ActorElements();
		this.pStep = new StepElements();
		this.pFlow = new FlowElements();
		this.pBasicFlow = new BasicFlowElements();
		this.pNamedFlow = new NamedFlowElements();
		this.pExceptionFlow = new ExceptionFlowElements();
		this.pAlternativeFlow = new AlternativeFlowElements();
		this.pParallelFlow = new ParallelFlowElements();
		this.pStepAlternative = new StepAlternativeElements();
		this.pCondition = new ConditionElements();
		this.pLocalAlternative = new LocalAlternativeElements();
		this.pAlternativeFlowAlternative = new AlternativeFlowAlternativeElements();
		this.pParallelStep = new ParallelStepElements();
		this.pNormalStep = new NormalStepElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.unknownRuleActorType = new ActorTypeElements();
		this.unknownRuleStepType = new StepTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("UseCaseDSL.UseCase".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//UseCasesModel:
	//	packages+=PackageDeclaration*;
	public UseCasesModelElements getUseCasesModelAccess() {
		return pUseCasesModel;
	}
	
	public ParserRule getUseCasesModelRule() {
		return getUseCasesModelAccess().getRule();
	}

	//PackageDeclaration:
	//	"package" name=QualifiedName description=STRING? ("actors" actors+=Actor+)? useCases+=UseCase* "end package";
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return pPackageDeclaration;
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//UseCase:
	//	"usecase" name=ID description=STRING? ("extends" superCase=[UseCase])? (("preconditions"
	//	preconditions+=UCCondition+)? & ("postcondition" postconditions+=UCCondition+)?) flows+=Flow* "end usecase";
	public UseCaseElements getUseCaseAccess() {
		return pUseCase;
	}
	
	public ParserRule getUseCaseRule() {
		return getUseCaseAccess().getRule();
	}

	//UCCondition:
	//	name=STRING;
	public UCConditionElements getUCConditionAccess() {
		return pUCCondition;
	}
	
	public ParserRule getUCConditionRule() {
		return getUCConditionAccess().getRule();
	}

	//Actor:
	//	name=ID "as" type=ActorType description=STRING? ("extends" extends=[Actor])?;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}

	//Step:
	//	NormalStep | ParallelStep;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}

	//Flow:
	//	BasicFlow | NamedFlow;
	public FlowElements getFlowAccess() {
		return pFlow;
	}
	
	public ParserRule getFlowRule() {
		return getFlowAccess().getRule();
	}

	//BasicFlow:
	//	"basic flow" {BasicFlow} steps+=Step* "end flow" ("with postcondition" finalState=UCCondition)?;
	public BasicFlowElements getBasicFlowAccess() {
		return pBasicFlow;
	}
	
	public ParserRule getBasicFlowRule() {
		return getBasicFlowAccess().getRule();
	}

	//NamedFlow:
	//	ExceptionFlow | AlternativeFlow | ParallelFlow;
	public NamedFlowElements getNamedFlowAccess() {
		return pNamedFlow;
	}
	
	public ParserRule getNamedFlowRule() {
		return getNamedFlowAccess().getRule();
	}

	//ExceptionFlow:
	//	"exception flow" name=ID "if" condition=STRING "then" steps+=Step* "end flow" ("with postcondition"
	//	finalState=UCCondition)?;
	public ExceptionFlowElements getExceptionFlowAccess() {
		return pExceptionFlow;
	}
	
	public ParserRule getExceptionFlowRule() {
		return getExceptionFlowAccess().getRule();
	}

	//AlternativeFlow:
	//	"alternative flow" name=ID steps+=Step* "end flow" ("with postcondition" finalState=UCCondition)?;
	public AlternativeFlowElements getAlternativeFlowAccess() {
		return pAlternativeFlow;
	}
	
	public ParserRule getAlternativeFlowRule() {
		return getAlternativeFlowAccess().getRule();
	}

	//ParallelFlow:
	//	"parallel flow" name=ID steps+=Step* "end flow" ("with postcondition" finalState=UCCondition)?;
	public ParallelFlowElements getParallelFlowAccess() {
		return pParallelFlow;
	}
	
	public ParserRule getParallelFlowRule() {
		return getParallelFlowAccess().getRule();
	}

	//StepAlternative:
	//	Condition | LocalAlternative | AlternativeFlowAlternative;
	public StepAlternativeElements getStepAlternativeAccess() {
		return pStepAlternative;
	}
	
	public ParserRule getStepAlternativeRule() {
		return getStepAlternativeAccess().getRule();
	}

	//Condition:
	//	"if" condition=STRING "then" ("continue with step" continuation=[Step])?;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//LocalAlternative:
	//	"if" condition=STRING "then" (description=STRING | "invoke usecase" invokedUseCase=[UseCase]) ("continue with step"
	//	continuation=[Step])?;
	public LocalAlternativeElements getLocalAlternativeAccess() {
		return pLocalAlternative;
	}
	
	public ParserRule getLocalAlternativeRule() {
		return getLocalAlternativeAccess().getRule();
	}

	//AlternativeFlowAlternative:
	//	"if" condition=STRING "then" "alternative flow" ref=[NamedFlow] ("continue with step" continuation=[Step])?;
	public AlternativeFlowAlternativeElements getAlternativeFlowAlternativeAccess() {
		return pAlternativeFlowAlternative;
	}
	
	public ParserRule getAlternativeFlowAlternativeRule() {
		return getAlternativeFlowAlternativeAccess().getRule();
	}

	//ParallelStep:
	//	"parallel step" name=ID label=STRING? invokedFlows+=[ParallelFlow] ("," invokedFlows+=[ParallelFlow])* ("next"
	//	next=[Step])?;
	public ParallelStepElements getParallelStepAccess() {
		return pParallelStep;
	}
	
	public ParserRule getParallelStepRule() {
		return getParallelStepAccess().getRule();
	}

	//NormalStep:
	//	"step" name=ID label=STRING? type=StepType "by" actor=[Actor] ("alternatives" stepAlternative+=StepAlternative+
	//	"else" | "invoke usecase" invokedUseCase=[UseCase])? ("next" next=[Step])?;
	public NormalStepElements getNormalStepAccess() {
		return pNormalStep;
	}
	
	public ParserRule getNormalStepRule() {
		return getNormalStepAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//enum ActorType:
	//	PERSON="person" | SYSTEM="system" | ORGANIZATION="organization";
	public ActorTypeElements getActorTypeAccess() {
		return unknownRuleActorType;
	}
	
	public EnumRule getActorTypeRule() {
		return getActorTypeAccess().getRule();
	}

	//enum StepType:
	//	WAIT="wait" | SEND="send" | PERFORM="perform" | CALL="call" | ALT="alt";
	public StepTypeElements getStepTypeAccess() {
		return unknownRuleStepType;
	}
	
	public EnumRule getStepTypeRule() {
		return getStepTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
