/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackage;
import BpmnToUseCaseIntegration.DocRootToUCModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.ICEToAltFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SeqFlowToAltFlowAlt;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.Event;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.FlowNode;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;
import bpmn2.Task;
import bpmn2.UserTask;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Continuation Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getContinuationRule()
 * @model
 * @generated
 */
public interface ContinuationRule extends EObject, AbstractRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __alt_continuation_nextStep = null;\n      EMoflonEdge __step_stepAlternative_alt = null;\n      EMoflonEdge __alt_ref_flow = null;\n      EMoflonEdge __step_next_nextStep = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object nextStep is really bound\n         JavaSDM.ensure ( nextStep != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check isomorphic binding between objects step and nextStep \n         JavaSDM.ensure ( !step.equals (nextStep) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,alt,flow,step,nextStep));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object alt is really bound\n            JavaSDM.ensure ( alt != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object nextStep is really bound\n            JavaSDM.ensure ( nextStep != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check isomorphic binding between objects step and nextStep \n            JavaSDM.ensure ( !step.equals (nextStep) );\n\n            // create object __alt_continuation_nextStep\n            __alt_continuation_nextStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __alt_continuation_nextStep\n            __alt_continuation_nextStep.setName (\"continuation\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__alt_continuation_nextStep,\"toBeTranslatedEdges\");\n\n            // create link\n            __alt_continuation_nextStep.setSrc( alt);\n\n\n            // create link\n            __alt_continuation_nextStep.setTrg( nextStep);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object alt is really bound\n            JavaSDM.ensure ( alt != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object nextStep is really bound\n            JavaSDM.ensure ( nextStep != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check isomorphic binding between objects step and nextStep \n            JavaSDM.ensure ( !step.equals (nextStep) );\n\n            // create object __step_stepAlternative_alt\n            __step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __alt_ref_flow\n            __alt_ref_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __step_next_nextStep\n            __step_next_nextStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __alt_ref_flow\n            __alt_ref_flow.setName (\"ref\");\n            // assign attribute __step_stepAlternative_alt\n            __step_stepAlternative_alt.setName (\"stepAlternative\");\n            // assign attribute __step_next_nextStep\n            __step_next_nextStep.setName (\"next\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,step,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__step_stepAlternative_alt,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__alt_ref_flow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,alt,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__step_next_nextStep,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,nextStep,\"contextNodes\");\n\n            // create link\n            __alt_ref_flow.setSrc( alt);\n\n\n            // create link\n            __step_stepAlternative_alt.setTrg( alt);\n\n\n            // create link\n            __alt_ref_flow.setTrg( flow);\n\n\n            // create link\n            __step_stepAlternative_alt.setSrc( step);\n\n\n            // create link\n            __step_next_nextStep.setSrc( step);\n\n\n            // create link\n            __step_next_nextStep.setTrg( nextStep);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,alt,flow,step,nextStep);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, AlternativeFlowAlternative alt,
			AlternativeFlow flow, NormalStep step, Step nextStep);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      AlternativeFlowAlternative alt = null;\n      ExclusiveGateway excConvGw = null;\n      FlowNodeToStep excConvGwToStep = null;\n      AlternativeFlow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      FlowNode nextNode = null;\n      FlowNodeToStep nextNodeToNextStep = null;\n      Step nextStep = null;\n      SequenceFlow outFlow = null;\n      NormalStep step = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __alt_continuation_nextStep = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"alt\"));\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"excConvGw\"));\n\n         // ensure correct type and really bound of object excConvGw\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         excConvGw = (ExclusiveGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"excConvGwToStep\"));\n\n         // ensure correct type and really bound of object excConvGwToStep\n         JavaSDM.ensure ( _TmpObject instanceof FlowNodeToStep );\n         excConvGwToStep = (FlowNodeToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         flow = (AlternativeFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"nextNode\"));\n\n         // ensure correct type and really bound of object nextNode\n         JavaSDM.ensure ( _TmpObject instanceof FlowNode );\n         nextNode = (FlowNode) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"nextNodeToNextStep\"));\n\n         // ensure correct type and really bound of object nextNodeToNextStep\n         JavaSDM.ensure ( _TmpObject instanceof FlowNodeToStep );\n         nextNodeToNextStep = (FlowNodeToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"nextStep\"));\n\n         // ensure correct type and really bound of object nextStep\n         JavaSDM.ensure ( _TmpObject instanceof Step );\n         nextStep = (Step) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects nextNode and excConvGw \n         JavaSDM.ensure ( !nextNode.equals (excConvGw) );\n\n         // check isomorphic binding between objects nextNodeToNextStep and excConvGwToStep \n         JavaSDM.ensure ( !nextNodeToNextStep.equals (excConvGwToStep) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects step and nextStep \n         JavaSDM.ensure ( !step.equals (nextStep) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object excConvGw is really bound\n         JavaSDM.ensure ( excConvGw != null );\n         // check object excConvGwToStep is really bound\n         JavaSDM.ensure ( excConvGwToStep != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object nextNode is really bound\n         JavaSDM.ensure ( nextNode != null );\n         // check object nextNodeToNextStep is really bound\n         JavaSDM.ensure ( nextNodeToNextStep != null );\n         // check object nextStep is really bound\n         JavaSDM.ensure ( nextStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check isomorphic binding between objects excConvGw and alt \n         JavaSDM.ensure ( !excConvGw.equals (alt) );\n\n         // check isomorphic binding between objects excConvGwToStep and alt \n         JavaSDM.ensure ( !excConvGwToStep.equals (alt) );\n\n         // check isomorphic binding between objects flow and alt \n         JavaSDM.ensure ( !flow.equals (alt) );\n\n         // check isomorphic binding between objects inFlow and alt \n         JavaSDM.ensure ( !inFlow.equals (alt) );\n\n         // check isomorphic binding between objects inFlowToFlow and alt \n         JavaSDM.ensure ( !inFlowToFlow.equals (alt) );\n\n         // check isomorphic binding between objects nextNode and alt \n         JavaSDM.ensure ( !nextNode.equals (alt) );\n\n         // check isomorphic binding between objects nextNodeToNextStep and alt \n         JavaSDM.ensure ( !nextNodeToNextStep.equals (alt) );\n\n         // check isomorphic binding between objects nextStep and alt \n         JavaSDM.ensure ( !nextStep.equals (alt) );\n\n         // check isomorphic binding between objects outFlow and alt \n         JavaSDM.ensure ( !outFlow.equals (alt) );\n\n         // check isomorphic binding between objects step and alt \n         JavaSDM.ensure ( !step.equals (alt) );\n\n         // check isomorphic binding between objects excConvGwToStep and excConvGw \n         JavaSDM.ensure ( !excConvGwToStep.equals (excConvGw) );\n\n         // check isomorphic binding between objects flow and excConvGw \n         JavaSDM.ensure ( !flow.equals (excConvGw) );\n\n         // check isomorphic binding between objects inFlow and excConvGw \n         JavaSDM.ensure ( !inFlow.equals (excConvGw) );\n\n         // check isomorphic binding between objects inFlowToFlow and excConvGw \n         JavaSDM.ensure ( !inFlowToFlow.equals (excConvGw) );\n\n         // check isomorphic binding between objects nextNode and excConvGw \n         JavaSDM.ensure ( !nextNode.equals (excConvGw) );\n\n         // check isomorphic binding between objects nextNodeToNextStep and excConvGw \n         JavaSDM.ensure ( !nextNodeToNextStep.equals (excConvGw) );\n\n         // check isomorphic binding between objects nextStep and excConvGw \n         JavaSDM.ensure ( !nextStep.equals (excConvGw) );\n\n         // check isomorphic binding between objects outFlow and excConvGw \n         JavaSDM.ensure ( !outFlow.equals (excConvGw) );\n\n         // check isomorphic binding between objects step and excConvGw \n         JavaSDM.ensure ( !step.equals (excConvGw) );\n\n         // check isomorphic binding between objects flow and excConvGwToStep \n         JavaSDM.ensure ( !flow.equals (excConvGwToStep) );\n\n         // check isomorphic binding between objects inFlow and excConvGwToStep \n         JavaSDM.ensure ( !inFlow.equals (excConvGwToStep) );\n\n         // check isomorphic binding between objects inFlowToFlow and excConvGwToStep \n         JavaSDM.ensure ( !inFlowToFlow.equals (excConvGwToStep) );\n\n         // check isomorphic binding between objects nextNode and excConvGwToStep \n         JavaSDM.ensure ( !nextNode.equals (excConvGwToStep) );\n\n         // check isomorphic binding between objects nextNodeToNextStep and excConvGwToStep \n         JavaSDM.ensure ( !nextNodeToNextStep.equals (excConvGwToStep) );\n\n         // check isomorphic binding between objects nextStep and excConvGwToStep \n         JavaSDM.ensure ( !nextStep.equals (excConvGwToStep) );\n\n         // check isomorphic binding between objects outFlow and excConvGwToStep \n         JavaSDM.ensure ( !outFlow.equals (excConvGwToStep) );\n\n         // check isomorphic binding between objects step and excConvGwToStep \n         JavaSDM.ensure ( !step.equals (excConvGwToStep) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects nextNode and flow \n         JavaSDM.ensure ( !nextNode.equals (flow) );\n\n         // check isomorphic binding between objects nextNodeToNextStep and flow \n         JavaSDM.ensure ( !nextNodeToNextStep.equals (flow) );\n\n         // check isomorphic binding between objects nextStep and flow \n         JavaSDM.ensure ( !nextStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects step and flow \n         JavaSDM.ensure ( !step.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects nextNode and inFlow \n         JavaSDM.ensure ( !nextNode.equals (inFlow) );\n\n         // check isomorphic binding between objects nextNodeToNextStep and inFlow \n         JavaSDM.ensure ( !nextNodeToNextStep.equals (inFlow) );\n\n         // check isomorphic binding between objects nextStep and inFlow \n         JavaSDM.ensure ( !nextStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects step and inFlow \n         JavaSDM.ensure ( !step.equals (inFlow) );\n\n         // check isomorphic binding between objects nextNode and inFlowToFlow \n         JavaSDM.ensure ( !nextNode.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects nextNodeToNextStep and inFlowToFlow \n         JavaSDM.ensure ( !nextNodeToNextStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects nextStep and inFlowToFlow \n         JavaSDM.ensure ( !nextStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects step and inFlowToFlow \n         JavaSDM.ensure ( !step.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects nextNodeToNextStep and nextNode \n         JavaSDM.ensure ( !nextNodeToNextStep.equals (nextNode) );\n\n         // check isomorphic binding between objects nextStep and nextNode \n         JavaSDM.ensure ( !nextStep.equals (nextNode) );\n\n         // check isomorphic binding between objects outFlow and nextNode \n         JavaSDM.ensure ( !outFlow.equals (nextNode) );\n\n         // check isomorphic binding between objects step and nextNode \n         JavaSDM.ensure ( !step.equals (nextNode) );\n\n         // check isomorphic binding between objects nextStep and nextNodeToNextStep \n         JavaSDM.ensure ( !nextStep.equals (nextNodeToNextStep) );\n\n         // check isomorphic binding between objects outFlow and nextNodeToNextStep \n         JavaSDM.ensure ( !outFlow.equals (nextNodeToNextStep) );\n\n         // check isomorphic binding between objects step and nextNodeToNextStep \n         JavaSDM.ensure ( !step.equals (nextNodeToNextStep) );\n\n         // check isomorphic binding between objects outFlow and nextStep \n         JavaSDM.ensure ( !outFlow.equals (nextStep) );\n\n         // check isomorphic binding between objects step and nextStep \n         JavaSDM.ensure ( !step.equals (nextStep) );\n\n         // check isomorphic binding between objects step and outFlow \n         JavaSDM.ensure ( !step.equals (outFlow) );\n\n         // create object __alt_continuation_nextStep\n         __alt_continuation_nextStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ContinuationRule\");\n         // assign attribute __alt_continuation_nextStep\n         __alt_continuation_nextStep.setName (\"continuation\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__alt_continuation_nextStep,\"translatedEdges\");\n\n         // create link\n         __alt_continuation_nextStep.setSrc( alt);\n\n\n         // create link\n         __alt_continuation_nextStep.setTrg( nextStep);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,inFlow,excConvGw,outFlow,nextNode,alt,flow,inFlowToFlow,step,excConvGwToStep,nextStep,nextNodeToNextStep);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      AlternativeFlowAlternative alt = null;\n      AlternativeFlow flow = null;\n      Step nextStep = null;\n      NormalStep step = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __inFlow_targetRef_excConvGw = null;\n      EMoflonEdge __excConvGw_incoming_inFlow = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __excConvGw_outgoing_outFlow = null;\n      EMoflonEdge __outFlow_sourceRef_excConvGw = null;\n      EMoflonEdge __excConvGwToStep_source_excConvGw = null;\n      EMoflonEdge __outFlow_targetRef_nextNode = null;\n      EMoflonEdge __nextNode_incoming_outFlow = null;\n      EMoflonEdge __nextNodeToNextStep_source_nextNode = null;\n      EMoflonEdge __alt_ref_flow = null;\n      EMoflonEdge __step_stepAlternative_alt = null;\n      EMoflonEdge __alt_continuation_nextStep = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __excConvGwToStep_target_step = null;\n      EMoflonEdge __step_next_nextStep = null;\n      EMoflonEdge __nextNodeToNextStep_target_nextStep = null;\n      CSP csp = null;\n      Iterator fujaba__IterExcConvGwToOutFlow = null;\n      SequenceFlow outFlow = null;\n      FlowNode nextNode = null;\n      Iterator fujaba__IterNextStepToNextNodeToNextStep = null;\n      FlowNodeToStep nextNodeToNextStep = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      ExclusiveGateway excConvGw = null;\n      Iterator fujaba__IterStepToExcConvGwToStep = null;\n      FlowNodeToStep excConvGwToStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ContinuationRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"alt\"));\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n         _TmpObject = (match.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         flow = (AlternativeFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"nextStep\"));\n\n         // ensure correct type and really bound of object nextStep\n         JavaSDM.ensure ( _TmpObject instanceof Step );\n         nextStep = (Step) _TmpObject;\n         _TmpObject = (match.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects step and nextStep \n         JavaSDM.ensure ( !step.equals (nextStep) );\n\n         // iterate to-many link target from step to excConvGwToStep\n         fujaba__Success = false;\n\n         fujaba__IterStepToExcConvGwToStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(step,FlowNodeToStep.class,\"target\")).iterator ();\n\n         while ( fujaba__IterStepToExcConvGwToStep.hasNext () )\n         {\n            try\n            {\n               excConvGwToStep = (FlowNodeToStep) fujaba__IterStepToExcConvGwToStep.next ();\n\n               // check object excConvGwToStep is really bound\n               JavaSDM.ensure ( excConvGwToStep != null );\n               // bind object\n               _TmpObject = excConvGwToStep.getSource ();\n\n               // ensure correct type and really bound of object excConvGw\n               JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n               excConvGw = (ExclusiveGateway) _TmpObject;\n\n               // iterate to-many link target from flow to inFlowToFlow\n               fujaba__Success = false;\n\n               fujaba__IterFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,SequenceFlowToUCFlow.class,\"target\")).iterator ();\n\n               while ( fujaba__IterFlowToInFlowToFlow.hasNext () )\n               {\n                  try\n                  {\n                     inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterFlowToInFlowToFlow.next ();\n\n                     // check object inFlowToFlow is really bound\n                     JavaSDM.ensure ( inFlowToFlow != null );\n                     // bind object\n                     inFlow = inFlowToFlow.getSource ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n\n                     // iterate to-many link target from nextStep to nextNodeToNextStep\n                     fujaba__Success = false;\n\n                     fujaba__IterNextStepToNextNodeToNextStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(nextStep,FlowNodeToStep.class,\"target\")).iterator ();\n\n                     while ( fujaba__IterNextStepToNextNodeToNextStep.hasNext () )\n                     {\n                        try\n                        {\n                           nextNodeToNextStep = (FlowNodeToStep) fujaba__IterNextStepToNextNodeToNextStep.next ();\n\n                           // check object nextNodeToNextStep is really bound\n                           JavaSDM.ensure ( nextNodeToNextStep != null );\n                           // check isomorphic binding between objects nextNodeToNextStep and excConvGwToStep \n                           JavaSDM.ensure ( !nextNodeToNextStep.equals (excConvGwToStep) );\n\n                           // bind object\n                           nextNode = nextNodeToNextStep.getSource ();\n\n                           // check object nextNode is really bound\n                           JavaSDM.ensure ( nextNode != null );\n\n                           // check isomorphic binding between objects nextNode and excConvGw \n                           JavaSDM.ensure ( !nextNode.equals (excConvGw) );\n\n                           // story node \'find context\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object alt is really bound\n                              JavaSDM.ensure ( alt != null );\n                              // check object excConvGw is really bound\n                              JavaSDM.ensure ( excConvGw != null );\n                              // check object excConvGwToStep is really bound\n                              JavaSDM.ensure ( excConvGwToStep != null );\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object inFlowToFlow is really bound\n                              JavaSDM.ensure ( inFlowToFlow != null );\n                              // check object nextNode is really bound\n                              JavaSDM.ensure ( nextNode != null );\n                              // check object nextNodeToNextStep is really bound\n                              JavaSDM.ensure ( nextNodeToNextStep != null );\n                              // check object nextStep is really bound\n                              JavaSDM.ensure ( nextStep != null );\n                              // check object step is really bound\n                              JavaSDM.ensure ( step != null );\n                              // check isomorphic binding between objects nextNode and excConvGw \n                              JavaSDM.ensure ( !nextNode.equals (excConvGw) );\n\n                              // check isomorphic binding between objects nextNodeToNextStep and excConvGwToStep \n                              JavaSDM.ensure ( !nextNodeToNextStep.equals (excConvGwToStep) );\n\n                              // check isomorphic binding between objects step and nextStep \n                              JavaSDM.ensure ( !step.equals (nextStep) );\n\n                              // check link continuation from alt to nextStep\n                              JavaSDM.ensure (nextStep.equals (alt.getContinuation ()\n                              ));\n\n                              // check link next from step to nextStep\n                              JavaSDM.ensure (nextStep.equals (step.getNext ()\n                              ));\n\n                              // check link ref from alt to flow\n                              JavaSDM.ensure (flow.equals (alt.getRef ()\n                              ));\n\n                              // check link source from excConvGwToStep to excConvGw\n                              JavaSDM.ensure (excConvGw.equals (excConvGwToStep.getSource ()\n                              ));\n\n                              // check link source from inFlowToFlow to inFlow\n                              JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                              ));\n\n                              // check link source from nextNodeToNextStep to nextNode\n                              JavaSDM.ensure (nextNode.equals (nextNodeToNextStep.getSource ()\n                              ));\n\n                              // check link stepAlternative from alt to step\n                              JavaSDM.ensure (step.equals (alt.eContainer()\n                              ));\n\n                              // check link target from excConvGwToStep to step\n                              JavaSDM.ensure (step.equals (excConvGwToStep.getTarget ()\n                              ));\n\n                              // check link target from inFlowToFlow to flow\n                              JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                              ));\n\n                              // check link target from nextNodeToNextStep to nextStep\n                              JavaSDM.ensure (nextStep.equals (nextNodeToNextStep.getTarget ()\n                              ));\n\n                              // check link targetRef from inFlow to excConvGw\n                              JavaSDM.ensure (excConvGw.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // iterate to-many link sourceRef from excConvGw to outFlow\n                              fujaba__Success = false;\n\n                              fujaba__IterExcConvGwToOutFlow = new ArrayList(excConvGw.getOutgoing()).iterator ();\n\n                              while ( fujaba__IterExcConvGwToOutFlow.hasNext () )\n                              {\n                                 try\n                                 {\n                                    outFlow = (SequenceFlow) fujaba__IterExcConvGwToOutFlow.next ();\n\n                                    // check object outFlow is really bound\n                                    JavaSDM.ensure ( outFlow != null );\n                                    // check isomorphic binding between objects outFlow and inFlow \n                                    JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                    // check link targetRef from outFlow to nextNode\n                                    JavaSDM.ensure (nextNode.equals (outFlow.getTargetRef ()\n                                    ));\n\n                                    // create object __inFlowToFlow_source_inFlow\n                                    __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __inFlow_targetRef_excConvGw\n                                    __inFlow_targetRef_excConvGw = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __excConvGw_incoming_inFlow\n                                    __excConvGw_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object isApplicableMatch\n                                    isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                                    // create object __excConvGw_outgoing_outFlow\n                                    __excConvGw_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __outFlow_sourceRef_excConvGw\n                                    __outFlow_sourceRef_excConvGw = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __excConvGwToStep_source_excConvGw\n                                    __excConvGwToStep_source_excConvGw = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __outFlow_targetRef_nextNode\n                                    __outFlow_targetRef_nextNode = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __nextNode_incoming_outFlow\n                                    __nextNode_incoming_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __nextNodeToNextStep_source_nextNode\n                                    __nextNodeToNextStep_source_nextNode = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __alt_ref_flow\n                                    __alt_ref_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __step_stepAlternative_alt\n                                    __step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __alt_continuation_nextStep\n                                    __alt_continuation_nextStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __inFlowToFlow_target_flow\n                                    __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __excConvGwToStep_target_step\n                                    __excConvGwToStep_target_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __step_next_nextStep\n                                    __step_next_nextStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __nextNodeToNextStep_target_nextStep\n                                    __nextNodeToNextStep_target_nextStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // assign attribute __inFlow_targetRef_excConvGw\n                                    __inFlow_targetRef_excConvGw.setName (\"targetRef\");\n                                    // assign attribute __excConvGw_incoming_inFlow\n                                    __excConvGw_incoming_inFlow.setName (\"incoming\");\n                                    // assign attribute __outFlow_sourceRef_excConvGw\n                                    __outFlow_sourceRef_excConvGw.setName (\"sourceRef\");\n                                    // assign attribute __excConvGw_outgoing_outFlow\n                                    __excConvGw_outgoing_outFlow.setName (\"outgoing\");\n                                    // assign attribute __outFlow_targetRef_nextNode\n                                    __outFlow_targetRef_nextNode.setName (\"targetRef\");\n                                    // assign attribute __nextNode_incoming_outFlow\n                                    __nextNode_incoming_outFlow.setName (\"incoming\");\n                                    // assign attribute __alt_ref_flow\n                                    __alt_ref_flow.setName (\"ref\");\n                                    // assign attribute __alt_continuation_nextStep\n                                    __alt_continuation_nextStep.setName (\"continuation\");\n                                    // assign attribute __inFlowToFlow_source_inFlow\n                                    __inFlowToFlow_source_inFlow.setName (\"source\");\n                                    // assign attribute __inFlowToFlow_target_flow\n                                    __inFlowToFlow_target_flow.setName (\"target\");\n                                    // assign attribute __step_stepAlternative_alt\n                                    __step_stepAlternative_alt.setName (\"stepAlternative\");\n                                    // assign attribute __step_next_nextStep\n                                    __step_next_nextStep.setName (\"next\");\n                                    // assign attribute __excConvGwToStep_source_excConvGw\n                                    __excConvGwToStep_source_excConvGw.setName (\"source\");\n                                    // assign attribute __excConvGwToStep_target_step\n                                    __excConvGwToStep_target_step.setName (\"target\");\n                                    // assign attribute __nextNodeToNextStep_source_nextNode\n                                    __nextNodeToNextStep_source_nextNode.setName (\"source\");\n                                    // assign attribute __nextNodeToNextStep_target_nextStep\n                                    __nextNodeToNextStep_target_nextStep.setName (\"target\");\n\n                                    // create link\n                                    __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                                    // create link\n                                    __inFlow_targetRef_excConvGw.setSrc( inFlow);\n\n\n                                    // create link\n                                    __excConvGw_incoming_inFlow.setTrg( inFlow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(excConvGw);\n\n\n                                    // create link\n                                    __excConvGw_outgoing_outFlow.setSrc( excConvGw);\n\n\n                                    // create link\n                                    __outFlow_sourceRef_excConvGw.setTrg( excConvGw);\n\n\n                                    // create link\n                                    __excConvGw_incoming_inFlow.setSrc( excConvGw);\n\n\n                                    // create link\n                                    __inFlow_targetRef_excConvGw.setTrg( excConvGw);\n\n\n                                    // create link\n                                    __excConvGwToStep_source_excConvGw.setTrg( excConvGw);\n\n\n                                    // create link\n                                    __outFlow_targetRef_nextNode.setSrc( outFlow);\n\n\n                                    // create link\n                                    __nextNode_incoming_outFlow.setTrg( outFlow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(outFlow);\n\n\n                                    // create link\n                                    __excConvGw_outgoing_outFlow.setTrg( outFlow);\n\n\n                                    // create link\n                                    __outFlow_sourceRef_excConvGw.setSrc( outFlow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(nextNode);\n\n\n                                    // create link\n                                    __nextNode_incoming_outFlow.setSrc( nextNode);\n\n\n                                    // create link\n                                    __outFlow_targetRef_nextNode.setTrg( nextNode);\n\n\n                                    // create link\n                                    __nextNodeToNextStep_source_nextNode.setTrg( nextNode);\n\n\n                                    // create link\n                                    __alt_ref_flow.setSrc( alt);\n\n\n                                    // create link\n                                    __step_stepAlternative_alt.setTrg( alt);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(alt);\n\n\n                                    // create link\n                                    __alt_continuation_nextStep.setSrc( alt);\n\n\n                                    // create link\n                                    __alt_ref_flow.setTrg( flow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(flow);\n\n\n                                    // create link\n                                    __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                                    // create link\n                                    __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                                    // create link\n                                    __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                                    // create link\n                                    __excConvGwToStep_target_step.setTrg( step);\n\n\n                                    // create link\n                                    __step_next_nextStep.setSrc( step);\n\n\n                                    // create link\n                                    __step_stepAlternative_alt.setSrc( step);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(step);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(excConvGwToStep);\n\n\n                                    // create link\n                                    __excConvGwToStep_target_step.setSrc( excConvGwToStep);\n\n\n                                    // create link\n                                    __excConvGwToStep_source_excConvGw.setSrc( excConvGwToStep);\n\n\n                                    // create link\n                                    __step_next_nextStep.setTrg( nextStep);\n\n\n                                    // create link\n                                    __alt_continuation_nextStep.setTrg( nextStep);\n\n\n                                    // create link\n                                    __nextNodeToNextStep_target_nextStep.setTrg( nextStep);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(nextStep);\n\n\n                                    // create link\n                                    __nextNodeToNextStep_target_nextStep.setSrc( nextNodeToNextStep);\n\n\n                                    // create link\n                                    __nextNodeToNextStep_source_nextNode.setSrc( nextNodeToNextStep);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(nextNodeToNextStep);\n\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__excConvGwToStep_source_excConvGw,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__nextNode_incoming_outFlow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__nextNodeToNextStep_source_nextNode,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__alt_ref_flow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__nextNodeToNextStep_target_nextStep,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__excConvGw_outgoing_outFlow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__step_stepAlternative_alt,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__step_next_nextStep,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__excConvGw_incoming_inFlow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__excConvGwToStep_target_step,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_excConvGw,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__outFlow_sourceRef_excConvGw,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__outFlow_targetRef_nextNode,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__alt_continuation_nextStep,\"allContextElements\");\n                                    // story node \'solve CSP\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,inFlow,excConvGw,outFlow,nextNode,alt,flow,inFlowToFlow,step,excConvGwToStep,nextStep,nextNodeToNextStep));\n\n                                       // ensure correct type and really bound of object csp\n                                       JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                       csp = (CSP) _TmpObject;\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    // statement node \'check CSP\'\n                                    fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                                    if (fujaba__Success)\n                                    {\n                                       // story node \'add match to rule result\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // check object isApplicableMatch is really bound\n                                          JavaSDM.ensure ( isApplicableMatch != null );\n                                          // check object ruleresult is really bound\n                                          JavaSDM.ensure ( ruleresult != null );\n                                          // assign attribute isApplicableMatch\n                                          isApplicableMatch.setRuleName (\"ContinuationRule\");\n                                          // assign attribute ruleresult\n                                          ruleresult.setSuccess (true);\n\n                                          // create link\n                                          ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n                              }\n                              JavaSDM.ensure (fujaba__Success);\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"alt\", alt);\nmatch.registerObject(\"flow\", flow);\nmatch.registerObject(\"step\", step);\nmatch.registerObject(\"nextStep\", nextStep);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match,
			AlternativeFlowAlternative alt, AlternativeFlow flow,
			NormalStep step, Step nextStep);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, AlternativeFlowAlternative alt,
			AlternativeFlow flow, NormalStep step, Step nextStep);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Converging\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_excConvGw_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"excConvGw.gatewayDirection\", true, csp);\r\nvar_excConvGw_gatewayDirection.setValue(excConvGw.getGatewayDirection());\r\nvar_excConvGw_gatewayDirection.setType(\"EObject\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_excConvGw_gatewayDirection,literal0);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"excConvGw\",excConvGw);\r\nisApplicableMatch.registerObject(\"outFlow\",outFlow);\r\nisApplicableMatch.registerObject(\"nextNode\",nextNode);\r\nisApplicableMatch.registerObject(\"alt\",alt);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"step\",step);\r\nisApplicableMatch.registerObject(\"excConvGwToStep\",excConvGwToStep);\r\nisApplicableMatch.registerObject(\"nextStep\",nextStep);\r\nisApplicableMatch.registerObject(\"nextNodeToNextStep\",nextNodeToNextStep);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			SequenceFlow inFlow, ExclusiveGateway excConvGw,
			SequenceFlow outFlow, FlowNode nextNode,
			AlternativeFlowAlternative alt, AlternativeFlow flow,
			SequenceFlowToUCFlow inFlowToFlow, NormalStep step,
			FlowNodeToStep excConvGwToStep, Step nextStep,
			FlowNodeToStep nextNodeToNextStep);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"excConvGw\", excConvGw);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"nextNode\", nextNode);\nruleresult.registerObject(\"alt\", alt);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"step\", step);\nruleresult.registerObject(\"excConvGwToStep\", excConvGwToStep);\nruleresult.registerObject(\"nextStep\", nextStep);\nruleresult.registerObject(\"nextNodeToNextStep\", nextNodeToNextStep);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject inFlow,
			EObject excConvGw, EObject outFlow, EObject nextNode, EObject alt,
			EObject flow, EObject inFlowToFlow, EObject step,
			EObject excConvGwToStep, EObject nextStep,
			EObject nextNodeToNextStep);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true;'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Match match = null;\n      NormalStep step = null;\n      AlternativeFlow flow = null;\n      Step nextStep = null;\n      AlternativeFlowAlternative alt = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_continuation is really bound\n         JavaSDM.ensure ( _edge_continuation != null );\n         // bind object\n         _TmpObject = _edge_continuation.getSrc ();\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n\n         // bind object\n         nextStep = alt.getContinuation ();\n\n         // check object nextStep is really bound\n         JavaSDM.ensure ( nextStep != null );\n\n         // bind object\n         _TmpObject = alt.getRef ();\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         flow = (AlternativeFlow) _TmpObject;\n\n         // bind object\n         step = alt.eContainer() instanceof NormalStep ? (NormalStep) alt.eContainer() : null;\n\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(step.getStepAlternative().contains(alt));\n\n         // check isomorphic binding between objects step and nextStep \n         JavaSDM.ensure ( !step.equals (nextStep) );\n\n         // check link next from step to nextStep\n         JavaSDM.ensure (nextStep.equals (step.getNext ()\n         ));\n\n         // check link trg from _edge_continuation to nextStep\n         JavaSDM.ensure (nextStep.equals (_edge_continuation.getTrg ()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object _edge_continuation is really bound\n            JavaSDM.ensure ( _edge_continuation != null );\n            // check object alt is really bound\n            JavaSDM.ensure ( alt != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object nextStep is really bound\n            JavaSDM.ensure ( nextStep != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check isomorphic binding between objects step and nextStep \n            JavaSDM.ensure ( !step.equals (nextStep) );\n\n            // check link continuation from alt to nextStep\n            JavaSDM.ensure (nextStep.equals (alt.getContinuation ()\n            ));\n\n            // check link next from step to nextStep\n            JavaSDM.ensure (nextStep.equals (step.getNext ()\n            ));\n\n            // check link ref from alt to flow\n            JavaSDM.ensure (flow.equals (alt.getRef ()\n            ));\n\n            // check link src from _edge_continuation to alt\n            JavaSDM.ensure (alt.equals (_edge_continuation.getSrc ()\n            ));\n\n            // check link stepAlternative from alt to step\n            JavaSDM.ensure (step.equals (alt.eContainer()\n            ));\n\n            // check link trg from _edge_continuation to nextStep\n            JavaSDM.ensure (nextStep.equals (_edge_continuation.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,alt,flow,step,nextStep);\n            if (fujaba__Success)\n            {\n               // statement node \'Ensure that the correct types of elements are matched\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_37(
			EMoflonEdge _edge_continuation);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // ContinuationRule
