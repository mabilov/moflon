/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackage;
import BpmnToUseCaseIntegration.DocRootToUCModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.ICEToAltFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SeqFlowToAltFlowAlt;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGLanguage.modelgenerator.RuleEntryContainer;
import TGGLanguage.modelgenerator.RuleEntryList;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.ModelgeneratorRuleResult;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.Event;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.FlowNode;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;

import bpmn2.Task;
import bpmn2.UserTask;
import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Exclusive Gateway To Step Core Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getExclusiveGatewayToStepCoreRule()
 * @model
 * @generated
 */
public interface ExclusiveGatewayToStepCoreRule extends EObject, AbstractRule {

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __outFlow_sourceRef_exclusiveGateway = null;\n      EMoflonEdge __exclusiveGateway_incoming_inFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __process_flowElements_exclusiveGateway = null;\n      EMoflonEdge __lane_flowNodeRefs_exclusiveGateway = null;\n      EMoflonEdge __exclusiveGateway_default_outFlow = null;\n      EMoflonEdge __inFlow_targetRef_exclusiveGateway = null;\n      EMoflonEdge __exclusiveGateway_outgoing_outFlow = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,process,inFlow,exclusiveGateway,outFlow,lane,laneSet));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object exclusiveGateway is really bound\n            JavaSDM.ensure ( exclusiveGateway != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object lane is really bound\n            JavaSDM.ensure ( lane != null );\n            // check object laneSet is really bound\n            JavaSDM.ensure ( laneSet != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __outFlow_sourceRef_exclusiveGateway\n            __outFlow_sourceRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __exclusiveGateway_incoming_inFlow\n            __exclusiveGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_outFlow\n            __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_exclusiveGateway\n            __process_flowElements_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __lane_flowNodeRefs_exclusiveGateway\n            __lane_flowNodeRefs_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __exclusiveGateway_default_outFlow\n            __exclusiveGateway_default_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __inFlow_targetRef_exclusiveGateway\n            __inFlow_targetRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __exclusiveGateway_outgoing_outFlow\n            __exclusiveGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_exclusiveGateway\n            __process_flowElements_exclusiveGateway.setName (\"flowElements\");\n            // assign attribute __process_flowElements_outFlow\n            __process_flowElements_outFlow.setName (\"flowElements\");\n            // assign attribute __inFlow_targetRef_exclusiveGateway\n            __inFlow_targetRef_exclusiveGateway.setName (\"targetRef\");\n            // assign attribute __exclusiveGateway_incoming_inFlow\n            __exclusiveGateway_incoming_inFlow.setName (\"incoming\");\n            // assign attribute __outFlow_sourceRef_exclusiveGateway\n            __outFlow_sourceRef_exclusiveGateway.setName (\"sourceRef\");\n            // assign attribute __exclusiveGateway_outgoing_outFlow\n            __exclusiveGateway_outgoing_outFlow.setName (\"outgoing\");\n            // assign attribute __exclusiveGateway_default_outFlow\n            __exclusiveGateway_default_outFlow.setName (\"default\");\n            // assign attribute __lane_flowNodeRefs_exclusiveGateway\n            __lane_flowNodeRefs_exclusiveGateway.setName (\"flowNodeRefs\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__outFlow_sourceRef_exclusiveGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__exclusiveGateway_incoming_inFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,outFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,exclusiveGateway,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_exclusiveGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__lane_flowNodeRefs_exclusiveGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__exclusiveGateway_default_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__inFlow_targetRef_exclusiveGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__exclusiveGateway_outgoing_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            __process_flowElements_outFlow.setSrc( process);\n\n\n            // create link\n            __process_flowElements_exclusiveGateway.setSrc( process);\n\n\n            // create link\n            __inFlow_targetRef_exclusiveGateway.setSrc( inFlow);\n\n\n            // create link\n            __exclusiveGateway_incoming_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __outFlow_sourceRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n            // create link\n            __exclusiveGateway_default_outFlow.setSrc( exclusiveGateway);\n\n\n            // create link\n            __exclusiveGateway_outgoing_outFlow.setSrc( exclusiveGateway);\n\n\n            // create link\n            __process_flowElements_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n            // create link\n            __inFlow_targetRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n            // create link\n            __exclusiveGateway_incoming_inFlow.setSrc( exclusiveGateway);\n\n\n            // create link\n            __lane_flowNodeRefs_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n            // create link\n            __exclusiveGateway_default_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __process_flowElements_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __exclusiveGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __outFlow_sourceRef_exclusiveGateway.setSrc( outFlow);\n\n\n            // create link\n            __lane_flowNodeRefs_exclusiveGateway.setSrc( lane);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object exclusiveGateway is really bound\n            JavaSDM.ensure ( exclusiveGateway != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object lane is really bound\n            JavaSDM.ensure ( lane != null );\n            // check object laneSet is really bound\n            JavaSDM.ensure ( laneSet != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __process_flowElements_inFlow\n            __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __laneSet_lanes_lane\n            __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_laneSets_laneSet\n            __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_laneSets_laneSet\n            __process_laneSets_laneSet.setName (\"laneSets\");\n            // assign attribute __process_flowElements_inFlow\n            __process_flowElements_inFlow.setName (\"flowElements\");\n            // assign attribute __laneSet_lanes_lane\n            __laneSet_lanes_lane.setName (\"lanes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_inFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,lane,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,inFlow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,laneSet,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__laneSet_lanes_lane,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_laneSets_laneSet,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,process,\"contextNodes\");\n\n            // create link\n            __process_flowElements_inFlow.setSrc( process);\n\n\n            // create link\n            __process_laneSets_laneSet.setSrc( process);\n\n\n            // create link\n            __process_flowElements_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __laneSet_lanes_lane.setTrg( lane);\n\n\n            // create link\n            __process_laneSets_laneSet.setTrg( laneSet);\n\n\n            // create link\n            __laneSet_lanes_lane.setSrc( laneSet);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,process,inFlow,exclusiveGateway,outFlow,lane,laneSet);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, ExclusiveGateway exclusiveGateway,
			SequenceFlow outFlow, Lane lane, LaneSet laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      ExclusiveGateway exclusiveGateway = null;\n      Flow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      SequenceFlow outFlow = null;\n      bpmn2.Process process = null;\n      ProcessToActor processToActor = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      NormalStep normalStep = null;\n      FlowNodeToStep exclusiveGatewayToNormalStep = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToFlow = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge outFlowToFlow__target__flow = null;\n      EMoflonEdge exclusiveGatewayToNormalStep__source__exclusiveGateway = null;\n      EMoflonEdge __outFlow_sourceRef_exclusiveGateway = null;\n      EMoflonEdge __exclusiveGateway_outgoing_outFlow = null;\n      EMoflonEdge __inFlow_targetRef_exclusiveGateway = null;\n      EMoflonEdge outFlowToNormalStep__source__outFlow = null;\n      EMoflonEdge flow__steps__normalStep = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __exclusiveGateway_default_outFlow = null;\n      EMoflonEdge exclusiveGatewayToNormalStep__target__normalStep = null;\n      EMoflonEdge __lane_flowNodeRefs_exclusiveGateway = null;\n      EMoflonEdge outFlowToFlow__source__outFlow = null;\n      EMoflonEdge outFlowToNormalStep__target__normalStep = null;\n      EMoflonEdge normalStep__actor__actor = null;\n      EMoflonEdge __exclusiveGateway_incoming_inFlow = null;\n      EMoflonEdge __process_flowElements_exclusiveGateway = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"exclusiveGateway\"));\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToActor\"));\n\n         // ensure correct type and really bound of object processToActor\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToActor );\n         processToActor = (ProcessToActor) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object normalStep\n         normalStep = UseCaseDSLFactory.eINSTANCE.createNormalStep();\n\n         // create object exclusiveGatewayToNormalStep\n         exclusiveGatewayToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n         // create object outFlowToNormalStep\n         outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n         // create object outFlowToFlow\n         outFlowToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // assign attribute normalStep\n         normalStep.setName ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"name\").getValue());\n         // assign attribute normalStep\n         normalStep.setLabel ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"label\").getValue());\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,outFlow,\"source\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,flow,\"target\");\n\n         // create link\n         exclusiveGatewayToNormalStep.setSource( exclusiveGateway);\n\n\n         // create link\n         outFlowToNormalStep.setSource( outFlow);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(normalStep,actor,\"actor\");\n\n         // create link\n         exclusiveGatewayToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         flow.getSteps().add(normalStep);\n\n\n         // create link\n         outFlowToNormalStep.setTarget( normalStep);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object exclusiveGatewayToNormalStep is really bound\n         JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGatewayToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGateway,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object exclusiveGatewayToNormalStep is really bound\n         JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToActor is really bound\n         JavaSDM.ensure ( processToActor != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check isomorphic binding between objects exclusiveGateway and actor \n         JavaSDM.ensure ( !exclusiveGateway.equals (actor) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and actor \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects inFlow and actor \n         JavaSDM.ensure ( !inFlow.equals (actor) );\n\n         // check isomorphic binding between objects inFlowToFlow and actor \n         JavaSDM.ensure ( !inFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects lane and actor \n         JavaSDM.ensure ( !lane.equals (actor) );\n\n         // check isomorphic binding between objects laneSet and actor \n         JavaSDM.ensure ( !laneSet.equals (actor) );\n\n         // check isomorphic binding between objects normalStep and actor \n         JavaSDM.ensure ( !normalStep.equals (actor) );\n\n         // check isomorphic binding between objects outFlow and actor \n         JavaSDM.ensure ( !outFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToFlow and actor \n         JavaSDM.ensure ( !outFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and actor \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects process and actor \n         JavaSDM.ensure ( !process.equals (actor) );\n\n         // check isomorphic binding between objects processToActor and actor \n         JavaSDM.ensure ( !processToActor.equals (actor) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and exclusiveGateway \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects flow and exclusiveGateway \n         JavaSDM.ensure ( !flow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects inFlow and exclusiveGateway \n         JavaSDM.ensure ( !inFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects inFlowToFlow and exclusiveGateway \n         JavaSDM.ensure ( !inFlowToFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects lane and exclusiveGateway \n         JavaSDM.ensure ( !lane.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects laneSet and exclusiveGateway \n         JavaSDM.ensure ( !laneSet.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects normalStep and exclusiveGateway \n         JavaSDM.ensure ( !normalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlow and exclusiveGateway \n         JavaSDM.ensure ( !outFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlowToFlow and exclusiveGateway \n         JavaSDM.ensure ( !outFlowToFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and exclusiveGateway \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects process and exclusiveGateway \n         JavaSDM.ensure ( !process.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects processToActor and exclusiveGateway \n         JavaSDM.ensure ( !processToActor.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects flow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !flow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !inFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !inFlowToFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects lane and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !lane.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects laneSet and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !laneSet.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects normalStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !normalStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects process and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !process.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !processToActor.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects lane and flow \n         JavaSDM.ensure ( !lane.equals (flow) );\n\n         // check isomorphic binding between objects laneSet and flow \n         JavaSDM.ensure ( !laneSet.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToFlow and flow \n         JavaSDM.ensure ( !outFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects processToActor and flow \n         JavaSDM.ensure ( !processToActor.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlow \n         JavaSDM.ensure ( !lane.equals (inFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects processToActor and inFlow \n         JavaSDM.ensure ( !processToActor.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlowToFlow \n         JavaSDM.ensure ( !lane.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlowToFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects processToActor and inFlowToFlow \n         JavaSDM.ensure ( !processToActor.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and lane \n         JavaSDM.ensure ( !laneSet.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and lane \n         JavaSDM.ensure ( !normalStep.equals (lane) );\n\n         // check isomorphic binding between objects outFlow and lane \n         JavaSDM.ensure ( !outFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToFlow and lane \n         JavaSDM.ensure ( !outFlowToFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and lane \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (lane) );\n\n         // check isomorphic binding between objects process and lane \n         JavaSDM.ensure ( !process.equals (lane) );\n\n         // check isomorphic binding between objects processToActor and lane \n         JavaSDM.ensure ( !processToActor.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and laneSet \n         JavaSDM.ensure ( !normalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlow and laneSet \n         JavaSDM.ensure ( !outFlow.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlowToFlow and laneSet \n         JavaSDM.ensure ( !outFlowToFlow.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and laneSet \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects process and laneSet \n         JavaSDM.ensure ( !process.equals (laneSet) );\n\n         // check isomorphic binding between objects processToActor and laneSet \n         JavaSDM.ensure ( !processToActor.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and normalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and normalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects processToActor and normalStep \n         JavaSDM.ensure ( !processToActor.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and outFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects processToActor and outFlow \n         JavaSDM.ensure ( !processToActor.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToFlow \n         JavaSDM.ensure ( !process.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects processToActor and outFlowToFlow \n         JavaSDM.ensure ( !processToActor.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToNormalStep \n         JavaSDM.ensure ( !process.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and outFlowToNormalStep \n         JavaSDM.ensure ( !processToActor.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and process \n         JavaSDM.ensure ( !processToActor.equals (process) );\n\n         // create object outFlowToFlow__target__flow\n         outFlowToFlow__target__flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object exclusiveGatewayToNormalStep__source__exclusiveGateway\n         exclusiveGatewayToNormalStep__source__exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __outFlow_sourceRef_exclusiveGateway\n         __outFlow_sourceRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __exclusiveGateway_outgoing_outFlow\n         __exclusiveGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __inFlow_targetRef_exclusiveGateway\n         __inFlow_targetRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object flow__steps__normalStep\n         flow__steps__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_outFlow\n         __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __exclusiveGateway_default_outFlow\n         __exclusiveGateway_default_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object exclusiveGatewayToNormalStep__target__normalStep\n         exclusiveGatewayToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __lane_flowNodeRefs_exclusiveGateway\n         __lane_flowNodeRefs_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object normalStep__actor__actor\n         normalStep__actor__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __exclusiveGateway_incoming_inFlow\n         __exclusiveGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_exclusiveGateway\n         __process_flowElements_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ExclusiveGatewayToStepCoreRule\");\n         // assign attribute normalStep__actor__actor\n         normalStep__actor__actor.setName (\"actor\");\n         // assign attribute outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToFlow__target__flow\n         outFlowToFlow__target__flow.setName (\"target\");\n         // assign attribute __process_flowElements_exclusiveGateway\n         __process_flowElements_exclusiveGateway.setName (\"flowElements\");\n         // assign attribute __process_flowElements_outFlow\n         __process_flowElements_outFlow.setName (\"flowElements\");\n         // assign attribute __inFlow_targetRef_exclusiveGateway\n         __inFlow_targetRef_exclusiveGateway.setName (\"targetRef\");\n         // assign attribute __exclusiveGateway_incoming_inFlow\n         __exclusiveGateway_incoming_inFlow.setName (\"incoming\");\n         // assign attribute __outFlow_sourceRef_exclusiveGateway\n         __outFlow_sourceRef_exclusiveGateway.setName (\"sourceRef\");\n         // assign attribute __exclusiveGateway_outgoing_outFlow\n         __exclusiveGateway_outgoing_outFlow.setName (\"outgoing\");\n         // assign attribute __exclusiveGateway_default_outFlow\n         __exclusiveGateway_default_outFlow.setName (\"default\");\n         // assign attribute exclusiveGatewayToNormalStep__source__exclusiveGateway\n         exclusiveGatewayToNormalStep__source__exclusiveGateway.setName (\"source\");\n         // assign attribute exclusiveGatewayToNormalStep__target__normalStep\n         exclusiveGatewayToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute flow__steps__normalStep\n         flow__steps__normalStep.setName (\"steps\");\n         // assign attribute __lane_flowNodeRefs_exclusiveGateway\n         __lane_flowNodeRefs_exclusiveGateway.setName (\"flowNodeRefs\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__target__flow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGatewayToNormalStep__source__exclusiveGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__outFlow_sourceRef_exclusiveGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__exclusiveGateway_outgoing_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__inFlow_targetRef_exclusiveGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,flow__steps__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__exclusiveGateway_default_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGatewayToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__lane_flowNodeRefs_exclusiveGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep__actor__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__exclusiveGateway_incoming_inFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_exclusiveGateway,\"translatedEdges\");\n\n         // create link\n         exclusiveGatewayToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         flow__steps__normalStep.setTrg( normalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         normalStep__actor__actor.setSrc( normalStep);\n\n\n         // create link\n         outFlowToFlow__target__flow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setSrc( outFlowToFlow);\n\n\n         // create link\n         __process_flowElements_outFlow.setSrc( process);\n\n\n         // create link\n         __process_flowElements_exclusiveGateway.setSrc( process);\n\n\n         // create link\n         __inFlow_targetRef_exclusiveGateway.setSrc( inFlow);\n\n\n         // create link\n         __exclusiveGateway_incoming_inFlow.setTrg( inFlow);\n\n\n         // create link\n         __process_flowElements_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__source__exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         __inFlow_targetRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         __exclusiveGateway_default_outFlow.setSrc( exclusiveGateway);\n\n\n         // create link\n         __exclusiveGateway_outgoing_outFlow.setSrc( exclusiveGateway);\n\n\n         // create link\n         __exclusiveGateway_incoming_inFlow.setSrc( exclusiveGateway);\n\n\n         // create link\n         __lane_flowNodeRefs_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         __outFlow_sourceRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         __outFlow_sourceRef_exclusiveGateway.setSrc( outFlow);\n\n\n         // create link\n         __exclusiveGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n         // create link\n         __exclusiveGateway_default_outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         __process_flowElements_outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__target__normalStep.setSrc( exclusiveGatewayToNormalStep);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__source__exclusiveGateway.setSrc( exclusiveGatewayToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToFlow__target__flow.setTrg( flow);\n\n\n         // create link\n         flow__steps__normalStep.setSrc( flow);\n\n\n         // create link\n         normalStep__actor__actor.setTrg( actor);\n\n\n         // create link\n         __lane_flowNodeRefs_exclusiveGateway.setSrc( lane);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,normalStep,outFlowToFlow,inFlowToFlow,process,inFlow,exclusiveGateway,outFlow,exclusiveGatewayToNormalStep,outFlowToNormalStep,flow,actor,processToActor,lane,laneSet);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      ExclusiveGateway exclusiveGateway = null;\n      SequenceFlow inFlow = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      SequenceFlow outFlow = null;\n      bpmn2.Process process = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __process_flowElements_exclusiveGateway = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __processToActor_source_process = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      EMoflonEdge __inFlow_targetRef_exclusiveGateway = null;\n      EMoflonEdge __exclusiveGateway_incoming_inFlow = null;\n      EMoflonEdge __lane_flowNodeRefs_exclusiveGateway = null;\n      EMoflonEdge __exclusiveGateway_outgoing_outFlow = null;\n      EMoflonEdge __outFlow_sourceRef_exclusiveGateway = null;\n      EMoflonEdge __exclusiveGateway_default_outFlow = null;\n      EMoflonEdge __processToActor_target_actor = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      CSP csp = null;\n      Actor actor = null;\n      Iterator fujaba__IterProcessToProcessToActor = null;\n      ProcessToActor processToActor = null;\n      Flow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ExclusiveGatewayToStepCoreRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"exclusiveGateway\"));\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n         _TmpObject = (match.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (match.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (match.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link source from inFlow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n         while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // bind object\n               flow = inFlowToFlow.getTarget ();\n\n               // check object flow is really bound\n               JavaSDM.ensure ( flow != null );\n\n               // iterate to-many link source from process to processToActor\n               fujaba__Success = false;\n\n               fujaba__IterProcessToProcessToActor = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(process,ProcessToActor.class,\"source\")).iterator ();\n\n               while ( fujaba__IterProcessToProcessToActor.hasNext () )\n               {\n                  try\n                  {\n                     processToActor = (ProcessToActor) fujaba__IterProcessToProcessToActor.next ();\n\n                     // check object processToActor is really bound\n                     JavaSDM.ensure ( processToActor != null );\n                     // bind object\n                     actor = processToActor.getTarget ();\n\n                     // check object actor is really bound\n                     JavaSDM.ensure ( actor != null );\n\n                     // story node \'find context\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object actor is really bound\n                        JavaSDM.ensure ( actor != null );\n                        // check object exclusiveGateway is really bound\n                        JavaSDM.ensure ( exclusiveGateway != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object inFlowToFlow is really bound\n                        JavaSDM.ensure ( inFlowToFlow != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object laneSet is really bound\n                        JavaSDM.ensure ( laneSet != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check object processToActor is really bound\n                        JavaSDM.ensure ( processToActor != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link default from exclusiveGateway to outFlow\n                        JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n                        ));\n\n                        // check link flowElements from exclusiveGateway to process\n                        JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link incoming from inFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link laneSets from laneSet to process\n                        JavaSDM.ensure (process.equals (laneSet.eContainer()\n                        ));\n\n                        // check link lanes from lane to laneSet\n                        JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                        ));\n\n                        // check link outgoing from outFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link source from inFlowToFlow to inFlow\n                        JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                        ));\n\n                        // check link source from processToActor to process\n                        JavaSDM.ensure (process.equals (processToActor.getSource ()\n                        ));\n\n                        // check link target from inFlowToFlow to flow\n                        JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                        ));\n\n                        // check link target from processToActor to actor\n                        JavaSDM.ensure (actor.equals (processToActor.getTarget ()\n                        ));\n\n                        // check link flowNodeRefs from lane to exclusiveGateway\n                        JavaSDM.ensure (lane.getFlowNodeRefs ().contains (exclusiveGateway));\n\n                        // create object isApplicableMatch\n                        isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                        // create object __inFlowToFlow_target_flow\n                        __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlowToFlow_source_inFlow\n                        __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_flowElements_exclusiveGateway\n                        __process_flowElements_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_flowElements_inFlow\n                        __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_flowElements_outFlow\n                        __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __processToActor_source_process\n                        __processToActor_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_laneSets_laneSet\n                        __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlow_targetRef_exclusiveGateway\n                        __inFlow_targetRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __exclusiveGateway_incoming_inFlow\n                        __exclusiveGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __lane_flowNodeRefs_exclusiveGateway\n                        __lane_flowNodeRefs_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __exclusiveGateway_outgoing_outFlow\n                        __exclusiveGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __outFlow_sourceRef_exclusiveGateway\n                        __outFlow_sourceRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __exclusiveGateway_default_outFlow\n                        __exclusiveGateway_default_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __processToActor_target_actor\n                        __processToActor_target_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __laneSet_lanes_lane\n                        __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // assign attribute __inFlowToFlow_source_inFlow\n                        __inFlowToFlow_source_inFlow.setName (\"source\");\n                        // assign attribute __inFlowToFlow_target_flow\n                        __inFlowToFlow_target_flow.setName (\"target\");\n                        // assign attribute __process_laneSets_laneSet\n                        __process_laneSets_laneSet.setName (\"laneSets\");\n                        // assign attribute __process_flowElements_inFlow\n                        __process_flowElements_inFlow.setName (\"flowElements\");\n                        // assign attribute __process_flowElements_exclusiveGateway\n                        __process_flowElements_exclusiveGateway.setName (\"flowElements\");\n                        // assign attribute __process_flowElements_outFlow\n                        __process_flowElements_outFlow.setName (\"flowElements\");\n                        // assign attribute __inFlow_targetRef_exclusiveGateway\n                        __inFlow_targetRef_exclusiveGateway.setName (\"targetRef\");\n                        // assign attribute __exclusiveGateway_incoming_inFlow\n                        __exclusiveGateway_incoming_inFlow.setName (\"incoming\");\n                        // assign attribute __outFlow_sourceRef_exclusiveGateway\n                        __outFlow_sourceRef_exclusiveGateway.setName (\"sourceRef\");\n                        // assign attribute __exclusiveGateway_outgoing_outFlow\n                        __exclusiveGateway_outgoing_outFlow.setName (\"outgoing\");\n                        // assign attribute __exclusiveGateway_default_outFlow\n                        __exclusiveGateway_default_outFlow.setName (\"default\");\n                        // assign attribute __processToActor_source_process\n                        __processToActor_source_process.setName (\"source\");\n                        // assign attribute __processToActor_target_actor\n                        __processToActor_target_actor.setName (\"target\");\n                        // assign attribute __lane_flowNodeRefs_exclusiveGateway\n                        __lane_flowNodeRefs_exclusiveGateway.setName (\"flowNodeRefs\");\n                        // assign attribute __laneSet_lanes_lane\n                        __laneSet_lanes_lane.setName (\"lanes\");\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                        // create link\n                        __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                        // create link\n                        __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                        // create link\n                        __process_flowElements_exclusiveGateway.setSrc( process);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(process);\n\n\n                        // create link\n                        __process_flowElements_inFlow.setSrc( process);\n\n\n                        // create link\n                        __process_flowElements_outFlow.setSrc( process);\n\n\n                        // create link\n                        __processToActor_source_process.setTrg( process);\n\n\n                        // create link\n                        __process_laneSets_laneSet.setSrc( process);\n\n\n                        // create link\n                        __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __inFlow_targetRef_exclusiveGateway.setSrc( inFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                        // create link\n                        __exclusiveGateway_incoming_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __lane_flowNodeRefs_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                        // create link\n                        __inFlow_targetRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                        // create link\n                        __exclusiveGateway_outgoing_outFlow.setSrc( exclusiveGateway);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(exclusiveGateway);\n\n\n                        // create link\n                        __outFlow_sourceRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                        // create link\n                        __exclusiveGateway_default_outFlow.setSrc( exclusiveGateway);\n\n\n                        // create link\n                        __process_flowElements_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                        // create link\n                        __exclusiveGateway_incoming_inFlow.setSrc( exclusiveGateway);\n\n\n                        // create link\n                        __process_flowElements_outFlow.setTrg( outFlow);\n\n\n                        // create link\n                        __exclusiveGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n                        // create link\n                        __exclusiveGateway_default_outFlow.setTrg( outFlow);\n\n\n                        // create link\n                        __outFlow_sourceRef_exclusiveGateway.setSrc( outFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(outFlow);\n\n\n                        // create link\n                        __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(flow);\n\n\n                        // create link\n                        __processToActor_target_actor.setTrg( actor);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(actor);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(processToActor);\n\n\n                        // create link\n                        __processToActor_source_process.setSrc( processToActor);\n\n\n                        // create link\n                        __processToActor_target_actor.setSrc( processToActor);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(lane);\n\n\n                        // create link\n                        __laneSet_lanes_lane.setTrg( lane);\n\n\n                        // create link\n                        __lane_flowNodeRefs_exclusiveGateway.setSrc( lane);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(laneSet);\n\n\n                        // create link\n                        __laneSet_lanes_lane.setSrc( laneSet);\n\n\n                        // create link\n                        __process_laneSets_laneSet.setTrg( laneSet);\n\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_laneSets_laneSet,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToActor_target_actor,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__lane_flowNodeRefs_exclusiveGateway,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGateway_outgoing_outFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_outFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToActor_source_process,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__outFlow_sourceRef_exclusiveGateway,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneSet_lanes_lane,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_exclusiveGateway,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_exclusiveGateway,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGateway_default_outFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGateway_incoming_inFlow,\"allContextElements\");\n                        // story node \'solve CSP\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,inFlowToFlow,process,inFlow,exclusiveGateway,outFlow,flow,actor,processToActor,lane,laneSet));\n\n                           // ensure correct type and really bound of object csp\n                           JavaSDM.ensure ( _TmpObject instanceof CSP );\n                           csp = (CSP) _TmpObject;\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        // statement node \'check CSP\'\n                        fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                        if (fujaba__Success)\n                        {\n                           // story node \'add match to rule result\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object isApplicableMatch is really bound\n                              JavaSDM.ensure ( isApplicableMatch != null );\n                              // check object ruleresult is really bound\n                              JavaSDM.ensure ( ruleresult != null );\n                              // assign attribute ruleresult\n                              ruleresult.setSuccess (true);\n                              // assign attribute isApplicableMatch\n                              isApplicableMatch.setRuleName (\"ExclusiveGatewayToStepCoreRule\");\n\n                              // create link\n                              isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"process\", process);\nmatch.registerObject(\"inFlow\", inFlow);\nmatch.registerObject(\"exclusiveGateway\", exclusiveGateway);\nmatch.registerObject(\"outFlow\", outFlow);\nmatch.registerObject(\"lane\", lane);\nmatch.registerObject(\"laneSet\", laneSet);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, ExclusiveGateway exclusiveGateway,
			SequenceFlow outFlow, Lane lane, LaneSet laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_exclusiveGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.gatewayDirection\", true, csp);\r\nvar_exclusiveGateway_gatewayDirection.setValue(exclusiveGateway.getGatewayDirection());\r\nvar_exclusiveGateway_gatewayDirection.setType(\"EObject\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_exclusiveGateway_gatewayDirection,literal0);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, ExclusiveGateway exclusiveGateway,
			SequenceFlow outFlow, Lane lane, LaneSet laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_exclusiveGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.id\", true, csp);\r\nvar_exclusiveGateway_id.setValue(exclusiveGateway.getId());\r\nvar_exclusiveGateway_id.setType(\"\");\r\nVariable var_exclusiveGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.name\", true, csp);\r\nvar_exclusiveGateway_name.setValue(exclusiveGateway.getName());\r\nvar_exclusiveGateway_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.name\", csp);\r\nvar_normalStep_name.setType(\"\");\r\nVariable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.label\", csp);\r\nvar_normalStep_label.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_exclusiveGateway_id,var_normalStep_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_exclusiveGateway_name,var_normalStep_label);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"exclusiveGateway\",exclusiveGateway);\r\nisApplicableMatch.registerObject(\"outFlow\",outFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"processToActor\",processToActor);\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nisApplicableMatch.registerObject(\"laneSet\",laneSet);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			SequenceFlowToUCFlow inFlowToFlow, bpmn2.Process process,
			SequenceFlow inFlow, ExclusiveGateway exclusiveGateway,
			SequenceFlow outFlow, Flow flow, Actor actor,
			ProcessToActor processToActor, Lane lane, LaneSet laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"outFlowToFlow\", outFlowToFlow);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"exclusiveGateway\", exclusiveGateway);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"exclusiveGatewayToNormalStep\", exclusiveGatewayToNormalStep);\nruleresult.registerObject(\"outFlowToNormalStep\", outFlowToNormalStep);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"processToActor\", processToActor);\nruleresult.registerObject(\"lane\", lane);\nruleresult.registerObject(\"laneSet\", laneSet);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject normalStep,
			EObject outFlowToFlow, EObject inFlowToFlow, EObject process,
			EObject inFlow, EObject exclusiveGateway, EObject outFlow,
			EObject exclusiveGatewayToNormalStep, EObject outFlowToNormalStep,
			EObject flow, EObject actor, EObject processToActor, EObject lane,
			EObject laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"exclusiveGateway\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getExclusiveGateway()) && match.getObject(\"outFlow\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,normalStep,flow,actor));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // create object __flow_steps_normalStep\n            __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __normalStep_actor_actor\n            __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __normalStep_actor_actor\n            __normalStep_actor_actor.setName (\"actor\");\n            // assign attribute __flow_steps_normalStep\n            __flow_steps_normalStep.setName (\"steps\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,normalStep,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flow_steps_normalStep,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__normalStep_actor_actor,\"toBeTranslatedEdges\");\n\n            // create link\n            __flow_steps_normalStep.setTrg( normalStep);\n\n\n            // create link\n            __normalStep_actor_actor.setSrc( normalStep);\n\n\n            // create link\n            __flow_steps_normalStep.setSrc( flow);\n\n\n            // create link\n            __normalStep_actor_actor.setTrg( actor);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,actor,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flow,\"contextNodes\");\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,normalStep,flow,actor);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, NormalStep normalStep, Flow flow,
			Actor actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      Flow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      NormalStep normalStep = null;\n      bpmn2.Process process = null;\n      ProcessToActor processToActor = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      FlowNodeToStep exclusiveGatewayToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToFlow = null;\n      SequenceFlow outFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge lane__flowNodeRefs__exclusiveGateway = null;\n      EMoflonEdge exclusiveGatewayToNormalStep__source__exclusiveGateway = null;\n      EMoflonEdge outFlow__sourceRef__exclusiveGateway = null;\n      EMoflonEdge exclusiveGateway__incoming__inFlow = null;\n      EMoflonEdge exclusiveGateway__default__outFlow = null;\n      EMoflonEdge exclusiveGateway__outgoing__outFlow = null;\n      EMoflonEdge outFlowToFlow__target__flow = null;\n      EMoflonEdge outFlowToNormalStep__target__normalStep = null;\n      EMoflonEdge process__flowElements__outFlow = null;\n      EMoflonEdge exclusiveGatewayToNormalStep__target__normalStep = null;\n      EMoflonEdge inFlow__targetRef__exclusiveGateway = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n      EMoflonEdge outFlowToFlow__source__outFlow = null;\n      EMoflonEdge process__flowElements__exclusiveGateway = null;\n      EMoflonEdge outFlowToNormalStep__source__outFlow = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToActor\"));\n\n         // ensure correct type and really bound of object processToActor\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToActor );\n         processToActor = (ProcessToActor) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object outFlowToNormalStep\n         outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n         // create object exclusiveGatewayToNormalStep\n         exclusiveGatewayToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n         // create object outFlowToFlow\n         outFlowToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // create object outFlow\n         outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n         // create object exclusiveGateway\n         exclusiveGateway = Bpmn2Factory.eINSTANCE.createExclusiveGateway();\n\n         // assign attribute exclusiveGateway\n         exclusiveGateway.setId ((java.lang.String)csp.getAttributeVariable(\"exclusiveGateway\",\"id\").getValue());\n         // assign attribute exclusiveGateway\n         exclusiveGateway.setName ((java.lang.String)csp.getAttributeVariable(\"exclusiveGateway\",\"name\").getValue());\n         // assign attribute exclusiveGateway\n         exclusiveGateway.setGatewayDirection ((bpmn2.GatewayDirection)csp.getAttributeVariable(\"exclusiveGateway\",\"gatewayDirection\").getValue());\n\n         // create link\n         outFlowToNormalStep.setSource( outFlow);\n\n\n         // create link\n         outFlowToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         exclusiveGatewayToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,flow,\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,outFlow,\"source\");\n\n         // create link\n         \tprocess.getFlowElements().add(exclusiveGateway); // add link\n\n\n         // create link\n         \tprocess.getFlowElements().add(outFlow); // add link\n\n\n         // create link\n         exclusiveGateway.getIncoming().add(inFlow);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(exclusiveGateway,outFlow,\"default\");\n\n         // create link\n         outFlow.setSourceRef( exclusiveGateway);\n\n\n         // create link\n         exclusiveGatewayToNormalStep.setSource( exclusiveGateway);\n\n\n         // create link\n         lane.getFlowNodeRefs().add(exclusiveGateway);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object exclusiveGatewayToNormalStep is really bound\n         JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGatewayToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGateway,\"createdElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object exclusiveGatewayToNormalStep is really bound\n         JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToActor is really bound\n         JavaSDM.ensure ( processToActor != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check isomorphic binding between objects exclusiveGateway and actor \n         JavaSDM.ensure ( !exclusiveGateway.equals (actor) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and actor \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects inFlow and actor \n         JavaSDM.ensure ( !inFlow.equals (actor) );\n\n         // check isomorphic binding between objects inFlowToFlow and actor \n         JavaSDM.ensure ( !inFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects lane and actor \n         JavaSDM.ensure ( !lane.equals (actor) );\n\n         // check isomorphic binding between objects laneSet and actor \n         JavaSDM.ensure ( !laneSet.equals (actor) );\n\n         // check isomorphic binding between objects normalStep and actor \n         JavaSDM.ensure ( !normalStep.equals (actor) );\n\n         // check isomorphic binding between objects outFlow and actor \n         JavaSDM.ensure ( !outFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToFlow and actor \n         JavaSDM.ensure ( !outFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and actor \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects process and actor \n         JavaSDM.ensure ( !process.equals (actor) );\n\n         // check isomorphic binding between objects processToActor and actor \n         JavaSDM.ensure ( !processToActor.equals (actor) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and exclusiveGateway \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects flow and exclusiveGateway \n         JavaSDM.ensure ( !flow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects inFlow and exclusiveGateway \n         JavaSDM.ensure ( !inFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects inFlowToFlow and exclusiveGateway \n         JavaSDM.ensure ( !inFlowToFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects lane and exclusiveGateway \n         JavaSDM.ensure ( !lane.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects laneSet and exclusiveGateway \n         JavaSDM.ensure ( !laneSet.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects normalStep and exclusiveGateway \n         JavaSDM.ensure ( !normalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlow and exclusiveGateway \n         JavaSDM.ensure ( !outFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlowToFlow and exclusiveGateway \n         JavaSDM.ensure ( !outFlowToFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and exclusiveGateway \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects process and exclusiveGateway \n         JavaSDM.ensure ( !process.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects processToActor and exclusiveGateway \n         JavaSDM.ensure ( !processToActor.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects flow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !flow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !inFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !inFlowToFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects lane and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !lane.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects laneSet and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !laneSet.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects normalStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !normalStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects process and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !process.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !processToActor.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects lane and flow \n         JavaSDM.ensure ( !lane.equals (flow) );\n\n         // check isomorphic binding between objects laneSet and flow \n         JavaSDM.ensure ( !laneSet.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToFlow and flow \n         JavaSDM.ensure ( !outFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects processToActor and flow \n         JavaSDM.ensure ( !processToActor.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlow \n         JavaSDM.ensure ( !lane.equals (inFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects processToActor and inFlow \n         JavaSDM.ensure ( !processToActor.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlowToFlow \n         JavaSDM.ensure ( !lane.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlowToFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects processToActor and inFlowToFlow \n         JavaSDM.ensure ( !processToActor.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and lane \n         JavaSDM.ensure ( !laneSet.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and lane \n         JavaSDM.ensure ( !normalStep.equals (lane) );\n\n         // check isomorphic binding between objects outFlow and lane \n         JavaSDM.ensure ( !outFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToFlow and lane \n         JavaSDM.ensure ( !outFlowToFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and lane \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (lane) );\n\n         // check isomorphic binding between objects process and lane \n         JavaSDM.ensure ( !process.equals (lane) );\n\n         // check isomorphic binding between objects processToActor and lane \n         JavaSDM.ensure ( !processToActor.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and laneSet \n         JavaSDM.ensure ( !normalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlow and laneSet \n         JavaSDM.ensure ( !outFlow.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlowToFlow and laneSet \n         JavaSDM.ensure ( !outFlowToFlow.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and laneSet \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects process and laneSet \n         JavaSDM.ensure ( !process.equals (laneSet) );\n\n         // check isomorphic binding between objects processToActor and laneSet \n         JavaSDM.ensure ( !processToActor.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and normalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and normalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects processToActor and normalStep \n         JavaSDM.ensure ( !processToActor.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and outFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects processToActor and outFlow \n         JavaSDM.ensure ( !processToActor.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToFlow \n         JavaSDM.ensure ( !process.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects processToActor and outFlowToFlow \n         JavaSDM.ensure ( !processToActor.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToNormalStep \n         JavaSDM.ensure ( !process.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and outFlowToNormalStep \n         JavaSDM.ensure ( !processToActor.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and process \n         JavaSDM.ensure ( !processToActor.equals (process) );\n\n         // create object __flow_steps_normalStep\n         __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object lane__flowNodeRefs__exclusiveGateway\n         lane__flowNodeRefs__exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object exclusiveGatewayToNormalStep__source__exclusiveGateway\n         exclusiveGatewayToNormalStep__source__exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlow__sourceRef__exclusiveGateway\n         outFlow__sourceRef__exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object exclusiveGateway__incoming__inFlow\n         exclusiveGateway__incoming__inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object exclusiveGateway__default__outFlow\n         exclusiveGateway__default__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object exclusiveGateway__outgoing__outFlow\n         exclusiveGateway__outgoing__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__target__flow\n         outFlowToFlow__target__flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__outFlow\n         process__flowElements__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object exclusiveGatewayToNormalStep__target__normalStep\n         exclusiveGatewayToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object inFlow__targetRef__exclusiveGateway\n         inFlow__targetRef__exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __normalStep_actor_actor\n         __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__exclusiveGateway\n         process__flowElements__exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ExclusiveGatewayToStepCoreRule\");\n         // assign attribute __normalStep_actor_actor\n         __normalStep_actor_actor.setName (\"actor\");\n         // assign attribute outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToFlow__target__flow\n         outFlowToFlow__target__flow.setName (\"target\");\n         // assign attribute process__flowElements__exclusiveGateway\n         process__flowElements__exclusiveGateway.setName (\"flowElements\");\n         // assign attribute process__flowElements__outFlow\n         process__flowElements__outFlow.setName (\"flowElements\");\n         // assign attribute inFlow__targetRef__exclusiveGateway\n         inFlow__targetRef__exclusiveGateway.setName (\"targetRef\");\n         // assign attribute exclusiveGateway__incoming__inFlow\n         exclusiveGateway__incoming__inFlow.setName (\"incoming\");\n         // assign attribute outFlow__sourceRef__exclusiveGateway\n         outFlow__sourceRef__exclusiveGateway.setName (\"sourceRef\");\n         // assign attribute exclusiveGateway__outgoing__outFlow\n         exclusiveGateway__outgoing__outFlow.setName (\"outgoing\");\n         // assign attribute exclusiveGateway__default__outFlow\n         exclusiveGateway__default__outFlow.setName (\"default\");\n         // assign attribute exclusiveGatewayToNormalStep__source__exclusiveGateway\n         exclusiveGatewayToNormalStep__source__exclusiveGateway.setName (\"source\");\n         // assign attribute exclusiveGatewayToNormalStep__target__normalStep\n         exclusiveGatewayToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute __flow_steps_normalStep\n         __flow_steps_normalStep.setName (\"steps\");\n         // assign attribute lane__flowNodeRefs__exclusiveGateway\n         lane__flowNodeRefs__exclusiveGateway.setName (\"flowNodeRefs\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__flow_steps_normalStep,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,lane__flowNodeRefs__exclusiveGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGatewayToNormalStep__source__exclusiveGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow__sourceRef__exclusiveGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGateway__incoming__inFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGateway__default__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGateway__outgoing__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__target__flow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGatewayToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,inFlow__targetRef__exclusiveGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__normalStep_actor_actor,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__exclusiveGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__source__outFlow,\"createdEdges\");\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         __flow_steps_normalStep.setTrg( normalStep);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         __normalStep_actor_actor.setSrc( normalStep);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToFlow__target__flow.setSrc( outFlowToFlow);\n\n\n         // create link\n         process__flowElements__exclusiveGateway.setSrc( process);\n\n\n         // create link\n         process__flowElements__outFlow.setSrc( process);\n\n\n         // create link\n         exclusiveGateway__incoming__inFlow.setTrg( inFlow);\n\n\n         // create link\n         inFlow__targetRef__exclusiveGateway.setSrc( inFlow);\n\n\n         // create link\n         exclusiveGateway__incoming__inFlow.setSrc( exclusiveGateway);\n\n\n         // create link\n         lane__flowNodeRefs__exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         exclusiveGateway__outgoing__outFlow.setSrc( exclusiveGateway);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__source__exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         exclusiveGateway__default__outFlow.setSrc( exclusiveGateway);\n\n\n         // create link\n         inFlow__targetRef__exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         process__flowElements__exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         outFlow__sourceRef__exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         process__flowElements__outFlow.setTrg( outFlow);\n\n\n         // create link\n         exclusiveGateway__outgoing__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlow__sourceRef__exclusiveGateway.setSrc( outFlow);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         exclusiveGateway__default__outFlow.setTrg( outFlow);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__source__exclusiveGateway.setSrc( exclusiveGatewayToNormalStep);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__target__normalStep.setSrc( exclusiveGatewayToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         __flow_steps_normalStep.setSrc( flow);\n\n\n         // create link\n         outFlowToFlow__target__flow.setTrg( flow);\n\n\n         // create link\n         __normalStep_actor_actor.setTrg( actor);\n\n\n         // create link\n         lane__flowNodeRefs__exclusiveGateway.setSrc( lane);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,normalStep,outFlowToFlow,inFlowToFlow,process,inFlow,exclusiveGateway,outFlow,exclusiveGatewayToNormalStep,outFlowToNormalStep,flow,actor,processToActor,lane,laneSet);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Actor actor = null;\n      Flow flow = null;\n      NormalStep normalStep = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __processToActor_source_process = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __processToActor_target_actor = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      CSP csp = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      bpmn2.Process process = null;\n      Iterator fujaba__IterActorToProcessToActor = null;\n      ProcessToActor processToActor = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ExclusiveGatewayToStepCoreRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (match.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (match.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link target from flow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,SequenceFlowToUCFlow.class,\"target\")).iterator ();\n\n         while ( fujaba__IterFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // bind object\n               inFlow = inFlowToFlow.getSource ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n\n               // iterate to-many link target from actor to processToActor\n               fujaba__Success = false;\n\n               fujaba__IterActorToProcessToActor = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(actor,ProcessToActor.class,\"target\")).iterator ();\n\n               while ( fujaba__IterActorToProcessToActor.hasNext () )\n               {\n                  try\n                  {\n                     processToActor = (ProcessToActor) fujaba__IterActorToProcessToActor.next ();\n\n                     // check object processToActor is really bound\n                     JavaSDM.ensure ( processToActor != null );\n                     // bind object\n                     process = processToActor.getSource ();\n\n                     // check object process is really bound\n                     JavaSDM.ensure ( process != null );\n\n                     // story node \'find context\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object actor is really bound\n                        JavaSDM.ensure ( actor != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object inFlowToFlow is really bound\n                        JavaSDM.ensure ( inFlowToFlow != null );\n                        // check object normalStep is really bound\n                        JavaSDM.ensure ( normalStep != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check object processToActor is really bound\n                        JavaSDM.ensure ( processToActor != null );\n                        // check link actor from normalStep to actor\n                        JavaSDM.ensure (actor.equals (normalStep.getActor ()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link source from inFlowToFlow to inFlow\n                        JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                        ));\n\n                        // check link source from processToActor to process\n                        JavaSDM.ensure (process.equals (processToActor.getSource ()\n                        ));\n\n                        // check link steps from normalStep to flow\n                        JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                        ));\n\n                        // check link target from inFlowToFlow to flow\n                        JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                        ));\n\n                        // check link target from processToActor to actor\n                        JavaSDM.ensure (actor.equals (processToActor.getTarget ()\n                        ));\n\n                        // iterate to-many link laneSets from process to laneSet\n                        fujaba__Success = false;\n\n                        fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                        while ( fujaba__IterProcessToLaneSet.hasNext () )\n                        {\n                           try\n                           {\n                              laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                              // check object laneSet is really bound\n                              JavaSDM.ensure ( laneSet != null );\n                              // iterate to-many link lanes from laneSet to lane\n                              fujaba__Success = false;\n\n                              fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                              while ( fujaba__IterLaneSetToLane.hasNext () )\n                              {\n                                 try\n                                 {\n                                    lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                    // check object lane is really bound\n                                    JavaSDM.ensure ( lane != null );\n                                    // create object __flow_steps_normalStep\n                                    __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __normalStep_actor_actor\n                                    __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object isApplicableMatch\n                                    isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                                    // create object __inFlowToFlow_target_flow\n                                    __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __inFlowToFlow_source_inFlow\n                                    __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __processToActor_source_process\n                                    __processToActor_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __process_laneSets_laneSet\n                                    __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __process_flowElements_inFlow\n                                    __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __processToActor_target_actor\n                                    __processToActor_target_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __laneSet_lanes_lane\n                                    __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // assign attribute __normalStep_actor_actor\n                                    __normalStep_actor_actor.setName (\"actor\");\n                                    // assign attribute __inFlowToFlow_source_inFlow\n                                    __inFlowToFlow_source_inFlow.setName (\"source\");\n                                    // assign attribute __inFlowToFlow_target_flow\n                                    __inFlowToFlow_target_flow.setName (\"target\");\n                                    // assign attribute __process_laneSets_laneSet\n                                    __process_laneSets_laneSet.setName (\"laneSets\");\n                                    // assign attribute __process_flowElements_inFlow\n                                    __process_flowElements_inFlow.setName (\"flowElements\");\n                                    // assign attribute __flow_steps_normalStep\n                                    __flow_steps_normalStep.setName (\"steps\");\n                                    // assign attribute __processToActor_source_process\n                                    __processToActor_source_process.setName (\"source\");\n                                    // assign attribute __processToActor_target_actor\n                                    __processToActor_target_actor.setName (\"target\");\n                                    // assign attribute __laneSet_lanes_lane\n                                    __laneSet_lanes_lane.setName (\"lanes\");\n\n                                    // create link\n                                    __flow_steps_normalStep.setTrg( normalStep);\n\n\n                                    // create link\n                                    __normalStep_actor_actor.setSrc( normalStep);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(normalStep);\n\n\n                                    // create link\n                                    __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                                    // create link\n                                    __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                                    // create link\n                                    __processToActor_source_process.setTrg( process);\n\n\n                                    // create link\n                                    __process_laneSets_laneSet.setSrc( process);\n\n\n                                    // create link\n                                    __process_flowElements_inFlow.setSrc( process);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(process);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                                    // create link\n                                    __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                                    // create link\n                                    __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(flow);\n\n\n                                    // create link\n                                    __flow_steps_normalStep.setSrc( flow);\n\n\n                                    // create link\n                                    __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(actor);\n\n\n                                    // create link\n                                    __normalStep_actor_actor.setTrg( actor);\n\n\n                                    // create link\n                                    __processToActor_target_actor.setTrg( actor);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(processToActor);\n\n\n                                    // create link\n                                    __processToActor_source_process.setSrc( processToActor);\n\n\n                                    // create link\n                                    __processToActor_target_actor.setSrc( processToActor);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(lane);\n\n\n                                    // create link\n                                    __laneSet_lanes_lane.setTrg( lane);\n\n\n                                    // create link\n                                    __process_laneSets_laneSet.setTrg( laneSet);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(laneSet);\n\n\n                                    // create link\n                                    __laneSet_lanes_lane.setSrc( laneSet);\n\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToActor_target_actor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_laneSets_laneSet,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__normalStep_actor_actor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneSet_lanes_lane,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToActor_source_process,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_normalStep,\"allContextElements\");\n                                    // story node \'solve CSP\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,normalStep,inFlowToFlow,process,inFlow,flow,actor,processToActor,lane,laneSet));\n\n                                       // ensure correct type and really bound of object csp\n                                       JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                       csp = (CSP) _TmpObject;\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    // statement node \'check CSP\'\n                                    fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                                    if (fujaba__Success)\n                                    {\n                                       // story node \'add match to rule result\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // check object isApplicableMatch is really bound\n                                          JavaSDM.ensure ( isApplicableMatch != null );\n                                          // check object ruleresult is really bound\n                                          JavaSDM.ensure ( ruleresult != null );\n                                          // assign attribute ruleresult\n                                          ruleresult.setSuccess (true);\n                                          // assign attribute isApplicableMatch\n                                          isApplicableMatch.setRuleName (\"ExclusiveGatewayToStepCoreRule\");\n\n                                          // create link\n                                          isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n                              }\n                              JavaSDM.ensure (fujaba__Success);\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n                        }\n                        JavaSDM.ensure (fujaba__Success);\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"normalStep\", normalStep);\nmatch.registerObject(\"flow\", flow);\nmatch.registerObject(\"actor\", actor);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, NormalStep normalStep,
			Flow flow, Actor actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, NormalStep normalStep,
			Flow flow, Actor actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.name\", true, csp);\r\nvar_normalStep_name.setValue(normalStep.getName());\r\nvar_normalStep_name.setType(\"\");\r\nVariable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.label\", true, csp);\r\nvar_normalStep_label.setValue(normalStep.getLabel());\r\nvar_normalStep_label.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_exclusiveGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.id\", csp);\r\nvar_exclusiveGateway_id.setType(\"\");\r\nVariable var_exclusiveGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.name\", csp);\r\nvar_exclusiveGateway_name.setType(\"\");\r\nVariable var_exclusiveGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.gatewayDirection\", csp);\r\nvar_exclusiveGateway_gatewayDirection.setType(\"EObject\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\ncsp.getConstraints().add(eqGatewayDirection);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_exclusiveGateway_id,var_normalStep_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_exclusiveGateway_name,var_normalStep_label);\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_exclusiveGateway_gatewayDirection,literal0);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"processToActor\",processToActor);\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nisApplicableMatch.registerObject(\"laneSet\",laneSet);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			NormalStep normalStep, SequenceFlowToUCFlow inFlowToFlow,
			bpmn2.Process process, SequenceFlow inFlow, Flow flow, Actor actor,
			ProcessToActor processToActor, Lane lane, LaneSet laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"outFlowToFlow\", outFlowToFlow);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"exclusiveGateway\", exclusiveGateway);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"exclusiveGatewayToNormalStep\", exclusiveGatewayToNormalStep);\nruleresult.registerObject(\"outFlowToNormalStep\", outFlowToNormalStep);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"processToActor\", processToActor);\nruleresult.registerObject(\"lane\", lane);\nruleresult.registerObject(\"laneSet\", laneSet);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject normalStep,
			EObject outFlowToFlow, EObject inFlowToFlow, EObject process,
			EObject inFlow, EObject exclusiveGateway, EObject outFlow,
			EObject exclusiveGatewayToNormalStep, EObject outFlowToNormalStep,
			EObject flow, EObject actor, EObject processToActor, EObject lane,
			EObject laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"normalStep\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_normalStep_steps_680405 = null;\n      Iterator fujaba__IterNormalStepTo__DEC_normalStep_next_59131 = null;\n      Step __DEC_normalStep_next_59131 = null;\n      Match match = null;\n      Flow flow = null;\n      Actor actor = null;\n      NormalStep normalStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_actor is really bound\n         JavaSDM.ensure ( _edge_actor != null );\n         // bind object\n         _TmpObject = _edge_actor.getSrc ();\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n\n         // bind object\n         actor = normalStep.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // bind object\n         flow = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(normalStep));\n\n         // check link trg from _edge_actor to actor\n         JavaSDM.ensure (actor.equals (_edge_actor.getTrg ()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_normalStep_steps_680405 = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n               // check object __DEC_normalStep_steps_680405 is really bound\n               JavaSDM.ensure ( __DEC_normalStep_steps_680405 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_normalStep_steps_680405.getSteps().contains(normalStep));\n\n               // check isomorphic binding between objects __DEC_normalStep_steps_680405 and flow \n               JavaSDM.ensure ( !__DEC_normalStep_steps_680405.equals (flow) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link next from normalStep to __DEC_normalStep_next_59131\n               fujaba__Success = false;\n\n               fujaba__IterNormalStepTo__DEC_normalStep_next_59131 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterNormalStepTo__DEC_normalStep_next_59131.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_normalStep_next_59131 = (Step) fujaba__IterNormalStepTo__DEC_normalStep_next_59131.next ();\n\n                     // check object __DEC_normalStep_next_59131 is really bound\n                     JavaSDM.ensure ( __DEC_normalStep_next_59131 != null );\n                     // check isomorphic binding between objects __DEC_normalStep_next_59131 and normalStep \n                     JavaSDM.ensure ( !__DEC_normalStep_next_59131.equals (normalStep) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check object _edge_actor is really bound\n            JavaSDM.ensure ( _edge_actor != null );\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check link actor from normalStep to actor\n            JavaSDM.ensure (actor.equals (normalStep.getActor ()\n            ));\n\n            // check link src from _edge_actor to normalStep\n            JavaSDM.ensure (normalStep.equals (_edge_actor.getSrc ()\n            ));\n\n            // check link steps from normalStep to flow\n            JavaSDM.ensure (flow.equals (normalStep.eContainer()\n            ));\n\n            // check link trg from _edge_actor to actor\n            JavaSDM.ensure (actor.equals (_edge_actor.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,normalStep,flow,actor);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_14(EMoflonEdge _edge_actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_152493 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_346581 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_748740 = null;\n      ExclusiveGateway __DEC_outFlow_default_748740 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_735332 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_735332 = null;\n      Match match = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterProcessToOutFlow = null;\n      SequenceFlow outFlow = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n      bpmn2.Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // check link flowElements from exclusiveGateway to process\n         JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check link incoming from inFlow to exclusiveGateway\n               JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // iterate to-many link flowElements from process to outFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToOutFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToOutFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToOutFlow.next ();\n\n                     // ensure correct type and really bound of object outFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     outFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link default from exclusiveGateway to outFlow\n                     JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n                     ));\n\n                     // check link outgoing from outFlow to exclusiveGateway\n                     JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                     ));\n\n                     // iterate to-many link laneSets from process to laneSet\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                     while ( fujaba__IterProcessToLaneSet.hasNext () )\n                     {\n                        try\n                        {\n                           laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                           // check object laneSet is really bound\n                           JavaSDM.ensure ( laneSet != null );\n                           // iterate to-many link lanes from laneSet to lane\n                           fujaba__Success = false;\n\n                           fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                           while ( fujaba__IterLaneSetToLane.hasNext () )\n                           {\n                              try\n                              {\n                                 lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                 // check object lane is really bound\n                                 JavaSDM.ensure ( lane != null );\n                                 // check link flowNodeRefs from lane to exclusiveGateway\n                                 JavaSDM.ensure (lane.getFlowNodeRefs ().contains (exclusiveGateway));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_exclusiveGateway_flowElements_152493 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                                       // check object __DEC_exclusiveGateway_flowElements_152493 is really bound\n                                       JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_152493 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_152493.getFlowElements().contains(exclusiveGateway));\n\n                                       // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_152493 and process \n                                       JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_152493.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_outFlow_flowElements_346581 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                       // check object __DEC_outFlow_flowElements_346581 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_flowElements_346581 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_outFlow_flowElements_346581.getFlowElements().contains(outFlow));\n\n                                       // check isomorphic binding between objects __DEC_outFlow_flowElements_346581 and process \n                                       JavaSDM.ensure ( !__DEC_outFlow_flowElements_346581.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link default from outFlow to __DEC_outFlow_default_748740\n                                       fujaba__Success = false;\n\n                                       fujaba__IterOutFlowTo__DEC_outFlow_default_748740 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_748740.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_outFlow_default_748740 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_748740.next ();\n\n                                             // check object __DEC_outFlow_default_748740 is really bound\n                                             JavaSDM.ensure ( __DEC_outFlow_default_748740 != null );\n                                             // check isomorphic binding between objects __DEC_outFlow_default_748740 and exclusiveGateway \n                                             JavaSDM.ensure ( !__DEC_outFlow_default_748740.equals (exclusiveGateway) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link incoming from exclusiveGateway to __DEC_exclusiveGateway_targetRef_735332\n                                       fujaba__Success = false;\n\n                                       fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_735332 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_735332.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_exclusiveGateway_targetRef_735332 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_735332.next ();\n\n                                             // check object __DEC_exclusiveGateway_targetRef_735332 is really bound\n                                             JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_735332 != null );\n                                             // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_735332 and inFlow \n                                             JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_735332.equals (inFlow) );\n\n                                             // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_735332 and outFlow \n                                             JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_735332.equals (outFlow) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_flowElements is really bound\n                                    JavaSDM.ensure ( _edge_flowElements != null );\n                                    // check object exclusiveGateway is really bound\n                                    JavaSDM.ensure ( exclusiveGateway != null );\n                                    // check object inFlow is really bound\n                                    JavaSDM.ensure ( inFlow != null );\n                                    // check object lane is really bound\n                                    JavaSDM.ensure ( lane != null );\n                                    // check object laneSet is really bound\n                                    JavaSDM.ensure ( laneSet != null );\n                                    // check object outFlow is really bound\n                                    JavaSDM.ensure ( outFlow != null );\n                                    // check object process is really bound\n                                    JavaSDM.ensure ( process != null );\n                                    // check isomorphic binding between objects outFlow and inFlow \n                                    JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                    // check link default from exclusiveGateway to outFlow\n                                    JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n                                    ));\n\n                                    // check link flowElements from exclusiveGateway to process\n                                    JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                                    ));\n\n                                    // check link flowElements from inFlow to process\n                                    JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from outFlow to process\n                                    JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                    ));\n\n                                    // check link incoming from inFlow to exclusiveGateway\n                                    JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                                    ));\n\n                                    // check link incoming from outFlow to exclusiveGateway\n                                    JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                                    )));\n\n                                    // check link laneSets from laneSet to process\n                                    JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                    ));\n\n                                    // check link lanes from lane to laneSet\n                                    JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                    ));\n\n                                    // check link outgoing from outFlow to exclusiveGateway\n                                    JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                                    ));\n\n                                    // check link src from _edge_flowElements to process\n                                    JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_flowElements to exclusiveGateway\n                                    JavaSDM.ensure (exclusiveGateway.equals (_edge_flowElements.getTrg ()\n                                    ));\n\n                                    // check link flowNodeRefs from lane to exclusiveGateway\n                                    JavaSDM.ensure (lane.getFlowNodeRefs ().contains (exclusiveGateway));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exclusiveGateway,outFlow,lane,laneSet);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'\'\n                                       fujaba__Success = this.checkTypes_FWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_31(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_37398 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_726597 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_994182 = null;\n      ExclusiveGateway __DEC_outFlow_default_994182 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_888296 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_888296 = null;\n      Match match = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n      SequenceFlow outFlow = null;\n      bpmn2.Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // bind object\n         _TmpObject = outFlow.getSourceRef ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // check link default from exclusiveGateway to outFlow\n         JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n         ));\n\n         // check link flowElements from exclusiveGateway to process\n         JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link incoming from inFlow to exclusiveGateway\n               JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // iterate to-many link laneSets from process to laneSet\n               fujaba__Success = false;\n\n               fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n               while ( fujaba__IterProcessToLaneSet.hasNext () )\n               {\n                  try\n                  {\n                     laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                     // check object laneSet is really bound\n                     JavaSDM.ensure ( laneSet != null );\n                     // iterate to-many link lanes from laneSet to lane\n                     fujaba__Success = false;\n\n                     fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                     while ( fujaba__IterLaneSetToLane.hasNext () )\n                     {\n                        try\n                        {\n                           lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                           // check object lane is really bound\n                           JavaSDM.ensure ( lane != null );\n                           // check link flowNodeRefs from lane to exclusiveGateway\n                           JavaSDM.ensure (lane.getFlowNodeRefs ().contains (exclusiveGateway));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_exclusiveGateway_flowElements_37398 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                                 // check object __DEC_exclusiveGateway_flowElements_37398 is really bound\n                                 JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_37398 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_37398.getFlowElements().contains(exclusiveGateway));\n\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_37398 and process \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_37398.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_outFlow_flowElements_726597 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                 // check object __DEC_outFlow_flowElements_726597 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_flowElements_726597 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_outFlow_flowElements_726597.getFlowElements().contains(outFlow));\n\n                                 // check isomorphic binding between objects __DEC_outFlow_flowElements_726597 and process \n                                 JavaSDM.ensure ( !__DEC_outFlow_flowElements_726597.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link default from outFlow to __DEC_outFlow_default_994182\n                                 fujaba__Success = false;\n\n                                 fujaba__IterOutFlowTo__DEC_outFlow_default_994182 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_994182.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_outFlow_default_994182 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_994182.next ();\n\n                                       // check object __DEC_outFlow_default_994182 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_default_994182 != null );\n                                       // check isomorphic binding between objects __DEC_outFlow_default_994182 and exclusiveGateway \n                                       JavaSDM.ensure ( !__DEC_outFlow_default_994182.equals (exclusiveGateway) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link incoming from exclusiveGateway to __DEC_exclusiveGateway_targetRef_888296\n                                 fujaba__Success = false;\n\n                                 fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_888296 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_888296.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_exclusiveGateway_targetRef_888296 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_888296.next ();\n\n                                       // check object __DEC_exclusiveGateway_targetRef_888296 is really bound\n                                       JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_888296 != null );\n                                       // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_888296 and inFlow \n                                       JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_888296.equals (inFlow) );\n\n                                       // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_888296 and outFlow \n                                       JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_888296.equals (outFlow) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_flowElements is really bound\n                              JavaSDM.ensure ( _edge_flowElements != null );\n                              // check object exclusiveGateway is really bound\n                              JavaSDM.ensure ( exclusiveGateway != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object lane is really bound\n                              JavaSDM.ensure ( lane != null );\n                              // check object laneSet is really bound\n                              JavaSDM.ensure ( laneSet != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check isomorphic binding between objects outFlow and inFlow \n                              JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                              // check link default from exclusiveGateway to outFlow\n                              JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n                              ));\n\n                              // check link flowElements from exclusiveGateway to process\n                              JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link incoming from inFlow to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link incoming from outFlow to exclusiveGateway\n                              JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                              )));\n\n                              // check link laneSets from laneSet to process\n                              JavaSDM.ensure (process.equals (laneSet.eContainer()\n                              ));\n\n                              // check link lanes from lane to laneSet\n                              JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                              ));\n\n                              // check link outgoing from outFlow to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link src from _edge_flowElements to process\n                              JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                              ));\n\n                              // check link trg from _edge_flowElements to outFlow\n                              JavaSDM.ensure (outFlow.equals (_edge_flowElements.getTrg ()\n                              ));\n\n                              // check link flowNodeRefs from lane to exclusiveGateway\n                              JavaSDM.ensure (lane.getFlowNodeRefs ().contains (exclusiveGateway));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exclusiveGateway,outFlow,lane,laneSet);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'\'\n                                 fujaba__Success = this.checkTypes_FWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_32(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_645082 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_345402 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_819735 = null;\n      ExclusiveGateway __DEC_outFlow_default_819735 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_248030 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_248030 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      bpmn2.Process process = null;\n      SequenceFlow outFlow = null;\n      Iterator fujaba__IterExclusiveGatewayToLane = null;\n      Lane lane = null;\n      ExclusiveGateway exclusiveGateway = null;\n      SequenceFlow inFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_targetRef is really bound\n         JavaSDM.ensure ( _edge_targetRef != null );\n         // bind object\n         _TmpObject = _edge_targetRef.getSrc ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_targetRef.getTrg ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // check link incoming from inFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link flowNodeRefs from exclusiveGateway to lane\n         fujaba__Success = false;\n\n         fujaba__IterExclusiveGatewayToLane = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,Lane.class,\"flowNodeRefs\")).iterator ();\n\n         while ( fujaba__IterExclusiveGatewayToLane.hasNext () )\n         {\n            try\n            {\n               lane = (Lane) fujaba__IterExclusiveGatewayToLane.next ();\n\n               // check object lane is really bound\n               JavaSDM.ensure ( lane != null );\n               // bind object\n               outFlow = exclusiveGateway.getDefault ();\n\n               // check object outFlow is really bound\n               JavaSDM.ensure ( outFlow != null );\n\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // bind object\n               _TmpObject = exclusiveGateway.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) exclusiveGateway.eContainer() : null;\n\n               // ensure correct type and really bound of object process\n               JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n               process = (bpmn2.Process) _TmpObject;\n\n               // check if contained via correct reference\n               JavaSDM.ensure(process.getFlowElements().contains(exclusiveGateway));\n\n               // check link flowElements from inFlow to process\n               JavaSDM.ensure (process.equals (inFlow.eContainer()\n               ));\n\n               // check link flowElements from outFlow to process\n               JavaSDM.ensure (process.equals (outFlow.eContainer()\n               ));\n\n               // check link outgoing from outFlow to exclusiveGateway\n               JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n               ));\n\n               // iterate to-many link laneSets from process to laneSet\n               fujaba__Success = false;\n\n               fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n               while ( fujaba__IterProcessToLaneSet.hasNext () )\n               {\n                  try\n                  {\n                     laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                     // check object laneSet is really bound\n                     JavaSDM.ensure ( laneSet != null );\n                     // check link lanes from lane to laneSet\n                     JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_exclusiveGateway_flowElements_645082 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                           // check object __DEC_exclusiveGateway_flowElements_645082 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_645082 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_645082.getFlowElements().contains(exclusiveGateway));\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_645082 and process \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_645082.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_345402 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_345402 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_345402 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_345402.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_345402 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_345402.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link default from outFlow to __DEC_outFlow_default_819735\n                           fujaba__Success = false;\n\n                           fujaba__IterOutFlowTo__DEC_outFlow_default_819735 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_819735.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_outFlow_default_819735 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_819735.next ();\n\n                                 // check object __DEC_outFlow_default_819735 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_default_819735 != null );\n                                 // check isomorphic binding between objects __DEC_outFlow_default_819735 and exclusiveGateway \n                                 JavaSDM.ensure ( !__DEC_outFlow_default_819735.equals (exclusiveGateway) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link incoming from exclusiveGateway to __DEC_exclusiveGateway_targetRef_248030\n                           fujaba__Success = false;\n\n                           fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_248030 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_248030.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_exclusiveGateway_targetRef_248030 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_248030.next ();\n\n                                 // check object __DEC_exclusiveGateway_targetRef_248030 is really bound\n                                 JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_248030 != null );\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_248030 and inFlow \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_248030.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_248030 and outFlow \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_248030.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_targetRef is really bound\n                        JavaSDM.ensure ( _edge_targetRef != null );\n                        // check object exclusiveGateway is really bound\n                        JavaSDM.ensure ( exclusiveGateway != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object laneSet is really bound\n                        JavaSDM.ensure ( laneSet != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link default from exclusiveGateway to outFlow\n                        JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n                        ));\n\n                        // check link flowElements from exclusiveGateway to process\n                        JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link incoming from inFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link incoming from outFlow to exclusiveGateway\n                        JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link laneSets from laneSet to process\n                        JavaSDM.ensure (process.equals (laneSet.eContainer()\n                        ));\n\n                        // check link lanes from lane to laneSet\n                        JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                        ));\n\n                        // check link outgoing from outFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_targetRef to inFlow\n                        JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                        ));\n\n                        // check link trg from _edge_targetRef to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (_edge_targetRef.getTrg ()\n                        ));\n\n                        // check link flowNodeRefs from lane to exclusiveGateway\n                        JavaSDM.ensure (lane.getFlowNodeRefs ().contains (exclusiveGateway));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exclusiveGateway,outFlow,lane,laneSet);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_33(
			EMoflonEdge _edge_targetRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_58269 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_601331 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_393809 = null;\n      ExclusiveGateway __DEC_outFlow_default_393809 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_647839 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_647839 = null;\n      Match match = null;\n      Iterator fujaba__IterExclusiveGatewayTo_edge_targetRef = null;\n      EMoflonEdge _edge_targetRef = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      SequenceFlow inFlow = null;\n      bpmn2.Process process = null;\n      SequenceFlow outFlow = null;\n      Iterator fujaba__IterExclusiveGatewayToLane = null;\n      Lane lane = null;\n      ExclusiveGateway exclusiveGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_incoming is really bound\n         JavaSDM.ensure ( _edge_incoming != null );\n         // bind object\n         _TmpObject = _edge_incoming.getSrc ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // iterate to-many link flowNodeRefs from exclusiveGateway to lane\n         fujaba__Success = false;\n\n         fujaba__IterExclusiveGatewayToLane = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,Lane.class,\"flowNodeRefs\")).iterator ();\n\n         while ( fujaba__IterExclusiveGatewayToLane.hasNext () )\n         {\n            try\n            {\n               lane = (Lane) fujaba__IterExclusiveGatewayToLane.next ();\n\n               // check object lane is really bound\n               JavaSDM.ensure ( lane != null );\n               // bind object\n               outFlow = exclusiveGateway.getDefault ();\n\n               // check object outFlow is really bound\n               JavaSDM.ensure ( outFlow != null );\n\n               // bind object\n               _TmpObject = exclusiveGateway.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) exclusiveGateway.eContainer() : null;\n\n               // ensure correct type and really bound of object process\n               JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n               process = (bpmn2.Process) _TmpObject;\n\n               // check if contained via correct reference\n               JavaSDM.ensure(process.getFlowElements().contains(exclusiveGateway));\n\n               // check link flowElements from outFlow to process\n               JavaSDM.ensure (process.equals (outFlow.eContainer()\n               ));\n\n               // check link outgoing from outFlow to exclusiveGateway\n               JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n               ));\n\n               // bind object\n               _TmpObject = _edge_incoming.getTrg ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link flowElements from inFlow to process\n               JavaSDM.ensure (process.equals (inFlow.eContainer()\n               ));\n\n               // check link incoming from inFlow to exclusiveGateway\n               JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // iterate to-many link laneSets from process to laneSet\n               fujaba__Success = false;\n\n               fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n               while ( fujaba__IterProcessToLaneSet.hasNext () )\n               {\n                  try\n                  {\n                     laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                     // check object laneSet is really bound\n                     JavaSDM.ensure ( laneSet != null );\n                     // check link lanes from lane to laneSet\n                     JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                     ));\n\n                     // iterate to-many link trg from exclusiveGateway to _edge_targetRef\n                     fujaba__Success = false;\n\n                     fujaba__IterExclusiveGatewayTo_edge_targetRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,EMoflonEdge.class,\"trg\")).iterator ();\n\n                     while ( fujaba__IterExclusiveGatewayTo_edge_targetRef.hasNext () )\n                     {\n                        try\n                        {\n                           _edge_targetRef = (EMoflonEdge) fujaba__IterExclusiveGatewayTo_edge_targetRef.next ();\n\n                           // check object _edge_targetRef is really bound\n                           JavaSDM.ensure ( _edge_targetRef != null );\n                           // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                           JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                           // check link src from _edge_targetRef to inFlow\n                           JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_exclusiveGateway_flowElements_58269 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                                 // check object __DEC_exclusiveGateway_flowElements_58269 is really bound\n                                 JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_58269 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_58269.getFlowElements().contains(exclusiveGateway));\n\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_58269 and process \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_58269.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_outFlow_flowElements_601331 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                 // check object __DEC_outFlow_flowElements_601331 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_flowElements_601331 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_outFlow_flowElements_601331.getFlowElements().contains(outFlow));\n\n                                 // check isomorphic binding between objects __DEC_outFlow_flowElements_601331 and process \n                                 JavaSDM.ensure ( !__DEC_outFlow_flowElements_601331.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link default from outFlow to __DEC_outFlow_default_393809\n                                 fujaba__Success = false;\n\n                                 fujaba__IterOutFlowTo__DEC_outFlow_default_393809 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_393809.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_outFlow_default_393809 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_393809.next ();\n\n                                       // check object __DEC_outFlow_default_393809 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_default_393809 != null );\n                                       // check isomorphic binding between objects __DEC_outFlow_default_393809 and exclusiveGateway \n                                       JavaSDM.ensure ( !__DEC_outFlow_default_393809.equals (exclusiveGateway) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link incoming from exclusiveGateway to __DEC_exclusiveGateway_targetRef_647839\n                                 fujaba__Success = false;\n\n                                 fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_647839 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_647839.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_exclusiveGateway_targetRef_647839 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_647839.next ();\n\n                                       // check object __DEC_exclusiveGateway_targetRef_647839 is really bound\n                                       JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_647839 != null );\n                                       // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_647839 and inFlow \n                                       JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_647839.equals (inFlow) );\n\n                                       // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_647839 and outFlow \n                                       JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_647839.equals (outFlow) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_incoming is really bound\n                              JavaSDM.ensure ( _edge_incoming != null );\n                              // check object _edge_targetRef is really bound\n                              JavaSDM.ensure ( _edge_targetRef != null );\n                              // check object exclusiveGateway is really bound\n                              JavaSDM.ensure ( exclusiveGateway != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object lane is really bound\n                              JavaSDM.ensure ( lane != null );\n                              // check object laneSet is really bound\n                              JavaSDM.ensure ( laneSet != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                              JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                              // check isomorphic binding between objects outFlow and inFlow \n                              JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                              // check link default from exclusiveGateway to outFlow\n                              JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n                              ));\n\n                              // check link flowElements from exclusiveGateway to process\n                              JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link incoming from inFlow to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link incoming from outFlow to exclusiveGateway\n                              JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                              )));\n\n                              // check link laneSets from laneSet to process\n                              JavaSDM.ensure (process.equals (laneSet.eContainer()\n                              ));\n\n                              // check link lanes from lane to laneSet\n                              JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                              ));\n\n                              // check link outgoing from outFlow to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link src from _edge_incoming to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (_edge_incoming.getSrc ()\n                              ));\n\n                              // check link src from _edge_targetRef to inFlow\n                              JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                              ));\n\n                              // check link trg from _edge_incoming to inFlow\n                              JavaSDM.ensure (inFlow.equals (_edge_incoming.getTrg ()\n                              ));\n\n                              // check link trg from _edge_targetRef to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (_edge_targetRef.getTrg ()\n                              ));\n\n                              // check link flowNodeRefs from lane to exclusiveGateway\n                              JavaSDM.ensure (lane.getFlowNodeRefs ().contains (exclusiveGateway));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exclusiveGateway,outFlow,lane,laneSet);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'\'\n                                 fujaba__Success = this.checkTypes_FWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_34(EMoflonEdge _edge_incoming);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_611107 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_496 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_390521 = null;\n      ExclusiveGateway __DEC_outFlow_default_390521 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_134038 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_134038 = null;\n      Match match = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n      bpmn2.Process process = null;\n      SequenceFlow outFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sourceRef is really bound\n         JavaSDM.ensure ( _edge_sourceRef != null );\n         // bind object\n         _TmpObject = _edge_sourceRef.getSrc ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = outFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) outFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(outFlow));\n\n         // bind object\n         _TmpObject = _edge_sourceRef.getTrg ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // check link default from exclusiveGateway to outFlow\n         JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n         ));\n\n         // check link flowElements from exclusiveGateway to process\n         JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n         ));\n\n         // check link outgoing from outFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link incoming from inFlow to exclusiveGateway\n               JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // iterate to-many link laneSets from process to laneSet\n               fujaba__Success = false;\n\n               fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n               while ( fujaba__IterProcessToLaneSet.hasNext () )\n               {\n                  try\n                  {\n                     laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                     // check object laneSet is really bound\n                     JavaSDM.ensure ( laneSet != null );\n                     // iterate to-many link lanes from laneSet to lane\n                     fujaba__Success = false;\n\n                     fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                     while ( fujaba__IterLaneSetToLane.hasNext () )\n                     {\n                        try\n                        {\n                           lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                           // check object lane is really bound\n                           JavaSDM.ensure ( lane != null );\n                           // check link flowNodeRefs from lane to exclusiveGateway\n                           JavaSDM.ensure (lane.getFlowNodeRefs ().contains (exclusiveGateway));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_exclusiveGateway_flowElements_611107 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                                 // check object __DEC_exclusiveGateway_flowElements_611107 is really bound\n                                 JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_611107 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_611107.getFlowElements().contains(exclusiveGateway));\n\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_611107 and process \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_611107.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_outFlow_flowElements_496 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                 // check object __DEC_outFlow_flowElements_496 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_flowElements_496 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_outFlow_flowElements_496.getFlowElements().contains(outFlow));\n\n                                 // check isomorphic binding between objects __DEC_outFlow_flowElements_496 and process \n                                 JavaSDM.ensure ( !__DEC_outFlow_flowElements_496.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link default from outFlow to __DEC_outFlow_default_390521\n                                 fujaba__Success = false;\n\n                                 fujaba__IterOutFlowTo__DEC_outFlow_default_390521 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_390521.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_outFlow_default_390521 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_390521.next ();\n\n                                       // check object __DEC_outFlow_default_390521 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_default_390521 != null );\n                                       // check isomorphic binding between objects __DEC_outFlow_default_390521 and exclusiveGateway \n                                       JavaSDM.ensure ( !__DEC_outFlow_default_390521.equals (exclusiveGateway) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link incoming from exclusiveGateway to __DEC_exclusiveGateway_targetRef_134038\n                                 fujaba__Success = false;\n\n                                 fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_134038 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_134038.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_exclusiveGateway_targetRef_134038 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_134038.next ();\n\n                                       // check object __DEC_exclusiveGateway_targetRef_134038 is really bound\n                                       JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_134038 != null );\n                                       // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_134038 and inFlow \n                                       JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_134038.equals (inFlow) );\n\n                                       // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_134038 and outFlow \n                                       JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_134038.equals (outFlow) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_sourceRef is really bound\n                              JavaSDM.ensure ( _edge_sourceRef != null );\n                              // check object exclusiveGateway is really bound\n                              JavaSDM.ensure ( exclusiveGateway != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object lane is really bound\n                              JavaSDM.ensure ( lane != null );\n                              // check object laneSet is really bound\n                              JavaSDM.ensure ( laneSet != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check isomorphic binding between objects outFlow and inFlow \n                              JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                              // check link default from exclusiveGateway to outFlow\n                              JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n                              ));\n\n                              // check link flowElements from exclusiveGateway to process\n                              JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link incoming from inFlow to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link incoming from outFlow to exclusiveGateway\n                              JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                              )));\n\n                              // check link laneSets from laneSet to process\n                              JavaSDM.ensure (process.equals (laneSet.eContainer()\n                              ));\n\n                              // check link lanes from lane to laneSet\n                              JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                              ));\n\n                              // check link outgoing from outFlow to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link src from _edge_sourceRef to outFlow\n                              JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                              ));\n\n                              // check link trg from _edge_sourceRef to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (_edge_sourceRef.getTrg ()\n                              ));\n\n                              // check link flowNodeRefs from lane to exclusiveGateway\n                              JavaSDM.ensure (lane.getFlowNodeRefs ().contains (exclusiveGateway));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exclusiveGateway,outFlow,lane,laneSet);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'\'\n                                 fujaba__Success = this.checkTypes_FWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_35(
			EMoflonEdge _edge_sourceRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_670393 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_517853 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_487423 = null;\n      ExclusiveGateway __DEC_outFlow_default_487423 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_870287 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_870287 = null;\n      Match match = null;\n      Iterator fujaba__IterOutFlowTo_edge_sourceRef = null;\n      EMoflonEdge _edge_sourceRef = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      bpmn2.Process process = null;\n      SequenceFlow outFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_outgoing is really bound\n         JavaSDM.ensure ( _edge_outgoing != null );\n         // bind object\n         _TmpObject = _edge_outgoing.getSrc ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_outgoing.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // check link default from exclusiveGateway to outFlow\n         JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n         ));\n\n         // bind object\n         _TmpObject = outFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) outFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(outFlow));\n\n         // check link flowElements from exclusiveGateway to process\n         JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n         ));\n\n         // check link outgoing from outFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link incoming from inFlow to exclusiveGateway\n               JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // iterate to-many link laneSets from process to laneSet\n               fujaba__Success = false;\n\n               fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n               while ( fujaba__IterProcessToLaneSet.hasNext () )\n               {\n                  try\n                  {\n                     laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                     // check object laneSet is really bound\n                     JavaSDM.ensure ( laneSet != null );\n                     // iterate to-many link lanes from laneSet to lane\n                     fujaba__Success = false;\n\n                     fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                     while ( fujaba__IterLaneSetToLane.hasNext () )\n                     {\n                        try\n                        {\n                           lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                           // check object lane is really bound\n                           JavaSDM.ensure ( lane != null );\n                           // check link flowNodeRefs from lane to exclusiveGateway\n                           JavaSDM.ensure (lane.getFlowNodeRefs ().contains (exclusiveGateway));\n\n                           // iterate to-many link src from outFlow to _edge_sourceRef\n                           fujaba__Success = false;\n\n                           fujaba__IterOutFlowTo_edge_sourceRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,EMoflonEdge.class,\"src\")).iterator ();\n\n                           while ( fujaba__IterOutFlowTo_edge_sourceRef.hasNext () )\n                           {\n                              try\n                              {\n                                 _edge_sourceRef = (EMoflonEdge) fujaba__IterOutFlowTo_edge_sourceRef.next ();\n\n                                 // check object _edge_sourceRef is really bound\n                                 JavaSDM.ensure ( _edge_sourceRef != null );\n                                 // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                                 JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                                 // check link trg from _edge_sourceRef to exclusiveGateway\n                                 JavaSDM.ensure (exclusiveGateway.equals (_edge_sourceRef.getTrg ()\n                                 ));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_exclusiveGateway_flowElements_670393 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                                       // check object __DEC_exclusiveGateway_flowElements_670393 is really bound\n                                       JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_670393 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_670393.getFlowElements().contains(exclusiveGateway));\n\n                                       // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_670393 and process \n                                       JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_670393.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_outFlow_flowElements_517853 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                       // check object __DEC_outFlow_flowElements_517853 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_flowElements_517853 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_outFlow_flowElements_517853.getFlowElements().contains(outFlow));\n\n                                       // check isomorphic binding between objects __DEC_outFlow_flowElements_517853 and process \n                                       JavaSDM.ensure ( !__DEC_outFlow_flowElements_517853.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link default from outFlow to __DEC_outFlow_default_487423\n                                       fujaba__Success = false;\n\n                                       fujaba__IterOutFlowTo__DEC_outFlow_default_487423 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_487423.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_outFlow_default_487423 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_487423.next ();\n\n                                             // check object __DEC_outFlow_default_487423 is really bound\n                                             JavaSDM.ensure ( __DEC_outFlow_default_487423 != null );\n                                             // check isomorphic binding between objects __DEC_outFlow_default_487423 and exclusiveGateway \n                                             JavaSDM.ensure ( !__DEC_outFlow_default_487423.equals (exclusiveGateway) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link incoming from exclusiveGateway to __DEC_exclusiveGateway_targetRef_870287\n                                       fujaba__Success = false;\n\n                                       fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_870287 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_870287.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_exclusiveGateway_targetRef_870287 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_870287.next ();\n\n                                             // check object __DEC_exclusiveGateway_targetRef_870287 is really bound\n                                             JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_870287 != null );\n                                             // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_870287 and inFlow \n                                             JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_870287.equals (inFlow) );\n\n                                             // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_870287 and outFlow \n                                             JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_870287.equals (outFlow) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_outgoing is really bound\n                                    JavaSDM.ensure ( _edge_outgoing != null );\n                                    // check object _edge_sourceRef is really bound\n                                    JavaSDM.ensure ( _edge_sourceRef != null );\n                                    // check object exclusiveGateway is really bound\n                                    JavaSDM.ensure ( exclusiveGateway != null );\n                                    // check object inFlow is really bound\n                                    JavaSDM.ensure ( inFlow != null );\n                                    // check object lane is really bound\n                                    JavaSDM.ensure ( lane != null );\n                                    // check object laneSet is really bound\n                                    JavaSDM.ensure ( laneSet != null );\n                                    // check object outFlow is really bound\n                                    JavaSDM.ensure ( outFlow != null );\n                                    // check object process is really bound\n                                    JavaSDM.ensure ( process != null );\n                                    // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                                    JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                                    // check isomorphic binding between objects outFlow and inFlow \n                                    JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                    // check link default from exclusiveGateway to outFlow\n                                    JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n                                    ));\n\n                                    // check link flowElements from exclusiveGateway to process\n                                    JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                                    ));\n\n                                    // check link flowElements from inFlow to process\n                                    JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from outFlow to process\n                                    JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                    ));\n\n                                    // check link incoming from inFlow to exclusiveGateway\n                                    JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                                    ));\n\n                                    // check link incoming from outFlow to exclusiveGateway\n                                    JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                                    )));\n\n                                    // check link laneSets from laneSet to process\n                                    JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                    ));\n\n                                    // check link lanes from lane to laneSet\n                                    JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                    ));\n\n                                    // check link outgoing from outFlow to exclusiveGateway\n                                    JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                                    ));\n\n                                    // check link src from _edge_outgoing to exclusiveGateway\n                                    JavaSDM.ensure (exclusiveGateway.equals (_edge_outgoing.getSrc ()\n                                    ));\n\n                                    // check link src from _edge_sourceRef to outFlow\n                                    JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_outgoing to outFlow\n                                    JavaSDM.ensure (outFlow.equals (_edge_outgoing.getTrg ()\n                                    ));\n\n                                    // check link trg from _edge_sourceRef to exclusiveGateway\n                                    JavaSDM.ensure (exclusiveGateway.equals (_edge_sourceRef.getTrg ()\n                                    ));\n\n                                    // check link flowNodeRefs from lane to exclusiveGateway\n                                    JavaSDM.ensure (lane.getFlowNodeRefs ().contains (exclusiveGateway));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exclusiveGateway,outFlow,lane,laneSet);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'\'\n                                       fujaba__Success = this.checkTypes_FWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_36(EMoflonEdge _edge_outgoing);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_324801 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_260463 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_655448 = null;\n      ExclusiveGateway __DEC_outFlow_default_655448 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_866989 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_866989 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterExclusiveGatewayToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterExclusiveGatewayToLane = null;\n      Lane lane = null;\n      bpmn2.Process process = null;\n      SequenceFlow outFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_default is really bound\n         JavaSDM.ensure ( _edge_default != null );\n         // bind object\n         _TmpObject = _edge_default.getSrc ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // bind object\n         outFlow = exclusiveGateway.getDefault ();\n\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n\n         // bind object\n         _TmpObject = exclusiveGateway.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) exclusiveGateway.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(exclusiveGateway));\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // check link outgoing from outFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // check link trg from _edge_default to outFlow\n         JavaSDM.ensure (outFlow.equals (_edge_default.getTrg ()\n         ));\n\n         // iterate to-many link flowNodeRefs from exclusiveGateway to lane\n         fujaba__Success = false;\n\n         fujaba__IterExclusiveGatewayToLane = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,Lane.class,\"flowNodeRefs\")).iterator ();\n\n         while ( fujaba__IterExclusiveGatewayToLane.hasNext () )\n         {\n            try\n            {\n               lane = (Lane) fujaba__IterExclusiveGatewayToLane.next ();\n\n               // check object lane is really bound\n               JavaSDM.ensure ( lane != null );\n               // iterate to-many link incoming from exclusiveGateway to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterExclusiveGatewayToInFlow = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n               while ( fujaba__IterExclusiveGatewayToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     inFlow = (SequenceFlow) fujaba__IterExclusiveGatewayToInFlow.next ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link flowElements from inFlow to process\n                     JavaSDM.ensure (process.equals (inFlow.eContainer()\n                     ));\n\n                     // iterate to-many link laneSets from process to laneSet\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                     while ( fujaba__IterProcessToLaneSet.hasNext () )\n                     {\n                        try\n                        {\n                           laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                           // check object laneSet is really bound\n                           JavaSDM.ensure ( laneSet != null );\n                           // check link lanes from lane to laneSet\n                           JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_exclusiveGateway_flowElements_324801 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                                 // check object __DEC_exclusiveGateway_flowElements_324801 is really bound\n                                 JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_324801 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_324801.getFlowElements().contains(exclusiveGateway));\n\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_324801 and process \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_324801.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_outFlow_flowElements_260463 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                 // check object __DEC_outFlow_flowElements_260463 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_flowElements_260463 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_outFlow_flowElements_260463.getFlowElements().contains(outFlow));\n\n                                 // check isomorphic binding between objects __DEC_outFlow_flowElements_260463 and process \n                                 JavaSDM.ensure ( !__DEC_outFlow_flowElements_260463.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link default from outFlow to __DEC_outFlow_default_655448\n                                 fujaba__Success = false;\n\n                                 fujaba__IterOutFlowTo__DEC_outFlow_default_655448 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_655448.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_outFlow_default_655448 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_655448.next ();\n\n                                       // check object __DEC_outFlow_default_655448 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_default_655448 != null );\n                                       // check isomorphic binding between objects __DEC_outFlow_default_655448 and exclusiveGateway \n                                       JavaSDM.ensure ( !__DEC_outFlow_default_655448.equals (exclusiveGateway) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link incoming from exclusiveGateway to __DEC_exclusiveGateway_targetRef_866989\n                                 fujaba__Success = false;\n\n                                 fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_866989 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_866989.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_exclusiveGateway_targetRef_866989 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_866989.next ();\n\n                                       // check object __DEC_exclusiveGateway_targetRef_866989 is really bound\n                                       JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_866989 != null );\n                                       // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_866989 and inFlow \n                                       JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_866989.equals (inFlow) );\n\n                                       // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_866989 and outFlow \n                                       JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_866989.equals (outFlow) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_default is really bound\n                              JavaSDM.ensure ( _edge_default != null );\n                              // check object exclusiveGateway is really bound\n                              JavaSDM.ensure ( exclusiveGateway != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object lane is really bound\n                              JavaSDM.ensure ( lane != null );\n                              // check object laneSet is really bound\n                              JavaSDM.ensure ( laneSet != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check isomorphic binding between objects outFlow and inFlow \n                              JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                              // check link default from exclusiveGateway to outFlow\n                              JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n                              ));\n\n                              // check link flowElements from exclusiveGateway to process\n                              JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link incoming from inFlow to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link incoming from outFlow to exclusiveGateway\n                              JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                              )));\n\n                              // check link laneSets from laneSet to process\n                              JavaSDM.ensure (process.equals (laneSet.eContainer()\n                              ));\n\n                              // check link lanes from lane to laneSet\n                              JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                              ));\n\n                              // check link outgoing from outFlow to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link src from _edge_default to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (_edge_default.getSrc ()\n                              ));\n\n                              // check link trg from _edge_default to outFlow\n                              JavaSDM.ensure (outFlow.equals (_edge_default.getTrg ()\n                              ));\n\n                              // check link flowNodeRefs from lane to exclusiveGateway\n                              JavaSDM.ensure (lane.getFlowNodeRefs ().contains (exclusiveGateway));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exclusiveGateway,outFlow,lane,laneSet);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'\'\n                                 fujaba__Success = this.checkTypes_FWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_37(EMoflonEdge _edge_default);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_normalStep_steps_409998 = null;\n      Iterator fujaba__IterNormalStepTo__DEC_normalStep_next_854515 = null;\n      Step __DEC_normalStep_next_854515 = null;\n      Match match = null;\n      Actor actor = null;\n      NormalStep normalStep = null;\n      Flow flow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_steps is really bound\n         JavaSDM.ensure ( _edge_steps != null );\n         // bind object\n         _TmpObject = _edge_steps.getSrc ();\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_steps.getTrg ();\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n\n         // bind object\n         actor = normalStep.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // check link steps from normalStep to flow\n         JavaSDM.ensure (flow.equals (normalStep.eContainer()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_normalStep_steps_409998 = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n               // check object __DEC_normalStep_steps_409998 is really bound\n               JavaSDM.ensure ( __DEC_normalStep_steps_409998 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_normalStep_steps_409998.getSteps().contains(normalStep));\n\n               // check isomorphic binding between objects __DEC_normalStep_steps_409998 and flow \n               JavaSDM.ensure ( !__DEC_normalStep_steps_409998.equals (flow) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link next from normalStep to __DEC_normalStep_next_854515\n               fujaba__Success = false;\n\n               fujaba__IterNormalStepTo__DEC_normalStep_next_854515 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterNormalStepTo__DEC_normalStep_next_854515.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_normalStep_next_854515 = (Step) fujaba__IterNormalStepTo__DEC_normalStep_next_854515.next ();\n\n                     // check object __DEC_normalStep_next_854515 is really bound\n                     JavaSDM.ensure ( __DEC_normalStep_next_854515 != null );\n                     // check isomorphic binding between objects __DEC_normalStep_next_854515 and normalStep \n                     JavaSDM.ensure ( !__DEC_normalStep_next_854515.equals (normalStep) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check object _edge_steps is really bound\n            JavaSDM.ensure ( _edge_steps != null );\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check link actor from normalStep to actor\n            JavaSDM.ensure (actor.equals (normalStep.getActor ()\n            ));\n\n            // check link src from _edge_steps to flow\n            JavaSDM.ensure (flow.equals (_edge_steps.getSrc ()\n            ));\n\n            // check link steps from normalStep to flow\n            JavaSDM.ensure (flow.equals (normalStep.eContainer()\n            ));\n\n            // check link trg from _edge_steps to normalStep\n            JavaSDM.ensure (normalStep.equals (_edge_steps.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,normalStep,flow,actor);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_15(EMoflonEdge _edge_steps);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_726116 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_467625 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_700859 = null;\n      ExclusiveGateway __DEC_outFlow_default_700859 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_237 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_237 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterExclusiveGatewayToInFlow = null;\n      SequenceFlow inFlow = null;\n      bpmn2.Process process = null;\n      SequenceFlow outFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n      Lane lane = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowNodeRefs is really bound\n         JavaSDM.ensure ( _edge_flowNodeRefs != null );\n         // bind object\n         _TmpObject = _edge_flowNodeRefs.getSrc ();\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowNodeRefs.getTrg ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // bind object\n         outFlow = exclusiveGateway.getDefault ();\n\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n\n         // bind object\n         _TmpObject = exclusiveGateway.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) exclusiveGateway.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(exclusiveGateway));\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // check link outgoing from outFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // check link flowNodeRefs from lane to exclusiveGateway\n         JavaSDM.ensure (lane.getFlowNodeRefs ().contains (exclusiveGateway));\n\n         // iterate to-many link incoming from exclusiveGateway to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterExclusiveGatewayToInFlow = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n         while ( fujaba__IterExclusiveGatewayToInFlow.hasNext () )\n         {\n            try\n            {\n               inFlow = (SequenceFlow) fujaba__IterExclusiveGatewayToInFlow.next ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link flowElements from inFlow to process\n               JavaSDM.ensure (process.equals (inFlow.eContainer()\n               ));\n\n               // iterate to-many link laneSets from process to laneSet\n               fujaba__Success = false;\n\n               fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n               while ( fujaba__IterProcessToLaneSet.hasNext () )\n               {\n                  try\n                  {\n                     laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                     // check object laneSet is really bound\n                     JavaSDM.ensure ( laneSet != null );\n                     // check link lanes from lane to laneSet\n                     JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_exclusiveGateway_flowElements_726116 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                           // check object __DEC_exclusiveGateway_flowElements_726116 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_726116 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_726116.getFlowElements().contains(exclusiveGateway));\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_726116 and process \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_726116.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_467625 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_467625 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_467625 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_467625.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_467625 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_467625.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link default from outFlow to __DEC_outFlow_default_700859\n                           fujaba__Success = false;\n\n                           fujaba__IterOutFlowTo__DEC_outFlow_default_700859 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_700859.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_outFlow_default_700859 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_700859.next ();\n\n                                 // check object __DEC_outFlow_default_700859 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_default_700859 != null );\n                                 // check isomorphic binding between objects __DEC_outFlow_default_700859 and exclusiveGateway \n                                 JavaSDM.ensure ( !__DEC_outFlow_default_700859.equals (exclusiveGateway) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link incoming from exclusiveGateway to __DEC_exclusiveGateway_targetRef_237\n                           fujaba__Success = false;\n\n                           fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_237 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_237.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_exclusiveGateway_targetRef_237 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_237.next ();\n\n                                 // check object __DEC_exclusiveGateway_targetRef_237 is really bound\n                                 JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_237 != null );\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_237 and inFlow \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_237.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_237 and outFlow \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_237.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_flowNodeRefs is really bound\n                        JavaSDM.ensure ( _edge_flowNodeRefs != null );\n                        // check object exclusiveGateway is really bound\n                        JavaSDM.ensure ( exclusiveGateway != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object laneSet is really bound\n                        JavaSDM.ensure ( laneSet != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link default from exclusiveGateway to outFlow\n                        JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n                        ));\n\n                        // check link flowElements from exclusiveGateway to process\n                        JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link incoming from inFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link incoming from outFlow to exclusiveGateway\n                        JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link laneSets from laneSet to process\n                        JavaSDM.ensure (process.equals (laneSet.eContainer()\n                        ));\n\n                        // check link lanes from lane to laneSet\n                        JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                        ));\n\n                        // check link outgoing from outFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_flowNodeRefs to lane\n                        JavaSDM.ensure (lane.equals (_edge_flowNodeRefs.getSrc ()\n                        ));\n\n                        // check link trg from _edge_flowNodeRefs to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (_edge_flowNodeRefs.getTrg ()\n                        ));\n\n                        // check link flowNodeRefs from lane to exclusiveGateway\n                        JavaSDM.ensure (lane.getFlowNodeRefs ().contains (exclusiveGateway));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exclusiveGateway,outFlow,lane,laneSet);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_38(
			EMoflonEdge _edge_flowNodeRefs);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      ModelgeneratorRuleResult ruleResult = null;\n      IsApplicableMatch isApplicableMatch = null;\n      Object _TmpObject = null;\n      CSP csp = null;\n      NormalStep normalStep = null;\n      FlowNodeToStep exclusiveGatewayToNormalStep = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToFlow = null;\n      SequenceFlow outFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n      Actor actor = null;\n      Iterator fujaba__IterProcessToProcessToActor = null;\n      ProcessToActor processToActor = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Flow flow = null;\n      bpmn2.Process process = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterInFlowToFlowListToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Iterator fujaba__IterRuleEntryContainerToInFlowToFlowList = null;\n      RuleEntryList inFlowToFlowList = null;\n\n      // story node \'create result\'\n      try \n      {\n         fujaba__Success = false; \n\n         // create object ruleResult\n         ruleResult = TGGRuntimeFactory.eINSTANCE.createModelgeneratorRuleResult();\n\n         // create object isApplicableMatch\n         isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n         // assign attribute ruleResult\n         ruleResult.setSuccess (false);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'is applicable core\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object ruleEntryContainer is really bound\n         JavaSDM.ensure ( ruleEntryContainer != null );\n         // iterate to-many link ruleEntryList from ruleEntryContainer to inFlowToFlowList\n         fujaba__Success = false;\n\n         fujaba__IterRuleEntryContainerToInFlowToFlowList = new ArrayList(ruleEntryContainer.getRuleEntryList()).iterator ();\n\n         while ( fujaba__IterRuleEntryContainerToInFlowToFlowList.hasNext () )\n         {\n            try\n            {\n               inFlowToFlowList = (RuleEntryList) fujaba__IterRuleEntryContainerToInFlowToFlowList.next ();\n\n               // check object inFlowToFlowList is really bound\n               JavaSDM.ensure ( inFlowToFlowList != null );\n               // iterate to-many link entryObjects from inFlowToFlowList to inFlowToFlow\n               fujaba__Success = false;\n\n               fujaba__IterInFlowToFlowListToInFlowToFlow = new ArrayList(inFlowToFlowList.getEntryObjects()).iterator ();\n\n               while ( fujaba__IterInFlowToFlowListToInFlowToFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterInFlowToFlowListToInFlowToFlow.next ();\n\n                     // ensure correct type and really bound of object inFlowToFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n                     inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n                     // bind object\n                     inFlow = inFlowToFlow.getSource ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n\n                     // bind object\n                     _TmpObject = inFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) inFlow.eContainer() : null;\n\n                     // ensure correct type and really bound of object process\n                     JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n                     process = (bpmn2.Process) _TmpObject;\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n                     // bind object\n                     flow = inFlowToFlow.getTarget ();\n\n                     // check object flow is really bound\n                     JavaSDM.ensure ( flow != null );\n\n                     // iterate to-many link laneSets from process to laneSet\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                     while ( fujaba__IterProcessToLaneSet.hasNext () )\n                     {\n                        try\n                        {\n                           laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                           // check object laneSet is really bound\n                           JavaSDM.ensure ( laneSet != null );\n                           // iterate to-many link lanes from laneSet to lane\n                           fujaba__Success = false;\n\n                           fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                           while ( fujaba__IterLaneSetToLane.hasNext () )\n                           {\n                              try\n                              {\n                                 lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                 // check object lane is really bound\n                                 JavaSDM.ensure ( lane != null );\n                                 // iterate to-many link source from process to processToActor\n                                 fujaba__Success = false;\n\n                                 fujaba__IterProcessToProcessToActor = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(process,ProcessToActor.class,\"source\")).iterator ();\n\n                                 while ( fujaba__IterProcessToProcessToActor.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       processToActor = (ProcessToActor) fujaba__IterProcessToProcessToActor.next ();\n\n                                       // check object processToActor is really bound\n                                       JavaSDM.ensure ( processToActor != null );\n                                       // bind object\n                                       actor = processToActor.getTarget ();\n\n                                       // check object actor is really bound\n                                       JavaSDM.ensure ( actor != null );\n\n                                       // story node \'solve CSP\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          _TmpObject = (this.generateModel_solveCsp_BWD(isApplicableMatch,normalStep,outFlowToFlow,inFlowToFlow,process,inFlow,exclusiveGateway,outFlow,exclusiveGatewayToNormalStep,outFlowToNormalStep,flow,actor,processToActor,lane,laneSet,ruleResult));\n\n                                          // ensure correct type and really bound of object csp\n                                          JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                          csp = (CSP) _TmpObject;\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n                                       // statement node \'check CSP\'\n                                       fujaba__Success = this.generateModel_checkCsp_BWD(csp);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'perform\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object actor is really bound\n                                             JavaSDM.ensure ( actor != null );\n                                             // check object flow is really bound\n                                             JavaSDM.ensure ( flow != null );\n                                             // check object inFlow is really bound\n                                             JavaSDM.ensure ( inFlow != null );\n                                             // check object inFlowToFlow is really bound\n                                             JavaSDM.ensure ( inFlowToFlow != null );\n                                             // check object lane is really bound\n                                             JavaSDM.ensure ( lane != null );\n                                             // check object laneSet is really bound\n                                             JavaSDM.ensure ( laneSet != null );\n                                             // check object process is really bound\n                                             JavaSDM.ensure ( process != null );\n                                             // check object processToActor is really bound\n                                             JavaSDM.ensure ( processToActor != null );\n                                             // check object ruleResult is really bound\n                                             JavaSDM.ensure ( ruleResult != null );\n                                             // create object normalStep\n                                             normalStep = UseCaseDSLFactory.eINSTANCE.createNormalStep();\n\n                                             // create object exclusiveGatewayToNormalStep\n                                             exclusiveGatewayToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n                                             // create object outFlowToNormalStep\n                                             outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n                                             // create object outFlowToFlow\n                                             outFlowToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n                                             // create object outFlow\n                                             outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n                                             // create object exclusiveGateway\n                                             exclusiveGateway = Bpmn2Factory.eINSTANCE.createExclusiveGateway();\n\n                                             // assign attribute normalStep\n                                             normalStep.setName ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"name\").getValue());\n                                             // assign attribute normalStep\n                                             normalStep.setLabel ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"label\").getValue());\n                                             // assign attribute exclusiveGateway\n                                             exclusiveGateway.setId ((java.lang.String)csp.getAttributeVariable(\"exclusiveGateway\",\"id\").getValue());\n                                             // assign attribute exclusiveGateway\n                                             exclusiveGateway.setName ((java.lang.String)csp.getAttributeVariable(\"exclusiveGateway\",\"name\").getValue());\n                                             // assign attribute exclusiveGateway\n                                             exclusiveGateway.setGatewayDirection ((bpmn2.GatewayDirection)csp.getAttributeVariable(\"exclusiveGateway\",\"gatewayDirection\").getValue());\n                                             // assign attribute ruleResult\n                                             ruleResult.setSuccess (true);\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(normalStep,actor,\"actor\");\n\n                                             // create link\n                                             ruleResult.getTargetObjects().add(normalStep);\n\n\n                                             // create link\n                                             exclusiveGatewayToNormalStep.setTarget( normalStep);\n\n\n                                             // create link\n                                             outFlowToNormalStep.setTarget( normalStep);\n\n\n                                             // create link\n                                             flow.getSteps().add(normalStep);\n\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,flow,\"target\");\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,outFlow,\"source\");\n\n                                             // create link\n                                             ruleResult.getCorrObjects().add(outFlowToFlow);\n\n\n                                             // create link\n                                             \tprocess.getFlowElements().add(exclusiveGateway); // add link\n\n\n                                             // create link\n                                             \tprocess.getFlowElements().add(outFlow); // add link\n\n\n                                             // create link\n                                             exclusiveGateway.getIncoming().add(inFlow);\n\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(exclusiveGateway,outFlow,\"default\");\n\n                                             // create link\n                                             outFlow.setSourceRef( exclusiveGateway);\n\n\n                                             // create link\n                                             exclusiveGatewayToNormalStep.setSource( exclusiveGateway);\n\n\n                                             // create link\n                                             lane.getFlowNodeRefs().add(exclusiveGateway);\n\n\n                                             // create link\n                                             ruleResult.getSourceObjects().add(exclusiveGateway);\n\n\n                                             // create link\n                                             ruleResult.getSourceObjects().add(outFlow);\n\n\n                                             // create link\n                                             outFlowToNormalStep.setSource( outFlow);\n\n\n                                             // create link\n                                             ruleResult.getCorrObjects().add(exclusiveGatewayToNormalStep);\n\n\n                                             // create link\n                                             ruleResult.getCorrObjects().add(outFlowToNormalStep);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          return ruleResult;\n\n                                       }\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleResult;'"
	 * @generated
	 */
	ModelgeneratorRuleResult generateModel(
			RuleEntryContainer ruleEntryContainer,
			SequenceFlowToUCFlow inFlowToFlowDummyParameter);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_exclusiveGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.id\", csp);\r\nvar_exclusiveGateway_id.setType(\"\");\r\nVariable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.name\", csp);\r\nvar_normalStep_name.setType(\"\");\r\nVariable var_exclusiveGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.name\", csp);\r\nvar_exclusiveGateway_name.setType(\"\");\r\nVariable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.label\", csp);\r\nvar_normalStep_label.setType(\"\");\r\nVariable var_exclusiveGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.gatewayDirection\", csp);\r\nvar_exclusiveGateway_gatewayDirection.setType(\"EObject\");\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();Eq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_exclusiveGateway_gatewayDirection,literal0);\r\neq.setRuleName(\"\");\r\neq.solve(var_exclusiveGateway_id,var_normalStep_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_exclusiveGateway_name,var_normalStep_label);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"processToActor\",processToActor);\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nisApplicableMatch.registerObject(\"laneSet\",laneSet);\r\nreturn csp;'"
	 * @generated
	 */
	CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			NormalStep normalStep, SequenceFlowToUCFlow outFlowToFlow,
			SequenceFlowToUCFlow inFlowToFlow, bpmn2.Process process,
			SequenceFlow inFlow, ExclusiveGateway exclusiveGateway,
			SequenceFlow outFlow, FlowNodeToStep exclusiveGatewayToNormalStep,
			SequenceFlowToStep outFlowToNormalStep, Flow flow, Actor actor,
			ProcessToActor processToActor, Lane lane, LaneSet laneSet,
			ModelgeneratorRuleResult ruleResult);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean generateModel_checkCsp_BWD(CSP csp); // <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // ExclusiveGatewayToStepCoreRule
