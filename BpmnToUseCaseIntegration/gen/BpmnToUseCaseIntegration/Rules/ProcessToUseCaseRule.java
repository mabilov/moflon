/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackage;
import BpmnToUseCaseIntegration.DocRootToUCModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.ICEToAltFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SeqFlowToAltFlowAlt;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.Event;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.FlowNode;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;
import bpmn2.Task;
import bpmn2.UserTask;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Process To Use Case Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getProcessToUseCaseRule()
 * @model
 * @generated
 */
public interface ProcessToUseCaseRule extends EObject, AbstractRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __process_flowElements_startEvent = null;\n      EMoflonEdge __process_flowElements_sequenceFlow = null;\n      EMoflonEdge __startEvent_outgoing_sequenceFlow = null;\n      EMoflonEdge __sequenceFlow_sourceRef_startEvent = null;\n      EMoflonEdge __definitions_rootElements_process = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object definitions is really bound\n         JavaSDM.ensure ( definitions != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object sequenceFlow is really bound\n         JavaSDM.ensure ( sequenceFlow != null );\n         // check object startEvent is really bound\n         JavaSDM.ensure ( startEvent != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,definitions,process,startEvent,sequenceFlow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object definitions is really bound\n            JavaSDM.ensure ( definitions != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check object sequenceFlow is really bound\n            JavaSDM.ensure ( sequenceFlow != null );\n            // check object startEvent is really bound\n            JavaSDM.ensure ( startEvent != null );\n            // create object __process_flowElements_startEvent\n            __process_flowElements_startEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_sequenceFlow\n            __process_flowElements_sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __startEvent_outgoing_sequenceFlow\n            __startEvent_outgoing_sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __sequenceFlow_sourceRef_startEvent\n            __sequenceFlow_sourceRef_startEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __definitions_rootElements_process\n            __definitions_rootElements_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __definitions_rootElements_process\n            __definitions_rootElements_process.setName (\"rootElements\");\n            // assign attribute __process_flowElements_startEvent\n            __process_flowElements_startEvent.setName (\"flowElements\");\n            // assign attribute __process_flowElements_sequenceFlow\n            __process_flowElements_sequenceFlow.setName (\"flowElements\");\n            // assign attribute __sequenceFlow_sourceRef_startEvent\n            __sequenceFlow_sourceRef_startEvent.setName (\"sourceRef\");\n            // assign attribute __startEvent_outgoing_sequenceFlow\n            __startEvent_outgoing_sequenceFlow.setName (\"outgoing\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_startEvent,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_sequenceFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__startEvent_outgoing_sequenceFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,startEvent,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,process,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__sequenceFlow_sourceRef_startEvent,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__definitions_rootElements_process,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,sequenceFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            __definitions_rootElements_process.setSrc( definitions);\n\n\n            // create link\n            __process_flowElements_startEvent.setSrc( process);\n\n\n            // create link\n            __definitions_rootElements_process.setTrg( process);\n\n\n            // create link\n            __process_flowElements_sequenceFlow.setSrc( process);\n\n\n            // create link\n            __sequenceFlow_sourceRef_startEvent.setTrg( startEvent);\n\n\n            // create link\n            __startEvent_outgoing_sequenceFlow.setSrc( startEvent);\n\n\n            // create link\n            __process_flowElements_startEvent.setTrg( startEvent);\n\n\n            // create link\n            __process_flowElements_sequenceFlow.setTrg( sequenceFlow);\n\n\n            // create link\n            __sequenceFlow_sourceRef_startEvent.setSrc( sequenceFlow);\n\n\n            // create link\n            __startEvent_outgoing_sequenceFlow.setTrg( sequenceFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object definitions is really bound\n            JavaSDM.ensure ( definitions != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check object sequenceFlow is really bound\n            JavaSDM.ensure ( sequenceFlow != null );\n            // check object startEvent is really bound\n            JavaSDM.ensure ( startEvent != null );\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,definitions,\"contextNodes\");\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,definitions,process,startEvent,sequenceFlow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, Definitions definitions,
			bpmn2.Process process, StartEvent startEvent,
			SequenceFlow sequenceFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Definitions definitions = null;\n      DefinitionsToPackage definitionsToPackage = null;\n      PackageDeclaration packageDeclaration = null;\n      bpmn2.Process process = null;\n      SequenceFlow sequenceFlow = null;\n      StartEvent startEvent = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      Actor actor = null;\n      UseCase useCase = null;\n      ProcessToUseCase processToUseCase = null;\n      ProcessToActor processToActor = null;\n      BasicFlow basicFlow = null;\n      StartEventToBasicFlow startEventToBasicFlow = null;\n      SequenceFlowToUCFlow sequenceFlowToBasicFlow = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __process_flowElements_sequenceFlow = null;\n      EMoflonEdge useCase__flows__basicFlow = null;\n      EMoflonEdge packageDeclaration__actors__actor = null;\n      EMoflonEdge __startEvent_outgoing_sequenceFlow = null;\n      EMoflonEdge processToUseCase__source__process = null;\n      EMoflonEdge __sequenceFlow_sourceRef_startEvent = null;\n      EMoflonEdge sequenceFlowToBasicFlow__source__sequenceFlow = null;\n      EMoflonEdge __process_flowElements_startEvent = null;\n      EMoflonEdge processToActor__source__process = null;\n      EMoflonEdge __definitions_rootElements_process = null;\n      EMoflonEdge sequenceFlowToBasicFlow__target__basicFlow = null;\n      EMoflonEdge startEventToBasicFlow__source__startEvent = null;\n      EMoflonEdge processToActor__target__actor = null;\n      EMoflonEdge startEventToBasicFlow__target__basicFlow = null;\n      EMoflonEdge processToUseCase__target__useCase = null;\n      EMoflonEdge packageDeclaration__useCases__useCase = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"definitions\"));\n\n         // ensure correct type and really bound of object definitions\n         JavaSDM.ensure ( _TmpObject instanceof Definitions );\n         definitions = (Definitions) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"definitionsToPackage\"));\n\n         // ensure correct type and really bound of object definitionsToPackage\n         JavaSDM.ensure ( _TmpObject instanceof DefinitionsToPackage );\n         definitionsToPackage = (DefinitionsToPackage) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"sequenceFlow\"));\n\n         // ensure correct type and really bound of object sequenceFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         sequenceFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"startEvent\"));\n\n         // ensure correct type and really bound of object startEvent\n         JavaSDM.ensure ( _TmpObject instanceof StartEvent );\n         startEvent = (StartEvent) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object actor\n         actor = UseCaseDSLFactory.eINSTANCE.createActor();\n\n         // create object useCase\n         useCase = UseCaseDSLFactory.eINSTANCE.createUseCase();\n\n         // create object processToUseCase\n         processToUseCase = BpmnToUseCaseIntegrationFactory.eINSTANCE.createProcessToUseCase();\n\n         // create object processToActor\n         processToActor = BpmnToUseCaseIntegrationFactory.eINSTANCE.createProcessToActor();\n\n         // create object basicFlow\n         basicFlow = UseCaseDSLFactory.eINSTANCE.createBasicFlow();\n\n         // create object startEventToBasicFlow\n         startEventToBasicFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createStartEventToBasicFlow();\n\n         // create object sequenceFlowToBasicFlow\n         sequenceFlowToBasicFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // assign attribute useCase\n         useCase.setName ((java.lang.String)csp.getValue(\"useCase\",\"name\"));\n         // assign attribute useCase\n         useCase.setDescription ((java.lang.String)csp.getValue(\"useCase\",\"description\"));\n         // assign attribute useCase\n         useCase.setPreConditions ((java.lang.String)csp.getValue(\"useCase\",\"preConditions\"));\n         // assign attribute actor\n         actor.setName ((java.lang.String)csp.getValue(\"actor\",\"name\"));\n         // assign attribute actor\n         actor.setType ((UseCaseDSL.ActorType)csp.getValue(\"actor\",\"type\"));\n\n         // create link\n         \tpackageDeclaration.getActors().add(actor); // add link\n\n\n         // create link\n         \tpackageDeclaration.getUseCases().add(useCase); // add link\n\n\n         // create link\n         processToUseCase.setSource( process);\n\n\n         // create link\n         processToActor.setSource( process);\n\n\n         // create link\n         \tuseCase.getFlows().add(basicFlow); // add link\n\n\n         // create link\n         processToUseCase.setTarget( useCase);\n\n\n         // create link\n         startEventToBasicFlow.setSource( startEvent);\n\n\n         // create link\n         startEventToBasicFlow.setTarget( basicFlow);\n\n\n         // create link\n         sequenceFlowToBasicFlow.setTarget( basicFlow);\n\n\n         // create link\n         sequenceFlowToBasicFlow.setSource( sequenceFlow);\n\n\n         // create link\n         processToActor.setTarget( actor);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object basicFlow is really bound\n         JavaSDM.ensure ( basicFlow != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToActor is really bound\n         JavaSDM.ensure ( processToActor != null );\n         // check object processToUseCase is really bound\n         JavaSDM.ensure ( processToUseCase != null );\n         // check object sequenceFlow is really bound\n         JavaSDM.ensure ( sequenceFlow != null );\n         // check object sequenceFlowToBasicFlow is really bound\n         JavaSDM.ensure ( sequenceFlowToBasicFlow != null );\n         // check object startEvent is really bound\n         JavaSDM.ensure ( startEvent != null );\n         // check object startEventToBasicFlow is really bound\n         JavaSDM.ensure ( startEventToBasicFlow != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCase,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,processToActor,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,startEvent,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actor,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,startEventToBasicFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,processToUseCase,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlowToBasicFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,basicFlow,\"createdElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object basicFlow is really bound\n         JavaSDM.ensure ( basicFlow != null );\n         // check object definitions is really bound\n         JavaSDM.ensure ( definitions != null );\n         // check object definitionsToPackage is really bound\n         JavaSDM.ensure ( definitionsToPackage != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToActor is really bound\n         JavaSDM.ensure ( processToActor != null );\n         // check object processToUseCase is really bound\n         JavaSDM.ensure ( processToUseCase != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object sequenceFlow is really bound\n         JavaSDM.ensure ( sequenceFlow != null );\n         // check object sequenceFlowToBasicFlow is really bound\n         JavaSDM.ensure ( sequenceFlowToBasicFlow != null );\n         // check object startEvent is really bound\n         JavaSDM.ensure ( startEvent != null );\n         // check object startEventToBasicFlow is really bound\n         JavaSDM.ensure ( startEventToBasicFlow != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects basicFlow and actor \n         JavaSDM.ensure ( !basicFlow.equals (actor) );\n\n         // check isomorphic binding between objects definitions and actor \n         JavaSDM.ensure ( !definitions.equals (actor) );\n\n         // check isomorphic binding between objects definitionsToPackage and actor \n         JavaSDM.ensure ( !definitionsToPackage.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclaration and actor \n         JavaSDM.ensure ( !packageDeclaration.equals (actor) );\n\n         // check isomorphic binding between objects process and actor \n         JavaSDM.ensure ( !process.equals (actor) );\n\n         // check isomorphic binding between objects processToActor and actor \n         JavaSDM.ensure ( !processToActor.equals (actor) );\n\n         // check isomorphic binding between objects processToUseCase and actor \n         JavaSDM.ensure ( !processToUseCase.equals (actor) );\n\n         // check isomorphic binding between objects sequenceFlow and actor \n         JavaSDM.ensure ( !sequenceFlow.equals (actor) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and actor \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (actor) );\n\n         // check isomorphic binding between objects startEvent and actor \n         JavaSDM.ensure ( !startEvent.equals (actor) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and actor \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (actor) );\n\n         // check isomorphic binding between objects useCase and actor \n         JavaSDM.ensure ( !useCase.equals (actor) );\n\n         // check isomorphic binding between objects definitions and basicFlow \n         JavaSDM.ensure ( !definitions.equals (basicFlow) );\n\n         // check isomorphic binding between objects definitionsToPackage and basicFlow \n         JavaSDM.ensure ( !definitionsToPackage.equals (basicFlow) );\n\n         // check isomorphic binding between objects packageDeclaration and basicFlow \n         JavaSDM.ensure ( !packageDeclaration.equals (basicFlow) );\n\n         // check isomorphic binding between objects process and basicFlow \n         JavaSDM.ensure ( !process.equals (basicFlow) );\n\n         // check isomorphic binding between objects processToActor and basicFlow \n         JavaSDM.ensure ( !processToActor.equals (basicFlow) );\n\n         // check isomorphic binding between objects processToUseCase and basicFlow \n         JavaSDM.ensure ( !processToUseCase.equals (basicFlow) );\n\n         // check isomorphic binding between objects sequenceFlow and basicFlow \n         JavaSDM.ensure ( !sequenceFlow.equals (basicFlow) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and basicFlow \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (basicFlow) );\n\n         // check isomorphic binding between objects startEvent and basicFlow \n         JavaSDM.ensure ( !startEvent.equals (basicFlow) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and basicFlow \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (basicFlow) );\n\n         // check isomorphic binding between objects useCase and basicFlow \n         JavaSDM.ensure ( !useCase.equals (basicFlow) );\n\n         // check isomorphic binding between objects definitionsToPackage and definitions \n         JavaSDM.ensure ( !definitionsToPackage.equals (definitions) );\n\n         // check isomorphic binding between objects packageDeclaration and definitions \n         JavaSDM.ensure ( !packageDeclaration.equals (definitions) );\n\n         // check isomorphic binding between objects process and definitions \n         JavaSDM.ensure ( !process.equals (definitions) );\n\n         // check isomorphic binding between objects processToActor and definitions \n         JavaSDM.ensure ( !processToActor.equals (definitions) );\n\n         // check isomorphic binding between objects processToUseCase and definitions \n         JavaSDM.ensure ( !processToUseCase.equals (definitions) );\n\n         // check isomorphic binding between objects sequenceFlow and definitions \n         JavaSDM.ensure ( !sequenceFlow.equals (definitions) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and definitions \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (definitions) );\n\n         // check isomorphic binding between objects startEvent and definitions \n         JavaSDM.ensure ( !startEvent.equals (definitions) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and definitions \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (definitions) );\n\n         // check isomorphic binding between objects useCase and definitions \n         JavaSDM.ensure ( !useCase.equals (definitions) );\n\n         // check isomorphic binding between objects packageDeclaration and definitionsToPackage \n         JavaSDM.ensure ( !packageDeclaration.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects process and definitionsToPackage \n         JavaSDM.ensure ( !process.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects processToActor and definitionsToPackage \n         JavaSDM.ensure ( !processToActor.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects processToUseCase and definitionsToPackage \n         JavaSDM.ensure ( !processToUseCase.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects sequenceFlow and definitionsToPackage \n         JavaSDM.ensure ( !sequenceFlow.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and definitionsToPackage \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects startEvent and definitionsToPackage \n         JavaSDM.ensure ( !startEvent.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and definitionsToPackage \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects useCase and definitionsToPackage \n         JavaSDM.ensure ( !useCase.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects process and packageDeclaration \n         JavaSDM.ensure ( !process.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects processToActor and packageDeclaration \n         JavaSDM.ensure ( !processToActor.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects processToUseCase and packageDeclaration \n         JavaSDM.ensure ( !processToUseCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects sequenceFlow and packageDeclaration \n         JavaSDM.ensure ( !sequenceFlow.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and packageDeclaration \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects startEvent and packageDeclaration \n         JavaSDM.ensure ( !startEvent.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and packageDeclaration \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclaration \n         JavaSDM.ensure ( !useCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects processToActor and process \n         JavaSDM.ensure ( !processToActor.equals (process) );\n\n         // check isomorphic binding between objects processToUseCase and process \n         JavaSDM.ensure ( !processToUseCase.equals (process) );\n\n         // check isomorphic binding between objects sequenceFlow and process \n         JavaSDM.ensure ( !sequenceFlow.equals (process) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and process \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (process) );\n\n         // check isomorphic binding between objects startEvent and process \n         JavaSDM.ensure ( !startEvent.equals (process) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and process \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (process) );\n\n         // check isomorphic binding between objects useCase and process \n         JavaSDM.ensure ( !useCase.equals (process) );\n\n         // check isomorphic binding between objects processToUseCase and processToActor \n         JavaSDM.ensure ( !processToUseCase.equals (processToActor) );\n\n         // check isomorphic binding between objects sequenceFlow and processToActor \n         JavaSDM.ensure ( !sequenceFlow.equals (processToActor) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and processToActor \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (processToActor) );\n\n         // check isomorphic binding between objects startEvent and processToActor \n         JavaSDM.ensure ( !startEvent.equals (processToActor) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and processToActor \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (processToActor) );\n\n         // check isomorphic binding between objects useCase and processToActor \n         JavaSDM.ensure ( !useCase.equals (processToActor) );\n\n         // check isomorphic binding between objects sequenceFlow and processToUseCase \n         JavaSDM.ensure ( !sequenceFlow.equals (processToUseCase) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and processToUseCase \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (processToUseCase) );\n\n         // check isomorphic binding between objects startEvent and processToUseCase \n         JavaSDM.ensure ( !startEvent.equals (processToUseCase) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and processToUseCase \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (processToUseCase) );\n\n         // check isomorphic binding between objects useCase and processToUseCase \n         JavaSDM.ensure ( !useCase.equals (processToUseCase) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and sequenceFlow \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (sequenceFlow) );\n\n         // check isomorphic binding between objects startEvent and sequenceFlow \n         JavaSDM.ensure ( !startEvent.equals (sequenceFlow) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and sequenceFlow \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (sequenceFlow) );\n\n         // check isomorphic binding between objects useCase and sequenceFlow \n         JavaSDM.ensure ( !useCase.equals (sequenceFlow) );\n\n         // check isomorphic binding between objects startEvent and sequenceFlowToBasicFlow \n         JavaSDM.ensure ( !startEvent.equals (sequenceFlowToBasicFlow) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and sequenceFlowToBasicFlow \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (sequenceFlowToBasicFlow) );\n\n         // check isomorphic binding between objects useCase and sequenceFlowToBasicFlow \n         JavaSDM.ensure ( !useCase.equals (sequenceFlowToBasicFlow) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and startEvent \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (startEvent) );\n\n         // check isomorphic binding between objects useCase and startEvent \n         JavaSDM.ensure ( !useCase.equals (startEvent) );\n\n         // check isomorphic binding between objects useCase and startEventToBasicFlow \n         JavaSDM.ensure ( !useCase.equals (startEventToBasicFlow) );\n\n         // create object __process_flowElements_sequenceFlow\n         __process_flowElements_sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object useCase__flows__basicFlow\n         useCase__flows__basicFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object packageDeclaration__actors__actor\n         packageDeclaration__actors__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __startEvent_outgoing_sequenceFlow\n         __startEvent_outgoing_sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object processToUseCase__source__process\n         processToUseCase__source__process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __sequenceFlow_sourceRef_startEvent\n         __sequenceFlow_sourceRef_startEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object sequenceFlowToBasicFlow__source__sequenceFlow\n         sequenceFlowToBasicFlow__source__sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_startEvent\n         __process_flowElements_startEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object processToActor__source__process\n         processToActor__source__process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __definitions_rootElements_process\n         __definitions_rootElements_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object sequenceFlowToBasicFlow__target__basicFlow\n         sequenceFlowToBasicFlow__target__basicFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object startEventToBasicFlow__source__startEvent\n         startEventToBasicFlow__source__startEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object processToActor__target__actor\n         processToActor__target__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object startEventToBasicFlow__target__basicFlow\n         startEventToBasicFlow__target__basicFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object processToUseCase__target__useCase\n         processToUseCase__target__useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object packageDeclaration__useCases__useCase\n         packageDeclaration__useCases__useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ProcessToUseCaseRule\");\n         // assign attribute __definitions_rootElements_process\n         __definitions_rootElements_process.setName (\"rootElements\");\n         // assign attribute packageDeclaration__useCases__useCase\n         packageDeclaration__useCases__useCase.setName (\"useCases\");\n         // assign attribute packageDeclaration__actors__actor\n         packageDeclaration__actors__actor.setName (\"actors\");\n         // assign attribute __process_flowElements_startEvent\n         __process_flowElements_startEvent.setName (\"flowElements\");\n         // assign attribute __process_flowElements_sequenceFlow\n         __process_flowElements_sequenceFlow.setName (\"flowElements\");\n         // assign attribute useCase__flows__basicFlow\n         useCase__flows__basicFlow.setName (\"flows\");\n         // assign attribute processToUseCase__source__process\n         processToUseCase__source__process.setName (\"source\");\n         // assign attribute processToUseCase__target__useCase\n         processToUseCase__target__useCase.setName (\"target\");\n         // assign attribute __sequenceFlow_sourceRef_startEvent\n         __sequenceFlow_sourceRef_startEvent.setName (\"sourceRef\");\n         // assign attribute __startEvent_outgoing_sequenceFlow\n         __startEvent_outgoing_sequenceFlow.setName (\"outgoing\");\n         // assign attribute startEventToBasicFlow__source__startEvent\n         startEventToBasicFlow__source__startEvent.setName (\"source\");\n         // assign attribute startEventToBasicFlow__target__basicFlow\n         startEventToBasicFlow__target__basicFlow.setName (\"target\");\n         // assign attribute sequenceFlowToBasicFlow__source__sequenceFlow\n         sequenceFlowToBasicFlow__source__sequenceFlow.setName (\"source\");\n         // assign attribute sequenceFlowToBasicFlow__target__basicFlow\n         sequenceFlowToBasicFlow__target__basicFlow.setName (\"target\");\n         // assign attribute processToActor__source__process\n         processToActor__source__process.setName (\"source\");\n         // assign attribute processToActor__target__actor\n         processToActor__target__actor.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_sequenceFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCase__flows__basicFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,packageDeclaration__actors__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__startEvent_outgoing_sequenceFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,processToUseCase__source__process,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__sequenceFlow_sourceRef_startEvent,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlowToBasicFlow__source__sequenceFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_startEvent,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,processToActor__source__process,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__definitions_rootElements_process,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlowToBasicFlow__target__basicFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,startEventToBasicFlow__source__startEvent,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,processToActor__target__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,startEventToBasicFlow__target__basicFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,processToUseCase__target__useCase,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,packageDeclaration__useCases__useCase,\"createdEdges\");\n\n         // create link\n         __definitions_rootElements_process.setSrc( definitions);\n\n\n         // create link\n         packageDeclaration__useCases__useCase.setSrc( packageDeclaration);\n\n\n         // create link\n         packageDeclaration__actors__actor.setSrc( packageDeclaration);\n\n\n         // create link\n         __definitions_rootElements_process.setTrg( process);\n\n\n         // create link\n         __process_flowElements_sequenceFlow.setSrc( process);\n\n\n         // create link\n         __process_flowElements_startEvent.setSrc( process);\n\n\n         // create link\n         processToActor__source__process.setTrg( process);\n\n\n         // create link\n         processToUseCase__source__process.setTrg( process);\n\n\n         // create link\n         useCase__flows__basicFlow.setSrc( useCase);\n\n\n         // create link\n         packageDeclaration__useCases__useCase.setTrg( useCase);\n\n\n         // create link\n         processToUseCase__target__useCase.setTrg( useCase);\n\n\n         // create link\n         processToUseCase__target__useCase.setSrc( processToUseCase);\n\n\n         // create link\n         processToUseCase__source__process.setSrc( processToUseCase);\n\n\n         // create link\n         __startEvent_outgoing_sequenceFlow.setSrc( startEvent);\n\n\n         // create link\n         __sequenceFlow_sourceRef_startEvent.setTrg( startEvent);\n\n\n         // create link\n         __process_flowElements_startEvent.setTrg( startEvent);\n\n\n         // create link\n         startEventToBasicFlow__source__startEvent.setTrg( startEvent);\n\n\n         // create link\n         startEventToBasicFlow__target__basicFlow.setTrg( basicFlow);\n\n\n         // create link\n         sequenceFlowToBasicFlow__target__basicFlow.setTrg( basicFlow);\n\n\n         // create link\n         useCase__flows__basicFlow.setTrg( basicFlow);\n\n\n         // create link\n         startEventToBasicFlow__target__basicFlow.setSrc( startEventToBasicFlow);\n\n\n         // create link\n         startEventToBasicFlow__source__startEvent.setSrc( startEventToBasicFlow);\n\n\n         // create link\n         sequenceFlowToBasicFlow__source__sequenceFlow.setTrg( sequenceFlow);\n\n\n         // create link\n         __startEvent_outgoing_sequenceFlow.setTrg( sequenceFlow);\n\n\n         // create link\n         __process_flowElements_sequenceFlow.setTrg( sequenceFlow);\n\n\n         // create link\n         __sequenceFlow_sourceRef_startEvent.setSrc( sequenceFlow);\n\n\n         // create link\n         sequenceFlowToBasicFlow__target__basicFlow.setSrc( sequenceFlowToBasicFlow);\n\n\n         // create link\n         sequenceFlowToBasicFlow__source__sequenceFlow.setSrc( sequenceFlowToBasicFlow);\n\n\n         // create link\n         processToActor__target__actor.setTrg( actor);\n\n\n         // create link\n         packageDeclaration__actors__actor.setTrg( actor);\n\n\n         // create link\n         processToActor__source__process.setSrc( processToActor);\n\n\n         // create link\n         processToActor__target__actor.setSrc( processToActor);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,definitions,packageDeclaration,definitionsToPackage,process,useCase,processToUseCase,startEvent,basicFlow,startEventToBasicFlow,sequenceFlow,sequenceFlowToBasicFlow,actor,processToActor);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Definitions definitions = null;\n      bpmn2.Process process = null;\n      SequenceFlow sequenceFlow = null;\n      StartEvent startEvent = null;\n      EMoflonEdge __definitions_rootElements_process = null;\n      EMoflonEdge __definitionsToPackage_source_definitions = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __definitionsToPackage_target_packageDeclaration = null;\n      EMoflonEdge __process_flowElements_startEvent = null;\n      EMoflonEdge __process_flowElements_sequenceFlow = null;\n      EMoflonEdge __sequenceFlow_sourceRef_startEvent = null;\n      EMoflonEdge __startEvent_outgoing_sequenceFlow = null;\n      CSP csp = null;\n      PackageDeclaration packageDeclaration = null;\n      Iterator fujaba__IterDefinitionsToDefinitionsToPackage = null;\n      DefinitionsToPackage definitionsToPackage = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ProcessToUseCaseRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"definitions\"));\n\n         // ensure correct type and really bound of object definitions\n         JavaSDM.ensure ( _TmpObject instanceof Definitions );\n         definitions = (Definitions) _TmpObject;\n         _TmpObject = (match.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         _TmpObject = (match.getObject(\"sequenceFlow\"));\n\n         // ensure correct type and really bound of object sequenceFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         sequenceFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"startEvent\"));\n\n         // ensure correct type and really bound of object startEvent\n         JavaSDM.ensure ( _TmpObject instanceof StartEvent );\n         startEvent = (StartEvent) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link source from definitions to definitionsToPackage\n         fujaba__Success = false;\n\n         fujaba__IterDefinitionsToDefinitionsToPackage = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(definitions,DefinitionsToPackage.class,\"source\")).iterator ();\n\n         while ( fujaba__IterDefinitionsToDefinitionsToPackage.hasNext () )\n         {\n            try\n            {\n               definitionsToPackage = (DefinitionsToPackage) fujaba__IterDefinitionsToDefinitionsToPackage.next ();\n\n               // check object definitionsToPackage is really bound\n               JavaSDM.ensure ( definitionsToPackage != null );\n               // bind object\n               packageDeclaration = definitionsToPackage.getTarget ();\n\n               // check object packageDeclaration is really bound\n               JavaSDM.ensure ( packageDeclaration != null );\n\n               // story node \'find context\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check object definitions is really bound\n                  JavaSDM.ensure ( definitions != null );\n                  // check object definitionsToPackage is really bound\n                  JavaSDM.ensure ( definitionsToPackage != null );\n                  // check object packageDeclaration is really bound\n                  JavaSDM.ensure ( packageDeclaration != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check object sequenceFlow is really bound\n                  JavaSDM.ensure ( sequenceFlow != null );\n                  // check object startEvent is really bound\n                  JavaSDM.ensure ( startEvent != null );\n                  // check link flowElements from sequenceFlow to process\n                  JavaSDM.ensure (process.equals (sequenceFlow.eContainer()\n                  ));\n\n                  // check link flowElements from startEvent to process\n                  JavaSDM.ensure (process.equals (startEvent.eContainer()\n                  ));\n\n                  // check link rootElements from process to definitions\n                  JavaSDM.ensure (definitions.equals (process.eContainer()\n                  ));\n\n                  // check link source from definitionsToPackage to definitions\n                  JavaSDM.ensure (definitions.equals (definitionsToPackage.getSource ()\n                  ));\n\n                  // check link sourceRef from sequenceFlow to startEvent\n                  JavaSDM.ensure (startEvent.equals (sequenceFlow.getSourceRef ()\n                  ));\n\n                  // check link target from definitionsToPackage to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (definitionsToPackage.getTarget ()\n                  ));\n\n                  // create object __definitions_rootElements_process\n                  __definitions_rootElements_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __definitionsToPackage_source_definitions\n                  __definitionsToPackage_source_definitions = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object isApplicableMatch\n                  isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                  // create object __definitionsToPackage_target_packageDeclaration\n                  __definitionsToPackage_target_packageDeclaration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __process_flowElements_startEvent\n                  __process_flowElements_startEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __process_flowElements_sequenceFlow\n                  __process_flowElements_sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __sequenceFlow_sourceRef_startEvent\n                  __sequenceFlow_sourceRef_startEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __startEvent_outgoing_sequenceFlow\n                  __startEvent_outgoing_sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // assign attribute __definitions_rootElements_process\n                  __definitions_rootElements_process.setName (\"rootElements\");\n                  // assign attribute __definitionsToPackage_source_definitions\n                  __definitionsToPackage_source_definitions.setName (\"source\");\n                  // assign attribute __definitionsToPackage_target_packageDeclaration\n                  __definitionsToPackage_target_packageDeclaration.setName (\"target\");\n                  // assign attribute __process_flowElements_startEvent\n                  __process_flowElements_startEvent.setName (\"flowElements\");\n                  // assign attribute __process_flowElements_sequenceFlow\n                  __process_flowElements_sequenceFlow.setName (\"flowElements\");\n                  // assign attribute __sequenceFlow_sourceRef_startEvent\n                  __sequenceFlow_sourceRef_startEvent.setName (\"sourceRef\");\n                  // assign attribute __startEvent_outgoing_sequenceFlow\n                  __startEvent_outgoing_sequenceFlow.setName (\"outgoing\");\n\n                  // create link\n                  __definitions_rootElements_process.setSrc( definitions);\n\n\n                  // create link\n                  __definitionsToPackage_source_definitions.setTrg( definitions);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(definitions);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                  // create link\n                  __definitionsToPackage_target_packageDeclaration.setTrg( packageDeclaration);\n\n\n                  // create link\n                  __definitionsToPackage_source_definitions.setSrc( definitionsToPackage);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(definitionsToPackage);\n\n\n                  // create link\n                  __definitionsToPackage_target_packageDeclaration.setSrc( definitionsToPackage);\n\n\n                  // create link\n                  __process_flowElements_startEvent.setSrc( process);\n\n\n                  // create link\n                  __definitions_rootElements_process.setTrg( process);\n\n\n                  // create link\n                  __process_flowElements_sequenceFlow.setSrc( process);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(process);\n\n\n                  // create link\n                  __process_flowElements_startEvent.setTrg( startEvent);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(startEvent);\n\n\n                  // create link\n                  __sequenceFlow_sourceRef_startEvent.setTrg( startEvent);\n\n\n                  // create link\n                  __startEvent_outgoing_sequenceFlow.setSrc( startEvent);\n\n\n                  // create link\n                  __startEvent_outgoing_sequenceFlow.setTrg( sequenceFlow);\n\n\n                  // create link\n                  __sequenceFlow_sourceRef_startEvent.setSrc( sequenceFlow);\n\n\n                  // create link\n                  __process_flowElements_sequenceFlow.setTrg( sequenceFlow);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(sequenceFlow);\n\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__sequenceFlow_sourceRef_startEvent,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__definitionsToPackage_source_definitions,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__startEvent_outgoing_sequenceFlow,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__definitionsToPackage_target_packageDeclaration,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_sequenceFlow,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__definitions_rootElements_process,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_startEvent,\"allContextElements\");\n                  // story node \'solve CSP\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,definitions,packageDeclaration,definitionsToPackage,process,startEvent,sequenceFlow));\n\n                     // ensure correct type and really bound of object csp\n                     JavaSDM.ensure ( _TmpObject instanceof CSP );\n                     csp = (CSP) _TmpObject;\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  // statement node \'check CSP\'\n                  fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                  if (fujaba__Success)\n                  {\n                     // story node \'add match to rule result\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object isApplicableMatch is really bound\n                        JavaSDM.ensure ( isApplicableMatch != null );\n                        // check object ruleresult is really bound\n                        JavaSDM.ensure ( ruleresult != null );\n                        // assign attribute isApplicableMatch\n                        isApplicableMatch.setRuleName (\"ProcessToUseCaseRule\");\n                        // assign attribute ruleresult\n                        ruleresult.setSuccess (true);\n\n                        // create link\n                        ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"definitions\", definitions);\nmatch.registerObject(\"process\", process);\nmatch.registerObject(\"startEvent\", startEvent);\nmatch.registerObject(\"sequenceFlow\", sequenceFlow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, Definitions definitions,
			bpmn2.Process process, StartEvent startEvent,
			SequenceFlow sequenceFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, Definitions definitions,
			bpmn2.Process process, StartEvent startEvent,
			SequenceFlow sequenceFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"sys\");\r\nliteral0.setType(\"\");\r\nVariable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal1\", true, csp);\r\nliteral1.setValue(\"SYSTEM\");\r\nliteral1.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_process_id = CSPFactoryHelper.eINSTANCE.createVariable(\"process.id\", true, csp);\r\nvar_process_id.setValue(process.getId());\r\nvar_process_id.setType(\"\");\r\nVariable var_process_name = CSPFactoryHelper.eINSTANCE.createVariable(\"process.name\", true, csp);\r\nvar_process_name.setValue(process.getName());\r\nvar_process_name.setType(\"\");\r\nVariable var_startEvent_name = CSPFactoryHelper.eINSTANCE.createVariable(\"startEvent.name\", true, csp);\r\nvar_startEvent_name.setValue(startEvent.getName());\r\nvar_startEvent_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(\"useCase.name\", csp);\r\nvar_useCase_name.setType(\"\");\r\nVariable var_useCase_description = CSPFactoryHelper.eINSTANCE.createVariable(\"useCase.description\", csp);\r\nvar_useCase_description.setType(\"\");\r\nVariable var_useCase_preConditions = CSPFactoryHelper.eINSTANCE.createVariable(\"useCase.preConditions\", csp);\r\nvar_useCase_preConditions.setType(\"\");\r\nVariable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.name\", csp);\r\nvar_actor_name.setType(\"\");\r\nVariable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.type\", csp);\r\nvar_actor_type.setType(\"EObject\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();Eq eq_2 = new Eq();EqActorType eqActorType = new EqActorType();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\ncsp.getConstraints().add(eq_1);\r\ncsp.getConstraints().add(eq_2);\r\ncsp.getConstraints().add(eqActorType);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_process_id,var_useCase_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_process_name,var_useCase_description);\r\neq_1.setRuleName(\"\");\r\neq_1.solve(var_startEvent_name,var_useCase_preConditions);\r\neq_2.setRuleName(\"\");\r\neq_2.solve(var_actor_name,literal0);\r\neqActorType.setRuleName(\"\");\r\neqActorType.solve(var_actor_type,literal1);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"definitions\",definitions);\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"definitionsToPackage\",definitionsToPackage);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"startEvent\",startEvent);\r\nisApplicableMatch.registerObject(\"sequenceFlow\",sequenceFlow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			Definitions definitions, PackageDeclaration packageDeclaration,
			DefinitionsToPackage definitionsToPackage, bpmn2.Process process,
			StartEvent startEvent, SequenceFlow sequenceFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"definitions\", definitions);\nruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"definitionsToPackage\", definitionsToPackage);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"processToUseCase\", processToUseCase);\nruleresult.registerObject(\"startEvent\", startEvent);\nruleresult.registerObject(\"basicFlow\", basicFlow);\nruleresult.registerObject(\"startEventToBasicFlow\", startEventToBasicFlow);\nruleresult.registerObject(\"sequenceFlow\", sequenceFlow);\nruleresult.registerObject(\"sequenceFlowToBasicFlow\", sequenceFlowToBasicFlow);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"processToActor\", processToActor);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject definitions,
			EObject packageDeclaration, EObject definitionsToPackage,
			EObject process, EObject useCase, EObject processToUseCase,
			EObject startEvent, EObject basicFlow,
			EObject startEventToBasicFlow, EObject sequenceFlow,
			EObject sequenceFlowToBasicFlow, EObject actor,
			EObject processToActor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"process\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getProcess()) && match.getObject(\"startEvent\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getStartEvent()) && match.getObject(\"sequenceFlow\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __useCase_flows_basicFlow = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object basicFlow is really bound\n         JavaSDM.ensure ( basicFlow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,packageDeclaration,useCase,basicFlow,actor));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object basicFlow is really bound\n            JavaSDM.ensure ( basicFlow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // create object __useCase_flows_basicFlow\n            __useCase_flows_basicFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __packageDeclaration_useCases_useCase\n            __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __packageDeclaration_actors_actor\n            __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __packageDeclaration_useCases_useCase\n            __packageDeclaration_useCases_useCase.setName (\"useCases\");\n            // assign attribute __packageDeclaration_actors_actor\n            __packageDeclaration_actors_actor.setName (\"actors\");\n            // assign attribute __useCase_flows_basicFlow\n            __useCase_flows_basicFlow.setName (\"flows\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,useCase,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,basicFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__useCase_flows_basicFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,actor,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__packageDeclaration_useCases_useCase,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__packageDeclaration_actors_actor,\"toBeTranslatedEdges\");\n\n            // create link\n            __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n            // create link\n            __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n            // create link\n            __useCase_flows_basicFlow.setSrc( useCase);\n\n\n            // create link\n            __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n            // create link\n            __useCase_flows_basicFlow.setTrg( basicFlow);\n\n\n            // create link\n            __packageDeclaration_actors_actor.setTrg( actor);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object basicFlow is really bound\n            JavaSDM.ensure ( basicFlow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,packageDeclaration,\"contextNodes\");\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,packageDeclaration,useCase,basicFlow,actor);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match,
			PackageDeclaration packageDeclaration, UseCase useCase,
			BasicFlow basicFlow, Actor actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      BasicFlow basicFlow = null;\n      Definitions definitions = null;\n      DefinitionsToPackage definitionsToPackage = null;\n      PackageDeclaration packageDeclaration = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      bpmn2.Process process = null;\n      StartEvent startEvent = null;\n      SequenceFlow sequenceFlow = null;\n      ProcessToActor processToActor = null;\n      ProcessToUseCase processToUseCase = null;\n      StartEventToBasicFlow startEventToBasicFlow = null;\n      SequenceFlowToUCFlow sequenceFlowToBasicFlow = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge sequenceFlowToBasicFlow__source__sequenceFlow = null;\n      EMoflonEdge processToUseCase__target__useCase = null;\n      EMoflonEdge definitions__rootElements__process = null;\n      EMoflonEdge startEventToBasicFlow__target__basicFlow = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n      EMoflonEdge startEventToBasicFlow__source__startEvent = null;\n      EMoflonEdge processToActor__target__actor = null;\n      EMoflonEdge processToUseCase__source__process = null;\n      EMoflonEdge __useCase_flows_basicFlow = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge startEvent__outgoing__sequenceFlow = null;\n      EMoflonEdge sequenceFlow__sourceRef__startEvent = null;\n      EMoflonEdge process__flowElements__startEvent = null;\n      EMoflonEdge sequenceFlowToBasicFlow__target__basicFlow = null;\n      EMoflonEdge processToActor__source__process = null;\n      EMoflonEdge process__flowElements__sequenceFlow = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"basicFlow\"));\n\n         // ensure correct type and really bound of object basicFlow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         basicFlow = (BasicFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"definitions\"));\n\n         // ensure correct type and really bound of object definitions\n         JavaSDM.ensure ( _TmpObject instanceof Definitions );\n         definitions = (Definitions) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"definitionsToPackage\"));\n\n         // ensure correct type and really bound of object definitionsToPackage\n         JavaSDM.ensure ( _TmpObject instanceof DefinitionsToPackage );\n         definitionsToPackage = (DefinitionsToPackage) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object process\n         process = Bpmn2Factory.eINSTANCE.createProcess();\n\n         // create object startEvent\n         startEvent = Bpmn2Factory.eINSTANCE.createStartEvent();\n\n         // create object sequenceFlow\n         sequenceFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n         // create object processToActor\n         processToActor = BpmnToUseCaseIntegrationFactory.eINSTANCE.createProcessToActor();\n\n         // create object processToUseCase\n         processToUseCase = BpmnToUseCaseIntegrationFactory.eINSTANCE.createProcessToUseCase();\n\n         // create object startEventToBasicFlow\n         startEventToBasicFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createStartEventToBasicFlow();\n\n         // create object sequenceFlowToBasicFlow\n         sequenceFlowToBasicFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // assign attribute process\n         process.setId ((java.lang.String)csp.getValue(\"process\",\"id\"));\n         // assign attribute process\n         process.setName ((java.lang.String)csp.getValue(\"process\",\"name\"));\n         // assign attribute startEvent\n         startEvent.setName ((java.lang.String)csp.getValue(\"startEvent\",\"name\"));\n\n         // create link\n         sequenceFlowToBasicFlow.setTarget( basicFlow);\n\n\n         // create link\n         startEventToBasicFlow.setTarget( basicFlow);\n\n\n         // create link\n         sequenceFlowToBasicFlow.setSource( sequenceFlow);\n\n\n         // create link\n         processToActor.setTarget( actor);\n\n\n         // create link\n         \tdefinitions.getRootElements().add(process); // add link\n\n\n         // create link\n         \tprocess.getFlowElements().add(startEvent); // add link\n\n\n         // create link\n         \tprocess.getFlowElements().add(sequenceFlow); // add link\n\n\n         // create link\n         processToActor.setSource( process);\n\n\n         // create link\n         processToUseCase.setSource( process);\n\n\n         // create link\n         processToUseCase.setTarget( useCase);\n\n\n         // create link\n         startEventToBasicFlow.setSource( startEvent);\n\n\n         // create link\n         sequenceFlow.setSourceRef( startEvent);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object basicFlow is really bound\n         JavaSDM.ensure ( basicFlow != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToActor is really bound\n         JavaSDM.ensure ( processToActor != null );\n         // check object processToUseCase is really bound\n         JavaSDM.ensure ( processToUseCase != null );\n         // check object sequenceFlow is really bound\n         JavaSDM.ensure ( sequenceFlow != null );\n         // check object sequenceFlowToBasicFlow is really bound\n         JavaSDM.ensure ( sequenceFlowToBasicFlow != null );\n         // check object startEvent is really bound\n         JavaSDM.ensure ( startEvent != null );\n         // check object startEventToBasicFlow is really bound\n         JavaSDM.ensure ( startEventToBasicFlow != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,processToActor,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlowToBasicFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCase,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,basicFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlow,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,startEventToBasicFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actor,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,processToUseCase,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,startEvent,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process,\"createdElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object basicFlow is really bound\n         JavaSDM.ensure ( basicFlow != null );\n         // check object definitions is really bound\n         JavaSDM.ensure ( definitions != null );\n         // check object definitionsToPackage is really bound\n         JavaSDM.ensure ( definitionsToPackage != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToActor is really bound\n         JavaSDM.ensure ( processToActor != null );\n         // check object processToUseCase is really bound\n         JavaSDM.ensure ( processToUseCase != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object sequenceFlow is really bound\n         JavaSDM.ensure ( sequenceFlow != null );\n         // check object sequenceFlowToBasicFlow is really bound\n         JavaSDM.ensure ( sequenceFlowToBasicFlow != null );\n         // check object startEvent is really bound\n         JavaSDM.ensure ( startEvent != null );\n         // check object startEventToBasicFlow is really bound\n         JavaSDM.ensure ( startEventToBasicFlow != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects basicFlow and actor \n         JavaSDM.ensure ( !basicFlow.equals (actor) );\n\n         // check isomorphic binding between objects definitions and actor \n         JavaSDM.ensure ( !definitions.equals (actor) );\n\n         // check isomorphic binding between objects definitionsToPackage and actor \n         JavaSDM.ensure ( !definitionsToPackage.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclaration and actor \n         JavaSDM.ensure ( !packageDeclaration.equals (actor) );\n\n         // check isomorphic binding between objects process and actor \n         JavaSDM.ensure ( !process.equals (actor) );\n\n         // check isomorphic binding between objects processToActor and actor \n         JavaSDM.ensure ( !processToActor.equals (actor) );\n\n         // check isomorphic binding between objects processToUseCase and actor \n         JavaSDM.ensure ( !processToUseCase.equals (actor) );\n\n         // check isomorphic binding between objects sequenceFlow and actor \n         JavaSDM.ensure ( !sequenceFlow.equals (actor) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and actor \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (actor) );\n\n         // check isomorphic binding between objects startEvent and actor \n         JavaSDM.ensure ( !startEvent.equals (actor) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and actor \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (actor) );\n\n         // check isomorphic binding between objects useCase and actor \n         JavaSDM.ensure ( !useCase.equals (actor) );\n\n         // check isomorphic binding between objects definitions and basicFlow \n         JavaSDM.ensure ( !definitions.equals (basicFlow) );\n\n         // check isomorphic binding between objects definitionsToPackage and basicFlow \n         JavaSDM.ensure ( !definitionsToPackage.equals (basicFlow) );\n\n         // check isomorphic binding between objects packageDeclaration and basicFlow \n         JavaSDM.ensure ( !packageDeclaration.equals (basicFlow) );\n\n         // check isomorphic binding between objects process and basicFlow \n         JavaSDM.ensure ( !process.equals (basicFlow) );\n\n         // check isomorphic binding between objects processToActor and basicFlow \n         JavaSDM.ensure ( !processToActor.equals (basicFlow) );\n\n         // check isomorphic binding between objects processToUseCase and basicFlow \n         JavaSDM.ensure ( !processToUseCase.equals (basicFlow) );\n\n         // check isomorphic binding between objects sequenceFlow and basicFlow \n         JavaSDM.ensure ( !sequenceFlow.equals (basicFlow) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and basicFlow \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (basicFlow) );\n\n         // check isomorphic binding between objects startEvent and basicFlow \n         JavaSDM.ensure ( !startEvent.equals (basicFlow) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and basicFlow \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (basicFlow) );\n\n         // check isomorphic binding between objects useCase and basicFlow \n         JavaSDM.ensure ( !useCase.equals (basicFlow) );\n\n         // check isomorphic binding between objects definitionsToPackage and definitions \n         JavaSDM.ensure ( !definitionsToPackage.equals (definitions) );\n\n         // check isomorphic binding between objects packageDeclaration and definitions \n         JavaSDM.ensure ( !packageDeclaration.equals (definitions) );\n\n         // check isomorphic binding between objects process and definitions \n         JavaSDM.ensure ( !process.equals (definitions) );\n\n         // check isomorphic binding between objects processToActor and definitions \n         JavaSDM.ensure ( !processToActor.equals (definitions) );\n\n         // check isomorphic binding between objects processToUseCase and definitions \n         JavaSDM.ensure ( !processToUseCase.equals (definitions) );\n\n         // check isomorphic binding between objects sequenceFlow and definitions \n         JavaSDM.ensure ( !sequenceFlow.equals (definitions) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and definitions \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (definitions) );\n\n         // check isomorphic binding between objects startEvent and definitions \n         JavaSDM.ensure ( !startEvent.equals (definitions) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and definitions \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (definitions) );\n\n         // check isomorphic binding between objects useCase and definitions \n         JavaSDM.ensure ( !useCase.equals (definitions) );\n\n         // check isomorphic binding between objects packageDeclaration and definitionsToPackage \n         JavaSDM.ensure ( !packageDeclaration.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects process and definitionsToPackage \n         JavaSDM.ensure ( !process.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects processToActor and definitionsToPackage \n         JavaSDM.ensure ( !processToActor.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects processToUseCase and definitionsToPackage \n         JavaSDM.ensure ( !processToUseCase.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects sequenceFlow and definitionsToPackage \n         JavaSDM.ensure ( !sequenceFlow.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and definitionsToPackage \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects startEvent and definitionsToPackage \n         JavaSDM.ensure ( !startEvent.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and definitionsToPackage \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects useCase and definitionsToPackage \n         JavaSDM.ensure ( !useCase.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects process and packageDeclaration \n         JavaSDM.ensure ( !process.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects processToActor and packageDeclaration \n         JavaSDM.ensure ( !processToActor.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects processToUseCase and packageDeclaration \n         JavaSDM.ensure ( !processToUseCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects sequenceFlow and packageDeclaration \n         JavaSDM.ensure ( !sequenceFlow.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and packageDeclaration \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects startEvent and packageDeclaration \n         JavaSDM.ensure ( !startEvent.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and packageDeclaration \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclaration \n         JavaSDM.ensure ( !useCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects processToActor and process \n         JavaSDM.ensure ( !processToActor.equals (process) );\n\n         // check isomorphic binding between objects processToUseCase and process \n         JavaSDM.ensure ( !processToUseCase.equals (process) );\n\n         // check isomorphic binding between objects sequenceFlow and process \n         JavaSDM.ensure ( !sequenceFlow.equals (process) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and process \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (process) );\n\n         // check isomorphic binding between objects startEvent and process \n         JavaSDM.ensure ( !startEvent.equals (process) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and process \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (process) );\n\n         // check isomorphic binding between objects useCase and process \n         JavaSDM.ensure ( !useCase.equals (process) );\n\n         // check isomorphic binding between objects processToUseCase and processToActor \n         JavaSDM.ensure ( !processToUseCase.equals (processToActor) );\n\n         // check isomorphic binding between objects sequenceFlow and processToActor \n         JavaSDM.ensure ( !sequenceFlow.equals (processToActor) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and processToActor \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (processToActor) );\n\n         // check isomorphic binding between objects startEvent and processToActor \n         JavaSDM.ensure ( !startEvent.equals (processToActor) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and processToActor \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (processToActor) );\n\n         // check isomorphic binding between objects useCase and processToActor \n         JavaSDM.ensure ( !useCase.equals (processToActor) );\n\n         // check isomorphic binding between objects sequenceFlow and processToUseCase \n         JavaSDM.ensure ( !sequenceFlow.equals (processToUseCase) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and processToUseCase \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (processToUseCase) );\n\n         // check isomorphic binding between objects startEvent and processToUseCase \n         JavaSDM.ensure ( !startEvent.equals (processToUseCase) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and processToUseCase \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (processToUseCase) );\n\n         // check isomorphic binding between objects useCase and processToUseCase \n         JavaSDM.ensure ( !useCase.equals (processToUseCase) );\n\n         // check isomorphic binding between objects sequenceFlowToBasicFlow and sequenceFlow \n         JavaSDM.ensure ( !sequenceFlowToBasicFlow.equals (sequenceFlow) );\n\n         // check isomorphic binding between objects startEvent and sequenceFlow \n         JavaSDM.ensure ( !startEvent.equals (sequenceFlow) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and sequenceFlow \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (sequenceFlow) );\n\n         // check isomorphic binding between objects useCase and sequenceFlow \n         JavaSDM.ensure ( !useCase.equals (sequenceFlow) );\n\n         // check isomorphic binding between objects startEvent and sequenceFlowToBasicFlow \n         JavaSDM.ensure ( !startEvent.equals (sequenceFlowToBasicFlow) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and sequenceFlowToBasicFlow \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (sequenceFlowToBasicFlow) );\n\n         // check isomorphic binding between objects useCase and sequenceFlowToBasicFlow \n         JavaSDM.ensure ( !useCase.equals (sequenceFlowToBasicFlow) );\n\n         // check isomorphic binding between objects startEventToBasicFlow and startEvent \n         JavaSDM.ensure ( !startEventToBasicFlow.equals (startEvent) );\n\n         // check isomorphic binding between objects useCase and startEvent \n         JavaSDM.ensure ( !useCase.equals (startEvent) );\n\n         // check isomorphic binding between objects useCase and startEventToBasicFlow \n         JavaSDM.ensure ( !useCase.equals (startEventToBasicFlow) );\n\n         // create object sequenceFlowToBasicFlow__source__sequenceFlow\n         sequenceFlowToBasicFlow__source__sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object processToUseCase__target__useCase\n         processToUseCase__target__useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object definitions__rootElements__process\n         definitions__rootElements__process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object startEventToBasicFlow__target__basicFlow\n         startEventToBasicFlow__target__basicFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __packageDeclaration_useCases_useCase\n         __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object startEventToBasicFlow__source__startEvent\n         startEventToBasicFlow__source__startEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object processToActor__target__actor\n         processToActor__target__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object processToUseCase__source__process\n         processToUseCase__source__process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __useCase_flows_basicFlow\n         __useCase_flows_basicFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __packageDeclaration_actors_actor\n         __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object startEvent__outgoing__sequenceFlow\n         startEvent__outgoing__sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object sequenceFlow__sourceRef__startEvent\n         sequenceFlow__sourceRef__startEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__startEvent\n         process__flowElements__startEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object sequenceFlowToBasicFlow__target__basicFlow\n         sequenceFlowToBasicFlow__target__basicFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object processToActor__source__process\n         processToActor__source__process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__sequenceFlow\n         process__flowElements__sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ProcessToUseCaseRule\");\n         // assign attribute definitions__rootElements__process\n         definitions__rootElements__process.setName (\"rootElements\");\n         // assign attribute __packageDeclaration_useCases_useCase\n         __packageDeclaration_useCases_useCase.setName (\"useCases\");\n         // assign attribute __packageDeclaration_actors_actor\n         __packageDeclaration_actors_actor.setName (\"actors\");\n         // assign attribute process__flowElements__startEvent\n         process__flowElements__startEvent.setName (\"flowElements\");\n         // assign attribute process__flowElements__sequenceFlow\n         process__flowElements__sequenceFlow.setName (\"flowElements\");\n         // assign attribute __useCase_flows_basicFlow\n         __useCase_flows_basicFlow.setName (\"flows\");\n         // assign attribute processToUseCase__source__process\n         processToUseCase__source__process.setName (\"source\");\n         // assign attribute processToUseCase__target__useCase\n         processToUseCase__target__useCase.setName (\"target\");\n         // assign attribute sequenceFlow__sourceRef__startEvent\n         sequenceFlow__sourceRef__startEvent.setName (\"sourceRef\");\n         // assign attribute startEvent__outgoing__sequenceFlow\n         startEvent__outgoing__sequenceFlow.setName (\"outgoing\");\n         // assign attribute startEventToBasicFlow__source__startEvent\n         startEventToBasicFlow__source__startEvent.setName (\"source\");\n         // assign attribute startEventToBasicFlow__target__basicFlow\n         startEventToBasicFlow__target__basicFlow.setName (\"target\");\n         // assign attribute sequenceFlowToBasicFlow__source__sequenceFlow\n         sequenceFlowToBasicFlow__source__sequenceFlow.setName (\"source\");\n         // assign attribute sequenceFlowToBasicFlow__target__basicFlow\n         sequenceFlowToBasicFlow__target__basicFlow.setName (\"target\");\n         // assign attribute processToActor__source__process\n         processToActor__source__process.setName (\"source\");\n         // assign attribute processToActor__target__actor\n         processToActor__target__actor.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlowToBasicFlow__source__sequenceFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,processToUseCase__target__useCase,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,definitions__rootElements__process,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,startEventToBasicFlow__target__basicFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__packageDeclaration_useCases_useCase,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,startEventToBasicFlow__source__startEvent,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,processToActor__target__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,processToUseCase__source__process,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__useCase_flows_basicFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__packageDeclaration_actors_actor,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,startEvent__outgoing__sequenceFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlow__sourceRef__startEvent,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__startEvent,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlowToBasicFlow__target__basicFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,processToActor__source__process,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__sequenceFlow,\"createdEdges\");\n\n         // create link\n         definitions__rootElements__process.setSrc( definitions);\n\n\n         // create link\n         __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n         // create link\n         __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n         // create link\n         processToActor__source__process.setTrg( process);\n\n\n         // create link\n         processToUseCase__source__process.setTrg( process);\n\n\n         // create link\n         process__flowElements__sequenceFlow.setSrc( process);\n\n\n         // create link\n         process__flowElements__startEvent.setSrc( process);\n\n\n         // create link\n         definitions__rootElements__process.setTrg( process);\n\n\n         // create link\n         processToUseCase__target__useCase.setTrg( useCase);\n\n\n         // create link\n         __useCase_flows_basicFlow.setSrc( useCase);\n\n\n         // create link\n         __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n         // create link\n         processToUseCase__source__process.setSrc( processToUseCase);\n\n\n         // create link\n         processToUseCase__target__useCase.setSrc( processToUseCase);\n\n\n         // create link\n         startEventToBasicFlow__source__startEvent.setTrg( startEvent);\n\n\n         // create link\n         process__flowElements__startEvent.setTrg( startEvent);\n\n\n         // create link\n         startEvent__outgoing__sequenceFlow.setSrc( startEvent);\n\n\n         // create link\n         sequenceFlow__sourceRef__startEvent.setTrg( startEvent);\n\n\n         // create link\n         sequenceFlowToBasicFlow__target__basicFlow.setTrg( basicFlow);\n\n\n         // create link\n         startEventToBasicFlow__target__basicFlow.setTrg( basicFlow);\n\n\n         // create link\n         __useCase_flows_basicFlow.setTrg( basicFlow);\n\n\n         // create link\n         startEventToBasicFlow__source__startEvent.setSrc( startEventToBasicFlow);\n\n\n         // create link\n         startEventToBasicFlow__target__basicFlow.setSrc( startEventToBasicFlow);\n\n\n         // create link\n         startEvent__outgoing__sequenceFlow.setTrg( sequenceFlow);\n\n\n         // create link\n         sequenceFlow__sourceRef__startEvent.setSrc( sequenceFlow);\n\n\n         // create link\n         process__flowElements__sequenceFlow.setTrg( sequenceFlow);\n\n\n         // create link\n         sequenceFlowToBasicFlow__source__sequenceFlow.setTrg( sequenceFlow);\n\n\n         // create link\n         sequenceFlowToBasicFlow__source__sequenceFlow.setSrc( sequenceFlowToBasicFlow);\n\n\n         // create link\n         sequenceFlowToBasicFlow__target__basicFlow.setSrc( sequenceFlowToBasicFlow);\n\n\n         // create link\n         __packageDeclaration_actors_actor.setTrg( actor);\n\n\n         // create link\n         processToActor__target__actor.setTrg( actor);\n\n\n         // create link\n         processToActor__target__actor.setSrc( processToActor);\n\n\n         // create link\n         processToActor__source__process.setSrc( processToActor);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,definitions,packageDeclaration,definitionsToPackage,process,useCase,processToUseCase,startEvent,basicFlow,startEventToBasicFlow,sequenceFlow,sequenceFlowToBasicFlow,actor,processToActor);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Actor actor = null;\n      BasicFlow basicFlow = null;\n      PackageDeclaration packageDeclaration = null;\n      UseCase useCase = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __definitionsToPackage_source_definitions = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge __definitionsToPackage_target_packageDeclaration = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n      EMoflonEdge __useCase_flows_basicFlow = null;\n      CSP csp = null;\n      Definitions definitions = null;\n      Iterator fujaba__IterPackageDeclarationToDefinitionsToPackage = null;\n      DefinitionsToPackage definitionsToPackage = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ProcessToUseCaseRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (match.getObject(\"basicFlow\"));\n\n         // ensure correct type and really bound of object basicFlow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         basicFlow = (BasicFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (match.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link target from packageDeclaration to definitionsToPackage\n         fujaba__Success = false;\n\n         fujaba__IterPackageDeclarationToDefinitionsToPackage = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(packageDeclaration,DefinitionsToPackage.class,\"target\")).iterator ();\n\n         while ( fujaba__IterPackageDeclarationToDefinitionsToPackage.hasNext () )\n         {\n            try\n            {\n               definitionsToPackage = (DefinitionsToPackage) fujaba__IterPackageDeclarationToDefinitionsToPackage.next ();\n\n               // check object definitionsToPackage is really bound\n               JavaSDM.ensure ( definitionsToPackage != null );\n               // bind object\n               definitions = definitionsToPackage.getSource ();\n\n               // check object definitions is really bound\n               JavaSDM.ensure ( definitions != null );\n\n               // story node \'find context\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check object actor is really bound\n                  JavaSDM.ensure ( actor != null );\n                  // check object basicFlow is really bound\n                  JavaSDM.ensure ( basicFlow != null );\n                  // check object definitions is really bound\n                  JavaSDM.ensure ( definitions != null );\n                  // check object definitionsToPackage is really bound\n                  JavaSDM.ensure ( definitionsToPackage != null );\n                  // check object packageDeclaration is really bound\n                  JavaSDM.ensure ( packageDeclaration != null );\n                  // check object useCase is really bound\n                  JavaSDM.ensure ( useCase != null );\n                  // check link actors from actor to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                  ));\n\n                  // check link flows from basicFlow to useCase\n                  JavaSDM.ensure (useCase.equals (basicFlow.eContainer()\n                  ));\n\n                  // check link source from definitionsToPackage to definitions\n                  JavaSDM.ensure (definitions.equals (definitionsToPackage.getSource ()\n                  ));\n\n                  // check link target from definitionsToPackage to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (definitionsToPackage.getTarget ()\n                  ));\n\n                  // check link useCases from useCase to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                  ));\n\n                  // create object isApplicableMatch\n                  isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                  // create object __definitionsToPackage_source_definitions\n                  __definitionsToPackage_source_definitions = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __packageDeclaration_actors_actor\n                  __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __definitionsToPackage_target_packageDeclaration\n                  __definitionsToPackage_target_packageDeclaration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __packageDeclaration_useCases_useCase\n                  __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __useCase_flows_basicFlow\n                  __useCase_flows_basicFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // assign attribute __packageDeclaration_useCases_useCase\n                  __packageDeclaration_useCases_useCase.setName (\"useCases\");\n                  // assign attribute __packageDeclaration_actors_actor\n                  __packageDeclaration_actors_actor.setName (\"actors\");\n                  // assign attribute __definitionsToPackage_source_definitions\n                  __definitionsToPackage_source_definitions.setName (\"source\");\n                  // assign attribute __definitionsToPackage_target_packageDeclaration\n                  __definitionsToPackage_target_packageDeclaration.setName (\"target\");\n                  // assign attribute __useCase_flows_basicFlow\n                  __useCase_flows_basicFlow.setName (\"flows\");\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(definitions);\n\n\n                  // create link\n                  __definitionsToPackage_source_definitions.setTrg( definitions);\n\n\n                  // create link\n                  __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n                  // create link\n                  __definitionsToPackage_target_packageDeclaration.setTrg( packageDeclaration);\n\n\n                  // create link\n                  __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                  // create link\n                  __definitionsToPackage_source_definitions.setSrc( definitionsToPackage);\n\n\n                  // create link\n                  __definitionsToPackage_target_packageDeclaration.setSrc( definitionsToPackage);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(definitionsToPackage);\n\n\n                  // create link\n                  __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                  // create link\n                  __useCase_flows_basicFlow.setSrc( useCase);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(basicFlow);\n\n\n                  // create link\n                  __useCase_flows_basicFlow.setTrg( basicFlow);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(actor);\n\n\n                  // create link\n                  __packageDeclaration_actors_actor.setTrg( actor);\n\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_useCases_useCase,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_actors_actor,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__definitionsToPackage_source_definitions,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_basicFlow,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__definitionsToPackage_target_packageDeclaration,\"allContextElements\");\n                  // story node \'solve CSP\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,definitions,packageDeclaration,definitionsToPackage,useCase,basicFlow,actor));\n\n                     // ensure correct type and really bound of object csp\n                     JavaSDM.ensure ( _TmpObject instanceof CSP );\n                     csp = (CSP) _TmpObject;\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  // statement node \'check CSP\'\n                  fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                  if (fujaba__Success)\n                  {\n                     // story node \'add match to rule result\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object isApplicableMatch is really bound\n                        JavaSDM.ensure ( isApplicableMatch != null );\n                        // check object ruleresult is really bound\n                        JavaSDM.ensure ( ruleresult != null );\n                        // assign attribute isApplicableMatch\n                        isApplicableMatch.setRuleName (\"ProcessToUseCaseRule\");\n                        // assign attribute ruleresult\n                        ruleresult.setSuccess (true);\n\n                        // create link\n                        ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"packageDeclaration\", packageDeclaration);\nmatch.registerObject(\"useCase\", useCase);\nmatch.registerObject(\"basicFlow\", basicFlow);\nmatch.registerObject(\"actor\", actor);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match,
			PackageDeclaration packageDeclaration, UseCase useCase,
			BasicFlow basicFlow, Actor actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"sys\");\r\nliteral0.setType(\"\");\r\nVariable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal1\", true, csp);\r\nliteral1.setValue(\"SYSTEM\");\r\nliteral1.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.name\", true, csp);\r\nvar_actor_name.setValue(actor.getName());\r\nvar_actor_name.setType(\"\");\r\nVariable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.type\", true, csp);\r\nvar_actor_type.setValue(actor.getType());\r\nvar_actor_type.setType(\"EObject\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEq eq = new Eq();EqActorType eqActorType = new EqActorType();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eqActorType);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_actor_name,literal0);\r\neqActorType.setRuleName(\"\");\r\neqActorType.solve(var_actor_type,literal1);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match,
			PackageDeclaration packageDeclaration, UseCase useCase,
			BasicFlow basicFlow, Actor actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(\"useCase.name\", true, csp);\r\nvar_useCase_name.setValue(useCase.getName());\r\nvar_useCase_name.setType(\"\");\r\nVariable var_useCase_description = CSPFactoryHelper.eINSTANCE.createVariable(\"useCase.description\", true, csp);\r\nvar_useCase_description.setValue(useCase.getDescription());\r\nvar_useCase_description.setType(\"\");\r\nVariable var_useCase_preConditions = CSPFactoryHelper.eINSTANCE.createVariable(\"useCase.preConditions\", true, csp);\r\nvar_useCase_preConditions.setValue(useCase.getPreConditions());\r\nvar_useCase_preConditions.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_process_id = CSPFactoryHelper.eINSTANCE.createVariable(\"process.id\", csp);\r\nvar_process_id.setType(\"\");\r\nVariable var_process_name = CSPFactoryHelper.eINSTANCE.createVariable(\"process.name\", csp);\r\nvar_process_name.setType(\"\");\r\nVariable var_startEvent_name = CSPFactoryHelper.eINSTANCE.createVariable(\"startEvent.name\", csp);\r\nvar_startEvent_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\ncsp.getConstraints().add(eq_1);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_process_id,var_useCase_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_process_name,var_useCase_description);\r\neq_1.setRuleName(\"\");\r\neq_1.solve(var_startEvent_name,var_useCase_preConditions);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"definitions\",definitions);\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"definitionsToPackage\",definitionsToPackage);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"basicFlow\",basicFlow);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			Definitions definitions, PackageDeclaration packageDeclaration,
			DefinitionsToPackage definitionsToPackage, UseCase useCase,
			BasicFlow basicFlow, Actor actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"definitions\", definitions);\nruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"definitionsToPackage\", definitionsToPackage);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"processToUseCase\", processToUseCase);\nruleresult.registerObject(\"startEvent\", startEvent);\nruleresult.registerObject(\"basicFlow\", basicFlow);\nruleresult.registerObject(\"startEventToBasicFlow\", startEventToBasicFlow);\nruleresult.registerObject(\"sequenceFlow\", sequenceFlow);\nruleresult.registerObject(\"sequenceFlowToBasicFlow\", sequenceFlowToBasicFlow);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"processToActor\", processToActor);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject definitions,
			EObject packageDeclaration, EObject definitionsToPackage,
			EObject process, EObject useCase, EObject processToUseCase,
			EObject startEvent, EObject basicFlow,
			EObject startEventToBasicFlow, EObject sequenceFlow,
			EObject sequenceFlowToBasicFlow, EObject actor,
			EObject processToActor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"useCase\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getUseCase()) && match.getObject(\"basicFlow\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getBasicFlow()) && match.getObject(\"actor\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getActor());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_sequenceFlow_flowElements_147831 = null;\n      FlowElementsContainer __DEC_startEvent_flowElements_520608 = null;\n      Definitions __DEC_process_rootElements_406733 = null;\n      Iterator fujaba__IterStartEventTo__DEC_startEvent_targetRef_338486 = null;\n      SequenceFlow __DEC_startEvent_targetRef_338486 = null;\n      Match match = null;\n      StartEvent startEvent = null;\n      Iterator fujaba__IterProcessToSequenceFlow = null;\n      SequenceFlow sequenceFlow = null;\n      bpmn2.Process process = null;\n      Definitions definitions = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_rootElements is really bound\n         JavaSDM.ensure ( _edge_rootElements != null );\n         // bind object\n         _TmpObject = _edge_rootElements.getSrc ();\n\n         // ensure correct type and really bound of object definitions\n         JavaSDM.ensure ( _TmpObject instanceof Definitions );\n         definitions = (Definitions) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_rootElements.getTrg ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check link rootElements from process to definitions\n         JavaSDM.ensure (definitions.equals (process.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to sequenceFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToSequenceFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToSequenceFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToSequenceFlow.next ();\n\n               // ensure correct type and really bound of object sequenceFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               sequenceFlow = (SequenceFlow) _TmpObject;\n               // bind object\n               _TmpObject = sequenceFlow.getSourceRef ();\n\n               // ensure correct type and really bound of object startEvent\n               JavaSDM.ensure ( _TmpObject instanceof StartEvent );\n               startEvent = (StartEvent) _TmpObject;\n\n               // check link flowElements from startEvent to process\n               JavaSDM.ensure (process.equals (startEvent.eContainer()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_sequenceFlow_flowElements_147831 = sequenceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) sequenceFlow.eContainer() : null;\n\n                     // check object __DEC_sequenceFlow_flowElements_147831 is really bound\n                     JavaSDM.ensure ( __DEC_sequenceFlow_flowElements_147831 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_sequenceFlow_flowElements_147831.getFlowElements().contains(sequenceFlow));\n\n                     // check isomorphic binding between objects __DEC_sequenceFlow_flowElements_147831 and process \n                     JavaSDM.ensure ( !__DEC_sequenceFlow_flowElements_147831.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_startEvent_flowElements_520608 = startEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) startEvent.eContainer() : null;\n\n                     // check object __DEC_startEvent_flowElements_520608 is really bound\n                     JavaSDM.ensure ( __DEC_startEvent_flowElements_520608 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_startEvent_flowElements_520608.getFlowElements().contains(startEvent));\n\n                     // check isomorphic binding between objects __DEC_startEvent_flowElements_520608 and process \n                     JavaSDM.ensure ( !__DEC_startEvent_flowElements_520608.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_process_rootElements_406733 = process.eContainer() instanceof Definitions ? (Definitions) process.eContainer() : null;\n\n                     // check object __DEC_process_rootElements_406733 is really bound\n                     JavaSDM.ensure ( __DEC_process_rootElements_406733 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_process_rootElements_406733.getRootElements().contains(process));\n\n                     // check isomorphic binding between objects __DEC_process_rootElements_406733 and definitions \n                     JavaSDM.ensure ( !__DEC_process_rootElements_406733.equals (definitions) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link default from sequenceFlow\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(sequenceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link targetRef from startEvent to __DEC_startEvent_targetRef_338486\n                     fujaba__Success = false;\n\n                     fujaba__IterStartEventTo__DEC_startEvent_targetRef_338486 = new ArrayList(startEvent.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterStartEventTo__DEC_startEvent_targetRef_338486.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_startEvent_targetRef_338486 = (SequenceFlow) fujaba__IterStartEventTo__DEC_startEvent_targetRef_338486.next ();\n\n                           // check object __DEC_startEvent_targetRef_338486 is really bound\n                           JavaSDM.ensure ( __DEC_startEvent_targetRef_338486 != null );\n                           // check isomorphic binding between objects __DEC_startEvent_targetRef_338486 and sequenceFlow \n                           JavaSDM.ensure ( !__DEC_startEvent_targetRef_338486.equals (sequenceFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_rootElements is really bound\n                  JavaSDM.ensure ( _edge_rootElements != null );\n                  // check object definitions is really bound\n                  JavaSDM.ensure ( definitions != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check object sequenceFlow is really bound\n                  JavaSDM.ensure ( sequenceFlow != null );\n                  // check object startEvent is really bound\n                  JavaSDM.ensure ( startEvent != null );\n                  // check link flowElements from sequenceFlow to process\n                  JavaSDM.ensure (process.equals (sequenceFlow.eContainer()\n                  ));\n\n                  // check link flowElements from startEvent to process\n                  JavaSDM.ensure (process.equals (startEvent.eContainer()\n                  ));\n\n                  // check link rootElements from process to definitions\n                  JavaSDM.ensure (definitions.equals (process.eContainer()\n                  ));\n\n                  // check link sourceRef from sequenceFlow to startEvent\n                  JavaSDM.ensure (startEvent.equals (sequenceFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_rootElements to definitions\n                  JavaSDM.ensure (definitions.equals (_edge_rootElements.getSrc ()\n                  ));\n\n                  // check link targetRef from sequenceFlow to startEvent\n                  JavaSDM.ensure (!(startEvent.equals (sequenceFlow.getTargetRef ()\n                  )));\n\n                  // check link trg from _edge_rootElements to process\n                  JavaSDM.ensure (process.equals (_edge_rootElements.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,definitions,process,startEvent,sequenceFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_1(
			EMoflonEdge _edge_rootElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      PackageDeclaration __DEC_actor_actors_918795 = null;\n      UseCase __DEC_basicFlow_flows_254983 = null;\n      PackageDeclaration __DEC_useCase_useCases_556607 = null;\n      Match match = null;\n      Iterator fujaba__IterUseCaseToBasicFlow = null;\n      BasicFlow basicFlow = null;\n      Iterator fujaba__IterPackageDeclarationToActor = null;\n      Actor actor = null;\n      UseCase useCase = null;\n      PackageDeclaration packageDeclaration = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_useCases is really bound\n         JavaSDM.ensure ( _edge_useCases != null );\n         // bind object\n         _TmpObject = _edge_useCases.getSrc ();\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_useCases.getTrg ();\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n\n         // check link useCases from useCase to packageDeclaration\n         JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n         ));\n\n         // iterate to-many link actors from packageDeclaration to actor\n         fujaba__Success = false;\n\n         fujaba__IterPackageDeclarationToActor = new ArrayList(packageDeclaration.getActors()).iterator ();\n\n         while ( fujaba__IterPackageDeclarationToActor.hasNext () )\n         {\n            try\n            {\n               actor = (Actor) fujaba__IterPackageDeclarationToActor.next ();\n\n               // check object actor is really bound\n               JavaSDM.ensure ( actor != null );\n               // iterate to-many link flows from useCase to basicFlow\n               fujaba__Success = false;\n\n               fujaba__IterUseCaseToBasicFlow = new ArrayList(useCase.getFlows()).iterator ();\n\n               while ( fujaba__IterUseCaseToBasicFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterUseCaseToBasicFlow.next ();\n\n                     // ensure correct type and really bound of object basicFlow\n                     JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n                     basicFlow = (BasicFlow) _TmpObject;\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_actor_actors_918795 = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor.eContainer() : null;\n\n                           // check object __DEC_actor_actors_918795 is really bound\n                           JavaSDM.ensure ( __DEC_actor_actors_918795 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_actor_actors_918795.getActors().contains(actor));\n\n                           // check isomorphic binding between objects __DEC_actor_actors_918795 and packageDeclaration \n                           JavaSDM.ensure ( !__DEC_actor_actors_918795.equals (packageDeclaration) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_basicFlow_flows_254983 = basicFlow.eContainer() instanceof UseCase ? (UseCase) basicFlow.eContainer() : null;\n\n                           // check object __DEC_basicFlow_flows_254983 is really bound\n                           JavaSDM.ensure ( __DEC_basicFlow_flows_254983 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_basicFlow_flows_254983.getFlows().contains(basicFlow));\n\n                           // check isomorphic binding between objects __DEC_basicFlow_flows_254983 and useCase \n                           JavaSDM.ensure ( !__DEC_basicFlow_flows_254983.equals (useCase) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_useCase_useCases_556607 = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase.eContainer() : null;\n\n                           // check object __DEC_useCase_useCases_556607 is really bound\n                           JavaSDM.ensure ( __DEC_useCase_useCases_556607 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_useCase_useCases_556607.getUseCases().contains(useCase));\n\n                           // check isomorphic binding between objects __DEC_useCase_useCases_556607 and packageDeclaration \n                           JavaSDM.ensure ( !__DEC_useCase_useCases_556607.equals (packageDeclaration) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_useCases is really bound\n                        JavaSDM.ensure ( _edge_useCases != null );\n                        // check object actor is really bound\n                        JavaSDM.ensure ( actor != null );\n                        // check object basicFlow is really bound\n                        JavaSDM.ensure ( basicFlow != null );\n                        // check object packageDeclaration is really bound\n                        JavaSDM.ensure ( packageDeclaration != null );\n                        // check object useCase is really bound\n                        JavaSDM.ensure ( useCase != null );\n                        // check link actors from actor to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                        ));\n\n                        // check link flows from basicFlow to useCase\n                        JavaSDM.ensure (useCase.equals (basicFlow.eContainer()\n                        ));\n\n                        // check link src from _edge_useCases to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (_edge_useCases.getSrc ()\n                        ));\n\n                        // check link trg from _edge_useCases to useCase\n                        JavaSDM.ensure (useCase.equals (_edge_useCases.getTrg ()\n                        ));\n\n                        // check link useCases from useCase to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,packageDeclaration,useCase,basicFlow,actor);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_1(EMoflonEdge _edge_useCases);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      PackageDeclaration __DEC_actor_actors_15969 = null;\n      UseCase __DEC_basicFlow_flows_169420 = null;\n      PackageDeclaration __DEC_useCase_useCases_242362 = null;\n      Match match = null;\n      Iterator fujaba__IterUseCaseToBasicFlow = null;\n      BasicFlow basicFlow = null;\n      Iterator fujaba__IterPackageDeclarationToUseCase = null;\n      UseCase useCase = null;\n      Actor actor = null;\n      PackageDeclaration packageDeclaration = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_actors is really bound\n         JavaSDM.ensure ( _edge_actors != null );\n         // bind object\n         _TmpObject = _edge_actors.getSrc ();\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_actors.getTrg ();\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n\n         // check link actors from actor to packageDeclaration\n         JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n         ));\n\n         // iterate to-many link useCases from packageDeclaration to useCase\n         fujaba__Success = false;\n\n         fujaba__IterPackageDeclarationToUseCase = new ArrayList(packageDeclaration.getUseCases()).iterator ();\n\n         while ( fujaba__IterPackageDeclarationToUseCase.hasNext () )\n         {\n            try\n            {\n               useCase = (UseCase) fujaba__IterPackageDeclarationToUseCase.next ();\n\n               // check object useCase is really bound\n               JavaSDM.ensure ( useCase != null );\n               // iterate to-many link flows from useCase to basicFlow\n               fujaba__Success = false;\n\n               fujaba__IterUseCaseToBasicFlow = new ArrayList(useCase.getFlows()).iterator ();\n\n               while ( fujaba__IterUseCaseToBasicFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterUseCaseToBasicFlow.next ();\n\n                     // ensure correct type and really bound of object basicFlow\n                     JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n                     basicFlow = (BasicFlow) _TmpObject;\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_actor_actors_15969 = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor.eContainer() : null;\n\n                           // check object __DEC_actor_actors_15969 is really bound\n                           JavaSDM.ensure ( __DEC_actor_actors_15969 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_actor_actors_15969.getActors().contains(actor));\n\n                           // check isomorphic binding between objects __DEC_actor_actors_15969 and packageDeclaration \n                           JavaSDM.ensure ( !__DEC_actor_actors_15969.equals (packageDeclaration) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_basicFlow_flows_169420 = basicFlow.eContainer() instanceof UseCase ? (UseCase) basicFlow.eContainer() : null;\n\n                           // check object __DEC_basicFlow_flows_169420 is really bound\n                           JavaSDM.ensure ( __DEC_basicFlow_flows_169420 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_basicFlow_flows_169420.getFlows().contains(basicFlow));\n\n                           // check isomorphic binding between objects __DEC_basicFlow_flows_169420 and useCase \n                           JavaSDM.ensure ( !__DEC_basicFlow_flows_169420.equals (useCase) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_useCase_useCases_242362 = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase.eContainer() : null;\n\n                           // check object __DEC_useCase_useCases_242362 is really bound\n                           JavaSDM.ensure ( __DEC_useCase_useCases_242362 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_useCase_useCases_242362.getUseCases().contains(useCase));\n\n                           // check isomorphic binding between objects __DEC_useCase_useCases_242362 and packageDeclaration \n                           JavaSDM.ensure ( !__DEC_useCase_useCases_242362.equals (packageDeclaration) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_actors is really bound\n                        JavaSDM.ensure ( _edge_actors != null );\n                        // check object actor is really bound\n                        JavaSDM.ensure ( actor != null );\n                        // check object basicFlow is really bound\n                        JavaSDM.ensure ( basicFlow != null );\n                        // check object packageDeclaration is really bound\n                        JavaSDM.ensure ( packageDeclaration != null );\n                        // check object useCase is really bound\n                        JavaSDM.ensure ( useCase != null );\n                        // check link actors from actor to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                        ));\n\n                        // check link flows from basicFlow to useCase\n                        JavaSDM.ensure (useCase.equals (basicFlow.eContainer()\n                        ));\n\n                        // check link src from _edge_actors to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (_edge_actors.getSrc ()\n                        ));\n\n                        // check link trg from _edge_actors to actor\n                        JavaSDM.ensure (actor.equals (_edge_actors.getTrg ()\n                        ));\n\n                        // check link useCases from useCase to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,packageDeclaration,useCase,basicFlow,actor);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_2(EMoflonEdge _edge_actors);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_sequenceFlow_flowElements_741426 = null;\n      FlowElementsContainer __DEC_startEvent_flowElements_999427 = null;\n      Definitions __DEC_process_rootElements_536667 = null;\n      Iterator fujaba__IterStartEventTo__DEC_startEvent_targetRef_59342 = null;\n      SequenceFlow __DEC_startEvent_targetRef_59342 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToSequenceFlow = null;\n      SequenceFlow sequenceFlow = null;\n      StartEvent startEvent = null;\n      Definitions definitions = null;\n      bpmn2.Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // bind object\n         definitions = process.eContainer() instanceof Definitions ? (Definitions) process.eContainer() : null;\n\n         // check object definitions is really bound\n         JavaSDM.ensure ( definitions != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(definitions.getRootElements().contains(process));\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object startEvent\n         JavaSDM.ensure ( _TmpObject instanceof StartEvent );\n         startEvent = (StartEvent) _TmpObject;\n\n         // check link flowElements from startEvent to process\n         JavaSDM.ensure (process.equals (startEvent.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to sequenceFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToSequenceFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToSequenceFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToSequenceFlow.next ();\n\n               // ensure correct type and really bound of object sequenceFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               sequenceFlow = (SequenceFlow) _TmpObject;\n               // check link sourceRef from sequenceFlow to startEvent\n               JavaSDM.ensure (startEvent.equals (sequenceFlow.getSourceRef ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_sequenceFlow_flowElements_741426 = sequenceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) sequenceFlow.eContainer() : null;\n\n                     // check object __DEC_sequenceFlow_flowElements_741426 is really bound\n                     JavaSDM.ensure ( __DEC_sequenceFlow_flowElements_741426 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_sequenceFlow_flowElements_741426.getFlowElements().contains(sequenceFlow));\n\n                     // check isomorphic binding between objects __DEC_sequenceFlow_flowElements_741426 and process \n                     JavaSDM.ensure ( !__DEC_sequenceFlow_flowElements_741426.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_startEvent_flowElements_999427 = startEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) startEvent.eContainer() : null;\n\n                     // check object __DEC_startEvent_flowElements_999427 is really bound\n                     JavaSDM.ensure ( __DEC_startEvent_flowElements_999427 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_startEvent_flowElements_999427.getFlowElements().contains(startEvent));\n\n                     // check isomorphic binding between objects __DEC_startEvent_flowElements_999427 and process \n                     JavaSDM.ensure ( !__DEC_startEvent_flowElements_999427.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_process_rootElements_536667 = process.eContainer() instanceof Definitions ? (Definitions) process.eContainer() : null;\n\n                     // check object __DEC_process_rootElements_536667 is really bound\n                     JavaSDM.ensure ( __DEC_process_rootElements_536667 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_process_rootElements_536667.getRootElements().contains(process));\n\n                     // check isomorphic binding between objects __DEC_process_rootElements_536667 and definitions \n                     JavaSDM.ensure ( !__DEC_process_rootElements_536667.equals (definitions) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link default from sequenceFlow\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(sequenceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link targetRef from startEvent to __DEC_startEvent_targetRef_59342\n                     fujaba__Success = false;\n\n                     fujaba__IterStartEventTo__DEC_startEvent_targetRef_59342 = new ArrayList(startEvent.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterStartEventTo__DEC_startEvent_targetRef_59342.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_startEvent_targetRef_59342 = (SequenceFlow) fujaba__IterStartEventTo__DEC_startEvent_targetRef_59342.next ();\n\n                           // check object __DEC_startEvent_targetRef_59342 is really bound\n                           JavaSDM.ensure ( __DEC_startEvent_targetRef_59342 != null );\n                           // check isomorphic binding between objects __DEC_startEvent_targetRef_59342 and sequenceFlow \n                           JavaSDM.ensure ( !__DEC_startEvent_targetRef_59342.equals (sequenceFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_flowElements is really bound\n                  JavaSDM.ensure ( _edge_flowElements != null );\n                  // check object definitions is really bound\n                  JavaSDM.ensure ( definitions != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check object sequenceFlow is really bound\n                  JavaSDM.ensure ( sequenceFlow != null );\n                  // check object startEvent is really bound\n                  JavaSDM.ensure ( startEvent != null );\n                  // check link flowElements from sequenceFlow to process\n                  JavaSDM.ensure (process.equals (sequenceFlow.eContainer()\n                  ));\n\n                  // check link flowElements from startEvent to process\n                  JavaSDM.ensure (process.equals (startEvent.eContainer()\n                  ));\n\n                  // check link rootElements from process to definitions\n                  JavaSDM.ensure (definitions.equals (process.eContainer()\n                  ));\n\n                  // check link sourceRef from sequenceFlow to startEvent\n                  JavaSDM.ensure (startEvent.equals (sequenceFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_flowElements to process\n                  JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                  ));\n\n                  // check link targetRef from sequenceFlow to startEvent\n                  JavaSDM.ensure (!(startEvent.equals (sequenceFlow.getTargetRef ()\n                  )));\n\n                  // check link trg from _edge_flowElements to startEvent\n                  JavaSDM.ensure (startEvent.equals (_edge_flowElements.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,definitions,process,startEvent,sequenceFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_2(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_sequenceFlow_flowElements_18115 = null;\n      FlowElementsContainer __DEC_startEvent_flowElements_728117 = null;\n      Definitions __DEC_process_rootElements_926013 = null;\n      Iterator fujaba__IterStartEventTo__DEC_startEvent_targetRef_811076 = null;\n      SequenceFlow __DEC_startEvent_targetRef_811076 = null;\n      Match match = null;\n      StartEvent startEvent = null;\n      SequenceFlow sequenceFlow = null;\n      Definitions definitions = null;\n      bpmn2.Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // bind object\n         definitions = process.eContainer() instanceof Definitions ? (Definitions) process.eContainer() : null;\n\n         // check object definitions is really bound\n         JavaSDM.ensure ( definitions != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(definitions.getRootElements().contains(process));\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object sequenceFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         sequenceFlow = (SequenceFlow) _TmpObject;\n\n         // check link flowElements from sequenceFlow to process\n         JavaSDM.ensure (process.equals (sequenceFlow.eContainer()\n         ));\n\n         // bind object\n         _TmpObject = sequenceFlow.getSourceRef ();\n\n         // ensure correct type and really bound of object startEvent\n         JavaSDM.ensure ( _TmpObject instanceof StartEvent );\n         startEvent = (StartEvent) _TmpObject;\n\n         // check link flowElements from startEvent to process\n         JavaSDM.ensure (process.equals (startEvent.eContainer()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_sequenceFlow_flowElements_18115 = sequenceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) sequenceFlow.eContainer() : null;\n\n               // check object __DEC_sequenceFlow_flowElements_18115 is really bound\n               JavaSDM.ensure ( __DEC_sequenceFlow_flowElements_18115 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_sequenceFlow_flowElements_18115.getFlowElements().contains(sequenceFlow));\n\n               // check isomorphic binding between objects __DEC_sequenceFlow_flowElements_18115 and process \n               JavaSDM.ensure ( !__DEC_sequenceFlow_flowElements_18115.equals (process) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_startEvent_flowElements_728117 = startEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) startEvent.eContainer() : null;\n\n               // check object __DEC_startEvent_flowElements_728117 is really bound\n               JavaSDM.ensure ( __DEC_startEvent_flowElements_728117 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_startEvent_flowElements_728117.getFlowElements().contains(startEvent));\n\n               // check isomorphic binding between objects __DEC_startEvent_flowElements_728117 and process \n               JavaSDM.ensure ( !__DEC_startEvent_flowElements_728117.equals (process) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_process_rootElements_926013 = process.eContainer() instanceof Definitions ? (Definitions) process.eContainer() : null;\n\n               // check object __DEC_process_rootElements_926013 is really bound\n               JavaSDM.ensure ( __DEC_process_rootElements_926013 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_process_rootElements_926013.getRootElements().contains(process));\n\n               // check isomorphic binding between objects __DEC_process_rootElements_926013 and definitions \n               JavaSDM.ensure ( !__DEC_process_rootElements_926013.equals (definitions) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // negative check for link default from sequenceFlow\n            JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(sequenceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link targetRef from startEvent to __DEC_startEvent_targetRef_811076\n               fujaba__Success = false;\n\n               fujaba__IterStartEventTo__DEC_startEvent_targetRef_811076 = new ArrayList(startEvent.getIncoming()).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterStartEventTo__DEC_startEvent_targetRef_811076.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_startEvent_targetRef_811076 = (SequenceFlow) fujaba__IterStartEventTo__DEC_startEvent_targetRef_811076.next ();\n\n                     // check object __DEC_startEvent_targetRef_811076 is really bound\n                     JavaSDM.ensure ( __DEC_startEvent_targetRef_811076 != null );\n                     // check isomorphic binding between objects __DEC_startEvent_targetRef_811076 and sequenceFlow \n                     JavaSDM.ensure ( !__DEC_startEvent_targetRef_811076.equals (sequenceFlow) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check object _edge_flowElements is really bound\n            JavaSDM.ensure ( _edge_flowElements != null );\n            // check object definitions is really bound\n            JavaSDM.ensure ( definitions != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check object sequenceFlow is really bound\n            JavaSDM.ensure ( sequenceFlow != null );\n            // check object startEvent is really bound\n            JavaSDM.ensure ( startEvent != null );\n            // check link flowElements from sequenceFlow to process\n            JavaSDM.ensure (process.equals (sequenceFlow.eContainer()\n            ));\n\n            // check link flowElements from startEvent to process\n            JavaSDM.ensure (process.equals (startEvent.eContainer()\n            ));\n\n            // check link rootElements from process to definitions\n            JavaSDM.ensure (definitions.equals (process.eContainer()\n            ));\n\n            // check link sourceRef from sequenceFlow to startEvent\n            JavaSDM.ensure (startEvent.equals (sequenceFlow.getSourceRef ()\n            ));\n\n            // check link src from _edge_flowElements to process\n            JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n            ));\n\n            // check link targetRef from sequenceFlow to startEvent\n            JavaSDM.ensure (!(startEvent.equals (sequenceFlow.getTargetRef ()\n            )));\n\n            // check link trg from _edge_flowElements to sequenceFlow\n            JavaSDM.ensure (sequenceFlow.equals (_edge_flowElements.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_FWD(match,definitions,process,startEvent,sequenceFlow);\n            if (fujaba__Success)\n            {\n               // statement node \'Ensure that the correct types of elements are matched\'\n               fujaba__Success = this.checkTypes_FWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_3(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      PackageDeclaration __DEC_actor_actors_366519 = null;\n      UseCase __DEC_basicFlow_flows_73772 = null;\n      PackageDeclaration __DEC_useCase_useCases_756214 = null;\n      Match match = null;\n      Iterator fujaba__IterPackageDeclarationToActor = null;\n      Actor actor = null;\n      PackageDeclaration packageDeclaration = null;\n      BasicFlow basicFlow = null;\n      UseCase useCase = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flows is really bound\n         JavaSDM.ensure ( _edge_flows != null );\n         // bind object\n         _TmpObject = _edge_flows.getSrc ();\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flows.getTrg ();\n\n         // ensure correct type and really bound of object basicFlow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         basicFlow = (BasicFlow) _TmpObject;\n\n         // check link flows from basicFlow to useCase\n         JavaSDM.ensure (useCase.equals (basicFlow.eContainer()\n         ));\n\n         // bind object\n         packageDeclaration = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase.eContainer() : null;\n\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(packageDeclaration.getUseCases().contains(useCase));\n\n         // iterate to-many link actors from packageDeclaration to actor\n         fujaba__Success = false;\n\n         fujaba__IterPackageDeclarationToActor = new ArrayList(packageDeclaration.getActors()).iterator ();\n\n         while ( fujaba__IterPackageDeclarationToActor.hasNext () )\n         {\n            try\n            {\n               actor = (Actor) fujaba__IterPackageDeclarationToActor.next ();\n\n               // check object actor is really bound\n               JavaSDM.ensure ( actor != null );\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_actor_actors_366519 = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor.eContainer() : null;\n\n                     // check object __DEC_actor_actors_366519 is really bound\n                     JavaSDM.ensure ( __DEC_actor_actors_366519 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_actor_actors_366519.getActors().contains(actor));\n\n                     // check isomorphic binding between objects __DEC_actor_actors_366519 and packageDeclaration \n                     JavaSDM.ensure ( !__DEC_actor_actors_366519.equals (packageDeclaration) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_basicFlow_flows_73772 = basicFlow.eContainer() instanceof UseCase ? (UseCase) basicFlow.eContainer() : null;\n\n                     // check object __DEC_basicFlow_flows_73772 is really bound\n                     JavaSDM.ensure ( __DEC_basicFlow_flows_73772 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_basicFlow_flows_73772.getFlows().contains(basicFlow));\n\n                     // check isomorphic binding between objects __DEC_basicFlow_flows_73772 and useCase \n                     JavaSDM.ensure ( !__DEC_basicFlow_flows_73772.equals (useCase) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_useCase_useCases_756214 = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase.eContainer() : null;\n\n                     // check object __DEC_useCase_useCases_756214 is really bound\n                     JavaSDM.ensure ( __DEC_useCase_useCases_756214 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_useCase_useCases_756214.getUseCases().contains(useCase));\n\n                     // check isomorphic binding between objects __DEC_useCase_useCases_756214 and packageDeclaration \n                     JavaSDM.ensure ( !__DEC_useCase_useCases_756214.equals (packageDeclaration) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_flows is really bound\n                  JavaSDM.ensure ( _edge_flows != null );\n                  // check object actor is really bound\n                  JavaSDM.ensure ( actor != null );\n                  // check object basicFlow is really bound\n                  JavaSDM.ensure ( basicFlow != null );\n                  // check object packageDeclaration is really bound\n                  JavaSDM.ensure ( packageDeclaration != null );\n                  // check object useCase is really bound\n                  JavaSDM.ensure ( useCase != null );\n                  // check link actors from actor to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                  ));\n\n                  // check link flows from basicFlow to useCase\n                  JavaSDM.ensure (useCase.equals (basicFlow.eContainer()\n                  ));\n\n                  // check link src from _edge_flows to useCase\n                  JavaSDM.ensure (useCase.equals (_edge_flows.getSrc ()\n                  ));\n\n                  // check link trg from _edge_flows to basicFlow\n                  JavaSDM.ensure (basicFlow.equals (_edge_flows.getTrg ()\n                  ));\n\n                  // check link useCases from useCase to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,packageDeclaration,useCase,basicFlow,actor);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_3(EMoflonEdge _edge_flows);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_sequenceFlow_flowElements_593425 = null;\n      FlowElementsContainer __DEC_startEvent_flowElements_863212 = null;\n      Definitions __DEC_process_rootElements_319316 = null;\n      Iterator fujaba__IterStartEventTo__DEC_startEvent_targetRef_382446 = null;\n      SequenceFlow __DEC_startEvent_targetRef_382446 = null;\n      Match match = null;\n      Definitions definitions = null;\n      bpmn2.Process process = null;\n      StartEvent startEvent = null;\n      SequenceFlow sequenceFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sourceRef is really bound\n         JavaSDM.ensure ( _edge_sourceRef != null );\n         // bind object\n         _TmpObject = _edge_sourceRef.getSrc ();\n\n         // ensure correct type and really bound of object sequenceFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         sequenceFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_sourceRef.getTrg ();\n\n         // ensure correct type and really bound of object startEvent\n         JavaSDM.ensure ( _TmpObject instanceof StartEvent );\n         startEvent = (StartEvent) _TmpObject;\n\n         // bind object\n         _TmpObject = startEvent.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) startEvent.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(startEvent));\n\n         // check link flowElements from sequenceFlow to process\n         JavaSDM.ensure (process.equals (sequenceFlow.eContainer()\n         ));\n\n         // bind object\n         definitions = process.eContainer() instanceof Definitions ? (Definitions) process.eContainer() : null;\n\n         // check object definitions is really bound\n         JavaSDM.ensure ( definitions != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(definitions.getRootElements().contains(process));\n\n         // check link sourceRef from sequenceFlow to startEvent\n         JavaSDM.ensure (startEvent.equals (sequenceFlow.getSourceRef ()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_sequenceFlow_flowElements_593425 = sequenceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) sequenceFlow.eContainer() : null;\n\n               // check object __DEC_sequenceFlow_flowElements_593425 is really bound\n               JavaSDM.ensure ( __DEC_sequenceFlow_flowElements_593425 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_sequenceFlow_flowElements_593425.getFlowElements().contains(sequenceFlow));\n\n               // check isomorphic binding between objects __DEC_sequenceFlow_flowElements_593425 and process \n               JavaSDM.ensure ( !__DEC_sequenceFlow_flowElements_593425.equals (process) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_startEvent_flowElements_863212 = startEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) startEvent.eContainer() : null;\n\n               // check object __DEC_startEvent_flowElements_863212 is really bound\n               JavaSDM.ensure ( __DEC_startEvent_flowElements_863212 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_startEvent_flowElements_863212.getFlowElements().contains(startEvent));\n\n               // check isomorphic binding between objects __DEC_startEvent_flowElements_863212 and process \n               JavaSDM.ensure ( !__DEC_startEvent_flowElements_863212.equals (process) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_process_rootElements_319316 = process.eContainer() instanceof Definitions ? (Definitions) process.eContainer() : null;\n\n               // check object __DEC_process_rootElements_319316 is really bound\n               JavaSDM.ensure ( __DEC_process_rootElements_319316 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_process_rootElements_319316.getRootElements().contains(process));\n\n               // check isomorphic binding between objects __DEC_process_rootElements_319316 and definitions \n               JavaSDM.ensure ( !__DEC_process_rootElements_319316.equals (definitions) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // negative check for link default from sequenceFlow\n            JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(sequenceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link targetRef from startEvent to __DEC_startEvent_targetRef_382446\n               fujaba__Success = false;\n\n               fujaba__IterStartEventTo__DEC_startEvent_targetRef_382446 = new ArrayList(startEvent.getIncoming()).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterStartEventTo__DEC_startEvent_targetRef_382446.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_startEvent_targetRef_382446 = (SequenceFlow) fujaba__IterStartEventTo__DEC_startEvent_targetRef_382446.next ();\n\n                     // check object __DEC_startEvent_targetRef_382446 is really bound\n                     JavaSDM.ensure ( __DEC_startEvent_targetRef_382446 != null );\n                     // check isomorphic binding between objects __DEC_startEvent_targetRef_382446 and sequenceFlow \n                     JavaSDM.ensure ( !__DEC_startEvent_targetRef_382446.equals (sequenceFlow) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check object _edge_sourceRef is really bound\n            JavaSDM.ensure ( _edge_sourceRef != null );\n            // check object definitions is really bound\n            JavaSDM.ensure ( definitions != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check object sequenceFlow is really bound\n            JavaSDM.ensure ( sequenceFlow != null );\n            // check object startEvent is really bound\n            JavaSDM.ensure ( startEvent != null );\n            // check link flowElements from sequenceFlow to process\n            JavaSDM.ensure (process.equals (sequenceFlow.eContainer()\n            ));\n\n            // check link flowElements from startEvent to process\n            JavaSDM.ensure (process.equals (startEvent.eContainer()\n            ));\n\n            // check link rootElements from process to definitions\n            JavaSDM.ensure (definitions.equals (process.eContainer()\n            ));\n\n            // check link sourceRef from sequenceFlow to startEvent\n            JavaSDM.ensure (startEvent.equals (sequenceFlow.getSourceRef ()\n            ));\n\n            // check link src from _edge_sourceRef to sequenceFlow\n            JavaSDM.ensure (sequenceFlow.equals (_edge_sourceRef.getSrc ()\n            ));\n\n            // check link targetRef from sequenceFlow to startEvent\n            JavaSDM.ensure (!(startEvent.equals (sequenceFlow.getTargetRef ()\n            )));\n\n            // check link trg from _edge_sourceRef to startEvent\n            JavaSDM.ensure (startEvent.equals (_edge_sourceRef.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_FWD(match,definitions,process,startEvent,sequenceFlow);\n            if (fujaba__Success)\n            {\n               // statement node \'Ensure that the correct types of elements are matched\'\n               fujaba__Success = this.checkTypes_FWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_4(EMoflonEdge _edge_sourceRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_sequenceFlow_flowElements_987780 = null;\n      FlowElementsContainer __DEC_startEvent_flowElements_952416 = null;\n      Definitions __DEC_process_rootElements_908645 = null;\n      Iterator fujaba__IterStartEventTo__DEC_startEvent_targetRef_944268 = null;\n      SequenceFlow __DEC_startEvent_targetRef_944268 = null;\n      Match match = null;\n      Iterator fujaba__IterSequenceFlowTo_edge_sourceRef = null;\n      EMoflonEdge _edge_sourceRef = null;\n      Definitions definitions = null;\n      bpmn2.Process process = null;\n      SequenceFlow sequenceFlow = null;\n      StartEvent startEvent = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_outgoing is really bound\n         JavaSDM.ensure ( _edge_outgoing != null );\n         // bind object\n         _TmpObject = _edge_outgoing.getSrc ();\n\n         // ensure correct type and really bound of object startEvent\n         JavaSDM.ensure ( _TmpObject instanceof StartEvent );\n         startEvent = (StartEvent) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_outgoing.getTrg ();\n\n         // ensure correct type and really bound of object sequenceFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         sequenceFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = sequenceFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) sequenceFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(sequenceFlow));\n\n         // check link flowElements from startEvent to process\n         JavaSDM.ensure (process.equals (startEvent.eContainer()\n         ));\n\n         // bind object\n         definitions = process.eContainer() instanceof Definitions ? (Definitions) process.eContainer() : null;\n\n         // check object definitions is really bound\n         JavaSDM.ensure ( definitions != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(definitions.getRootElements().contains(process));\n\n         // check link sourceRef from sequenceFlow to startEvent\n         JavaSDM.ensure (startEvent.equals (sequenceFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link src from sequenceFlow to _edge_sourceRef\n         fujaba__Success = false;\n\n         fujaba__IterSequenceFlowTo_edge_sourceRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(sequenceFlow,EMoflonEdge.class,\"src\")).iterator ();\n\n         while ( fujaba__IterSequenceFlowTo_edge_sourceRef.hasNext () )\n         {\n            try\n            {\n               _edge_sourceRef = (EMoflonEdge) fujaba__IterSequenceFlowTo_edge_sourceRef.next ();\n\n               // check object _edge_sourceRef is really bound\n               JavaSDM.ensure ( _edge_sourceRef != null );\n               // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n               JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n               // check link trg from _edge_sourceRef to startEvent\n               JavaSDM.ensure (startEvent.equals (_edge_sourceRef.getTrg ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_sequenceFlow_flowElements_987780 = sequenceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) sequenceFlow.eContainer() : null;\n\n                     // check object __DEC_sequenceFlow_flowElements_987780 is really bound\n                     JavaSDM.ensure ( __DEC_sequenceFlow_flowElements_987780 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_sequenceFlow_flowElements_987780.getFlowElements().contains(sequenceFlow));\n\n                     // check isomorphic binding between objects __DEC_sequenceFlow_flowElements_987780 and process \n                     JavaSDM.ensure ( !__DEC_sequenceFlow_flowElements_987780.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_startEvent_flowElements_952416 = startEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) startEvent.eContainer() : null;\n\n                     // check object __DEC_startEvent_flowElements_952416 is really bound\n                     JavaSDM.ensure ( __DEC_startEvent_flowElements_952416 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_startEvent_flowElements_952416.getFlowElements().contains(startEvent));\n\n                     // check isomorphic binding between objects __DEC_startEvent_flowElements_952416 and process \n                     JavaSDM.ensure ( !__DEC_startEvent_flowElements_952416.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_process_rootElements_908645 = process.eContainer() instanceof Definitions ? (Definitions) process.eContainer() : null;\n\n                     // check object __DEC_process_rootElements_908645 is really bound\n                     JavaSDM.ensure ( __DEC_process_rootElements_908645 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_process_rootElements_908645.getRootElements().contains(process));\n\n                     // check isomorphic binding between objects __DEC_process_rootElements_908645 and definitions \n                     JavaSDM.ensure ( !__DEC_process_rootElements_908645.equals (definitions) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link default from sequenceFlow\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(sequenceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link targetRef from startEvent to __DEC_startEvent_targetRef_944268\n                     fujaba__Success = false;\n\n                     fujaba__IterStartEventTo__DEC_startEvent_targetRef_944268 = new ArrayList(startEvent.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterStartEventTo__DEC_startEvent_targetRef_944268.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_startEvent_targetRef_944268 = (SequenceFlow) fujaba__IterStartEventTo__DEC_startEvent_targetRef_944268.next ();\n\n                           // check object __DEC_startEvent_targetRef_944268 is really bound\n                           JavaSDM.ensure ( __DEC_startEvent_targetRef_944268 != null );\n                           // check isomorphic binding between objects __DEC_startEvent_targetRef_944268 and sequenceFlow \n                           JavaSDM.ensure ( !__DEC_startEvent_targetRef_944268.equals (sequenceFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_outgoing is really bound\n                  JavaSDM.ensure ( _edge_outgoing != null );\n                  // check object _edge_sourceRef is really bound\n                  JavaSDM.ensure ( _edge_sourceRef != null );\n                  // check object definitions is really bound\n                  JavaSDM.ensure ( definitions != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check object sequenceFlow is really bound\n                  JavaSDM.ensure ( sequenceFlow != null );\n                  // check object startEvent is really bound\n                  JavaSDM.ensure ( startEvent != null );\n                  // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                  JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                  // check link flowElements from sequenceFlow to process\n                  JavaSDM.ensure (process.equals (sequenceFlow.eContainer()\n                  ));\n\n                  // check link flowElements from startEvent to process\n                  JavaSDM.ensure (process.equals (startEvent.eContainer()\n                  ));\n\n                  // check link rootElements from process to definitions\n                  JavaSDM.ensure (definitions.equals (process.eContainer()\n                  ));\n\n                  // check link sourceRef from sequenceFlow to startEvent\n                  JavaSDM.ensure (startEvent.equals (sequenceFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_outgoing to startEvent\n                  JavaSDM.ensure (startEvent.equals (_edge_outgoing.getSrc ()\n                  ));\n\n                  // check link src from _edge_sourceRef to sequenceFlow\n                  JavaSDM.ensure (sequenceFlow.equals (_edge_sourceRef.getSrc ()\n                  ));\n\n                  // check link targetRef from sequenceFlow to startEvent\n                  JavaSDM.ensure (!(startEvent.equals (sequenceFlow.getTargetRef ()\n                  )));\n\n                  // check link trg from _edge_outgoing to sequenceFlow\n                  JavaSDM.ensure (sequenceFlow.equals (_edge_outgoing.getTrg ()\n                  ));\n\n                  // check link trg from _edge_sourceRef to startEvent\n                  JavaSDM.ensure (startEvent.equals (_edge_sourceRef.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,definitions,process,startEvent,sequenceFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_5(EMoflonEdge _edge_outgoing);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // ProcessToUseCaseRule
