/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackage;
import BpmnToUseCaseIntegration.DocRootToUCModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.ICEToAltFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SeqFlowToAltFlowAlt;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGLanguage.modelgenerator.RuleEntryContainer;
import TGGLanguage.modelgenerator.RuleEntryList;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.ModelgeneratorRuleResult;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.Event;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.FlowNode;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;
import bpmn2.Task;
import bpmn2.UserTask;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Service Task To Step After PG Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getServiceTaskToStepAfterPGRule()
 * @model
 * @generated
 */
public interface ServiceTaskToStepAfterPGRule extends AbstractRule,
		FirstServiceTaskToStepRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __inFlow_targetRef_task = null;\n      EMoflonEdge __outFlow_sourceRef_task = null;\n      EMoflonEdge __task_incoming_inFlow = null;\n      EMoflonEdge __lane_flowNodeRefs_task = null;\n      EMoflonEdge __task_outgoing_outFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __process_flowElements_flowNode = null;\n      EMoflonEdge __inFlow_sourceRef_flowNode = null;\n      EMoflonEdge __flowNode_outgoing_inFlow = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object flowNode is really bound\n         JavaSDM.ensure ( flowNode != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object task is really bound\n         JavaSDM.ensure ( task != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,flowNode,process,task,inFlow,outFlow,laneSet,lane));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object flowNode is really bound\n            JavaSDM.ensure ( flowNode != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object lane is really bound\n            JavaSDM.ensure ( lane != null );\n            // check object laneSet is really bound\n            JavaSDM.ensure ( laneSet != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check object task is really bound\n            JavaSDM.ensure ( task != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __inFlow_targetRef_task\n            __inFlow_targetRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __outFlow_sourceRef_task\n            __outFlow_sourceRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __task_incoming_inFlow\n            __task_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __lane_flowNodeRefs_task\n            __lane_flowNodeRefs_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __task_outgoing_outFlow\n            __task_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_outFlow\n            __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __inFlow_targetRef_task\n            __inFlow_targetRef_task.setName (\"targetRef\");\n            // assign attribute __task_incoming_inFlow\n            __task_incoming_inFlow.setName (\"incoming\");\n            // assign attribute __process_flowElements_outFlow\n            __process_flowElements_outFlow.setName (\"flowElements\");\n            // assign attribute __outFlow_sourceRef_task\n            __outFlow_sourceRef_task.setName (\"sourceRef\");\n            // assign attribute __task_outgoing_outFlow\n            __task_outgoing_outFlow.setName (\"outgoing\");\n            // assign attribute __lane_flowNodeRefs_task\n            __lane_flowNodeRefs_task.setName (\"flowNodeRefs\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,outFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__inFlow_targetRef_task,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,task,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__outFlow_sourceRef_task,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__task_incoming_inFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__lane_flowNodeRefs_task,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__task_outgoing_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            __process_flowElements_outFlow.setSrc( process);\n\n\n            // create link\n            __lane_flowNodeRefs_task.setTrg( task);\n\n\n            // create link\n            __inFlow_targetRef_task.setTrg( task);\n\n\n            // create link\n            __task_outgoing_outFlow.setSrc( task);\n\n\n            // create link\n            __task_incoming_inFlow.setSrc( task);\n\n\n            // create link\n            __outFlow_sourceRef_task.setTrg( task);\n\n\n            // create link\n            __inFlow_targetRef_task.setSrc( inFlow);\n\n\n            // create link\n            __task_incoming_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __task_outgoing_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __process_flowElements_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __outFlow_sourceRef_task.setSrc( outFlow);\n\n\n            // create link\n            __lane_flowNodeRefs_task.setSrc( lane);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object flowNode is really bound\n            JavaSDM.ensure ( flowNode != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object lane is really bound\n            JavaSDM.ensure ( lane != null );\n            // check object laneSet is really bound\n            JavaSDM.ensure ( laneSet != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check object task is really bound\n            JavaSDM.ensure ( task != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __process_laneSets_laneSet\n            __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __laneSet_lanes_lane\n            __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_inFlow\n            __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_flowNode\n            __process_flowElements_flowNode = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __inFlow_sourceRef_flowNode\n            __inFlow_sourceRef_flowNode = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __flowNode_outgoing_inFlow\n            __flowNode_outgoing_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_flowNode\n            __process_flowElements_flowNode.setName (\"flowElements\");\n            // assign attribute __process_laneSets_laneSet\n            __process_laneSets_laneSet.setName (\"laneSets\");\n            // assign attribute __process_flowElements_inFlow\n            __process_flowElements_inFlow.setName (\"flowElements\");\n            // assign attribute __laneSet_lanes_lane\n            __laneSet_lanes_lane.setName (\"lanes\");\n            // assign attribute __inFlow_sourceRef_flowNode\n            __inFlow_sourceRef_flowNode.setName (\"sourceRef\");\n            // assign attribute __flowNode_outgoing_inFlow\n            __flowNode_outgoing_inFlow.setName (\"outgoing\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_laneSets_laneSet,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__laneSet_lanes_lane,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_inFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,lane,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flowNode,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,inFlow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,process,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_flowNode,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__inFlow_sourceRef_flowNode,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flowNode_outgoing_inFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,laneSet,\"contextNodes\");\n\n            // create link\n            __flowNode_outgoing_inFlow.setSrc( flowNode);\n\n\n            // create link\n            __inFlow_sourceRef_flowNode.setTrg( flowNode);\n\n\n            // create link\n            __process_flowElements_flowNode.setTrg( flowNode);\n\n\n            // create link\n            __process_flowElements_inFlow.setSrc( process);\n\n\n            // create link\n            __process_flowElements_flowNode.setSrc( process);\n\n\n            // create link\n            __process_laneSets_laneSet.setSrc( process);\n\n\n            // create link\n            __flowNode_outgoing_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __inFlow_sourceRef_flowNode.setSrc( inFlow);\n\n\n            // create link\n            __process_flowElements_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __laneSet_lanes_lane.setSrc( laneSet);\n\n\n            // create link\n            __process_laneSets_laneSet.setTrg( laneSet);\n\n\n            // create link\n            __laneSet_lanes_lane.setTrg( lane);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,flowNode,process,task,inFlow,outFlow,laneSet,lane);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, ParallelGateway flowNode,
			bpmn2.Process process, ServiceTask task, SequenceFlow inFlow,
			SequenceFlow outFlow, LaneSet laneSet, Lane lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      ParallelGateway flowNode = null;\n      SequenceFlow inFlow = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      SequenceFlow outFlow = null;\n      bpmn2.Process process = null;\n      ServiceTask task = null;\n      EMoflonEdge __flowNode_outgoing_inFlow = null;\n      EMoflonEdge __inFlow_sourceRef_flowNode = null;\n      EMoflonEdge __process_flowElements_flowNode = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __processToActor_source_process = null;\n      EMoflonEdge __processToActor_target_actor = null;\n      EMoflonEdge __task_incoming_inFlow = null;\n      EMoflonEdge __lane_flowNodeRefs_task = null;\n      EMoflonEdge __outFlow_sourceRef_task = null;\n      EMoflonEdge __task_outgoing_outFlow = null;\n      EMoflonEdge __inFlow_targetRef_task = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      CSP csp = null;\n      Actor actor = null;\n      Iterator fujaba__IterProcessToProcessToActor = null;\n      ProcessToActor processToActor = null;\n      Flow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ServiceTaskToStepAfterPGRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"flowNode\"));\n\n         // ensure correct type and really bound of object flowNode\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         flowNode = (ParallelGateway) _TmpObject;\n         _TmpObject = (match.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (match.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (match.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         _TmpObject = (match.getObject(\"task\"));\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof ServiceTask );\n         task = (ServiceTask) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link source from inFlow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n         while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // bind object\n               flow = inFlowToFlow.getTarget ();\n\n               // check object flow is really bound\n               JavaSDM.ensure ( flow != null );\n\n               // iterate to-many link source from process to processToActor\n               fujaba__Success = false;\n\n               fujaba__IterProcessToProcessToActor = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(process,ProcessToActor.class,\"source\")).iterator ();\n\n               while ( fujaba__IterProcessToProcessToActor.hasNext () )\n               {\n                  try\n                  {\n                     processToActor = (ProcessToActor) fujaba__IterProcessToProcessToActor.next ();\n\n                     // check object processToActor is really bound\n                     JavaSDM.ensure ( processToActor != null );\n                     // bind object\n                     actor = processToActor.getTarget ();\n\n                     // check object actor is really bound\n                     JavaSDM.ensure ( actor != null );\n\n                     // story node \'find context\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object actor is really bound\n                        JavaSDM.ensure ( actor != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object flowNode is really bound\n                        JavaSDM.ensure ( flowNode != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object inFlowToFlow is really bound\n                        JavaSDM.ensure ( inFlowToFlow != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object laneSet is really bound\n                        JavaSDM.ensure ( laneSet != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check object processToActor is really bound\n                        JavaSDM.ensure ( processToActor != null );\n                        // check object task is really bound\n                        JavaSDM.ensure ( task != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from flowNode to process\n                        JavaSDM.ensure (process.equals (flowNode.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link incoming from inFlow to task\n                        JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link laneSets from laneSet to process\n                        JavaSDM.ensure (process.equals (laneSet.eContainer()\n                        ));\n\n                        // check link lanes from lane to laneSet\n                        JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                        ));\n\n                        // check link outgoing from inFlow to flowNode\n                        JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                        ));\n\n                        // check link outgoing from outFlow to task\n                        JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link source from inFlowToFlow to inFlow\n                        JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                        ));\n\n                        // check link source from processToActor to process\n                        JavaSDM.ensure (process.equals (processToActor.getSource ()\n                        ));\n\n                        // check link target from inFlowToFlow to flow\n                        JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                        ));\n\n                        // check link target from processToActor to actor\n                        JavaSDM.ensure (actor.equals (processToActor.getTarget ()\n                        ));\n\n                        // check link flowNodeRefs from lane to task\n                        JavaSDM.ensure (lane.getFlowNodeRefs ().contains (task));\n\n                        // create object __flowNode_outgoing_inFlow\n                        __flowNode_outgoing_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlow_sourceRef_flowNode\n                        __inFlow_sourceRef_flowNode = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_flowElements_flowNode\n                        __process_flowElements_flowNode = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object isApplicableMatch\n                        isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                        // create object __process_flowElements_outFlow\n                        __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_laneSets_laneSet\n                        __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_flowElements_inFlow\n                        __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __processToActor_source_process\n                        __processToActor_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __processToActor_target_actor\n                        __processToActor_target_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __task_incoming_inFlow\n                        __task_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __lane_flowNodeRefs_task\n                        __lane_flowNodeRefs_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __outFlow_sourceRef_task\n                        __outFlow_sourceRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __task_outgoing_outFlow\n                        __task_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlow_targetRef_task\n                        __inFlow_targetRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlowToFlow_source_inFlow\n                        __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlowToFlow_target_flow\n                        __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __laneSet_lanes_lane\n                        __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // assign attribute __processToActor_source_process\n                        __processToActor_source_process.setName (\"source\");\n                        // assign attribute __processToActor_target_actor\n                        __processToActor_target_actor.setName (\"target\");\n                        // assign attribute __inFlow_targetRef_task\n                        __inFlow_targetRef_task.setName (\"targetRef\");\n                        // assign attribute __task_incoming_inFlow\n                        __task_incoming_inFlow.setName (\"incoming\");\n                        // assign attribute __process_flowElements_flowNode\n                        __process_flowElements_flowNode.setName (\"flowElements\");\n                        // assign attribute __process_laneSets_laneSet\n                        __process_laneSets_laneSet.setName (\"laneSets\");\n                        // assign attribute __process_flowElements_inFlow\n                        __process_flowElements_inFlow.setName (\"flowElements\");\n                        // assign attribute __process_flowElements_outFlow\n                        __process_flowElements_outFlow.setName (\"flowElements\");\n                        // assign attribute __outFlow_sourceRef_task\n                        __outFlow_sourceRef_task.setName (\"sourceRef\");\n                        // assign attribute __task_outgoing_outFlow\n                        __task_outgoing_outFlow.setName (\"outgoing\");\n                        // assign attribute __inFlowToFlow_source_inFlow\n                        __inFlowToFlow_source_inFlow.setName (\"source\");\n                        // assign attribute __inFlowToFlow_target_flow\n                        __inFlowToFlow_target_flow.setName (\"target\");\n                        // assign attribute __laneSet_lanes_lane\n                        __laneSet_lanes_lane.setName (\"lanes\");\n                        // assign attribute __lane_flowNodeRefs_task\n                        __lane_flowNodeRefs_task.setName (\"flowNodeRefs\");\n                        // assign attribute __inFlow_sourceRef_flowNode\n                        __inFlow_sourceRef_flowNode.setName (\"sourceRef\");\n                        // assign attribute __flowNode_outgoing_inFlow\n                        __flowNode_outgoing_inFlow.setName (\"outgoing\");\n\n                        // create link\n                        __flowNode_outgoing_inFlow.setSrc( flowNode);\n\n\n                        // create link\n                        __inFlow_sourceRef_flowNode.setTrg( flowNode);\n\n\n                        // create link\n                        __process_flowElements_flowNode.setTrg( flowNode);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(flowNode);\n\n\n                        // create link\n                        __process_flowElements_outFlow.setSrc( process);\n\n\n                        // create link\n                        __process_laneSets_laneSet.setSrc( process);\n\n\n                        // create link\n                        __process_flowElements_inFlow.setSrc( process);\n\n\n                        // create link\n                        __processToActor_source_process.setTrg( process);\n\n\n                        // create link\n                        __process_flowElements_flowNode.setSrc( process);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(process);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(actor);\n\n\n                        // create link\n                        __processToActor_target_actor.setTrg( actor);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(processToActor);\n\n\n                        // create link\n                        __processToActor_target_actor.setSrc( processToActor);\n\n\n                        // create link\n                        __processToActor_source_process.setSrc( processToActor);\n\n\n                        // create link\n                        __task_incoming_inFlow.setSrc( task);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(task);\n\n\n                        // create link\n                        __lane_flowNodeRefs_task.setTrg( task);\n\n\n                        // create link\n                        __outFlow_sourceRef_task.setTrg( task);\n\n\n                        // create link\n                        __task_outgoing_outFlow.setSrc( task);\n\n\n                        // create link\n                        __inFlow_targetRef_task.setTrg( task);\n\n\n                        // create link\n                        __inFlow_targetRef_task.setSrc( inFlow);\n\n\n                        // create link\n                        __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __task_incoming_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __flowNode_outgoing_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __inFlow_sourceRef_flowNode.setSrc( inFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                        // create link\n                        __task_outgoing_outFlow.setTrg( outFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(outFlow);\n\n\n                        // create link\n                        __outFlow_sourceRef_task.setSrc( outFlow);\n\n\n                        // create link\n                        __process_flowElements_outFlow.setTrg( outFlow);\n\n\n                        // create link\n                        __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                        // create link\n                        __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(flow);\n\n\n                        // create link\n                        __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                        // create link\n                        __process_laneSets_laneSet.setTrg( laneSet);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(laneSet);\n\n\n                        // create link\n                        __laneSet_lanes_lane.setSrc( laneSet);\n\n\n                        // create link\n                        __lane_flowNodeRefs_task.setSrc( lane);\n\n\n                        // create link\n                        __laneSet_lanes_lane.setTrg( lane);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(lane);\n\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_flowNode,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__task_outgoing_outFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToActor_source_process,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_task,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__outFlow_sourceRef_task,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_outFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowNode_outgoing_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToActor_target_actor,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneSet_lanes_lane,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_laneSets_laneSet,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__lane_flowNodeRefs_task,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_sourceRef_flowNode,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__task_incoming_inFlow,\"allContextElements\");\n                        // story node \'solve CSP\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,flowNode,process,actor,processToActor,task,inFlow,outFlow,inFlowToFlow,flow,laneSet,lane));\n\n                           // ensure correct type and really bound of object csp\n                           JavaSDM.ensure ( _TmpObject instanceof CSP );\n                           csp = (CSP) _TmpObject;\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        // statement node \'check CSP\'\n                        fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                        if (fujaba__Success)\n                        {\n                           // story node \'add match to rule result\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object isApplicableMatch is really bound\n                              JavaSDM.ensure ( isApplicableMatch != null );\n                              // check object ruleresult is really bound\n                              JavaSDM.ensure ( ruleresult != null );\n                              // assign attribute ruleresult\n                              ruleresult.setSuccess (true);\n                              // assign attribute isApplicableMatch\n                              isApplicableMatch.setRuleName (\"ServiceTaskToStepAfterPGRule\");\n\n                              // create link\n                              isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      Flow flow = null;\n      ParallelGateway flowNode = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      SequenceFlow outFlow = null;\n      bpmn2.Process process = null;\n      ProcessToActor processToActor = null;\n      ServiceTask task = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      NormalStep normalStep = null;\n      FlowNodeToStep taskToNormalStep = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToFlow = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __outFlow_sourceRef_task = null;\n      EMoflonEdge outFlowToNormalStep__source__outFlow = null;\n      EMoflonEdge taskToNormalStep__source__task = null;\n      EMoflonEdge __task_incoming_inFlow = null;\n      EMoflonEdge __task_outgoing_outFlow = null;\n      EMoflonEdge taskToNormalStep__target__normalStep = null;\n      EMoflonEdge flow__steps__normalStep = null;\n      EMoflonEdge normalStep__actor__actor = null;\n      EMoflonEdge outFlowToFlow__target__flow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __inFlow_targetRef_task = null;\n      EMoflonEdge __lane_flowNodeRefs_task = null;\n      EMoflonEdge outFlowToFlow__source__outFlow = null;\n      EMoflonEdge outFlowToNormalStep__target__normalStep = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flowNode\"));\n\n         // ensure correct type and really bound of object flowNode\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         flowNode = (ParallelGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToActor\"));\n\n         // ensure correct type and really bound of object processToActor\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToActor );\n         processToActor = (ProcessToActor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"task\"));\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof ServiceTask );\n         task = (ServiceTask) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object normalStep\n         normalStep = UseCaseDSLFactory.eINSTANCE.createNormalStep();\n\n         // create object taskToNormalStep\n         taskToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n         // create object outFlowToNormalStep\n         outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n         // create object outFlowToFlow\n         outFlowToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // assign attribute normalStep\n         normalStep.setName ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"name\").getValue());\n         // assign attribute normalStep\n         normalStep.setLabel ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"label\").getValue());\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,flow,\"target\");\n\n         // create link\n         normalStep.setActor( actor);\n\n\n         // create link\n         taskToNormalStep.setSource( task);\n\n\n         // create link\n         outFlowToNormalStep.setSource( outFlow);\n\n\n         // create link\n         outFlowToFlow.setSource( outFlow);\n\n\n         // create link\n         taskToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         flow.getSteps().add(normalStep);\n\n\n         // create link\n         outFlowToNormalStep.setTarget( normalStep);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object task is really bound\n         JavaSDM.ensure ( task != null );\n         // check object taskToNormalStep is really bound\n         JavaSDM.ensure ( taskToNormalStep != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,task,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object flowNode is really bound\n         JavaSDM.ensure ( flowNode != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToActor is really bound\n         JavaSDM.ensure ( processToActor != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object task is really bound\n         JavaSDM.ensure ( task != null );\n         // check object taskToNormalStep is really bound\n         JavaSDM.ensure ( taskToNormalStep != null );\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects flowNode and actor \n         JavaSDM.ensure ( !flowNode.equals (actor) );\n\n         // check isomorphic binding between objects inFlow and actor \n         JavaSDM.ensure ( !inFlow.equals (actor) );\n\n         // check isomorphic binding between objects inFlowToFlow and actor \n         JavaSDM.ensure ( !inFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects lane and actor \n         JavaSDM.ensure ( !lane.equals (actor) );\n\n         // check isomorphic binding between objects laneSet and actor \n         JavaSDM.ensure ( !laneSet.equals (actor) );\n\n         // check isomorphic binding between objects normalStep and actor \n         JavaSDM.ensure ( !normalStep.equals (actor) );\n\n         // check isomorphic binding between objects outFlow and actor \n         JavaSDM.ensure ( !outFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToFlow and actor \n         JavaSDM.ensure ( !outFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and actor \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects process and actor \n         JavaSDM.ensure ( !process.equals (actor) );\n\n         // check isomorphic binding between objects processToActor and actor \n         JavaSDM.ensure ( !processToActor.equals (actor) );\n\n         // check isomorphic binding between objects task and actor \n         JavaSDM.ensure ( !task.equals (actor) );\n\n         // check isomorphic binding between objects taskToNormalStep and actor \n         JavaSDM.ensure ( !taskToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects flowNode and flow \n         JavaSDM.ensure ( !flowNode.equals (flow) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects lane and flow \n         JavaSDM.ensure ( !lane.equals (flow) );\n\n         // check isomorphic binding between objects laneSet and flow \n         JavaSDM.ensure ( !laneSet.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToFlow and flow \n         JavaSDM.ensure ( !outFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects processToActor and flow \n         JavaSDM.ensure ( !processToActor.equals (flow) );\n\n         // check isomorphic binding between objects task and flow \n         JavaSDM.ensure ( !task.equals (flow) );\n\n         // check isomorphic binding between objects taskToNormalStep and flow \n         JavaSDM.ensure ( !taskToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects inFlow and flowNode \n         JavaSDM.ensure ( !inFlow.equals (flowNode) );\n\n         // check isomorphic binding between objects inFlowToFlow and flowNode \n         JavaSDM.ensure ( !inFlowToFlow.equals (flowNode) );\n\n         // check isomorphic binding between objects lane and flowNode \n         JavaSDM.ensure ( !lane.equals (flowNode) );\n\n         // check isomorphic binding between objects laneSet and flowNode \n         JavaSDM.ensure ( !laneSet.equals (flowNode) );\n\n         // check isomorphic binding between objects normalStep and flowNode \n         JavaSDM.ensure ( !normalStep.equals (flowNode) );\n\n         // check isomorphic binding between objects outFlow and flowNode \n         JavaSDM.ensure ( !outFlow.equals (flowNode) );\n\n         // check isomorphic binding between objects outFlowToFlow and flowNode \n         JavaSDM.ensure ( !outFlowToFlow.equals (flowNode) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flowNode \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flowNode) );\n\n         // check isomorphic binding between objects process and flowNode \n         JavaSDM.ensure ( !process.equals (flowNode) );\n\n         // check isomorphic binding between objects processToActor and flowNode \n         JavaSDM.ensure ( !processToActor.equals (flowNode) );\n\n         // check isomorphic binding between objects task and flowNode \n         JavaSDM.ensure ( !task.equals (flowNode) );\n\n         // check isomorphic binding between objects taskToNormalStep and flowNode \n         JavaSDM.ensure ( !taskToNormalStep.equals (flowNode) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlow \n         JavaSDM.ensure ( !lane.equals (inFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects processToActor and inFlow \n         JavaSDM.ensure ( !processToActor.equals (inFlow) );\n\n         // check isomorphic binding between objects task and inFlow \n         JavaSDM.ensure ( !task.equals (inFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and inFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlowToFlow \n         JavaSDM.ensure ( !lane.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlowToFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects processToActor and inFlowToFlow \n         JavaSDM.ensure ( !processToActor.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects task and inFlowToFlow \n         JavaSDM.ensure ( !task.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and lane \n         JavaSDM.ensure ( !laneSet.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and lane \n         JavaSDM.ensure ( !normalStep.equals (lane) );\n\n         // check isomorphic binding between objects outFlow and lane \n         JavaSDM.ensure ( !outFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToFlow and lane \n         JavaSDM.ensure ( !outFlowToFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and lane \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (lane) );\n\n         // check isomorphic binding between objects process and lane \n         JavaSDM.ensure ( !process.equals (lane) );\n\n         // check isomorphic binding between objects processToActor and lane \n         JavaSDM.ensure ( !processToActor.equals (lane) );\n\n         // check isomorphic binding between objects task and lane \n         JavaSDM.ensure ( !task.equals (lane) );\n\n         // check isomorphic binding between objects taskToNormalStep and lane \n         JavaSDM.ensure ( !taskToNormalStep.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and laneSet \n         JavaSDM.ensure ( !normalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlow and laneSet \n         JavaSDM.ensure ( !outFlow.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlowToFlow and laneSet \n         JavaSDM.ensure ( !outFlowToFlow.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and laneSet \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects process and laneSet \n         JavaSDM.ensure ( !process.equals (laneSet) );\n\n         // check isomorphic binding between objects processToActor and laneSet \n         JavaSDM.ensure ( !processToActor.equals (laneSet) );\n\n         // check isomorphic binding between objects task and laneSet \n         JavaSDM.ensure ( !task.equals (laneSet) );\n\n         // check isomorphic binding between objects taskToNormalStep and laneSet \n         JavaSDM.ensure ( !taskToNormalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and normalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and normalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects processToActor and normalStep \n         JavaSDM.ensure ( !processToActor.equals (normalStep) );\n\n         // check isomorphic binding between objects task and normalStep \n         JavaSDM.ensure ( !task.equals (normalStep) );\n\n         // check isomorphic binding between objects taskToNormalStep and normalStep \n         JavaSDM.ensure ( !taskToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and outFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects processToActor and outFlow \n         JavaSDM.ensure ( !processToActor.equals (outFlow) );\n\n         // check isomorphic binding between objects task and outFlow \n         JavaSDM.ensure ( !task.equals (outFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToFlow \n         JavaSDM.ensure ( !process.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects processToActor and outFlowToFlow \n         JavaSDM.ensure ( !processToActor.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects task and outFlowToFlow \n         JavaSDM.ensure ( !task.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToNormalStep \n         JavaSDM.ensure ( !process.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and outFlowToNormalStep \n         JavaSDM.ensure ( !processToActor.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects task and outFlowToNormalStep \n         JavaSDM.ensure ( !task.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlowToNormalStep \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and process \n         JavaSDM.ensure ( !processToActor.equals (process) );\n\n         // check isomorphic binding between objects task and process \n         JavaSDM.ensure ( !task.equals (process) );\n\n         // check isomorphic binding between objects taskToNormalStep and process \n         JavaSDM.ensure ( !taskToNormalStep.equals (process) );\n\n         // check isomorphic binding between objects task and processToActor \n         JavaSDM.ensure ( !task.equals (processToActor) );\n\n         // check isomorphic binding between objects taskToNormalStep and processToActor \n         JavaSDM.ensure ( !taskToNormalStep.equals (processToActor) );\n\n         // check isomorphic binding between objects taskToNormalStep and task \n         JavaSDM.ensure ( !taskToNormalStep.equals (task) );\n\n         // create object __outFlow_sourceRef_task\n         __outFlow_sourceRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object taskToNormalStep__source__task\n         taskToNormalStep__source__task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __task_incoming_inFlow\n         __task_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __task_outgoing_outFlow\n         __task_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object taskToNormalStep__target__normalStep\n         taskToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object flow__steps__normalStep\n         flow__steps__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object normalStep__actor__actor\n         normalStep__actor__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__target__flow\n         outFlowToFlow__target__flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_outFlow\n         __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __inFlow_targetRef_task\n         __inFlow_targetRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __lane_flowNodeRefs_task\n         __lane_flowNodeRefs_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ServiceTaskToStepAfterPGRule\");\n         // assign attribute __inFlow_targetRef_task\n         __inFlow_targetRef_task.setName (\"targetRef\");\n         // assign attribute __task_incoming_inFlow\n         __task_incoming_inFlow.setName (\"incoming\");\n         // assign attribute __process_flowElements_outFlow\n         __process_flowElements_outFlow.setName (\"flowElements\");\n         // assign attribute __outFlow_sourceRef_task\n         __outFlow_sourceRef_task.setName (\"sourceRef\");\n         // assign attribute __task_outgoing_outFlow\n         __task_outgoing_outFlow.setName (\"outgoing\");\n         // assign attribute normalStep__actor__actor\n         normalStep__actor__actor.setName (\"actor\");\n         // assign attribute taskToNormalStep__source__task\n         taskToNormalStep__source__task.setName (\"source\");\n         // assign attribute taskToNormalStep__target__normalStep\n         taskToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToFlow__target__flow\n         outFlowToFlow__target__flow.setName (\"target\");\n         // assign attribute outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute flow__steps__normalStep\n         flow__steps__normalStep.setName (\"steps\");\n         // assign attribute __lane_flowNodeRefs_task\n         __lane_flowNodeRefs_task.setName (\"flowNodeRefs\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__outFlow_sourceRef_task,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep__source__task,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__task_incoming_inFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__task_outgoing_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,flow__steps__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep__actor__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__target__flow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__inFlow_targetRef_task,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__lane_flowNodeRefs_task,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         __process_flowElements_outFlow.setSrc( process);\n\n\n         // create link\n         normalStep__actor__actor.setTrg( actor);\n\n\n         // create link\n         taskToNormalStep__source__task.setTrg( task);\n\n\n         // create link\n         __lane_flowNodeRefs_task.setTrg( task);\n\n\n         // create link\n         __inFlow_targetRef_task.setTrg( task);\n\n\n         // create link\n         __outFlow_sourceRef_task.setTrg( task);\n\n\n         // create link\n         __task_incoming_inFlow.setSrc( task);\n\n\n         // create link\n         __task_outgoing_outFlow.setSrc( task);\n\n\n         // create link\n         __task_incoming_inFlow.setTrg( inFlow);\n\n\n         // create link\n         __inFlow_targetRef_task.setSrc( inFlow);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         __process_flowElements_outFlow.setTrg( outFlow);\n\n\n         // create link\n         __outFlow_sourceRef_task.setSrc( outFlow);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         __task_outgoing_outFlow.setTrg( outFlow);\n\n\n         // create link\n         taskToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         flow__steps__normalStep.setTrg( normalStep);\n\n\n         // create link\n         normalStep__actor__actor.setSrc( normalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         taskToNormalStep__target__normalStep.setSrc( taskToNormalStep);\n\n\n         // create link\n         taskToNormalStep__source__task.setSrc( taskToNormalStep);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToFlow__target__flow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         flow__steps__normalStep.setSrc( flow);\n\n\n         // create link\n         outFlowToFlow__target__flow.setTrg( flow);\n\n\n         // create link\n         __lane_flowNodeRefs_task.setSrc( lane);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,flowNode,process,actor,processToActor,task,inFlow,outFlow,normalStep,taskToNormalStep,outFlowToFlow,outFlowToNormalStep,inFlowToFlow,flow,laneSet,lane);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"flowNode\", flowNode);\nmatch.registerObject(\"process\", process);\nmatch.registerObject(\"task\", task);\nmatch.registerObject(\"inFlow\", inFlow);\nmatch.registerObject(\"outFlow\", outFlow);\nmatch.registerObject(\"laneSet\", laneSet);\nmatch.registerObject(\"lane\", lane);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, ParallelGateway flowNode,
			bpmn2.Process process, ServiceTask task, SequenceFlow inFlow,
			SequenceFlow outFlow, LaneSet laneSet, Lane lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"flowNode.gatewayDirection\", true, csp);\r\nvar_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());\r\nvar_flowNode_gatewayDirection.setType(\"EObject\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, ParallelGateway flowNode,
			bpmn2.Process process, ServiceTask task, SequenceFlow inFlow,
			SequenceFlow outFlow, LaneSet laneSet, Lane lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(\"task.id\", true, csp);\r\nvar_task_id.setValue(task.getId());\r\nvar_task_id.setType(\"\");\r\nVariable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(\"task.name\", true, csp);\r\nvar_task_name.setValue(task.getName());\r\nvar_task_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.name\", csp);\r\nvar_normalStep_name.setType(\"\");\r\nVariable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.label\", csp);\r\nvar_normalStep_label.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_task_id,var_normalStep_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_task_name,var_normalStep_label);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"flowNode\",flowNode);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"processToActor\",processToActor);\r\nisApplicableMatch.registerObject(\"task\",task);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"outFlow\",outFlow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"laneSet\",laneSet);\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			ParallelGateway flowNode, bpmn2.Process process, Actor actor,
			ProcessToActor processToActor, ServiceTask task,
			SequenceFlow inFlow, SequenceFlow outFlow,
			SequenceFlowToUCFlow inFlowToFlow, Flow flow, LaneSet laneSet,
			Lane lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"flowNode\", flowNode);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"processToActor\", processToActor);\nruleresult.registerObject(\"task\", task);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"taskToNormalStep\", taskToNormalStep);\nruleresult.registerObject(\"outFlowToFlow\", outFlowToFlow);\nruleresult.registerObject(\"outFlowToNormalStep\", outFlowToNormalStep);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"laneSet\", laneSet);\nruleresult.registerObject(\"lane\", lane);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject flowNode,
			EObject process, EObject actor, EObject processToActor,
			EObject task, EObject inFlow, EObject outFlow, EObject normalStep,
			EObject taskToNormalStep, EObject outFlowToFlow,
			EObject outFlowToNormalStep, EObject inFlowToFlow, EObject flow,
			EObject laneSet, EObject lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"task\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getServiceTask()) && match.getObject(\"outFlow\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,actor,normalStep,flow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // create object __flow_steps_normalStep\n            __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __normalStep_actor_actor\n            __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __normalStep_actor_actor\n            __normalStep_actor_actor.setName (\"actor\");\n            // assign attribute __flow_steps_normalStep\n            __flow_steps_normalStep.setName (\"steps\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,normalStep,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flow_steps_normalStep,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__normalStep_actor_actor,\"toBeTranslatedEdges\");\n\n            // create link\n            __normalStep_actor_actor.setTrg( actor);\n\n\n            // create link\n            __normalStep_actor_actor.setSrc( normalStep);\n\n\n            // create link\n            __flow_steps_normalStep.setTrg( normalStep);\n\n\n            // create link\n            __flow_steps_normalStep.setSrc( flow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,actor,\"contextNodes\");\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,actor,normalStep,flow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, Actor actor, NormalStep normalStep,
			Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Actor actor = null;\n      Flow flow = null;\n      NormalStep normalStep = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __inFlow_sourceRef_flowNode = null;\n      EMoflonEdge __process_flowElements_flowNode = null;\n      EMoflonEdge __flowNode_outgoing_inFlow = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      EMoflonEdge __processToActor_source_process = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n      EMoflonEdge __processToActor_target_actor = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      CSP csp = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      ParallelGateway flowNode = null;\n      bpmn2.Process process = null;\n      Iterator fujaba__IterActorToProcessToActor = null;\n      ProcessToActor processToActor = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ServiceTaskToStepAfterPGRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (match.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (match.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link target from flow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,SequenceFlowToUCFlow.class,\"target\")).iterator ();\n\n         while ( fujaba__IterFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // bind object\n               inFlow = inFlowToFlow.getSource ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n\n               // iterate to-many link target from actor to processToActor\n               fujaba__Success = false;\n\n               fujaba__IterActorToProcessToActor = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(actor,ProcessToActor.class,\"target\")).iterator ();\n\n               while ( fujaba__IterActorToProcessToActor.hasNext () )\n               {\n                  try\n                  {\n                     processToActor = (ProcessToActor) fujaba__IterActorToProcessToActor.next ();\n\n                     // check object processToActor is really bound\n                     JavaSDM.ensure ( processToActor != null );\n                     // bind object\n                     process = processToActor.getSource ();\n\n                     // check object process is really bound\n                     JavaSDM.ensure ( process != null );\n\n                     // story node \'find context\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object actor is really bound\n                        JavaSDM.ensure ( actor != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object inFlowToFlow is really bound\n                        JavaSDM.ensure ( inFlowToFlow != null );\n                        // check object normalStep is really bound\n                        JavaSDM.ensure ( normalStep != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check object processToActor is really bound\n                        JavaSDM.ensure ( processToActor != null );\n                        // check link actor from normalStep to actor\n                        JavaSDM.ensure (actor.equals (normalStep.getActor ()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // bind object\n                        _TmpObject = inFlow.getSourceRef ();\n\n                        // ensure correct type and really bound of object flowNode\n                        JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n                        flowNode = (ParallelGateway) _TmpObject;\n\n                        // check link flowElements from flowNode to process\n                        JavaSDM.ensure (process.equals (flowNode.eContainer()\n                        ));\n\n                        // check link source from inFlowToFlow to inFlow\n                        JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                        ));\n\n                        // check link source from processToActor to process\n                        JavaSDM.ensure (process.equals (processToActor.getSource ()\n                        ));\n\n                        // check link steps from normalStep to flow\n                        JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                        ));\n\n                        // check link target from inFlowToFlow to flow\n                        JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                        ));\n\n                        // check link target from processToActor to actor\n                        JavaSDM.ensure (actor.equals (processToActor.getTarget ()\n                        ));\n\n                        // iterate to-many link laneSets from process to laneSet\n                        fujaba__Success = false;\n\n                        fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                        while ( fujaba__IterProcessToLaneSet.hasNext () )\n                        {\n                           try\n                           {\n                              laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                              // check object laneSet is really bound\n                              JavaSDM.ensure ( laneSet != null );\n                              // iterate to-many link lanes from laneSet to lane\n                              fujaba__Success = false;\n\n                              fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                              while ( fujaba__IterLaneSetToLane.hasNext () )\n                              {\n                                 try\n                                 {\n                                    lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                    // check object lane is really bound\n                                    JavaSDM.ensure ( lane != null );\n                                    // create object isApplicableMatch\n                                    isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                                    // create object __inFlow_sourceRef_flowNode\n                                    __inFlow_sourceRef_flowNode = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __process_flowElements_flowNode\n                                    __process_flowElements_flowNode = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __flowNode_outgoing_inFlow\n                                    __flowNode_outgoing_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __process_flowElements_inFlow\n                                    __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __process_laneSets_laneSet\n                                    __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __processToActor_source_process\n                                    __processToActor_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __normalStep_actor_actor\n                                    __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __processToActor_target_actor\n                                    __processToActor_target_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __inFlowToFlow_source_inFlow\n                                    __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __flow_steps_normalStep\n                                    __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __inFlowToFlow_target_flow\n                                    __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __laneSet_lanes_lane\n                                    __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // assign attribute __processToActor_source_process\n                                    __processToActor_source_process.setName (\"source\");\n                                    // assign attribute __processToActor_target_actor\n                                    __processToActor_target_actor.setName (\"target\");\n                                    // assign attribute __process_flowElements_flowNode\n                                    __process_flowElements_flowNode.setName (\"flowElements\");\n                                    // assign attribute __process_laneSets_laneSet\n                                    __process_laneSets_laneSet.setName (\"laneSets\");\n                                    // assign attribute __process_flowElements_inFlow\n                                    __process_flowElements_inFlow.setName (\"flowElements\");\n                                    // assign attribute __normalStep_actor_actor\n                                    __normalStep_actor_actor.setName (\"actor\");\n                                    // assign attribute __inFlowToFlow_source_inFlow\n                                    __inFlowToFlow_source_inFlow.setName (\"source\");\n                                    // assign attribute __inFlowToFlow_target_flow\n                                    __inFlowToFlow_target_flow.setName (\"target\");\n                                    // assign attribute __flow_steps_normalStep\n                                    __flow_steps_normalStep.setName (\"steps\");\n                                    // assign attribute __laneSet_lanes_lane\n                                    __laneSet_lanes_lane.setName (\"lanes\");\n                                    // assign attribute __inFlow_sourceRef_flowNode\n                                    __inFlow_sourceRef_flowNode.setName (\"sourceRef\");\n                                    // assign attribute __flowNode_outgoing_inFlow\n                                    __flowNode_outgoing_inFlow.setName (\"outgoing\");\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(flowNode);\n\n\n                                    // create link\n                                    __inFlow_sourceRef_flowNode.setTrg( flowNode);\n\n\n                                    // create link\n                                    __process_flowElements_flowNode.setTrg( flowNode);\n\n\n                                    // create link\n                                    __flowNode_outgoing_inFlow.setSrc( flowNode);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(process);\n\n\n                                    // create link\n                                    __process_flowElements_inFlow.setSrc( process);\n\n\n                                    // create link\n                                    __process_laneSets_laneSet.setSrc( process);\n\n\n                                    // create link\n                                    __processToActor_source_process.setTrg( process);\n\n\n                                    // create link\n                                    __process_flowElements_flowNode.setSrc( process);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(actor);\n\n\n                                    // create link\n                                    __normalStep_actor_actor.setTrg( actor);\n\n\n                                    // create link\n                                    __processToActor_target_actor.setTrg( actor);\n\n\n                                    // create link\n                                    __processToActor_source_process.setSrc( processToActor);\n\n\n                                    // create link\n                                    __processToActor_target_actor.setSrc( processToActor);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(processToActor);\n\n\n                                    // create link\n                                    __inFlow_sourceRef_flowNode.setSrc( inFlow);\n\n\n                                    // create link\n                                    __flowNode_outgoing_inFlow.setTrg( inFlow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                                    // create link\n                                    __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                                    // create link\n                                    __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                                    // create link\n                                    __normalStep_actor_actor.setSrc( normalStep);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(normalStep);\n\n\n                                    // create link\n                                    __flow_steps_normalStep.setTrg( normalStep);\n\n\n                                    // create link\n                                    __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                                    // create link\n                                    __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                                    // create link\n                                    __flow_steps_normalStep.setSrc( flow);\n\n\n                                    // create link\n                                    __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(flow);\n\n\n                                    // create link\n                                    __process_laneSets_laneSet.setTrg( laneSet);\n\n\n                                    // create link\n                                    __laneSet_lanes_lane.setSrc( laneSet);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(laneSet);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(lane);\n\n\n                                    // create link\n                                    __laneSet_lanes_lane.setTrg( lane);\n\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__normalStep_actor_actor,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_sourceRef_flowNode,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_flowNode,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_normalStep,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToActor_source_process,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowNode_outgoing_inFlow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_laneSets_laneSet,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneSet_lanes_lane,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToActor_target_actor,\"allContextElements\");\n                                    // story node \'solve CSP\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,flowNode,process,actor,processToActor,inFlow,normalStep,inFlowToFlow,flow,laneSet,lane));\n\n                                       // ensure correct type and really bound of object csp\n                                       JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                       csp = (CSP) _TmpObject;\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    // statement node \'check CSP\'\n                                    fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                                    if (fujaba__Success)\n                                    {\n                                       // story node \'add match to rule result\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // check object isApplicableMatch is really bound\n                                          JavaSDM.ensure ( isApplicableMatch != null );\n                                          // check object ruleresult is really bound\n                                          JavaSDM.ensure ( ruleresult != null );\n                                          // assign attribute ruleresult\n                                          ruleresult.setSuccess (true);\n                                          // assign attribute isApplicableMatch\n                                          isApplicableMatch.setRuleName (\"ServiceTaskToStepAfterPGRule\");\n\n                                          // create link\n                                          isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n                              }\n                              JavaSDM.ensure (fujaba__Success);\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n                        }\n                        JavaSDM.ensure (fujaba__Success);\n\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      Flow flow = null;\n      ParallelGateway flowNode = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      NormalStep normalStep = null;\n      bpmn2.Process process = null;\n      ProcessToActor processToActor = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      SequenceFlow outFlow = null;\n      ServiceTask task = null;\n      FlowNodeToStep taskToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToFlow = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge lane__flowNodeRefs__task = null;\n      EMoflonEdge outFlowToFlow__target__flow = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n      EMoflonEdge process__flowElements__outFlow = null;\n      EMoflonEdge task__outgoing__outFlow = null;\n      EMoflonEdge taskToNormalStep__target__normalStep = null;\n      EMoflonEdge outFlowToFlow__source__outFlow = null;\n      EMoflonEdge outFlow__sourceRef__task = null;\n      EMoflonEdge task__incoming__inFlow = null;\n      EMoflonEdge outFlowToNormalStep__target__normalStep = null;\n      EMoflonEdge inFlow__targetRef__task = null;\n      EMoflonEdge taskToNormalStep__source__task = null;\n      EMoflonEdge outFlowToNormalStep__source__outFlow = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flowNode\"));\n\n         // ensure correct type and really bound of object flowNode\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         flowNode = (ParallelGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToActor\"));\n\n         // ensure correct type and really bound of object processToActor\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToActor );\n         processToActor = (ProcessToActor) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object outFlow\n         outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n         // create object task\n         task = Bpmn2Factory.eINSTANCE.createServiceTask();\n\n         // create object taskToNormalStep\n         taskToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n         // create object outFlowToFlow\n         outFlowToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // create object outFlowToNormalStep\n         outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n         // assign attribute task\n         task.setId ((java.lang.String)csp.getAttributeVariable(\"task\",\"id\").getValue());\n         // assign attribute task\n         task.setName ((java.lang.String)csp.getAttributeVariable(\"task\",\"name\").getValue());\n\n         // create link\n         outFlowToFlow.setSource( outFlow);\n\n\n         // create link\n         outFlowToNormalStep.setSource( outFlow);\n\n\n         // create link\n         taskToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         outFlowToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,flow,\"target\");\n\n         // create link\n         \tprocess.getFlowElements().add(outFlow); // add link\n\n\n         // create link\n         inFlow.setTargetRef( task);\n\n\n         // create link\n         outFlow.setSourceRef( task);\n\n\n         // create link\n         lane.getFlowNodeRefs().add(task);\n\n\n         // create link\n         taskToNormalStep.setSource( task);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object task is really bound\n         JavaSDM.ensure ( task != null );\n         // check object taskToNormalStep is really bound\n         JavaSDM.ensure ( taskToNormalStep != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,task,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep,\"createdLinkElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object flowNode is really bound\n         JavaSDM.ensure ( flowNode != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToActor is really bound\n         JavaSDM.ensure ( processToActor != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object task is really bound\n         JavaSDM.ensure ( task != null );\n         // check object taskToNormalStep is really bound\n         JavaSDM.ensure ( taskToNormalStep != null );\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects flowNode and actor \n         JavaSDM.ensure ( !flowNode.equals (actor) );\n\n         // check isomorphic binding between objects inFlow and actor \n         JavaSDM.ensure ( !inFlow.equals (actor) );\n\n         // check isomorphic binding between objects inFlowToFlow and actor \n         JavaSDM.ensure ( !inFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects lane and actor \n         JavaSDM.ensure ( !lane.equals (actor) );\n\n         // check isomorphic binding between objects laneSet and actor \n         JavaSDM.ensure ( !laneSet.equals (actor) );\n\n         // check isomorphic binding between objects normalStep and actor \n         JavaSDM.ensure ( !normalStep.equals (actor) );\n\n         // check isomorphic binding between objects outFlow and actor \n         JavaSDM.ensure ( !outFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToFlow and actor \n         JavaSDM.ensure ( !outFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and actor \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects process and actor \n         JavaSDM.ensure ( !process.equals (actor) );\n\n         // check isomorphic binding between objects processToActor and actor \n         JavaSDM.ensure ( !processToActor.equals (actor) );\n\n         // check isomorphic binding between objects task and actor \n         JavaSDM.ensure ( !task.equals (actor) );\n\n         // check isomorphic binding between objects taskToNormalStep and actor \n         JavaSDM.ensure ( !taskToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects flowNode and flow \n         JavaSDM.ensure ( !flowNode.equals (flow) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects lane and flow \n         JavaSDM.ensure ( !lane.equals (flow) );\n\n         // check isomorphic binding between objects laneSet and flow \n         JavaSDM.ensure ( !laneSet.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToFlow and flow \n         JavaSDM.ensure ( !outFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects processToActor and flow \n         JavaSDM.ensure ( !processToActor.equals (flow) );\n\n         // check isomorphic binding between objects task and flow \n         JavaSDM.ensure ( !task.equals (flow) );\n\n         // check isomorphic binding between objects taskToNormalStep and flow \n         JavaSDM.ensure ( !taskToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects inFlow and flowNode \n         JavaSDM.ensure ( !inFlow.equals (flowNode) );\n\n         // check isomorphic binding between objects inFlowToFlow and flowNode \n         JavaSDM.ensure ( !inFlowToFlow.equals (flowNode) );\n\n         // check isomorphic binding between objects lane and flowNode \n         JavaSDM.ensure ( !lane.equals (flowNode) );\n\n         // check isomorphic binding between objects laneSet and flowNode \n         JavaSDM.ensure ( !laneSet.equals (flowNode) );\n\n         // check isomorphic binding between objects normalStep and flowNode \n         JavaSDM.ensure ( !normalStep.equals (flowNode) );\n\n         // check isomorphic binding between objects outFlow and flowNode \n         JavaSDM.ensure ( !outFlow.equals (flowNode) );\n\n         // check isomorphic binding between objects outFlowToFlow and flowNode \n         JavaSDM.ensure ( !outFlowToFlow.equals (flowNode) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flowNode \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flowNode) );\n\n         // check isomorphic binding between objects process and flowNode \n         JavaSDM.ensure ( !process.equals (flowNode) );\n\n         // check isomorphic binding between objects processToActor and flowNode \n         JavaSDM.ensure ( !processToActor.equals (flowNode) );\n\n         // check isomorphic binding between objects task and flowNode \n         JavaSDM.ensure ( !task.equals (flowNode) );\n\n         // check isomorphic binding between objects taskToNormalStep and flowNode \n         JavaSDM.ensure ( !taskToNormalStep.equals (flowNode) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlow \n         JavaSDM.ensure ( !lane.equals (inFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects processToActor and inFlow \n         JavaSDM.ensure ( !processToActor.equals (inFlow) );\n\n         // check isomorphic binding between objects task and inFlow \n         JavaSDM.ensure ( !task.equals (inFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and inFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlowToFlow \n         JavaSDM.ensure ( !lane.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlowToFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects processToActor and inFlowToFlow \n         JavaSDM.ensure ( !processToActor.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects task and inFlowToFlow \n         JavaSDM.ensure ( !task.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and lane \n         JavaSDM.ensure ( !laneSet.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and lane \n         JavaSDM.ensure ( !normalStep.equals (lane) );\n\n         // check isomorphic binding between objects outFlow and lane \n         JavaSDM.ensure ( !outFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToFlow and lane \n         JavaSDM.ensure ( !outFlowToFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and lane \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (lane) );\n\n         // check isomorphic binding between objects process and lane \n         JavaSDM.ensure ( !process.equals (lane) );\n\n         // check isomorphic binding between objects processToActor and lane \n         JavaSDM.ensure ( !processToActor.equals (lane) );\n\n         // check isomorphic binding between objects task and lane \n         JavaSDM.ensure ( !task.equals (lane) );\n\n         // check isomorphic binding between objects taskToNormalStep and lane \n         JavaSDM.ensure ( !taskToNormalStep.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and laneSet \n         JavaSDM.ensure ( !normalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlow and laneSet \n         JavaSDM.ensure ( !outFlow.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlowToFlow and laneSet \n         JavaSDM.ensure ( !outFlowToFlow.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and laneSet \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects process and laneSet \n         JavaSDM.ensure ( !process.equals (laneSet) );\n\n         // check isomorphic binding between objects processToActor and laneSet \n         JavaSDM.ensure ( !processToActor.equals (laneSet) );\n\n         // check isomorphic binding between objects task and laneSet \n         JavaSDM.ensure ( !task.equals (laneSet) );\n\n         // check isomorphic binding between objects taskToNormalStep and laneSet \n         JavaSDM.ensure ( !taskToNormalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and normalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and normalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects processToActor and normalStep \n         JavaSDM.ensure ( !processToActor.equals (normalStep) );\n\n         // check isomorphic binding between objects task and normalStep \n         JavaSDM.ensure ( !task.equals (normalStep) );\n\n         // check isomorphic binding between objects taskToNormalStep and normalStep \n         JavaSDM.ensure ( !taskToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and outFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects processToActor and outFlow \n         JavaSDM.ensure ( !processToActor.equals (outFlow) );\n\n         // check isomorphic binding between objects task and outFlow \n         JavaSDM.ensure ( !task.equals (outFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToFlow \n         JavaSDM.ensure ( !process.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects processToActor and outFlowToFlow \n         JavaSDM.ensure ( !processToActor.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects task and outFlowToFlow \n         JavaSDM.ensure ( !task.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToNormalStep \n         JavaSDM.ensure ( !process.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and outFlowToNormalStep \n         JavaSDM.ensure ( !processToActor.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects task and outFlowToNormalStep \n         JavaSDM.ensure ( !task.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlowToNormalStep \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and process \n         JavaSDM.ensure ( !processToActor.equals (process) );\n\n         // check isomorphic binding between objects task and process \n         JavaSDM.ensure ( !task.equals (process) );\n\n         // check isomorphic binding between objects taskToNormalStep and process \n         JavaSDM.ensure ( !taskToNormalStep.equals (process) );\n\n         // check isomorphic binding between objects task and processToActor \n         JavaSDM.ensure ( !task.equals (processToActor) );\n\n         // check isomorphic binding between objects taskToNormalStep and processToActor \n         JavaSDM.ensure ( !taskToNormalStep.equals (processToActor) );\n\n         // check isomorphic binding between objects taskToNormalStep and task \n         JavaSDM.ensure ( !taskToNormalStep.equals (task) );\n\n         // create object lane__flowNodeRefs__task\n         lane__flowNodeRefs__task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__target__flow\n         outFlowToFlow__target__flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __normalStep_actor_actor\n         __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__outFlow\n         process__flowElements__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object task__outgoing__outFlow\n         task__outgoing__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object taskToNormalStep__target__normalStep\n         taskToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlow__sourceRef__task\n         outFlow__sourceRef__task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object task__incoming__inFlow\n         task__incoming__inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object inFlow__targetRef__task\n         inFlow__targetRef__task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object taskToNormalStep__source__task\n         taskToNormalStep__source__task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __flow_steps_normalStep\n         __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ServiceTaskToStepAfterPGRule\");\n         // assign attribute inFlow__targetRef__task\n         inFlow__targetRef__task.setName (\"targetRef\");\n         // assign attribute task__incoming__inFlow\n         task__incoming__inFlow.setName (\"incoming\");\n         // assign attribute process__flowElements__outFlow\n         process__flowElements__outFlow.setName (\"flowElements\");\n         // assign attribute outFlow__sourceRef__task\n         outFlow__sourceRef__task.setName (\"sourceRef\");\n         // assign attribute task__outgoing__outFlow\n         task__outgoing__outFlow.setName (\"outgoing\");\n         // assign attribute __normalStep_actor_actor\n         __normalStep_actor_actor.setName (\"actor\");\n         // assign attribute taskToNormalStep__source__task\n         taskToNormalStep__source__task.setName (\"source\");\n         // assign attribute taskToNormalStep__target__normalStep\n         taskToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToFlow__target__flow\n         outFlowToFlow__target__flow.setName (\"target\");\n         // assign attribute outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute __flow_steps_normalStep\n         __flow_steps_normalStep.setName (\"steps\");\n         // assign attribute lane__flowNodeRefs__task\n         lane__flowNodeRefs__task.setName (\"flowNodeRefs\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,lane__flowNodeRefs__task,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__target__flow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__normalStep_actor_actor,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,task__outgoing__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow__sourceRef__task,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,task__incoming__inFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,inFlow__targetRef__task,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep__source__task,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__flow_steps_normalStep,\"translatedEdges\");\n\n         // create link\n         process__flowElements__outFlow.setSrc( process);\n\n\n         // create link\n         __normalStep_actor_actor.setTrg( actor);\n\n\n         // create link\n         outFlow__sourceRef__task.setTrg( task);\n\n\n         // create link\n         taskToNormalStep__source__task.setTrg( task);\n\n\n         // create link\n         task__outgoing__outFlow.setSrc( task);\n\n\n         // create link\n         task__incoming__inFlow.setSrc( task);\n\n\n         // create link\n         inFlow__targetRef__task.setTrg( task);\n\n\n         // create link\n         lane__flowNodeRefs__task.setTrg( task);\n\n\n         // create link\n         task__incoming__inFlow.setTrg( inFlow);\n\n\n         // create link\n         inFlow__targetRef__task.setSrc( inFlow);\n\n\n         // create link\n         outFlow__sourceRef__task.setSrc( outFlow);\n\n\n         // create link\n         process__flowElements__outFlow.setTrg( outFlow);\n\n\n         // create link\n         task__outgoing__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         __normalStep_actor_actor.setSrc( normalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         __flow_steps_normalStep.setTrg( normalStep);\n\n\n         // create link\n         taskToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         taskToNormalStep__target__normalStep.setSrc( taskToNormalStep);\n\n\n         // create link\n         taskToNormalStep__source__task.setSrc( taskToNormalStep);\n\n\n         // create link\n         outFlowToFlow__target__flow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToFlow__target__flow.setTrg( flow);\n\n\n         // create link\n         __flow_steps_normalStep.setSrc( flow);\n\n\n         // create link\n         lane__flowNodeRefs__task.setSrc( lane);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,flowNode,process,actor,processToActor,task,inFlow,outFlow,normalStep,taskToNormalStep,outFlowToFlow,outFlowToNormalStep,inFlowToFlow,flow,laneSet,lane);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"actor\", actor);\nmatch.registerObject(\"normalStep\", normalStep);\nmatch.registerObject(\"flow\", flow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, Actor actor,
			NormalStep normalStep, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, Actor actor,
			NormalStep normalStep, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"flowNode.gatewayDirection\", true, csp);\r\nvar_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());\r\nvar_flowNode_gatewayDirection.setType(\"EObject\");\r\nVariable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.name\", true, csp);\r\nvar_normalStep_name.setValue(normalStep.getName());\r\nvar_normalStep_name.setType(\"\");\r\nVariable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.label\", true, csp);\r\nvar_normalStep_label.setValue(normalStep.getLabel());\r\nvar_normalStep_label.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(\"task.id\", csp);\r\nvar_task_id.setType(\"\");\r\nVariable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(\"task.name\", csp);\r\nvar_task_name.setType(\"\");\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();Eq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);\r\neq.setRuleName(\"\");\r\neq.solve(var_task_id,var_normalStep_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_task_name,var_normalStep_label);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"flowNode\",flowNode);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"processToActor\",processToActor);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"laneSet\",laneSet);\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			ParallelGateway flowNode, bpmn2.Process process, Actor actor,
			ProcessToActor processToActor, SequenceFlow inFlow,
			NormalStep normalStep, SequenceFlowToUCFlow inFlowToFlow,
			Flow flow, LaneSet laneSet, Lane lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"flowNode\", flowNode);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"processToActor\", processToActor);\nruleresult.registerObject(\"task\", task);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"taskToNormalStep\", taskToNormalStep);\nruleresult.registerObject(\"outFlowToFlow\", outFlowToFlow);\nruleresult.registerObject(\"outFlowToNormalStep\", outFlowToNormalStep);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"laneSet\", laneSet);\nruleresult.registerObject(\"lane\", lane);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject flowNode,
			EObject process, EObject actor, EObject processToActor,
			EObject task, EObject inFlow, EObject outFlow, EObject normalStep,
			EObject taskToNormalStep, EObject outFlowToFlow,
			EObject outFlowToNormalStep, EObject inFlowToFlow, EObject flow,
			EObject laneSet, EObject lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"normalStep\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_612824 = null;\n      FlowElementsContainer __DEC_task_flowElements_667518 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_990913 = null;\n      SequenceFlow __DEC_task_targetRef_990913 = null;\n      Match match = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterProcessToOutFlow = null;\n      SequenceFlow outFlow = null;\n      ServiceTask task = null;\n      ParallelGateway flowNode = null;\n      bpmn2.Process process = null;\n      SequenceFlow inFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_targetRef is really bound\n         JavaSDM.ensure ( _edge_targetRef != null );\n         // bind object\n         _TmpObject = _edge_targetRef.getSrc ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = inFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) inFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n         // bind object\n         _TmpObject = inFlow.getSourceRef ();\n\n         // ensure correct type and really bound of object flowNode\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         flowNode = (ParallelGateway) _TmpObject;\n\n         // check link flowElements from flowNode to process\n         JavaSDM.ensure (process.equals (flowNode.eContainer()\n         ));\n\n         // bind object\n         _TmpObject = _edge_targetRef.getTrg ();\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof ServiceTask );\n         task = (ServiceTask) _TmpObject;\n\n         // check link incoming from inFlow to task\n         JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link flowElements from process to outFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToOutFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToOutFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToOutFlow.next ();\n\n               // ensure correct type and really bound of object outFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               outFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link outgoing from outFlow to task\n               JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n               ));\n\n               // iterate to-many link laneSets from process to laneSet\n               fujaba__Success = false;\n\n               fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n               while ( fujaba__IterProcessToLaneSet.hasNext () )\n               {\n                  try\n                  {\n                     laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                     // check object laneSet is really bound\n                     JavaSDM.ensure ( laneSet != null );\n                     // iterate to-many link lanes from laneSet to lane\n                     fujaba__Success = false;\n\n                     fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                     while ( fujaba__IterLaneSetToLane.hasNext () )\n                     {\n                        try\n                        {\n                           lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                           // check object lane is really bound\n                           JavaSDM.ensure ( lane != null );\n                           // check link flowNodeRefs from lane to task\n                           JavaSDM.ensure (lane.getFlowNodeRefs ().contains (task));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_outFlow_flowElements_612824 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                 // check object __DEC_outFlow_flowElements_612824 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_flowElements_612824 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_outFlow_flowElements_612824.getFlowElements().contains(outFlow));\n\n                                 // check isomorphic binding between objects __DEC_outFlow_flowElements_612824 and process \n                                 JavaSDM.ensure ( !__DEC_outFlow_flowElements_612824.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_task_flowElements_667518 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                                 // check object __DEC_task_flowElements_667518 is really bound\n                                 JavaSDM.ensure ( __DEC_task_flowElements_667518 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_task_flowElements_667518.getFlowElements().contains(task));\n\n                                 // check isomorphic binding between objects __DEC_task_flowElements_667518 and process \n                                 JavaSDM.ensure ( !__DEC_task_flowElements_667518.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link default from outFlow\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link incoming from task to __DEC_task_targetRef_990913\n                                 fujaba__Success = false;\n\n                                 fujaba__IterTaskTo__DEC_task_targetRef_990913 = new ArrayList(task.getIncoming()).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_990913.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_task_targetRef_990913 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_990913.next ();\n\n                                       // check object __DEC_task_targetRef_990913 is really bound\n                                       JavaSDM.ensure ( __DEC_task_targetRef_990913 != null );\n                                       // check isomorphic binding between objects __DEC_task_targetRef_990913 and inFlow \n                                       JavaSDM.ensure ( !__DEC_task_targetRef_990913.equals (inFlow) );\n\n                                       // check isomorphic binding between objects __DEC_task_targetRef_990913 and outFlow \n                                       JavaSDM.ensure ( !__DEC_task_targetRef_990913.equals (outFlow) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_targetRef is really bound\n                              JavaSDM.ensure ( _edge_targetRef != null );\n                              // check object flowNode is really bound\n                              JavaSDM.ensure ( flowNode != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object lane is really bound\n                              JavaSDM.ensure ( lane != null );\n                              // check object laneSet is really bound\n                              JavaSDM.ensure ( laneSet != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object task is really bound\n                              JavaSDM.ensure ( task != null );\n                              // check isomorphic binding between objects outFlow and inFlow \n                              JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                              // check link flowElements from flowNode to process\n                              JavaSDM.ensure (process.equals (flowNode.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link flowElements from task to process\n                              JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,bpmn2.Process.class,\"$eContainer\")\n                              .contains (process)));\n\n                              // check link incoming from inFlow to task\n                              JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link incoming from outFlow to task\n                              JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                              )));\n\n                              // check link laneSets from laneSet to process\n                              JavaSDM.ensure (process.equals (laneSet.eContainer()\n                              ));\n\n                              // check link lanes from lane to laneSet\n                              JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                              ));\n\n                              // check link outgoing from inFlow to flowNode\n                              JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                              ));\n\n                              // check link outgoing from outFlow to task\n                              JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link src from _edge_targetRef to inFlow\n                              JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                              ));\n\n                              // check link trg from _edge_targetRef to task\n                              JavaSDM.ensure (task.equals (_edge_targetRef.getTrg ()\n                              ));\n\n                              // check link flowNodeRefs from lane to task\n                              JavaSDM.ensure (lane.getFlowNodeRefs ().contains (task));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_FWD(match,flowNode,process,task,inFlow,outFlow,laneSet,lane);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'\'\n                                 fujaba__Success = this.checkTypes_FWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_193(
			EMoflonEdge _edge_targetRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_399701 = null;\n      FlowElementsContainer __DEC_task_flowElements_328853 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_79575 = null;\n      SequenceFlow __DEC_task_targetRef_79575 = null;\n      Match match = null;\n      Iterator fujaba__IterInFlowTo_edge_targetRef = null;\n      EMoflonEdge _edge_targetRef = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterProcessToOutFlow = null;\n      SequenceFlow outFlow = null;\n      ParallelGateway flowNode = null;\n      bpmn2.Process process = null;\n      SequenceFlow inFlow = null;\n      ServiceTask task = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_incoming is really bound\n         JavaSDM.ensure ( _edge_incoming != null );\n         // bind object\n         _TmpObject = _edge_incoming.getSrc ();\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof ServiceTask );\n         task = (ServiceTask) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_incoming.getTrg ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = inFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) inFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n         // check link incoming from inFlow to task\n         JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n         ));\n\n         // bind object\n         _TmpObject = inFlow.getSourceRef ();\n\n         // ensure correct type and really bound of object flowNode\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         flowNode = (ParallelGateway) _TmpObject;\n\n         // check link flowElements from flowNode to process\n         JavaSDM.ensure (process.equals (flowNode.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to outFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToOutFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToOutFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToOutFlow.next ();\n\n               // ensure correct type and really bound of object outFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               outFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link outgoing from outFlow to task\n               JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n               ));\n\n               // iterate to-many link laneSets from process to laneSet\n               fujaba__Success = false;\n\n               fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n               while ( fujaba__IterProcessToLaneSet.hasNext () )\n               {\n                  try\n                  {\n                     laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                     // check object laneSet is really bound\n                     JavaSDM.ensure ( laneSet != null );\n                     // iterate to-many link lanes from laneSet to lane\n                     fujaba__Success = false;\n\n                     fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                     while ( fujaba__IterLaneSetToLane.hasNext () )\n                     {\n                        try\n                        {\n                           lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                           // check object lane is really bound\n                           JavaSDM.ensure ( lane != null );\n                           // check link flowNodeRefs from lane to task\n                           JavaSDM.ensure (lane.getFlowNodeRefs ().contains (task));\n\n                           // iterate to-many link src from inFlow to _edge_targetRef\n                           fujaba__Success = false;\n\n                           fujaba__IterInFlowTo_edge_targetRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,EMoflonEdge.class,\"src\")).iterator ();\n\n                           while ( fujaba__IterInFlowTo_edge_targetRef.hasNext () )\n                           {\n                              try\n                              {\n                                 _edge_targetRef = (EMoflonEdge) fujaba__IterInFlowTo_edge_targetRef.next ();\n\n                                 // check object _edge_targetRef is really bound\n                                 JavaSDM.ensure ( _edge_targetRef != null );\n                                 // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                                 JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                                 // check link trg from _edge_targetRef to task\n                                 JavaSDM.ensure (task.equals (_edge_targetRef.getTrg ()\n                                 ));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_outFlow_flowElements_399701 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                       // check object __DEC_outFlow_flowElements_399701 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_flowElements_399701 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_outFlow_flowElements_399701.getFlowElements().contains(outFlow));\n\n                                       // check isomorphic binding between objects __DEC_outFlow_flowElements_399701 and process \n                                       JavaSDM.ensure ( !__DEC_outFlow_flowElements_399701.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_task_flowElements_328853 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                                       // check object __DEC_task_flowElements_328853 is really bound\n                                       JavaSDM.ensure ( __DEC_task_flowElements_328853 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_task_flowElements_328853.getFlowElements().contains(task));\n\n                                       // check isomorphic binding between objects __DEC_task_flowElements_328853 and process \n                                       JavaSDM.ensure ( !__DEC_task_flowElements_328853.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link default from outFlow\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link incoming from task to __DEC_task_targetRef_79575\n                                       fujaba__Success = false;\n\n                                       fujaba__IterTaskTo__DEC_task_targetRef_79575 = new ArrayList(task.getIncoming()).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_79575.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_task_targetRef_79575 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_79575.next ();\n\n                                             // check object __DEC_task_targetRef_79575 is really bound\n                                             JavaSDM.ensure ( __DEC_task_targetRef_79575 != null );\n                                             // check isomorphic binding between objects __DEC_task_targetRef_79575 and inFlow \n                                             JavaSDM.ensure ( !__DEC_task_targetRef_79575.equals (inFlow) );\n\n                                             // check isomorphic binding between objects __DEC_task_targetRef_79575 and outFlow \n                                             JavaSDM.ensure ( !__DEC_task_targetRef_79575.equals (outFlow) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_incoming is really bound\n                                    JavaSDM.ensure ( _edge_incoming != null );\n                                    // check object _edge_targetRef is really bound\n                                    JavaSDM.ensure ( _edge_targetRef != null );\n                                    // check object flowNode is really bound\n                                    JavaSDM.ensure ( flowNode != null );\n                                    // check object inFlow is really bound\n                                    JavaSDM.ensure ( inFlow != null );\n                                    // check object lane is really bound\n                                    JavaSDM.ensure ( lane != null );\n                                    // check object laneSet is really bound\n                                    JavaSDM.ensure ( laneSet != null );\n                                    // check object outFlow is really bound\n                                    JavaSDM.ensure ( outFlow != null );\n                                    // check object process is really bound\n                                    JavaSDM.ensure ( process != null );\n                                    // check object task is really bound\n                                    JavaSDM.ensure ( task != null );\n                                    // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                                    JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                                    // check isomorphic binding between objects outFlow and inFlow \n                                    JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                    // check link flowElements from flowNode to process\n                                    JavaSDM.ensure (process.equals (flowNode.eContainer()\n                                    ));\n\n                                    // check link flowElements from inFlow to process\n                                    JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from outFlow to process\n                                    JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from task to process\n                                    JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,bpmn2.Process.class,\"$eContainer\")\n                                    .contains (process)));\n\n                                    // check link incoming from inFlow to task\n                                    JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                                    ));\n\n                                    // check link incoming from outFlow to task\n                                    JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                                    )));\n\n                                    // check link laneSets from laneSet to process\n                                    JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                    ));\n\n                                    // check link lanes from lane to laneSet\n                                    JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                    ));\n\n                                    // check link outgoing from inFlow to flowNode\n                                    JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                                    ));\n\n                                    // check link outgoing from outFlow to task\n                                    JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                                    ));\n\n                                    // check link src from _edge_incoming to task\n                                    JavaSDM.ensure (task.equals (_edge_incoming.getSrc ()\n                                    ));\n\n                                    // check link src from _edge_targetRef to inFlow\n                                    JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_incoming to inFlow\n                                    JavaSDM.ensure (inFlow.equals (_edge_incoming.getTrg ()\n                                    ));\n\n                                    // check link trg from _edge_targetRef to task\n                                    JavaSDM.ensure (task.equals (_edge_targetRef.getTrg ()\n                                    ));\n\n                                    // check link flowNodeRefs from lane to task\n                                    JavaSDM.ensure (lane.getFlowNodeRefs ().contains (task));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_FWD(match,flowNode,process,task,inFlow,outFlow,laneSet,lane);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'\'\n                                       fujaba__Success = this.checkTypes_FWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_194(
			EMoflonEdge _edge_incoming);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_741545 = null;\n      FlowElementsContainer __DEC_task_flowElements_322012 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_20008 = null;\n      SequenceFlow __DEC_task_targetRef_20008 = null;\n      Match match = null;\n      ServiceTask task = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterProcessToFlowNode = null;\n      ParallelGateway flowNode = null;\n      SequenceFlow outFlow = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      bpmn2.Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // iterate to-many link laneSets from process to laneSet\n         fujaba__Success = false;\n\n         fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n         while ( fujaba__IterProcessToLaneSet.hasNext () )\n         {\n            try\n            {\n               laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n               // check object laneSet is really bound\n               JavaSDM.ensure ( laneSet != null );\n               // iterate to-many link lanes from laneSet to lane\n               fujaba__Success = false;\n\n               fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n               while ( fujaba__IterLaneSetToLane.hasNext () )\n               {\n                  try\n                  {\n                     lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                     // check object lane is really bound\n                     JavaSDM.ensure ( lane != null );\n                     // bind object\n                     _TmpObject = _edge_flowElements.getTrg ();\n\n                     // ensure correct type and really bound of object outFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     outFlow = (SequenceFlow) _TmpObject;\n\n                     // check link flowElements from outFlow to process\n                     JavaSDM.ensure (process.equals (outFlow.eContainer()\n                     ));\n\n                     // iterate to-many link flowElements from process to flowNode\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToFlowNode = new ArrayList(process.getFlowElements()).iterator ();\n\n                     while ( fujaba__IterProcessToFlowNode.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterProcessToFlowNode.next ();\n\n                           // ensure correct type and really bound of object flowNode\n                           JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n                           flowNode = (ParallelGateway) _TmpObject;\n                           // iterate to-many link flowElements from process to inFlow\n                           fujaba__Success = false;\n\n                           fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n                           while ( fujaba__IterProcessToInFlow.hasNext () )\n                           {\n                              try\n                              {\n                                 _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n                                 // ensure correct type and really bound of object inFlow\n                                 JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                                 inFlow = (SequenceFlow) _TmpObject;\n                                 // check isomorphic binding between objects outFlow and inFlow \n                                 JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                 // bind object\n                                 _TmpObject = inFlow.getTargetRef ();\n\n                                 // ensure correct type and really bound of object task\n                                 JavaSDM.ensure ( _TmpObject instanceof ServiceTask );\n                                 task = (ServiceTask) _TmpObject;\n\n                                 // check link outgoing from inFlow to flowNode\n                                 JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                                 ));\n\n                                 // check link outgoing from outFlow to task\n                                 JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                                 ));\n\n                                 // check link flowNodeRefs from lane to task\n                                 JavaSDM.ensure (lane.getFlowNodeRefs ().contains (task));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_outFlow_flowElements_741545 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                       // check object __DEC_outFlow_flowElements_741545 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_flowElements_741545 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_outFlow_flowElements_741545.getFlowElements().contains(outFlow));\n\n                                       // check isomorphic binding between objects __DEC_outFlow_flowElements_741545 and process \n                                       JavaSDM.ensure ( !__DEC_outFlow_flowElements_741545.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_task_flowElements_322012 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                                       // check object __DEC_task_flowElements_322012 is really bound\n                                       JavaSDM.ensure ( __DEC_task_flowElements_322012 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_task_flowElements_322012.getFlowElements().contains(task));\n\n                                       // check isomorphic binding between objects __DEC_task_flowElements_322012 and process \n                                       JavaSDM.ensure ( !__DEC_task_flowElements_322012.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link default from outFlow\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link incoming from task to __DEC_task_targetRef_20008\n                                       fujaba__Success = false;\n\n                                       fujaba__IterTaskTo__DEC_task_targetRef_20008 = new ArrayList(task.getIncoming()).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_20008.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_task_targetRef_20008 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_20008.next ();\n\n                                             // check object __DEC_task_targetRef_20008 is really bound\n                                             JavaSDM.ensure ( __DEC_task_targetRef_20008 != null );\n                                             // check isomorphic binding between objects __DEC_task_targetRef_20008 and inFlow \n                                             JavaSDM.ensure ( !__DEC_task_targetRef_20008.equals (inFlow) );\n\n                                             // check isomorphic binding between objects __DEC_task_targetRef_20008 and outFlow \n                                             JavaSDM.ensure ( !__DEC_task_targetRef_20008.equals (outFlow) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_flowElements is really bound\n                                    JavaSDM.ensure ( _edge_flowElements != null );\n                                    // check object flowNode is really bound\n                                    JavaSDM.ensure ( flowNode != null );\n                                    // check object inFlow is really bound\n                                    JavaSDM.ensure ( inFlow != null );\n                                    // check object lane is really bound\n                                    JavaSDM.ensure ( lane != null );\n                                    // check object laneSet is really bound\n                                    JavaSDM.ensure ( laneSet != null );\n                                    // check object outFlow is really bound\n                                    JavaSDM.ensure ( outFlow != null );\n                                    // check object process is really bound\n                                    JavaSDM.ensure ( process != null );\n                                    // check object task is really bound\n                                    JavaSDM.ensure ( task != null );\n                                    // check isomorphic binding between objects outFlow and inFlow \n                                    JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                    // check link flowElements from flowNode to process\n                                    JavaSDM.ensure (process.equals (flowNode.eContainer()\n                                    ));\n\n                                    // check link flowElements from inFlow to process\n                                    JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from outFlow to process\n                                    JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from task to process\n                                    JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,bpmn2.Process.class,\"$eContainer\")\n                                    .contains (process)));\n\n                                    // check link incoming from inFlow to task\n                                    JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                                    ));\n\n                                    // check link incoming from outFlow to task\n                                    JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                                    )));\n\n                                    // check link laneSets from laneSet to process\n                                    JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                    ));\n\n                                    // check link lanes from lane to laneSet\n                                    JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                    ));\n\n                                    // check link outgoing from inFlow to flowNode\n                                    JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                                    ));\n\n                                    // check link outgoing from outFlow to task\n                                    JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                                    ));\n\n                                    // check link src from _edge_flowElements to process\n                                    JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_flowElements to outFlow\n                                    JavaSDM.ensure (outFlow.equals (_edge_flowElements.getTrg ()\n                                    ));\n\n                                    // check link flowNodeRefs from lane to task\n                                    JavaSDM.ensure (lane.getFlowNodeRefs ().contains (task));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_FWD(match,flowNode,process,task,inFlow,outFlow,laneSet,lane);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'\'\n                                       fujaba__Success = this.checkTypes_FWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_195(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_942273 = null;\n      FlowElementsContainer __DEC_task_flowElements_905224 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_560800 = null;\n      SequenceFlow __DEC_task_targetRef_560800 = null;\n      Match match = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterProcessToFlowNode = null;\n      ParallelGateway flowNode = null;\n      bpmn2.Process process = null;\n      SequenceFlow outFlow = null;\n      ServiceTask task = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sourceRef is really bound\n         JavaSDM.ensure ( _edge_sourceRef != null );\n         // bind object\n         _TmpObject = _edge_sourceRef.getTrg ();\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof ServiceTask );\n         task = (ServiceTask) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_sourceRef.getSrc ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = outFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) outFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(outFlow));\n\n         // check link outgoing from outFlow to task\n         JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link flowElements from process to flowNode\n         fujaba__Success = false;\n\n         fujaba__IterProcessToFlowNode = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToFlowNode.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToFlowNode.next ();\n\n               // ensure correct type and really bound of object flowNode\n               JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n               flowNode = (ParallelGateway) _TmpObject;\n               // iterate to-many link flowElements from process to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n                     // ensure correct type and really bound of object inFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     inFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link incoming from inFlow to task\n                     JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                     ));\n\n                     // check link outgoing from inFlow to flowNode\n                     JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                     ));\n\n                     // iterate to-many link laneSets from process to laneSet\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                     while ( fujaba__IterProcessToLaneSet.hasNext () )\n                     {\n                        try\n                        {\n                           laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                           // check object laneSet is really bound\n                           JavaSDM.ensure ( laneSet != null );\n                           // iterate to-many link lanes from laneSet to lane\n                           fujaba__Success = false;\n\n                           fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                           while ( fujaba__IterLaneSetToLane.hasNext () )\n                           {\n                              try\n                              {\n                                 lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                 // check object lane is really bound\n                                 JavaSDM.ensure ( lane != null );\n                                 // check link flowNodeRefs from lane to task\n                                 JavaSDM.ensure (lane.getFlowNodeRefs ().contains (task));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_outFlow_flowElements_942273 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                       // check object __DEC_outFlow_flowElements_942273 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_flowElements_942273 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_outFlow_flowElements_942273.getFlowElements().contains(outFlow));\n\n                                       // check isomorphic binding between objects __DEC_outFlow_flowElements_942273 and process \n                                       JavaSDM.ensure ( !__DEC_outFlow_flowElements_942273.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_task_flowElements_905224 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                                       // check object __DEC_task_flowElements_905224 is really bound\n                                       JavaSDM.ensure ( __DEC_task_flowElements_905224 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_task_flowElements_905224.getFlowElements().contains(task));\n\n                                       // check isomorphic binding between objects __DEC_task_flowElements_905224 and process \n                                       JavaSDM.ensure ( !__DEC_task_flowElements_905224.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link default from outFlow\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link incoming from task to __DEC_task_targetRef_560800\n                                       fujaba__Success = false;\n\n                                       fujaba__IterTaskTo__DEC_task_targetRef_560800 = new ArrayList(task.getIncoming()).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_560800.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_task_targetRef_560800 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_560800.next ();\n\n                                             // check object __DEC_task_targetRef_560800 is really bound\n                                             JavaSDM.ensure ( __DEC_task_targetRef_560800 != null );\n                                             // check isomorphic binding between objects __DEC_task_targetRef_560800 and inFlow \n                                             JavaSDM.ensure ( !__DEC_task_targetRef_560800.equals (inFlow) );\n\n                                             // check isomorphic binding between objects __DEC_task_targetRef_560800 and outFlow \n                                             JavaSDM.ensure ( !__DEC_task_targetRef_560800.equals (outFlow) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_sourceRef is really bound\n                                    JavaSDM.ensure ( _edge_sourceRef != null );\n                                    // check object flowNode is really bound\n                                    JavaSDM.ensure ( flowNode != null );\n                                    // check object inFlow is really bound\n                                    JavaSDM.ensure ( inFlow != null );\n                                    // check object lane is really bound\n                                    JavaSDM.ensure ( lane != null );\n                                    // check object laneSet is really bound\n                                    JavaSDM.ensure ( laneSet != null );\n                                    // check object outFlow is really bound\n                                    JavaSDM.ensure ( outFlow != null );\n                                    // check object process is really bound\n                                    JavaSDM.ensure ( process != null );\n                                    // check object task is really bound\n                                    JavaSDM.ensure ( task != null );\n                                    // check isomorphic binding between objects outFlow and inFlow \n                                    JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                    // check link flowElements from flowNode to process\n                                    JavaSDM.ensure (process.equals (flowNode.eContainer()\n                                    ));\n\n                                    // check link flowElements from inFlow to process\n                                    JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from outFlow to process\n                                    JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from task to process\n                                    JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,bpmn2.Process.class,\"$eContainer\")\n                                    .contains (process)));\n\n                                    // check link incoming from inFlow to task\n                                    JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                                    ));\n\n                                    // check link incoming from outFlow to task\n                                    JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                                    )));\n\n                                    // check link laneSets from laneSet to process\n                                    JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                    ));\n\n                                    // check link lanes from lane to laneSet\n                                    JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                    ));\n\n                                    // check link outgoing from inFlow to flowNode\n                                    JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                                    ));\n\n                                    // check link outgoing from outFlow to task\n                                    JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                                    ));\n\n                                    // check link src from _edge_sourceRef to outFlow\n                                    JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_sourceRef to task\n                                    JavaSDM.ensure (task.equals (_edge_sourceRef.getTrg ()\n                                    ));\n\n                                    // check link flowNodeRefs from lane to task\n                                    JavaSDM.ensure (lane.getFlowNodeRefs ().contains (task));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_FWD(match,flowNode,process,task,inFlow,outFlow,laneSet,lane);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'\'\n                                       fujaba__Success = this.checkTypes_FWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_196(
			EMoflonEdge _edge_sourceRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_761900 = null;\n      FlowElementsContainer __DEC_task_flowElements_399868 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_515630 = null;\n      SequenceFlow __DEC_task_targetRef_515630 = null;\n      Match match = null;\n      Iterator fujaba__IterOutFlowTo_edge_sourceRef = null;\n      EMoflonEdge _edge_sourceRef = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterProcessToFlowNode = null;\n      ParallelGateway flowNode = null;\n      bpmn2.Process process = null;\n      SequenceFlow outFlow = null;\n      ServiceTask task = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_outgoing is really bound\n         JavaSDM.ensure ( _edge_outgoing != null );\n         // bind object\n         _TmpObject = _edge_outgoing.getSrc ();\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof ServiceTask );\n         task = (ServiceTask) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_outgoing.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = outFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) outFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(outFlow));\n\n         // check link outgoing from outFlow to task\n         JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link flowElements from process to flowNode\n         fujaba__Success = false;\n\n         fujaba__IterProcessToFlowNode = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToFlowNode.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToFlowNode.next ();\n\n               // ensure correct type and really bound of object flowNode\n               JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n               flowNode = (ParallelGateway) _TmpObject;\n               // iterate to-many link flowElements from process to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n                     // ensure correct type and really bound of object inFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     inFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link incoming from inFlow to task\n                     JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                     ));\n\n                     // check link outgoing from inFlow to flowNode\n                     JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                     ));\n\n                     // iterate to-many link laneSets from process to laneSet\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                     while ( fujaba__IterProcessToLaneSet.hasNext () )\n                     {\n                        try\n                        {\n                           laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                           // check object laneSet is really bound\n                           JavaSDM.ensure ( laneSet != null );\n                           // iterate to-many link lanes from laneSet to lane\n                           fujaba__Success = false;\n\n                           fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                           while ( fujaba__IterLaneSetToLane.hasNext () )\n                           {\n                              try\n                              {\n                                 lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                 // check object lane is really bound\n                                 JavaSDM.ensure ( lane != null );\n                                 // check link flowNodeRefs from lane to task\n                                 JavaSDM.ensure (lane.getFlowNodeRefs ().contains (task));\n\n                                 // iterate to-many link src from outFlow to _edge_sourceRef\n                                 fujaba__Success = false;\n\n                                 fujaba__IterOutFlowTo_edge_sourceRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,EMoflonEdge.class,\"src\")).iterator ();\n\n                                 while ( fujaba__IterOutFlowTo_edge_sourceRef.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       _edge_sourceRef = (EMoflonEdge) fujaba__IterOutFlowTo_edge_sourceRef.next ();\n\n                                       // check object _edge_sourceRef is really bound\n                                       JavaSDM.ensure ( _edge_sourceRef != null );\n                                       // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                                       JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                                       // check link trg from _edge_sourceRef to task\n                                       JavaSDM.ensure (task.equals (_edge_sourceRef.getTrg ()\n                                       ));\n\n                                       // story node \'test core match and DECs\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_outFlow_flowElements_761900 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                             // check object __DEC_outFlow_flowElements_761900 is really bound\n                                             JavaSDM.ensure ( __DEC_outFlow_flowElements_761900 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_outFlow_flowElements_761900.getFlowElements().contains(outFlow));\n\n                                             // check isomorphic binding between objects __DEC_outFlow_flowElements_761900 and process \n                                             JavaSDM.ensure ( !__DEC_outFlow_flowElements_761900.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_task_flowElements_399868 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                                             // check object __DEC_task_flowElements_399868 is really bound\n                                             JavaSDM.ensure ( __DEC_task_flowElements_399868 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_task_flowElements_399868.getFlowElements().contains(task));\n\n                                             // check isomorphic binding between objects __DEC_task_flowElements_399868 and process \n                                             JavaSDM.ensure ( !__DEC_task_flowElements_399868.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // negative check for link default from outFlow\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // iterate to-many link incoming from task to __DEC_task_targetRef_515630\n                                             fujaba__Success = false;\n\n                                             fujaba__IterTaskTo__DEC_task_targetRef_515630 = new ArrayList(task.getIncoming()).iterator ();\n\n                                             while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_515630.hasNext () )\n                                             {\n                                                try\n                                                {\n                                                   __DEC_task_targetRef_515630 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_515630.next ();\n\n                                                   // check object __DEC_task_targetRef_515630 is really bound\n                                                   JavaSDM.ensure ( __DEC_task_targetRef_515630 != null );\n                                                   // check isomorphic binding between objects __DEC_task_targetRef_515630 and inFlow \n                                                   JavaSDM.ensure ( !__DEC_task_targetRef_515630.equals (inFlow) );\n\n                                                   // check isomorphic binding between objects __DEC_task_targetRef_515630 and outFlow \n                                                   JavaSDM.ensure ( !__DEC_task_targetRef_515630.equals (outFlow) );\n\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n                                             }\n                                             JavaSDM.ensure (fujaba__Success);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check object _edge_outgoing is really bound\n                                          JavaSDM.ensure ( _edge_outgoing != null );\n                                          // check object _edge_sourceRef is really bound\n                                          JavaSDM.ensure ( _edge_sourceRef != null );\n                                          // check object flowNode is really bound\n                                          JavaSDM.ensure ( flowNode != null );\n                                          // check object inFlow is really bound\n                                          JavaSDM.ensure ( inFlow != null );\n                                          // check object lane is really bound\n                                          JavaSDM.ensure ( lane != null );\n                                          // check object laneSet is really bound\n                                          JavaSDM.ensure ( laneSet != null );\n                                          // check object outFlow is really bound\n                                          JavaSDM.ensure ( outFlow != null );\n                                          // check object process is really bound\n                                          JavaSDM.ensure ( process != null );\n                                          // check object task is really bound\n                                          JavaSDM.ensure ( task != null );\n                                          // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                                          JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                                          // check isomorphic binding between objects outFlow and inFlow \n                                          JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                          // check link flowElements from flowNode to process\n                                          JavaSDM.ensure (process.equals (flowNode.eContainer()\n                                          ));\n\n                                          // check link flowElements from inFlow to process\n                                          JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                          ));\n\n                                          // check link flowElements from outFlow to process\n                                          JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                          ));\n\n                                          // check link flowElements from task to process\n                                          JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,bpmn2.Process.class,\"$eContainer\")\n                                          .contains (process)));\n\n                                          // check link incoming from inFlow to task\n                                          JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                                          ));\n\n                                          // check link incoming from outFlow to task\n                                          JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                                          )));\n\n                                          // check link laneSets from laneSet to process\n                                          JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                          ));\n\n                                          // check link lanes from lane to laneSet\n                                          JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                          ));\n\n                                          // check link outgoing from inFlow to flowNode\n                                          JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                                          ));\n\n                                          // check link outgoing from outFlow to task\n                                          JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                                          ));\n\n                                          // check link src from _edge_outgoing to task\n                                          JavaSDM.ensure (task.equals (_edge_outgoing.getSrc ()\n                                          ));\n\n                                          // check link src from _edge_sourceRef to outFlow\n                                          JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                                          ));\n\n                                          // check link trg from _edge_outgoing to outFlow\n                                          JavaSDM.ensure (outFlow.equals (_edge_outgoing.getTrg ()\n                                          ));\n\n                                          // check link trg from _edge_sourceRef to task\n                                          JavaSDM.ensure (task.equals (_edge_sourceRef.getTrg ()\n                                          ));\n\n                                          // check link flowNodeRefs from lane to task\n                                          JavaSDM.ensure (lane.getFlowNodeRefs ().contains (task));\n\n                                          // create object match\n                                          match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                          // assign attribute match\n                                          match.setRuleName (__eClass.getName());\n                                          // statement node \'bookkeeping with generic isAppropriate method\'\n                                          fujaba__Success = this.isAppropriate_FWD(match,flowNode,process,task,inFlow,outFlow,laneSet,lane);\n                                          if (fujaba__Success)\n                                          {\n                                             // statement node \'\'\n                                             fujaba__Success = this.checkTypes_FWD(match);\n                                             if (fujaba__Success)\n                                             {\n                                                // story node \'Add match to rule result\'\n                                                try \n                                                {\n                                                   fujaba__Success = false; \n\n                                                   // check object __performOperation is really bound\n                                                   JavaSDM.ensure ( __performOperation != null );\n                                                   // check object __result is really bound\n                                                   JavaSDM.ensure ( __result != null );\n                                                   // check object match is really bound\n                                                   JavaSDM.ensure ( match != null );\n\n                                                   // create link\n                                                   org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                                   // create link\n                                                   __result.getContents().add(match);\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n\n\n                                             }\n                                             else\n                                             {\n\n                                             }\n\n                                          }\n                                          else\n                                          {\n\n                                          }\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_197(
			EMoflonEdge _edge_outgoing);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_normalStep_steps_280715 = null;\n      Iterator fujaba__IterNormalStepTo__DEC_normalStep_next_179342 = null;\n      Step __DEC_normalStep_next_179342 = null;\n      Match match = null;\n      Actor actor = null;\n      Flow flow = null;\n      NormalStep normalStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_actor is really bound\n         JavaSDM.ensure ( _edge_actor != null );\n         // bind object\n         _TmpObject = _edge_actor.getSrc ();\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n\n         // bind object\n         flow = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(normalStep));\n\n         // bind object\n         _TmpObject = _edge_actor.getTrg ();\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n\n         // check link actor from normalStep to actor\n         JavaSDM.ensure (actor.equals (normalStep.getActor ()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_normalStep_steps_280715 = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n               // check object __DEC_normalStep_steps_280715 is really bound\n               JavaSDM.ensure ( __DEC_normalStep_steps_280715 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_normalStep_steps_280715.getSteps().contains(normalStep));\n\n               // check isomorphic binding between objects __DEC_normalStep_steps_280715 and flow \n               JavaSDM.ensure ( !__DEC_normalStep_steps_280715.equals (flow) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link next from normalStep to __DEC_normalStep_next_179342\n               fujaba__Success = false;\n\n               fujaba__IterNormalStepTo__DEC_normalStep_next_179342 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterNormalStepTo__DEC_normalStep_next_179342.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_normalStep_next_179342 = (Step) fujaba__IterNormalStepTo__DEC_normalStep_next_179342.next ();\n\n                     // check object __DEC_normalStep_next_179342 is really bound\n                     JavaSDM.ensure ( __DEC_normalStep_next_179342 != null );\n                     // check isomorphic binding between objects __DEC_normalStep_next_179342 and normalStep \n                     JavaSDM.ensure ( !__DEC_normalStep_next_179342.equals (normalStep) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check object _edge_actor is really bound\n            JavaSDM.ensure ( _edge_actor != null );\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check link actor from normalStep to actor\n            JavaSDM.ensure (actor.equals (normalStep.getActor ()\n            ));\n\n            // check link src from _edge_actor to normalStep\n            JavaSDM.ensure (normalStep.equals (_edge_actor.getSrc ()\n            ));\n\n            // check link steps from normalStep to flow\n            JavaSDM.ensure (flow.equals (normalStep.eContainer()\n            ));\n\n            // check link trg from _edge_actor to actor\n            JavaSDM.ensure (actor.equals (_edge_actor.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,actor,normalStep,flow);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_60(EMoflonEdge _edge_actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_normalStep_steps_920816 = null;\n      Iterator fujaba__IterNormalStepTo__DEC_normalStep_next_49105 = null;\n      Step __DEC_normalStep_next_49105 = null;\n      Match match = null;\n      Actor actor = null;\n      NormalStep normalStep = null;\n      Flow flow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_steps is really bound\n         JavaSDM.ensure ( _edge_steps != null );\n         // bind object\n         _TmpObject = _edge_steps.getSrc ();\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_steps.getTrg ();\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n\n         // bind object\n         actor = normalStep.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // check link steps from normalStep to flow\n         JavaSDM.ensure (flow.equals (normalStep.eContainer()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_normalStep_steps_920816 = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n               // check object __DEC_normalStep_steps_920816 is really bound\n               JavaSDM.ensure ( __DEC_normalStep_steps_920816 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_normalStep_steps_920816.getSteps().contains(normalStep));\n\n               // check isomorphic binding between objects __DEC_normalStep_steps_920816 and flow \n               JavaSDM.ensure ( !__DEC_normalStep_steps_920816.equals (flow) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link next from normalStep to __DEC_normalStep_next_49105\n               fujaba__Success = false;\n\n               fujaba__IterNormalStepTo__DEC_normalStep_next_49105 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterNormalStepTo__DEC_normalStep_next_49105.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_normalStep_next_49105 = (Step) fujaba__IterNormalStepTo__DEC_normalStep_next_49105.next ();\n\n                     // check object __DEC_normalStep_next_49105 is really bound\n                     JavaSDM.ensure ( __DEC_normalStep_next_49105 != null );\n                     // check isomorphic binding between objects __DEC_normalStep_next_49105 and normalStep \n                     JavaSDM.ensure ( !__DEC_normalStep_next_49105.equals (normalStep) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check object _edge_steps is really bound\n            JavaSDM.ensure ( _edge_steps != null );\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check link actor from normalStep to actor\n            JavaSDM.ensure (actor.equals (normalStep.getActor ()\n            ));\n\n            // check link src from _edge_steps to flow\n            JavaSDM.ensure (flow.equals (_edge_steps.getSrc ()\n            ));\n\n            // check link steps from normalStep to flow\n            JavaSDM.ensure (flow.equals (normalStep.eContainer()\n            ));\n\n            // check link trg from _edge_steps to normalStep\n            JavaSDM.ensure (normalStep.equals (_edge_steps.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,actor,normalStep,flow);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_61(EMoflonEdge _edge_steps);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_660755 = null;\n      FlowElementsContainer __DEC_task_flowElements_412944 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_930529 = null;\n      SequenceFlow __DEC_task_targetRef_930529 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      ParallelGateway flowNode = null;\n      bpmn2.Process process = null;\n      Iterator fujaba__IterTaskToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterTaskToOutFlow = null;\n      SequenceFlow outFlow = null;\n      ServiceTask task = null;\n      Lane lane = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowNodeRefs is really bound\n         JavaSDM.ensure ( _edge_flowNodeRefs != null );\n         // bind object\n         _TmpObject = _edge_flowNodeRefs.getSrc ();\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowNodeRefs.getTrg ();\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof ServiceTask );\n         task = (ServiceTask) _TmpObject;\n\n         // check link flowNodeRefs from lane to task\n         JavaSDM.ensure (lane.getFlowNodeRefs ().contains (task));\n\n         // iterate to-many link outgoing from task to outFlow\n         fujaba__Success = false;\n\n         fujaba__IterTaskToOutFlow = new ArrayList(task.getOutgoing()).iterator ();\n\n         while ( fujaba__IterTaskToOutFlow.hasNext () )\n         {\n            try\n            {\n               outFlow = (SequenceFlow) fujaba__IterTaskToOutFlow.next ();\n\n               // check object outFlow is really bound\n               JavaSDM.ensure ( outFlow != null );\n               // iterate to-many link incoming from task to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterTaskToInFlow = new ArrayList(task.getIncoming()).iterator ();\n\n               while ( fujaba__IterTaskToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     inFlow = (SequenceFlow) fujaba__IterTaskToInFlow.next ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // bind object\n                     _TmpObject = inFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) inFlow.eContainer() : null;\n\n                     // ensure correct type and really bound of object process\n                     JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n                     process = (bpmn2.Process) _TmpObject;\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n                     // check link flowElements from outFlow to process\n                     JavaSDM.ensure (process.equals (outFlow.eContainer()\n                     ));\n\n                     // bind object\n                     _TmpObject = inFlow.getSourceRef ();\n\n                     // ensure correct type and really bound of object flowNode\n                     JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n                     flowNode = (ParallelGateway) _TmpObject;\n\n                     // check link flowElements from flowNode to process\n                     JavaSDM.ensure (process.equals (flowNode.eContainer()\n                     ));\n\n                     // iterate to-many link laneSets from process to laneSet\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                     while ( fujaba__IterProcessToLaneSet.hasNext () )\n                     {\n                        try\n                        {\n                           laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                           // check object laneSet is really bound\n                           JavaSDM.ensure ( laneSet != null );\n                           // check link lanes from lane to laneSet\n                           JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_outFlow_flowElements_660755 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                 // check object __DEC_outFlow_flowElements_660755 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_flowElements_660755 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_outFlow_flowElements_660755.getFlowElements().contains(outFlow));\n\n                                 // check isomorphic binding between objects __DEC_outFlow_flowElements_660755 and process \n                                 JavaSDM.ensure ( !__DEC_outFlow_flowElements_660755.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_task_flowElements_412944 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                                 // check object __DEC_task_flowElements_412944 is really bound\n                                 JavaSDM.ensure ( __DEC_task_flowElements_412944 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_task_flowElements_412944.getFlowElements().contains(task));\n\n                                 // check isomorphic binding between objects __DEC_task_flowElements_412944 and process \n                                 JavaSDM.ensure ( !__DEC_task_flowElements_412944.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link default from outFlow\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link incoming from task to __DEC_task_targetRef_930529\n                                 fujaba__Success = false;\n\n                                 fujaba__IterTaskTo__DEC_task_targetRef_930529 = new ArrayList(task.getIncoming()).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_930529.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_task_targetRef_930529 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_930529.next ();\n\n                                       // check object __DEC_task_targetRef_930529 is really bound\n                                       JavaSDM.ensure ( __DEC_task_targetRef_930529 != null );\n                                       // check isomorphic binding between objects __DEC_task_targetRef_930529 and inFlow \n                                       JavaSDM.ensure ( !__DEC_task_targetRef_930529.equals (inFlow) );\n\n                                       // check isomorphic binding between objects __DEC_task_targetRef_930529 and outFlow \n                                       JavaSDM.ensure ( !__DEC_task_targetRef_930529.equals (outFlow) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_flowNodeRefs is really bound\n                              JavaSDM.ensure ( _edge_flowNodeRefs != null );\n                              // check object flowNode is really bound\n                              JavaSDM.ensure ( flowNode != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object lane is really bound\n                              JavaSDM.ensure ( lane != null );\n                              // check object laneSet is really bound\n                              JavaSDM.ensure ( laneSet != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object task is really bound\n                              JavaSDM.ensure ( task != null );\n                              // check isomorphic binding between objects outFlow and inFlow \n                              JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                              // check link flowElements from flowNode to process\n                              JavaSDM.ensure (process.equals (flowNode.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link flowElements from task to process\n                              JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,bpmn2.Process.class,\"$eContainer\")\n                              .contains (process)));\n\n                              // check link incoming from inFlow to task\n                              JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link incoming from outFlow to task\n                              JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                              )));\n\n                              // check link laneSets from laneSet to process\n                              JavaSDM.ensure (process.equals (laneSet.eContainer()\n                              ));\n\n                              // check link lanes from lane to laneSet\n                              JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                              ));\n\n                              // check link outgoing from inFlow to flowNode\n                              JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                              ));\n\n                              // check link outgoing from outFlow to task\n                              JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link src from _edge_flowNodeRefs to lane\n                              JavaSDM.ensure (lane.equals (_edge_flowNodeRefs.getSrc ()\n                              ));\n\n                              // check link trg from _edge_flowNodeRefs to task\n                              JavaSDM.ensure (task.equals (_edge_flowNodeRefs.getTrg ()\n                              ));\n\n                              // check link flowNodeRefs from lane to task\n                              JavaSDM.ensure (lane.getFlowNodeRefs ().contains (task));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_FWD(match,flowNode,process,task,inFlow,outFlow,laneSet,lane);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'\'\n                                 fujaba__Success = this.checkTypes_FWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_198(
			EMoflonEdge _edge_flowNodeRefs);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      ModelgeneratorRuleResult ruleResult = null;\n      IsApplicableMatch isApplicableMatch = null;\n      Object _TmpObject = null;\n      CSP csp = null;\n      SequenceFlow outFlow = null;\n      NormalStep normalStep = null;\n      ServiceTask task = null;\n      FlowNodeToStep taskToNormalStep = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToFlow = null;\n      Actor actor = null;\n      Iterator fujaba__IterProcessToProcessToActor = null;\n      ProcessToActor processToActor = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Flow flow = null;\n      ParallelGateway flowNode = null;\n      bpmn2.Process process = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterInFlowToFlowListToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Iterator fujaba__IterRuleEntryContainerToInFlowToFlowList = null;\n      RuleEntryList inFlowToFlowList = null;\n\n      // story node \'create result\'\n      try \n      {\n         fujaba__Success = false; \n\n         // create object ruleResult\n         ruleResult = TGGRuntimeFactory.eINSTANCE.createModelgeneratorRuleResult();\n\n         // create object isApplicableMatch\n         isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n         // assign attribute ruleResult\n         ruleResult.setSuccess (false);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'is applicable core\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object ruleEntryContainer is really bound\n         JavaSDM.ensure ( ruleEntryContainer != null );\n         // iterate to-many link ruleEntryList from ruleEntryContainer to inFlowToFlowList\n         fujaba__Success = false;\n\n         fujaba__IterRuleEntryContainerToInFlowToFlowList = new ArrayList(ruleEntryContainer.getRuleEntryList()).iterator ();\n\n         while ( fujaba__IterRuleEntryContainerToInFlowToFlowList.hasNext () )\n         {\n            try\n            {\n               inFlowToFlowList = (RuleEntryList) fujaba__IterRuleEntryContainerToInFlowToFlowList.next ();\n\n               // check object inFlowToFlowList is really bound\n               JavaSDM.ensure ( inFlowToFlowList != null );\n               // iterate to-many link entryObjects from inFlowToFlowList to inFlowToFlow\n               fujaba__Success = false;\n\n               fujaba__IterInFlowToFlowListToInFlowToFlow = new ArrayList(inFlowToFlowList.getEntryObjects()).iterator ();\n\n               while ( fujaba__IterInFlowToFlowListToInFlowToFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterInFlowToFlowListToInFlowToFlow.next ();\n\n                     // ensure correct type and really bound of object inFlowToFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n                     inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n                     // bind object\n                     inFlow = inFlowToFlow.getSource ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n\n                     // bind object\n                     _TmpObject = inFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) inFlow.eContainer() : null;\n\n                     // ensure correct type and really bound of object process\n                     JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n                     process = (bpmn2.Process) _TmpObject;\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n                     // bind object\n                     _TmpObject = inFlow.getSourceRef ();\n\n                     // ensure correct type and really bound of object flowNode\n                     JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n                     flowNode = (ParallelGateway) _TmpObject;\n\n                     // check link flowElements from flowNode to process\n                     JavaSDM.ensure (process.equals (flowNode.eContainer()\n                     ));\n\n                     // bind object\n                     flow = inFlowToFlow.getTarget ();\n\n                     // check object flow is really bound\n                     JavaSDM.ensure ( flow != null );\n\n                     // iterate to-many link laneSets from process to laneSet\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                     while ( fujaba__IterProcessToLaneSet.hasNext () )\n                     {\n                        try\n                        {\n                           laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                           // check object laneSet is really bound\n                           JavaSDM.ensure ( laneSet != null );\n                           // iterate to-many link lanes from laneSet to lane\n                           fujaba__Success = false;\n\n                           fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                           while ( fujaba__IterLaneSetToLane.hasNext () )\n                           {\n                              try\n                              {\n                                 lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                 // check object lane is really bound\n                                 JavaSDM.ensure ( lane != null );\n                                 // iterate to-many link source from process to processToActor\n                                 fujaba__Success = false;\n\n                                 fujaba__IterProcessToProcessToActor = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(process,ProcessToActor.class,\"source\")).iterator ();\n\n                                 while ( fujaba__IterProcessToProcessToActor.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       processToActor = (ProcessToActor) fujaba__IterProcessToProcessToActor.next ();\n\n                                       // check object processToActor is really bound\n                                       JavaSDM.ensure ( processToActor != null );\n                                       // bind object\n                                       actor = processToActor.getTarget ();\n\n                                       // check object actor is really bound\n                                       JavaSDM.ensure ( actor != null );\n\n                                       // story node \'solve CSP\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          _TmpObject = (this.generateModel_solveCsp_BWD(isApplicableMatch,flowNode,process,actor,processToActor,task,inFlow,outFlow,normalStep,taskToNormalStep,outFlowToFlow,outFlowToNormalStep,inFlowToFlow,flow,laneSet,lane,ruleResult));\n\n                                          // ensure correct type and really bound of object csp\n                                          JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                          csp = (CSP) _TmpObject;\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n                                       // statement node \'check CSP\'\n                                       fujaba__Success = this.generateModel_checkCsp_BWD(csp);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'perform\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object actor is really bound\n                                             JavaSDM.ensure ( actor != null );\n                                             // check object flow is really bound\n                                             JavaSDM.ensure ( flow != null );\n                                             // check object flowNode is really bound\n                                             JavaSDM.ensure ( flowNode != null );\n                                             // check object inFlow is really bound\n                                             JavaSDM.ensure ( inFlow != null );\n                                             // check object inFlowToFlow is really bound\n                                             JavaSDM.ensure ( inFlowToFlow != null );\n                                             // check object lane is really bound\n                                             JavaSDM.ensure ( lane != null );\n                                             // check object laneSet is really bound\n                                             JavaSDM.ensure ( laneSet != null );\n                                             // check object process is really bound\n                                             JavaSDM.ensure ( process != null );\n                                             // check object processToActor is really bound\n                                             JavaSDM.ensure ( processToActor != null );\n                                             // check object ruleResult is really bound\n                                             JavaSDM.ensure ( ruleResult != null );\n                                             // create object outFlow\n                                             outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n                                             // create object normalStep\n                                             normalStep = UseCaseDSLFactory.eINSTANCE.createNormalStep();\n\n                                             // create object task\n                                             task = Bpmn2Factory.eINSTANCE.createServiceTask();\n\n                                             // create object taskToNormalStep\n                                             taskToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n                                             // create object outFlowToNormalStep\n                                             outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n                                             // create object outFlowToFlow\n                                             outFlowToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n                                             // assign attribute task\n                                             task.setId ((java.lang.String)csp.getAttributeVariable(\"task\",\"id\").getValue());\n                                             // assign attribute task\n                                             task.setName ((java.lang.String)csp.getAttributeVariable(\"task\",\"name\").getValue());\n                                             // assign attribute normalStep\n                                             normalStep.setName ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"name\").getValue());\n                                             // assign attribute normalStep\n                                             normalStep.setLabel ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"label\").getValue());\n                                             // assign attribute ruleResult\n                                             ruleResult.setSuccess (true);\n\n                                             // create link\n                                             \tprocess.getFlowElements().add(outFlow); // add link\n\n\n                                             // create link\n                                             normalStep.setActor( actor);\n\n\n                                             // create link\n                                             outFlow.setSourceRef( task);\n\n\n                                             // create link\n                                             inFlow.setTargetRef( task);\n\n\n                                             // create link\n                                             ruleResult.getSourceObjects().add(task);\n\n\n                                             // create link\n                                             lane.getFlowNodeRefs().add(task);\n\n\n                                             // create link\n                                             taskToNormalStep.setSource( task);\n\n\n                                             // create link\n                                             outFlowToNormalStep.setSource( outFlow);\n\n\n                                             // create link\n                                             ruleResult.getSourceObjects().add(outFlow);\n\n\n                                             // create link\n                                             outFlowToFlow.setSource( outFlow);\n\n\n                                             // create link\n                                             ruleResult.getTargetObjects().add(normalStep);\n\n\n                                             // create link\n                                             outFlowToNormalStep.setTarget( normalStep);\n\n\n                                             // create link\n                                             taskToNormalStep.setTarget( normalStep);\n\n\n                                             // create link\n                                             flow.getSteps().add(normalStep);\n\n\n                                             // create link\n                                             ruleResult.getCorrObjects().add(taskToNormalStep);\n\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,flow,\"target\");\n\n                                             // create link\n                                             ruleResult.getCorrObjects().add(outFlowToFlow);\n\n\n                                             // create link\n                                             ruleResult.getCorrObjects().add(outFlowToNormalStep);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          return ruleResult;\n\n                                       }\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleResult;'"
	 * @generated
	 */
	ModelgeneratorRuleResult generateModel(
			RuleEntryContainer ruleEntryContainer,
			SequenceFlowToUCFlow inFlowToFlowDummyParameter);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"flowNode.gatewayDirection\", true, csp);\r\nvar_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());\r\nvar_flowNode_gatewayDirection.setType(\"EObject\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(\"task.id\", csp);\r\nvar_task_id.setType(\"\");\r\nVariable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.name\", csp);\r\nvar_normalStep_name.setType(\"\");\r\nVariable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(\"task.name\", csp);\r\nvar_task_name.setType(\"\");\r\nVariable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.label\", csp);\r\nvar_normalStep_label.setType(\"\");\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();Eq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);\r\neq.setRuleName(\"\");\r\neq.solve(var_task_id,var_normalStep_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_task_name,var_normalStep_label);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"flowNode\",flowNode);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"processToActor\",processToActor);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"laneSet\",laneSet);\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nreturn csp;'"
	 * @generated
	 */
	CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			ParallelGateway flowNode, bpmn2.Process process, Actor actor,
			ProcessToActor processToActor, ServiceTask task,
			SequenceFlow inFlow, SequenceFlow outFlow, NormalStep normalStep,
			FlowNodeToStep taskToNormalStep,
			SequenceFlowToUCFlow outFlowToFlow,
			SequenceFlowToStep outFlowToNormalStep,
			SequenceFlowToUCFlow inFlowToFlow, Flow flow, LaneSet laneSet,
			Lane lane, ModelgeneratorRuleResult ruleResult);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean generateModel_checkCsp_BWD(CSP csp);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // ServiceTaskToStepAfterPGRule
