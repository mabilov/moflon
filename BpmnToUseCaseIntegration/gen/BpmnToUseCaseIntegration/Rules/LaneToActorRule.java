/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackage;
import BpmnToUseCaseIntegration.DocRootToUCModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.ICEToAltFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SeqFlowToAltFlowAlt;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.Event;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.FlowNode;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;
import bpmn2.Task;
import bpmn2.UserTask;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Lane To Actor Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getLaneToActorRule()
 * @model
 * @generated
 */
public interface LaneToActorRule extends EObject, AbstractRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      EMoflonEdge __definitions_rootElements_process = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object definitions is really bound\n         JavaSDM.ensure ( definitions != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,laneSet,process,definitions,lane));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object definitions is really bound\n            JavaSDM.ensure ( definitions != null );\n            // check object lane is really bound\n            JavaSDM.ensure ( lane != null );\n            // check object laneSet is really bound\n            JavaSDM.ensure ( laneSet != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // create object __laneSet_lanes_lane\n            __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __laneSet_lanes_lane\n            __laneSet_lanes_lane.setName (\"lanes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__laneSet_lanes_lane,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,lane,\"toBeTranslatedNodes\");\n\n            // create link\n            __laneSet_lanes_lane.setSrc( laneSet);\n\n\n            // create link\n            __laneSet_lanes_lane.setTrg( lane);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object definitions is really bound\n            JavaSDM.ensure ( definitions != null );\n            // check object lane is really bound\n            JavaSDM.ensure ( lane != null );\n            // check object laneSet is really bound\n            JavaSDM.ensure ( laneSet != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // create object __process_laneSets_laneSet\n            __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __definitions_rootElements_process\n            __definitions_rootElements_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_laneSets_laneSet\n            __process_laneSets_laneSet.setName (\"laneSets\");\n            // assign attribute __definitions_rootElements_process\n            __definitions_rootElements_process.setName (\"rootElements\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_laneSets_laneSet,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__definitions_rootElements_process,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,laneSet,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,process,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,definitions,\"contextNodes\");\n\n            // create link\n            __process_laneSets_laneSet.setTrg( laneSet);\n\n\n            // create link\n            __process_laneSets_laneSet.setSrc( process);\n\n\n            // create link\n            __definitions_rootElements_process.setTrg( process);\n\n\n            // create link\n            __definitions_rootElements_process.setSrc( definitions);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,laneSet,process,definitions,lane);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, LaneSet laneSet,
			bpmn2.Process process, Definitions definitions, Lane lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Definitions definitions = null;\n      DefinitionsToPackage definitionsToPackage = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      PackageDeclaration packageDeclaration = null;\n      bpmn2.Process process = null;\n      ProcessToUseCase processToUseCase = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      Actor actor = null;\n      LaneToActor laneToActor = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      EMoflonEdge laneToActor__target__actor = null;\n      EMoflonEdge laneToActor__source__lane = null;\n      EMoflonEdge packageDeclaration__actors__actor = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"definitions\"));\n\n         // ensure correct type and really bound of object definitions\n         JavaSDM.ensure ( _TmpObject instanceof Definitions );\n         definitions = (Definitions) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"definitionsToPackage\"));\n\n         // ensure correct type and really bound of object definitionsToPackage\n         JavaSDM.ensure ( _TmpObject instanceof DefinitionsToPackage );\n         definitionsToPackage = (DefinitionsToPackage) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToUseCase\"));\n\n         // ensure correct type and really bound of object processToUseCase\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToUseCase );\n         processToUseCase = (ProcessToUseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object actor\n         actor = UseCaseDSLFactory.eINSTANCE.createActor();\n\n         // create object laneToActor\n         laneToActor = BpmnToUseCaseIntegrationFactory.eINSTANCE.createLaneToActor();\n\n         // assign attribute actor\n         actor.setName ((java.lang.String)csp.getValue(\"actor\",\"name\"));\n         // assign attribute actor\n         actor.setDescription ((java.lang.String)csp.getValue(\"actor\",\"description\"));\n         // assign attribute actor\n         actor.setType ((UseCaseDSL.ActorType)csp.getValue(\"actor\",\"type\"));\n\n         // create link\n         \tpackageDeclaration.getActors().add(actor); // add link\n\n\n         // create link\n         laneToActor.setSource( lane);\n\n\n         // create link\n         laneToActor.setTarget( actor);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneToActor is really bound\n         JavaSDM.ensure ( laneToActor != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actor,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,laneToActor,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,lane,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object definitions is really bound\n         JavaSDM.ensure ( definitions != null );\n         // check object definitionsToPackage is really bound\n         JavaSDM.ensure ( definitionsToPackage != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object laneToActor is really bound\n         JavaSDM.ensure ( laneToActor != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToUseCase is really bound\n         JavaSDM.ensure ( processToUseCase != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects definitions and actor \n         JavaSDM.ensure ( !definitions.equals (actor) );\n\n         // check isomorphic binding between objects definitionsToPackage and actor \n         JavaSDM.ensure ( !definitionsToPackage.equals (actor) );\n\n         // check isomorphic binding between objects lane and actor \n         JavaSDM.ensure ( !lane.equals (actor) );\n\n         // check isomorphic binding between objects laneSet and actor \n         JavaSDM.ensure ( !laneSet.equals (actor) );\n\n         // check isomorphic binding between objects laneToActor and actor \n         JavaSDM.ensure ( !laneToActor.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclaration and actor \n         JavaSDM.ensure ( !packageDeclaration.equals (actor) );\n\n         // check isomorphic binding between objects process and actor \n         JavaSDM.ensure ( !process.equals (actor) );\n\n         // check isomorphic binding between objects processToUseCase and actor \n         JavaSDM.ensure ( !processToUseCase.equals (actor) );\n\n         // check isomorphic binding between objects useCase and actor \n         JavaSDM.ensure ( !useCase.equals (actor) );\n\n         // check isomorphic binding between objects definitionsToPackage and definitions \n         JavaSDM.ensure ( !definitionsToPackage.equals (definitions) );\n\n         // check isomorphic binding between objects lane and definitions \n         JavaSDM.ensure ( !lane.equals (definitions) );\n\n         // check isomorphic binding between objects laneSet and definitions \n         JavaSDM.ensure ( !laneSet.equals (definitions) );\n\n         // check isomorphic binding between objects laneToActor and definitions \n         JavaSDM.ensure ( !laneToActor.equals (definitions) );\n\n         // check isomorphic binding between objects packageDeclaration and definitions \n         JavaSDM.ensure ( !packageDeclaration.equals (definitions) );\n\n         // check isomorphic binding between objects process and definitions \n         JavaSDM.ensure ( !process.equals (definitions) );\n\n         // check isomorphic binding between objects processToUseCase and definitions \n         JavaSDM.ensure ( !processToUseCase.equals (definitions) );\n\n         // check isomorphic binding between objects useCase and definitions \n         JavaSDM.ensure ( !useCase.equals (definitions) );\n\n         // check isomorphic binding between objects lane and definitionsToPackage \n         JavaSDM.ensure ( !lane.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects laneSet and definitionsToPackage \n         JavaSDM.ensure ( !laneSet.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects laneToActor and definitionsToPackage \n         JavaSDM.ensure ( !laneToActor.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects packageDeclaration and definitionsToPackage \n         JavaSDM.ensure ( !packageDeclaration.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects process and definitionsToPackage \n         JavaSDM.ensure ( !process.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects processToUseCase and definitionsToPackage \n         JavaSDM.ensure ( !processToUseCase.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects useCase and definitionsToPackage \n         JavaSDM.ensure ( !useCase.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects laneSet and lane \n         JavaSDM.ensure ( !laneSet.equals (lane) );\n\n         // check isomorphic binding between objects laneToActor and lane \n         JavaSDM.ensure ( !laneToActor.equals (lane) );\n\n         // check isomorphic binding between objects packageDeclaration and lane \n         JavaSDM.ensure ( !packageDeclaration.equals (lane) );\n\n         // check isomorphic binding between objects process and lane \n         JavaSDM.ensure ( !process.equals (lane) );\n\n         // check isomorphic binding between objects processToUseCase and lane \n         JavaSDM.ensure ( !processToUseCase.equals (lane) );\n\n         // check isomorphic binding between objects useCase and lane \n         JavaSDM.ensure ( !useCase.equals (lane) );\n\n         // check isomorphic binding between objects laneToActor and laneSet \n         JavaSDM.ensure ( !laneToActor.equals (laneSet) );\n\n         // check isomorphic binding between objects packageDeclaration and laneSet \n         JavaSDM.ensure ( !packageDeclaration.equals (laneSet) );\n\n         // check isomorphic binding between objects process and laneSet \n         JavaSDM.ensure ( !process.equals (laneSet) );\n\n         // check isomorphic binding between objects processToUseCase and laneSet \n         JavaSDM.ensure ( !processToUseCase.equals (laneSet) );\n\n         // check isomorphic binding between objects useCase and laneSet \n         JavaSDM.ensure ( !useCase.equals (laneSet) );\n\n         // check isomorphic binding between objects packageDeclaration and laneToActor \n         JavaSDM.ensure ( !packageDeclaration.equals (laneToActor) );\n\n         // check isomorphic binding between objects process and laneToActor \n         JavaSDM.ensure ( !process.equals (laneToActor) );\n\n         // check isomorphic binding between objects processToUseCase and laneToActor \n         JavaSDM.ensure ( !processToUseCase.equals (laneToActor) );\n\n         // check isomorphic binding between objects useCase and laneToActor \n         JavaSDM.ensure ( !useCase.equals (laneToActor) );\n\n         // check isomorphic binding between objects process and packageDeclaration \n         JavaSDM.ensure ( !process.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects processToUseCase and packageDeclaration \n         JavaSDM.ensure ( !processToUseCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclaration \n         JavaSDM.ensure ( !useCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects processToUseCase and process \n         JavaSDM.ensure ( !processToUseCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and process \n         JavaSDM.ensure ( !useCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and processToUseCase \n         JavaSDM.ensure ( !useCase.equals (processToUseCase) );\n\n         // create object __laneSet_lanes_lane\n         __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object laneToActor__target__actor\n         laneToActor__target__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object laneToActor__source__lane\n         laneToActor__source__lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object packageDeclaration__actors__actor\n         packageDeclaration__actors__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"LaneToActorRule\");\n         // assign attribute __laneSet_lanes_lane\n         __laneSet_lanes_lane.setName (\"lanes\");\n         // assign attribute packageDeclaration__actors__actor\n         packageDeclaration__actors__actor.setName (\"actors\");\n         // assign attribute laneToActor__source__lane\n         laneToActor__source__lane.setName (\"source\");\n         // assign attribute laneToActor__target__actor\n         laneToActor__target__actor.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__laneSet_lanes_lane,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,laneToActor__target__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,laneToActor__source__lane,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,packageDeclaration__actors__actor,\"createdEdges\");\n\n         // create link\n         __laneSet_lanes_lane.setSrc( laneSet);\n\n\n         // create link\n         packageDeclaration__actors__actor.setSrc( packageDeclaration);\n\n\n         // create link\n         __laneSet_lanes_lane.setTrg( lane);\n\n\n         // create link\n         laneToActor__source__lane.setTrg( lane);\n\n\n         // create link\n         packageDeclaration__actors__actor.setTrg( actor);\n\n\n         // create link\n         laneToActor__target__actor.setTrg( actor);\n\n\n         // create link\n         laneToActor__target__actor.setSrc( laneToActor);\n\n\n         // create link\n         laneToActor__source__lane.setSrc( laneToActor);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,laneSet,process,definitions,packageDeclaration,definitionsToPackage,useCase,processToUseCase,lane,actor,laneToActor);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Definitions definitions = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      bpmn2.Process process = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      EMoflonEdge __definitions_rootElements_process = null;\n      EMoflonEdge __processToUseCase_source_process = null;\n      EMoflonEdge __definitionsToPackage_source_definitions = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n      EMoflonEdge __definitionsToPackage_target_packageDeclaration = null;\n      EMoflonEdge __processToUseCase_target_useCase = null;\n      CSP csp = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterProcessToProcessToUseCase = null;\n      ProcessToUseCase processToUseCase = null;\n      PackageDeclaration packageDeclaration = null;\n      Iterator fujaba__IterDefinitionsToDefinitionsToPackage = null;\n      DefinitionsToPackage definitionsToPackage = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"LaneToActorRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"definitions\"));\n\n         // ensure correct type and really bound of object definitions\n         JavaSDM.ensure ( _TmpObject instanceof Definitions );\n         definitions = (Definitions) _TmpObject;\n         _TmpObject = (match.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (match.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (match.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link source from definitions to definitionsToPackage\n         fujaba__Success = false;\n\n         fujaba__IterDefinitionsToDefinitionsToPackage = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(definitions,DefinitionsToPackage.class,\"source\")).iterator ();\n\n         while ( fujaba__IterDefinitionsToDefinitionsToPackage.hasNext () )\n         {\n            try\n            {\n               definitionsToPackage = (DefinitionsToPackage) fujaba__IterDefinitionsToDefinitionsToPackage.next ();\n\n               // check object definitionsToPackage is really bound\n               JavaSDM.ensure ( definitionsToPackage != null );\n               // bind object\n               packageDeclaration = definitionsToPackage.getTarget ();\n\n               // check object packageDeclaration is really bound\n               JavaSDM.ensure ( packageDeclaration != null );\n\n               // iterate to-many link source from process to processToUseCase\n               fujaba__Success = false;\n\n               fujaba__IterProcessToProcessToUseCase = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(process,ProcessToUseCase.class,\"source\")).iterator ();\n\n               while ( fujaba__IterProcessToProcessToUseCase.hasNext () )\n               {\n                  try\n                  {\n                     processToUseCase = (ProcessToUseCase) fujaba__IterProcessToProcessToUseCase.next ();\n\n                     // check object processToUseCase is really bound\n                     JavaSDM.ensure ( processToUseCase != null );\n                     // bind object\n                     useCase = processToUseCase.getTarget ();\n\n                     // check object useCase is really bound\n                     JavaSDM.ensure ( useCase != null );\n\n                     // story node \'find context\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object definitions is really bound\n                        JavaSDM.ensure ( definitions != null );\n                        // check object definitionsToPackage is really bound\n                        JavaSDM.ensure ( definitionsToPackage != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object laneSet is really bound\n                        JavaSDM.ensure ( laneSet != null );\n                        // check object packageDeclaration is really bound\n                        JavaSDM.ensure ( packageDeclaration != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check object processToUseCase is really bound\n                        JavaSDM.ensure ( processToUseCase != null );\n                        // check object useCase is really bound\n                        JavaSDM.ensure ( useCase != null );\n                        // check link laneSets from laneSet to process\n                        JavaSDM.ensure (process.equals (laneSet.eContainer()\n                        ));\n\n                        // check link lanes from lane to laneSet\n                        JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                        ));\n\n                        // check link rootElements from process to definitions\n                        JavaSDM.ensure (definitions.equals (process.eContainer()\n                        ));\n\n                        // check link source from definitionsToPackage to definitions\n                        JavaSDM.ensure (definitions.equals (definitionsToPackage.getSource ()\n                        ));\n\n                        // check link source from processToUseCase to process\n                        JavaSDM.ensure (process.equals (processToUseCase.getSource ()\n                        ));\n\n                        // check link target from definitionsToPackage to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (definitionsToPackage.getTarget ()\n                        ));\n\n                        // check link target from processToUseCase to useCase\n                        JavaSDM.ensure (useCase.equals (processToUseCase.getTarget ()\n                        ));\n\n                        // check link useCases from useCase to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                        ));\n\n                        // create object isApplicableMatch\n                        isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                        // create object __process_laneSets_laneSet\n                        __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __laneSet_lanes_lane\n                        __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __definitions_rootElements_process\n                        __definitions_rootElements_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __processToUseCase_source_process\n                        __processToUseCase_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __definitionsToPackage_source_definitions\n                        __definitionsToPackage_source_definitions = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __packageDeclaration_useCases_useCase\n                        __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __definitionsToPackage_target_packageDeclaration\n                        __definitionsToPackage_target_packageDeclaration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __processToUseCase_target_useCase\n                        __processToUseCase_target_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // assign attribute __laneSet_lanes_lane\n                        __laneSet_lanes_lane.setName (\"lanes\");\n                        // assign attribute __process_laneSets_laneSet\n                        __process_laneSets_laneSet.setName (\"laneSets\");\n                        // assign attribute __definitions_rootElements_process\n                        __definitions_rootElements_process.setName (\"rootElements\");\n                        // assign attribute __packageDeclaration_useCases_useCase\n                        __packageDeclaration_useCases_useCase.setName (\"useCases\");\n                        // assign attribute __definitionsToPackage_source_definitions\n                        __definitionsToPackage_source_definitions.setName (\"source\");\n                        // assign attribute __definitionsToPackage_target_packageDeclaration\n                        __definitionsToPackage_target_packageDeclaration.setName (\"target\");\n                        // assign attribute __processToUseCase_source_process\n                        __processToUseCase_source_process.setName (\"source\");\n                        // assign attribute __processToUseCase_target_useCase\n                        __processToUseCase_target_useCase.setName (\"target\");\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(laneSet);\n\n\n                        // create link\n                        __process_laneSets_laneSet.setTrg( laneSet);\n\n\n                        // create link\n                        __laneSet_lanes_lane.setSrc( laneSet);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(process);\n\n\n                        // create link\n                        __definitions_rootElements_process.setTrg( process);\n\n\n                        // create link\n                        __processToUseCase_source_process.setTrg( process);\n\n\n                        // create link\n                        __process_laneSets_laneSet.setSrc( process);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(definitions);\n\n\n                        // create link\n                        __definitionsToPackage_source_definitions.setTrg( definitions);\n\n\n                        // create link\n                        __definitions_rootElements_process.setSrc( definitions);\n\n\n                        // create link\n                        __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                        // create link\n                        __definitionsToPackage_target_packageDeclaration.setTrg( packageDeclaration);\n\n\n                        // create link\n                        __definitionsToPackage_target_packageDeclaration.setSrc( definitionsToPackage);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(definitionsToPackage);\n\n\n                        // create link\n                        __definitionsToPackage_source_definitions.setSrc( definitionsToPackage);\n\n\n                        // create link\n                        __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                        // create link\n                        __processToUseCase_target_useCase.setTrg( useCase);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(processToUseCase);\n\n\n                        // create link\n                        __processToUseCase_source_process.setSrc( processToUseCase);\n\n\n                        // create link\n                        __processToUseCase_target_useCase.setSrc( processToUseCase);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(lane);\n\n\n                        // create link\n                        __laneSet_lanes_lane.setTrg( lane);\n\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneSet_lanes_lane,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_source_process,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_useCases_useCase,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__definitionsToPackage_target_packageDeclaration,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__definitions_rootElements_process,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__definitionsToPackage_source_definitions,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_laneSets_laneSet,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_target_useCase,\"allContextElements\");\n                        // story node \'solve CSP\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,laneSet,process,definitions,packageDeclaration,definitionsToPackage,useCase,processToUseCase,lane));\n\n                           // ensure correct type and really bound of object csp\n                           JavaSDM.ensure ( _TmpObject instanceof CSP );\n                           csp = (CSP) _TmpObject;\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        // statement node \'check CSP\'\n                        fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                        if (fujaba__Success)\n                        {\n                           // story node \'add match to rule result\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object isApplicableMatch is really bound\n                              JavaSDM.ensure ( isApplicableMatch != null );\n                              // check object ruleresult is really bound\n                              JavaSDM.ensure ( ruleresult != null );\n                              // assign attribute isApplicableMatch\n                              isApplicableMatch.setRuleName (\"LaneToActorRule\");\n                              // assign attribute ruleresult\n                              ruleresult.setSuccess (true);\n\n                              // create link\n                              ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"laneSet\", laneSet);\nmatch.registerObject(\"process\", process);\nmatch.registerObject(\"definitions\", definitions);\nmatch.registerObject(\"lane\", lane);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, LaneSet laneSet,
			bpmn2.Process process, Definitions definitions, Lane lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, LaneSet laneSet,
			bpmn2.Process process, Definitions definitions, Lane lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"PERSON\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_lane_id = CSPFactoryHelper.eINSTANCE.createVariable(\"lane.id\", true, csp);\r\nvar_lane_id.setValue(lane.getId());\r\nvar_lane_id.setType(\"\");\r\nVariable var_lane_name = CSPFactoryHelper.eINSTANCE.createVariable(\"lane.name\", true, csp);\r\nvar_lane_name.setValue(lane.getName());\r\nvar_lane_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.name\", csp);\r\nvar_actor_name.setType(\"\");\r\nVariable var_actor_description = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.description\", csp);\r\nvar_actor_description.setType(\"\");\r\nVariable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.type\", csp);\r\nvar_actor_type.setType(\"EObject\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();EqActorType eqActorType = new EqActorType();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\ncsp.getConstraints().add(eqActorType);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_lane_id,var_actor_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_lane_name,var_actor_description);\r\neqActorType.setRuleName(\"\");\r\neqActorType.solve(var_actor_type,literal0);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"laneSet\",laneSet);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"definitions\",definitions);\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"definitionsToPackage\",definitionsToPackage);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"processToUseCase\",processToUseCase);\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			LaneSet laneSet, bpmn2.Process process, Definitions definitions,
			PackageDeclaration packageDeclaration,
			DefinitionsToPackage definitionsToPackage, UseCase useCase,
			ProcessToUseCase processToUseCase, Lane lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"laneSet\", laneSet);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"definitions\", definitions);\nruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"definitionsToPackage\", definitionsToPackage);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"processToUseCase\", processToUseCase);\nruleresult.registerObject(\"lane\", lane);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"laneToActor\", laneToActor);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject laneSet,
			EObject process, EObject definitions, EObject packageDeclaration,
			EObject definitionsToPackage, EObject useCase,
			EObject processToUseCase, EObject lane, EObject actor,
			EObject laneToActor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"lane\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getLane());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,packageDeclaration,useCase,actor));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // create object __packageDeclaration_actors_actor\n            __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __packageDeclaration_actors_actor\n            __packageDeclaration_actors_actor.setName (\"actors\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__packageDeclaration_actors_actor,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,actor,\"toBeTranslatedNodes\");\n\n            // create link\n            __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n            // create link\n            __packageDeclaration_actors_actor.setTrg( actor);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // create object __packageDeclaration_useCases_useCase\n            __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __packageDeclaration_useCases_useCase\n            __packageDeclaration_useCases_useCase.setName (\"useCases\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__packageDeclaration_useCases_useCase,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,packageDeclaration,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,useCase,\"contextNodes\");\n\n            // create link\n            __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n            // create link\n            __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,packageDeclaration,useCase,actor);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match,
			PackageDeclaration packageDeclaration, UseCase useCase, Actor actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      Definitions definitions = null;\n      DefinitionsToPackage definitionsToPackage = null;\n      LaneSet laneSet = null;\n      PackageDeclaration packageDeclaration = null;\n      bpmn2.Process process = null;\n      ProcessToUseCase processToUseCase = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      Lane lane = null;\n      LaneToActor laneToActor = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge laneToActor__source__lane = null;\n      EMoflonEdge laneSet__lanes__lane = null;\n      EMoflonEdge laneToActor__target__actor = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"definitions\"));\n\n         // ensure correct type and really bound of object definitions\n         JavaSDM.ensure ( _TmpObject instanceof Definitions );\n         definitions = (Definitions) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"definitionsToPackage\"));\n\n         // ensure correct type and really bound of object definitionsToPackage\n         JavaSDM.ensure ( _TmpObject instanceof DefinitionsToPackage );\n         definitionsToPackage = (DefinitionsToPackage) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToUseCase\"));\n\n         // ensure correct type and really bound of object processToUseCase\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToUseCase );\n         processToUseCase = (ProcessToUseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object lane\n         lane = Bpmn2Factory.eINSTANCE.createLane();\n\n         // create object laneToActor\n         laneToActor = BpmnToUseCaseIntegrationFactory.eINSTANCE.createLaneToActor();\n\n         // assign attribute lane\n         lane.setId ((java.lang.String)csp.getValue(\"lane\",\"id\"));\n         // assign attribute lane\n         lane.setName ((java.lang.String)csp.getValue(\"lane\",\"name\"));\n\n         // create link\n         laneToActor.setTarget( actor);\n\n\n         // create link\n         \tlaneSet.getLanes().add(lane); // add link\n\n\n         // create link\n         laneToActor.setSource( lane);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneToActor is really bound\n         JavaSDM.ensure ( laneToActor != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,lane,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,laneToActor,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actor,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object definitions is really bound\n         JavaSDM.ensure ( definitions != null );\n         // check object definitionsToPackage is really bound\n         JavaSDM.ensure ( definitionsToPackage != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object laneToActor is really bound\n         JavaSDM.ensure ( laneToActor != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToUseCase is really bound\n         JavaSDM.ensure ( processToUseCase != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects definitions and actor \n         JavaSDM.ensure ( !definitions.equals (actor) );\n\n         // check isomorphic binding between objects definitionsToPackage and actor \n         JavaSDM.ensure ( !definitionsToPackage.equals (actor) );\n\n         // check isomorphic binding between objects lane and actor \n         JavaSDM.ensure ( !lane.equals (actor) );\n\n         // check isomorphic binding between objects laneSet and actor \n         JavaSDM.ensure ( !laneSet.equals (actor) );\n\n         // check isomorphic binding between objects laneToActor and actor \n         JavaSDM.ensure ( !laneToActor.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclaration and actor \n         JavaSDM.ensure ( !packageDeclaration.equals (actor) );\n\n         // check isomorphic binding between objects process and actor \n         JavaSDM.ensure ( !process.equals (actor) );\n\n         // check isomorphic binding between objects processToUseCase and actor \n         JavaSDM.ensure ( !processToUseCase.equals (actor) );\n\n         // check isomorphic binding between objects useCase and actor \n         JavaSDM.ensure ( !useCase.equals (actor) );\n\n         // check isomorphic binding between objects definitionsToPackage and definitions \n         JavaSDM.ensure ( !definitionsToPackage.equals (definitions) );\n\n         // check isomorphic binding between objects lane and definitions \n         JavaSDM.ensure ( !lane.equals (definitions) );\n\n         // check isomorphic binding between objects laneSet and definitions \n         JavaSDM.ensure ( !laneSet.equals (definitions) );\n\n         // check isomorphic binding between objects laneToActor and definitions \n         JavaSDM.ensure ( !laneToActor.equals (definitions) );\n\n         // check isomorphic binding between objects packageDeclaration and definitions \n         JavaSDM.ensure ( !packageDeclaration.equals (definitions) );\n\n         // check isomorphic binding between objects process and definitions \n         JavaSDM.ensure ( !process.equals (definitions) );\n\n         // check isomorphic binding between objects processToUseCase and definitions \n         JavaSDM.ensure ( !processToUseCase.equals (definitions) );\n\n         // check isomorphic binding between objects useCase and definitions \n         JavaSDM.ensure ( !useCase.equals (definitions) );\n\n         // check isomorphic binding between objects lane and definitionsToPackage \n         JavaSDM.ensure ( !lane.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects laneSet and definitionsToPackage \n         JavaSDM.ensure ( !laneSet.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects laneToActor and definitionsToPackage \n         JavaSDM.ensure ( !laneToActor.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects packageDeclaration and definitionsToPackage \n         JavaSDM.ensure ( !packageDeclaration.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects process and definitionsToPackage \n         JavaSDM.ensure ( !process.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects processToUseCase and definitionsToPackage \n         JavaSDM.ensure ( !processToUseCase.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects useCase and definitionsToPackage \n         JavaSDM.ensure ( !useCase.equals (definitionsToPackage) );\n\n         // check isomorphic binding between objects laneSet and lane \n         JavaSDM.ensure ( !laneSet.equals (lane) );\n\n         // check isomorphic binding between objects laneToActor and lane \n         JavaSDM.ensure ( !laneToActor.equals (lane) );\n\n         // check isomorphic binding between objects packageDeclaration and lane \n         JavaSDM.ensure ( !packageDeclaration.equals (lane) );\n\n         // check isomorphic binding between objects process and lane \n         JavaSDM.ensure ( !process.equals (lane) );\n\n         // check isomorphic binding between objects processToUseCase and lane \n         JavaSDM.ensure ( !processToUseCase.equals (lane) );\n\n         // check isomorphic binding between objects useCase and lane \n         JavaSDM.ensure ( !useCase.equals (lane) );\n\n         // check isomorphic binding between objects laneToActor and laneSet \n         JavaSDM.ensure ( !laneToActor.equals (laneSet) );\n\n         // check isomorphic binding between objects packageDeclaration and laneSet \n         JavaSDM.ensure ( !packageDeclaration.equals (laneSet) );\n\n         // check isomorphic binding between objects process and laneSet \n         JavaSDM.ensure ( !process.equals (laneSet) );\n\n         // check isomorphic binding between objects processToUseCase and laneSet \n         JavaSDM.ensure ( !processToUseCase.equals (laneSet) );\n\n         // check isomorphic binding between objects useCase and laneSet \n         JavaSDM.ensure ( !useCase.equals (laneSet) );\n\n         // check isomorphic binding between objects packageDeclaration and laneToActor \n         JavaSDM.ensure ( !packageDeclaration.equals (laneToActor) );\n\n         // check isomorphic binding between objects process and laneToActor \n         JavaSDM.ensure ( !process.equals (laneToActor) );\n\n         // check isomorphic binding between objects processToUseCase and laneToActor \n         JavaSDM.ensure ( !processToUseCase.equals (laneToActor) );\n\n         // check isomorphic binding between objects useCase and laneToActor \n         JavaSDM.ensure ( !useCase.equals (laneToActor) );\n\n         // check isomorphic binding between objects process and packageDeclaration \n         JavaSDM.ensure ( !process.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects processToUseCase and packageDeclaration \n         JavaSDM.ensure ( !processToUseCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclaration \n         JavaSDM.ensure ( !useCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects processToUseCase and process \n         JavaSDM.ensure ( !processToUseCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and process \n         JavaSDM.ensure ( !useCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and processToUseCase \n         JavaSDM.ensure ( !useCase.equals (processToUseCase) );\n\n         // create object __packageDeclaration_actors_actor\n         __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object laneToActor__source__lane\n         laneToActor__source__lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object laneSet__lanes__lane\n         laneSet__lanes__lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object laneToActor__target__actor\n         laneToActor__target__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"LaneToActorRule\");\n         // assign attribute laneSet__lanes__lane\n         laneSet__lanes__lane.setName (\"lanes\");\n         // assign attribute __packageDeclaration_actors_actor\n         __packageDeclaration_actors_actor.setName (\"actors\");\n         // assign attribute laneToActor__source__lane\n         laneToActor__source__lane.setName (\"source\");\n         // assign attribute laneToActor__target__actor\n         laneToActor__target__actor.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__packageDeclaration_actors_actor,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,laneToActor__source__lane,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,laneSet__lanes__lane,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,laneToActor__target__actor,\"createdEdges\");\n\n         // create link\n         laneSet__lanes__lane.setSrc( laneSet);\n\n\n         // create link\n         __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n         // create link\n         laneToActor__source__lane.setTrg( lane);\n\n\n         // create link\n         laneSet__lanes__lane.setTrg( lane);\n\n\n         // create link\n         laneToActor__target__actor.setTrg( actor);\n\n\n         // create link\n         __packageDeclaration_actors_actor.setTrg( actor);\n\n\n         // create link\n         laneToActor__target__actor.setSrc( laneToActor);\n\n\n         // create link\n         laneToActor__source__lane.setSrc( laneToActor);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,laneSet,process,definitions,packageDeclaration,definitionsToPackage,useCase,processToUseCase,lane,actor,laneToActor);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Actor actor = null;\n      PackageDeclaration packageDeclaration = null;\n      UseCase useCase = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __definitions_rootElements_process = null;\n      EMoflonEdge __processToUseCase_source_process = null;\n      EMoflonEdge __definitionsToPackage_source_definitions = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge __definitionsToPackage_target_packageDeclaration = null;\n      EMoflonEdge __processToUseCase_target_useCase = null;\n      CSP csp = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      bpmn2.Process process = null;\n      Iterator fujaba__IterUseCaseToProcessToUseCase = null;\n      ProcessToUseCase processToUseCase = null;\n      Definitions definitions = null;\n      Iterator fujaba__IterPackageDeclarationToDefinitionsToPackage = null;\n      DefinitionsToPackage definitionsToPackage = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"LaneToActorRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (match.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (match.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link target from packageDeclaration to definitionsToPackage\n         fujaba__Success = false;\n\n         fujaba__IterPackageDeclarationToDefinitionsToPackage = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(packageDeclaration,DefinitionsToPackage.class,\"target\")).iterator ();\n\n         while ( fujaba__IterPackageDeclarationToDefinitionsToPackage.hasNext () )\n         {\n            try\n            {\n               definitionsToPackage = (DefinitionsToPackage) fujaba__IterPackageDeclarationToDefinitionsToPackage.next ();\n\n               // check object definitionsToPackage is really bound\n               JavaSDM.ensure ( definitionsToPackage != null );\n               // bind object\n               definitions = definitionsToPackage.getSource ();\n\n               // check object definitions is really bound\n               JavaSDM.ensure ( definitions != null );\n\n               // iterate to-many link target from useCase to processToUseCase\n               fujaba__Success = false;\n\n               fujaba__IterUseCaseToProcessToUseCase = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(useCase,ProcessToUseCase.class,\"target\")).iterator ();\n\n               while ( fujaba__IterUseCaseToProcessToUseCase.hasNext () )\n               {\n                  try\n                  {\n                     processToUseCase = (ProcessToUseCase) fujaba__IterUseCaseToProcessToUseCase.next ();\n\n                     // check object processToUseCase is really bound\n                     JavaSDM.ensure ( processToUseCase != null );\n                     // bind object\n                     process = processToUseCase.getSource ();\n\n                     // check object process is really bound\n                     JavaSDM.ensure ( process != null );\n\n                     // story node \'find context\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object actor is really bound\n                        JavaSDM.ensure ( actor != null );\n                        // check object definitions is really bound\n                        JavaSDM.ensure ( definitions != null );\n                        // check object definitionsToPackage is really bound\n                        JavaSDM.ensure ( definitionsToPackage != null );\n                        // check object packageDeclaration is really bound\n                        JavaSDM.ensure ( packageDeclaration != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check object processToUseCase is really bound\n                        JavaSDM.ensure ( processToUseCase != null );\n                        // check object useCase is really bound\n                        JavaSDM.ensure ( useCase != null );\n                        // check link actors from actor to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                        ));\n\n                        // check link rootElements from process to definitions\n                        JavaSDM.ensure (definitions.equals (process.eContainer()\n                        ));\n\n                        // check link source from definitionsToPackage to definitions\n                        JavaSDM.ensure (definitions.equals (definitionsToPackage.getSource ()\n                        ));\n\n                        // check link source from processToUseCase to process\n                        JavaSDM.ensure (process.equals (processToUseCase.getSource ()\n                        ));\n\n                        // check link target from definitionsToPackage to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (definitionsToPackage.getTarget ()\n                        ));\n\n                        // check link target from processToUseCase to useCase\n                        JavaSDM.ensure (useCase.equals (processToUseCase.getTarget ()\n                        ));\n\n                        // check link useCases from useCase to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                        ));\n\n                        // iterate to-many link laneSets from process to laneSet\n                        fujaba__Success = false;\n\n                        fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                        while ( fujaba__IterProcessToLaneSet.hasNext () )\n                        {\n                           try\n                           {\n                              laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                              // check object laneSet is really bound\n                              JavaSDM.ensure ( laneSet != null );\n                              // create object __process_laneSets_laneSet\n                              __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __definitions_rootElements_process\n                              __definitions_rootElements_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToUseCase_source_process\n                              __processToUseCase_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __definitionsToPackage_source_definitions\n                              __definitionsToPackage_source_definitions = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __packageDeclaration_useCases_useCase\n                              __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __packageDeclaration_actors_actor\n                              __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __definitionsToPackage_target_packageDeclaration\n                              __definitionsToPackage_target_packageDeclaration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToUseCase_target_useCase\n                              __processToUseCase_target_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __process_laneSets_laneSet\n                              __process_laneSets_laneSet.setName (\"laneSets\");\n                              // assign attribute __definitions_rootElements_process\n                              __definitions_rootElements_process.setName (\"rootElements\");\n                              // assign attribute __packageDeclaration_useCases_useCase\n                              __packageDeclaration_useCases_useCase.setName (\"useCases\");\n                              // assign attribute __packageDeclaration_actors_actor\n                              __packageDeclaration_actors_actor.setName (\"actors\");\n                              // assign attribute __definitionsToPackage_source_definitions\n                              __definitionsToPackage_source_definitions.setName (\"source\");\n                              // assign attribute __definitionsToPackage_target_packageDeclaration\n                              __definitionsToPackage_target_packageDeclaration.setName (\"target\");\n                              // assign attribute __processToUseCase_source_process\n                              __processToUseCase_source_process.setName (\"source\");\n                              // assign attribute __processToUseCase_target_useCase\n                              __processToUseCase_target_useCase.setName (\"target\");\n\n                              // create link\n                              __process_laneSets_laneSet.setTrg( laneSet);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(laneSet);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(process);\n\n\n                              // create link\n                              __definitions_rootElements_process.setTrg( process);\n\n\n                              // create link\n                              __process_laneSets_laneSet.setSrc( process);\n\n\n                              // create link\n                              __processToUseCase_source_process.setTrg( process);\n\n\n                              // create link\n                              __definitions_rootElements_process.setSrc( definitions);\n\n\n                              // create link\n                              __definitionsToPackage_source_definitions.setTrg( definitions);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(definitions);\n\n\n                              // create link\n                              __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                              // create link\n                              __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n                              // create link\n                              __definitionsToPackage_target_packageDeclaration.setTrg( packageDeclaration);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(definitionsToPackage);\n\n\n                              // create link\n                              __definitionsToPackage_target_packageDeclaration.setSrc( definitionsToPackage);\n\n\n                              // create link\n                              __definitionsToPackage_source_definitions.setSrc( definitionsToPackage);\n\n\n                              // create link\n                              __processToUseCase_target_useCase.setTrg( useCase);\n\n\n                              // create link\n                              __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                              // create link\n                              __processToUseCase_source_process.setSrc( processToUseCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(processToUseCase);\n\n\n                              // create link\n                              __processToUseCase_target_useCase.setSrc( processToUseCase);\n\n\n                              // create link\n                              __packageDeclaration_actors_actor.setTrg( actor);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(actor);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_source_process,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__definitions_rootElements_process,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_actors_actor,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_useCases_useCase,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_laneSets_laneSet,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_target_useCase,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__definitionsToPackage_target_packageDeclaration,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__definitionsToPackage_source_definitions,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,laneSet,process,definitions,packageDeclaration,definitionsToPackage,useCase,processToUseCase,actor));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"LaneToActorRule\");\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n\n                                    // create link\n                                    ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n                        }\n                        JavaSDM.ensure (fujaba__Success);\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"packageDeclaration\", packageDeclaration);\nmatch.registerObject(\"useCase\", useCase);\nmatch.registerObject(\"actor\", actor);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match,
			PackageDeclaration packageDeclaration, UseCase useCase, Actor actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"PERSON\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.type\", true, csp);\r\nvar_actor_type.setValue(actor.getType());\r\nvar_actor_type.setType(\"EObject\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqActorType eqActorType = new EqActorType();\r\n\r\ncsp.getConstraints().add(eqActorType);\r\n\r\n// Solve CSP\r\neqActorType.setRuleName(\"\");\r\neqActorType.solve(var_actor_type,literal0);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match,
			PackageDeclaration packageDeclaration, UseCase useCase, Actor actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.name\", true, csp);\r\nvar_actor_name.setValue(actor.getName());\r\nvar_actor_name.setType(\"\");\r\nVariable var_actor_description = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.description\", true, csp);\r\nvar_actor_description.setValue(actor.getDescription());\r\nvar_actor_description.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_lane_id = CSPFactoryHelper.eINSTANCE.createVariable(\"lane.id\", csp);\r\nvar_lane_id.setType(\"\");\r\nVariable var_lane_name = CSPFactoryHelper.eINSTANCE.createVariable(\"lane.name\", csp);\r\nvar_lane_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_lane_id,var_actor_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_lane_name,var_actor_description);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"laneSet\",laneSet);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"definitions\",definitions);\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"definitionsToPackage\",definitionsToPackage);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"processToUseCase\",processToUseCase);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			LaneSet laneSet, bpmn2.Process process, Definitions definitions,
			PackageDeclaration packageDeclaration,
			DefinitionsToPackage definitionsToPackage, UseCase useCase,
			ProcessToUseCase processToUseCase, Actor actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"laneSet\", laneSet);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"definitions\", definitions);\nruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"definitionsToPackage\", definitionsToPackage);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"processToUseCase\", processToUseCase);\nruleresult.registerObject(\"lane\", lane);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"laneToActor\", laneToActor);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject laneSet,
			EObject process, EObject definitions, EObject packageDeclaration,
			EObject definitionsToPackage, EObject useCase,
			EObject processToUseCase, EObject lane, EObject actor,
			EObject laneToActor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"actor\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getActor());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      LaneSet __DEC_lane_lanes_299442 = null;\n      Match match = null;\n      Lane lane = null;\n      Definitions definitions = null;\n      bpmn2.Process process = null;\n      LaneSet laneSet = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_lanes is really bound\n         JavaSDM.ensure ( _edge_lanes != null );\n         // bind object\n         _TmpObject = _edge_lanes.getSrc ();\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n\n         // bind object\n         _TmpObject = laneSet.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) laneSet.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getLaneSets().contains(laneSet));\n\n         // bind object\n         definitions = process.eContainer() instanceof Definitions ? (Definitions) process.eContainer() : null;\n\n         // check object definitions is really bound\n         JavaSDM.ensure ( definitions != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(definitions.getRootElements().contains(process));\n\n         // bind object\n         _TmpObject = _edge_lanes.getTrg ();\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n\n         // check link lanes from lane to laneSet\n         JavaSDM.ensure (laneSet.equals (lane.eContainer()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_lane_lanes_299442 = lane.eContainer() instanceof LaneSet ? (LaneSet) lane.eContainer() : null;\n\n               // check object __DEC_lane_lanes_299442 is really bound\n               JavaSDM.ensure ( __DEC_lane_lanes_299442 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_lane_lanes_299442.getLanes().contains(lane));\n\n               // check isomorphic binding between objects __DEC_lane_lanes_299442 and laneSet \n               JavaSDM.ensure ( !__DEC_lane_lanes_299442.equals (laneSet) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check object _edge_lanes is really bound\n            JavaSDM.ensure ( _edge_lanes != null );\n            // check object definitions is really bound\n            JavaSDM.ensure ( definitions != null );\n            // check object lane is really bound\n            JavaSDM.ensure ( lane != null );\n            // check object laneSet is really bound\n            JavaSDM.ensure ( laneSet != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check link laneSets from laneSet to process\n            JavaSDM.ensure (process.equals (laneSet.eContainer()\n            ));\n\n            // check link lanes from lane to laneSet\n            JavaSDM.ensure (laneSet.equals (lane.eContainer()\n            ));\n\n            // check link rootElements from process to definitions\n            JavaSDM.ensure (definitions.equals (process.eContainer()\n            ));\n\n            // check link src from _edge_lanes to laneSet\n            JavaSDM.ensure (laneSet.equals (_edge_lanes.getSrc ()\n            ));\n\n            // check link trg from _edge_lanes to lane\n            JavaSDM.ensure (lane.equals (_edge_lanes.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_FWD(match,laneSet,process,definitions,lane);\n            if (fujaba__Success)\n            {\n               // statement node \'Ensure that the correct types of elements are matched\'\n               fujaba__Success = this.checkTypes_FWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_7(EMoflonEdge _edge_lanes);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      PackageDeclaration __DEC_actor_actors_258111 = null;\n      Match match = null;\n      Iterator fujaba__IterPackageDeclarationToUseCase = null;\n      UseCase useCase = null;\n      Actor actor = null;\n      PackageDeclaration packageDeclaration = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_actors is really bound\n         JavaSDM.ensure ( _edge_actors != null );\n         // bind object\n         _TmpObject = _edge_actors.getSrc ();\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_actors.getTrg ();\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n\n         // check link actors from actor to packageDeclaration\n         JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n         ));\n\n         // iterate to-many link useCases from packageDeclaration to useCase\n         fujaba__Success = false;\n\n         fujaba__IterPackageDeclarationToUseCase = new ArrayList(packageDeclaration.getUseCases()).iterator ();\n\n         while ( fujaba__IterPackageDeclarationToUseCase.hasNext () )\n         {\n            try\n            {\n               useCase = (UseCase) fujaba__IterPackageDeclarationToUseCase.next ();\n\n               // check object useCase is really bound\n               JavaSDM.ensure ( useCase != null );\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_actor_actors_258111 = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor.eContainer() : null;\n\n                     // check object __DEC_actor_actors_258111 is really bound\n                     JavaSDM.ensure ( __DEC_actor_actors_258111 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_actor_actors_258111.getActors().contains(actor));\n\n                     // check isomorphic binding between objects __DEC_actor_actors_258111 and packageDeclaration \n                     JavaSDM.ensure ( !__DEC_actor_actors_258111.equals (packageDeclaration) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_actors is really bound\n                  JavaSDM.ensure ( _edge_actors != null );\n                  // check object actor is really bound\n                  JavaSDM.ensure ( actor != null );\n                  // check object packageDeclaration is really bound\n                  JavaSDM.ensure ( packageDeclaration != null );\n                  // check object useCase is really bound\n                  JavaSDM.ensure ( useCase != null );\n                  // check link actors from actor to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                  ));\n\n                  // check link src from _edge_actors to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (_edge_actors.getSrc ()\n                  ));\n\n                  // check link trg from _edge_actors to actor\n                  JavaSDM.ensure (actor.equals (_edge_actors.getTrg ()\n                  ));\n\n                  // check link useCases from useCase to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,packageDeclaration,useCase,actor);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_4(EMoflonEdge _edge_actors);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // LaneToActorRule
