/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackage;
import BpmnToUseCaseIntegration.DocRootToUCModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.ICEToAltFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SeqFlowToAltFlowAlt;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.Event;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.FlowNode;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;
import bpmn2.Task;
import bpmn2.UserTask;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Catch Event After EBG To Step Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getCatchEventAfterEBGToStepRule()
 * @model
 * @generated
 */
public interface CatchEventAfterEBGToStepRule extends EObject, AbstractRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __eventBasedGateway_outgoing_outFlow = null;\n      EMoflonEdge __outFlow_sourceRef_eventBasedGateway = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __process_flowElements_ceFlow = null;\n      EMoflonEdge __lane_flowNodeRefs_intermediateCatchEvent = null;\n      EMoflonEdge __outFlow_targetRef_intermediateCatchEvent = null;\n      EMoflonEdge __ceFlow_sourceRef_intermediateCatchEvent = null;\n      EMoflonEdge __process_flowElements_intermediateCatchEvent = null;\n      EMoflonEdge __intermediateCatchEvent_outgoing_ceFlow = null;\n      EMoflonEdge __intermediateCatchEvent_incoming_outFlow = null;\n      EMoflonEdge __process_flowElements_eventBasedGateway = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      EMoflonEdge __inFlow_targetRef_eventBasedGateway = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __eventBasedGateway_incoming_inFlow = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object ceFlow is really bound\n         JavaSDM.ensure ( ceFlow != null );\n         // check object eventBasedGateway is really bound\n         JavaSDM.ensure ( eventBasedGateway != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object intermediateCatchEvent is really bound\n         JavaSDM.ensure ( intermediateCatchEvent != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check isomorphic binding between objects inFlow and ceFlow \n         JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n         // check isomorphic binding between objects outFlow and ceFlow \n         JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,lane,laneSet,ceFlow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object ceFlow is really bound\n            JavaSDM.ensure ( ceFlow != null );\n            // check object eventBasedGateway is really bound\n            JavaSDM.ensure ( eventBasedGateway != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object intermediateCatchEvent is really bound\n            JavaSDM.ensure ( intermediateCatchEvent != null );\n            // check object lane is really bound\n            JavaSDM.ensure ( lane != null );\n            // check object laneSet is really bound\n            JavaSDM.ensure ( laneSet != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects inFlow and ceFlow \n            JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n            // check isomorphic binding between objects outFlow and ceFlow \n            JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __eventBasedGateway_outgoing_outFlow\n            __eventBasedGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __outFlow_sourceRef_eventBasedGateway\n            __outFlow_sourceRef_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_outFlow\n            __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_ceFlow\n            __process_flowElements_ceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __lane_flowNodeRefs_intermediateCatchEvent\n            __lane_flowNodeRefs_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __outFlow_targetRef_intermediateCatchEvent\n            __outFlow_targetRef_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __ceFlow_sourceRef_intermediateCatchEvent\n            __ceFlow_sourceRef_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_intermediateCatchEvent\n            __process_flowElements_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __intermediateCatchEvent_outgoing_ceFlow\n            __intermediateCatchEvent_outgoing_ceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __intermediateCatchEvent_incoming_outFlow\n            __intermediateCatchEvent_incoming_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_ceFlow\n            __process_flowElements_ceFlow.setName (\"flowElements\");\n            // assign attribute __process_flowElements_intermediateCatchEvent\n            __process_flowElements_intermediateCatchEvent.setName (\"flowElements\");\n            // assign attribute __process_flowElements_outFlow\n            __process_flowElements_outFlow.setName (\"flowElements\");\n            // assign attribute __outFlow_sourceRef_eventBasedGateway\n            __outFlow_sourceRef_eventBasedGateway.setName (\"sourceRef\");\n            // assign attribute __eventBasedGateway_outgoing_outFlow\n            __eventBasedGateway_outgoing_outFlow.setName (\"outgoing\");\n            // assign attribute __outFlow_targetRef_intermediateCatchEvent\n            __outFlow_targetRef_intermediateCatchEvent.setName (\"targetRef\");\n            // assign attribute __intermediateCatchEvent_incoming_outFlow\n            __intermediateCatchEvent_incoming_outFlow.setName (\"incoming\");\n            // assign attribute __ceFlow_sourceRef_intermediateCatchEvent\n            __ceFlow_sourceRef_intermediateCatchEvent.setName (\"sourceRef\");\n            // assign attribute __intermediateCatchEvent_outgoing_ceFlow\n            __intermediateCatchEvent_outgoing_ceFlow.setName (\"outgoing\");\n            // assign attribute __lane_flowNodeRefs_intermediateCatchEvent\n            __lane_flowNodeRefs_intermediateCatchEvent.setName (\"flowNodeRefs\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__eventBasedGateway_outgoing_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__outFlow_sourceRef_eventBasedGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,intermediateCatchEvent,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_ceFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__lane_flowNodeRefs_intermediateCatchEvent,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__outFlow_targetRef_intermediateCatchEvent,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__ceFlow_sourceRef_intermediateCatchEvent,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,ceFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_intermediateCatchEvent,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__intermediateCatchEvent_outgoing_ceFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__intermediateCatchEvent_incoming_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,outFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            __process_flowElements_ceFlow.setSrc( process);\n\n\n            // create link\n            __process_flowElements_outFlow.setSrc( process);\n\n\n            // create link\n            __process_flowElements_intermediateCatchEvent.setSrc( process);\n\n\n            // create link\n            __outFlow_sourceRef_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n            // create link\n            __eventBasedGateway_outgoing_outFlow.setSrc( eventBasedGateway);\n\n\n            // create link\n            __process_flowElements_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __eventBasedGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __outFlow_sourceRef_eventBasedGateway.setSrc( outFlow);\n\n\n            // create link\n            __outFlow_targetRef_intermediateCatchEvent.setSrc( outFlow);\n\n\n            // create link\n            __intermediateCatchEvent_incoming_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __process_flowElements_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n            // create link\n            __intermediateCatchEvent_outgoing_ceFlow.setSrc( intermediateCatchEvent);\n\n\n            // create link\n            __lane_flowNodeRefs_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n            // create link\n            __ceFlow_sourceRef_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n            // create link\n            __outFlow_targetRef_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n            // create link\n            __intermediateCatchEvent_incoming_outFlow.setSrc( intermediateCatchEvent);\n\n\n            // create link\n            __lane_flowNodeRefs_intermediateCatchEvent.setSrc( lane);\n\n\n            // create link\n            __ceFlow_sourceRef_intermediateCatchEvent.setSrc( ceFlow);\n\n\n            // create link\n            __process_flowElements_ceFlow.setTrg( ceFlow);\n\n\n            // create link\n            __intermediateCatchEvent_outgoing_ceFlow.setTrg( ceFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object ceFlow is really bound\n            JavaSDM.ensure ( ceFlow != null );\n            // check object eventBasedGateway is really bound\n            JavaSDM.ensure ( eventBasedGateway != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object intermediateCatchEvent is really bound\n            JavaSDM.ensure ( intermediateCatchEvent != null );\n            // check object lane is really bound\n            JavaSDM.ensure ( lane != null );\n            // check object laneSet is really bound\n            JavaSDM.ensure ( laneSet != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects inFlow and ceFlow \n            JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n            // check isomorphic binding between objects outFlow and ceFlow \n            JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __process_flowElements_eventBasedGateway\n            __process_flowElements_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_laneSets_laneSet\n            __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __inFlow_targetRef_eventBasedGateway\n            __inFlow_targetRef_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __laneSet_lanes_lane\n            __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_inFlow\n            __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __eventBasedGateway_incoming_inFlow\n            __eventBasedGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_laneSets_laneSet\n            __process_laneSets_laneSet.setName (\"laneSets\");\n            // assign attribute __process_flowElements_inFlow\n            __process_flowElements_inFlow.setName (\"flowElements\");\n            // assign attribute __process_flowElements_eventBasedGateway\n            __process_flowElements_eventBasedGateway.setName (\"flowElements\");\n            // assign attribute __inFlow_targetRef_eventBasedGateway\n            __inFlow_targetRef_eventBasedGateway.setName (\"targetRef\");\n            // assign attribute __eventBasedGateway_incoming_inFlow\n            __eventBasedGateway_incoming_inFlow.setName (\"incoming\");\n            // assign attribute __laneSet_lanes_lane\n            __laneSet_lanes_lane.setName (\"lanes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_eventBasedGateway,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_laneSets_laneSet,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,inFlow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,lane,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__inFlow_targetRef_eventBasedGateway,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,eventBasedGateway,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__laneSet_lanes_lane,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,laneSet,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_inFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,process,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__eventBasedGateway_incoming_inFlow,\"contextEdges\");\n\n            // create link\n            __process_laneSets_laneSet.setSrc( process);\n\n\n            // create link\n            __process_flowElements_inFlow.setSrc( process);\n\n\n            // create link\n            __process_flowElements_eventBasedGateway.setSrc( process);\n\n\n            // create link\n            __inFlow_targetRef_eventBasedGateway.setSrc( inFlow);\n\n\n            // create link\n            __process_flowElements_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __eventBasedGateway_incoming_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __eventBasedGateway_incoming_inFlow.setSrc( eventBasedGateway);\n\n\n            // create link\n            __process_flowElements_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n            // create link\n            __inFlow_targetRef_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n            // create link\n            __laneSet_lanes_lane.setTrg( lane);\n\n\n            // create link\n            __process_laneSets_laneSet.setTrg( laneSet);\n\n\n            // create link\n            __laneSet_lanes_lane.setSrc( laneSet);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,lane,laneSet,ceFlow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, EventBasedGateway eventBasedGateway,
			SequenceFlow outFlow,
			IntermediateCatchEvent intermediateCatchEvent, Lane lane,
			LaneSet laneSet, SequenceFlow ceFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      SequenceFlow ceFlow = null;\n      FlowNodeToStep ebgToNormalStep = null;\n      EventBasedGateway eventBasedGateway = null;\n      Flow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      NormalStep normalStep = null;\n      SequenceFlow outFlow = null;\n      bpmn2.Process process = null;\n      ProcessToUseCase processToUseCase = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      SeqFlowToAltFlowAlt outFlowToAlt = null;\n      ICEToAltFlow iceToAltFlow = null;\n      AlternativeFlow alternativeFlow = null;\n      AlternativeFlowAlternative alt = null;\n      SequenceFlowToUCFlow ceFlowToAlternativeFlow = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge alt__ref__alternativeFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge ceFlowToAlternativeFlow__target__alternativeFlow = null;\n      EMoflonEdge normalStep__stepAlternative__alt = null;\n      EMoflonEdge outFlowToAlt__target__alt = null;\n      EMoflonEdge __process_flowElements_ceFlow = null;\n      EMoflonEdge __outFlow_targetRef_intermediateCatchEvent = null;\n      EMoflonEdge __ceFlow_sourceRef_intermediateCatchEvent = null;\n      EMoflonEdge __intermediateCatchEvent_outgoing_ceFlow = null;\n      EMoflonEdge useCase__flows__alternativeFlow = null;\n      EMoflonEdge ceFlowToAlternativeFlow__source__ceFlow = null;\n      EMoflonEdge iceToAltFlow__target__alternativeFlow = null;\n      EMoflonEdge __lane_flowNodeRefs_intermediateCatchEvent = null;\n      EMoflonEdge __eventBasedGateway_outgoing_outFlow = null;\n      EMoflonEdge __intermediateCatchEvent_incoming_outFlow = null;\n      EMoflonEdge __outFlow_sourceRef_eventBasedGateway = null;\n      EMoflonEdge iceToAltFlow__source__intermediateCatchEvent = null;\n      EMoflonEdge __process_flowElements_intermediateCatchEvent = null;\n      EMoflonEdge outFlowToAlt__source__outFlow = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"ceFlow\"));\n\n         // ensure correct type and really bound of object ceFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         ceFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"ebgToNormalStep\"));\n\n         // ensure correct type and really bound of object ebgToNormalStep\n         JavaSDM.ensure ( _TmpObject instanceof FlowNodeToStep );\n         ebgToNormalStep = (FlowNodeToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"eventBasedGateway\"));\n\n         // ensure correct type and really bound of object eventBasedGateway\n         JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n         eventBasedGateway = (EventBasedGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"intermediateCatchEvent\"));\n\n         // ensure correct type and really bound of object intermediateCatchEvent\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToUseCase\"));\n\n         // ensure correct type and really bound of object processToUseCase\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToUseCase );\n         processToUseCase = (ProcessToUseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects inFlow and ceFlow \n         JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n         // check isomorphic binding between objects outFlow and ceFlow \n         JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object outFlowToAlt\n         outFlowToAlt = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSeqFlowToAltFlowAlt();\n\n         // create object iceToAltFlow\n         iceToAltFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createICEToAltFlow();\n\n         // create object alternativeFlow\n         alternativeFlow = UseCaseDSLFactory.eINSTANCE.createAlternativeFlow();\n\n         // create object alt\n         alt = UseCaseDSLFactory.eINSTANCE.createAlternativeFlowAlternative();\n\n         // create object ceFlowToAlternativeFlow\n         ceFlowToAlternativeFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // assign attribute alt\n         alt.setCondition ((java.lang.String)csp.getValue(\"alt\",\"condition\"));\n         // assign attribute alternativeFlow\n         alternativeFlow.setName ((java.lang.String)csp.getValue(\"alternativeFlow\",\"name\"));\n\n         // create link\n         ceFlowToAlternativeFlow.setSource( ceFlow);\n\n\n         // create link\n         outFlowToAlt.setSource( outFlow);\n\n\n         // create link\n         iceToAltFlow.setSource( intermediateCatchEvent);\n\n\n         // create link\n         \tuseCase.getFlows().add(alternativeFlow); // add link\n\n\n         // create link\n         \tnormalStep.getStepAlternative().add(alt); // add link\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(alt,alternativeFlow,\"ref\");\n\n         // create link\n         outFlowToAlt.setTarget( alt);\n\n\n         // create link\n         iceToAltFlow.setTarget( alternativeFlow);\n\n\n         // create link\n         ceFlowToAlternativeFlow.setTarget( alternativeFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object alternativeFlow is really bound\n         JavaSDM.ensure ( alternativeFlow != null );\n         // check object ceFlow is really bound\n         JavaSDM.ensure ( ceFlow != null );\n         // check object ceFlowToAlternativeFlow is really bound\n         JavaSDM.ensure ( ceFlowToAlternativeFlow != null );\n         // check object iceToAltFlow is really bound\n         JavaSDM.ensure ( iceToAltFlow != null );\n         // check object intermediateCatchEvent is really bound\n         JavaSDM.ensure ( intermediateCatchEvent != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToAlt is really bound\n         JavaSDM.ensure ( outFlowToAlt != null );\n         // check isomorphic binding between objects outFlow and ceFlow \n         JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,ceFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alt,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,ceFlowToAlternativeFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,intermediateCatchEvent,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alternativeFlow,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,iceToAltFlow,\"createdLinkElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object alternativeFlow is really bound\n         JavaSDM.ensure ( alternativeFlow != null );\n         // check object ceFlow is really bound\n         JavaSDM.ensure ( ceFlow != null );\n         // check object ceFlowToAlternativeFlow is really bound\n         JavaSDM.ensure ( ceFlowToAlternativeFlow != null );\n         // check object ebgToNormalStep is really bound\n         JavaSDM.ensure ( ebgToNormalStep != null );\n         // check object eventBasedGateway is really bound\n         JavaSDM.ensure ( eventBasedGateway != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object iceToAltFlow is really bound\n         JavaSDM.ensure ( iceToAltFlow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object intermediateCatchEvent is really bound\n         JavaSDM.ensure ( intermediateCatchEvent != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToAlt is really bound\n         JavaSDM.ensure ( outFlowToAlt != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToUseCase is really bound\n         JavaSDM.ensure ( processToUseCase != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects alternativeFlow and alt \n         JavaSDM.ensure ( !alternativeFlow.equals (alt) );\n\n         // check isomorphic binding between objects ceFlow and alt \n         JavaSDM.ensure ( !ceFlow.equals (alt) );\n\n         // check isomorphic binding between objects ceFlowToAlternativeFlow and alt \n         JavaSDM.ensure ( !ceFlowToAlternativeFlow.equals (alt) );\n\n         // check isomorphic binding between objects ebgToNormalStep and alt \n         JavaSDM.ensure ( !ebgToNormalStep.equals (alt) );\n\n         // check isomorphic binding between objects eventBasedGateway and alt \n         JavaSDM.ensure ( !eventBasedGateway.equals (alt) );\n\n         // check isomorphic binding between objects flow and alt \n         JavaSDM.ensure ( !flow.equals (alt) );\n\n         // check isomorphic binding between objects iceToAltFlow and alt \n         JavaSDM.ensure ( !iceToAltFlow.equals (alt) );\n\n         // check isomorphic binding between objects inFlow and alt \n         JavaSDM.ensure ( !inFlow.equals (alt) );\n\n         // check isomorphic binding between objects inFlowToFlow and alt \n         JavaSDM.ensure ( !inFlowToFlow.equals (alt) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and alt \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (alt) );\n\n         // check isomorphic binding between objects lane and alt \n         JavaSDM.ensure ( !lane.equals (alt) );\n\n         // check isomorphic binding between objects laneSet and alt \n         JavaSDM.ensure ( !laneSet.equals (alt) );\n\n         // check isomorphic binding between objects normalStep and alt \n         JavaSDM.ensure ( !normalStep.equals (alt) );\n\n         // check isomorphic binding between objects outFlow and alt \n         JavaSDM.ensure ( !outFlow.equals (alt) );\n\n         // check isomorphic binding between objects outFlowToAlt and alt \n         JavaSDM.ensure ( !outFlowToAlt.equals (alt) );\n\n         // check isomorphic binding between objects process and alt \n         JavaSDM.ensure ( !process.equals (alt) );\n\n         // check isomorphic binding between objects processToUseCase and alt \n         JavaSDM.ensure ( !processToUseCase.equals (alt) );\n\n         // check isomorphic binding between objects useCase and alt \n         JavaSDM.ensure ( !useCase.equals (alt) );\n\n         // check isomorphic binding between objects ceFlow and alternativeFlow \n         JavaSDM.ensure ( !ceFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects ceFlowToAlternativeFlow and alternativeFlow \n         JavaSDM.ensure ( !ceFlowToAlternativeFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects ebgToNormalStep and alternativeFlow \n         JavaSDM.ensure ( !ebgToNormalStep.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects eventBasedGateway and alternativeFlow \n         JavaSDM.ensure ( !eventBasedGateway.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects flow and alternativeFlow \n         JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects iceToAltFlow and alternativeFlow \n         JavaSDM.ensure ( !iceToAltFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects inFlow and alternativeFlow \n         JavaSDM.ensure ( !inFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and alternativeFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and alternativeFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects lane and alternativeFlow \n         JavaSDM.ensure ( !lane.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects laneSet and alternativeFlow \n         JavaSDM.ensure ( !laneSet.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects normalStep and alternativeFlow \n         JavaSDM.ensure ( !normalStep.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects outFlow and alternativeFlow \n         JavaSDM.ensure ( !outFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and alternativeFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects process and alternativeFlow \n         JavaSDM.ensure ( !process.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects processToUseCase and alternativeFlow \n         JavaSDM.ensure ( !processToUseCase.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects useCase and alternativeFlow \n         JavaSDM.ensure ( !useCase.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects ceFlowToAlternativeFlow and ceFlow \n         JavaSDM.ensure ( !ceFlowToAlternativeFlow.equals (ceFlow) );\n\n         // check isomorphic binding between objects ebgToNormalStep and ceFlow \n         JavaSDM.ensure ( !ebgToNormalStep.equals (ceFlow) );\n\n         // check isomorphic binding between objects eventBasedGateway and ceFlow \n         JavaSDM.ensure ( !eventBasedGateway.equals (ceFlow) );\n\n         // check isomorphic binding between objects flow and ceFlow \n         JavaSDM.ensure ( !flow.equals (ceFlow) );\n\n         // check isomorphic binding between objects iceToAltFlow and ceFlow \n         JavaSDM.ensure ( !iceToAltFlow.equals (ceFlow) );\n\n         // check isomorphic binding between objects inFlow and ceFlow \n         JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and ceFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (ceFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and ceFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (ceFlow) );\n\n         // check isomorphic binding between objects lane and ceFlow \n         JavaSDM.ensure ( !lane.equals (ceFlow) );\n\n         // check isomorphic binding between objects laneSet and ceFlow \n         JavaSDM.ensure ( !laneSet.equals (ceFlow) );\n\n         // check isomorphic binding between objects normalStep and ceFlow \n         JavaSDM.ensure ( !normalStep.equals (ceFlow) );\n\n         // check isomorphic binding between objects outFlow and ceFlow \n         JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and ceFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (ceFlow) );\n\n         // check isomorphic binding between objects process and ceFlow \n         JavaSDM.ensure ( !process.equals (ceFlow) );\n\n         // check isomorphic binding between objects processToUseCase and ceFlow \n         JavaSDM.ensure ( !processToUseCase.equals (ceFlow) );\n\n         // check isomorphic binding between objects useCase and ceFlow \n         JavaSDM.ensure ( !useCase.equals (ceFlow) );\n\n         // check isomorphic binding between objects ebgToNormalStep and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !ebgToNormalStep.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects eventBasedGateway and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !eventBasedGateway.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects flow and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !flow.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects iceToAltFlow and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !iceToAltFlow.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects inFlow and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !inFlow.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects lane and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !lane.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects laneSet and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !laneSet.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects normalStep and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !normalStep.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects outFlow and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !outFlow.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects process and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !process.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects processToUseCase and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !processToUseCase.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects useCase and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !useCase.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects eventBasedGateway and ebgToNormalStep \n         JavaSDM.ensure ( !eventBasedGateway.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects flow and ebgToNormalStep \n         JavaSDM.ensure ( !flow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects iceToAltFlow and ebgToNormalStep \n         JavaSDM.ensure ( !iceToAltFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and ebgToNormalStep \n         JavaSDM.ensure ( !inFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToFlow and ebgToNormalStep \n         JavaSDM.ensure ( !inFlowToFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and ebgToNormalStep \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects lane and ebgToNormalStep \n         JavaSDM.ensure ( !lane.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects laneSet and ebgToNormalStep \n         JavaSDM.ensure ( !laneSet.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects normalStep and ebgToNormalStep \n         JavaSDM.ensure ( !normalStep.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects outFlow and ebgToNormalStep \n         JavaSDM.ensure ( !outFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and ebgToNormalStep \n         JavaSDM.ensure ( !outFlowToAlt.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects process and ebgToNormalStep \n         JavaSDM.ensure ( !process.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects processToUseCase and ebgToNormalStep \n         JavaSDM.ensure ( !processToUseCase.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects useCase and ebgToNormalStep \n         JavaSDM.ensure ( !useCase.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects flow and eventBasedGateway \n         JavaSDM.ensure ( !flow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects iceToAltFlow and eventBasedGateway \n         JavaSDM.ensure ( !iceToAltFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects inFlow and eventBasedGateway \n         JavaSDM.ensure ( !inFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects inFlowToFlow and eventBasedGateway \n         JavaSDM.ensure ( !inFlowToFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and eventBasedGateway \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects lane and eventBasedGateway \n         JavaSDM.ensure ( !lane.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects laneSet and eventBasedGateway \n         JavaSDM.ensure ( !laneSet.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects normalStep and eventBasedGateway \n         JavaSDM.ensure ( !normalStep.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects outFlow and eventBasedGateway \n         JavaSDM.ensure ( !outFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects outFlowToAlt and eventBasedGateway \n         JavaSDM.ensure ( !outFlowToAlt.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects process and eventBasedGateway \n         JavaSDM.ensure ( !process.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects processToUseCase and eventBasedGateway \n         JavaSDM.ensure ( !processToUseCase.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects useCase and eventBasedGateway \n         JavaSDM.ensure ( !useCase.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects iceToAltFlow and flow \n         JavaSDM.ensure ( !iceToAltFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and flow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (flow) );\n\n         // check isomorphic binding between objects lane and flow \n         JavaSDM.ensure ( !lane.equals (flow) );\n\n         // check isomorphic binding between objects laneSet and flow \n         JavaSDM.ensure ( !laneSet.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToAlt and flow \n         JavaSDM.ensure ( !outFlowToAlt.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects processToUseCase and flow \n         JavaSDM.ensure ( !processToUseCase.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects inFlow and iceToAltFlow \n         JavaSDM.ensure ( !inFlow.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and iceToAltFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and iceToAltFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects lane and iceToAltFlow \n         JavaSDM.ensure ( !lane.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects laneSet and iceToAltFlow \n         JavaSDM.ensure ( !laneSet.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects normalStep and iceToAltFlow \n         JavaSDM.ensure ( !normalStep.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects outFlow and iceToAltFlow \n         JavaSDM.ensure ( !outFlow.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and iceToAltFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects process and iceToAltFlow \n         JavaSDM.ensure ( !process.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects processToUseCase and iceToAltFlow \n         JavaSDM.ensure ( !processToUseCase.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects useCase and iceToAltFlow \n         JavaSDM.ensure ( !useCase.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and inFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlow \n         JavaSDM.ensure ( !lane.equals (inFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and inFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects processToUseCase and inFlow \n         JavaSDM.ensure ( !processToUseCase.equals (inFlow) );\n\n         // check isomorphic binding between objects useCase and inFlow \n         JavaSDM.ensure ( !useCase.equals (inFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and inFlowToFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects lane and inFlowToFlow \n         JavaSDM.ensure ( !lane.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlowToFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects processToUseCase and inFlowToFlow \n         JavaSDM.ensure ( !processToUseCase.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects useCase and inFlowToFlow \n         JavaSDM.ensure ( !useCase.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects lane and intermediateCatchEvent \n         JavaSDM.ensure ( !lane.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects laneSet and intermediateCatchEvent \n         JavaSDM.ensure ( !laneSet.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects normalStep and intermediateCatchEvent \n         JavaSDM.ensure ( !normalStep.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects outFlow and intermediateCatchEvent \n         JavaSDM.ensure ( !outFlow.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects outFlowToAlt and intermediateCatchEvent \n         JavaSDM.ensure ( !outFlowToAlt.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects process and intermediateCatchEvent \n         JavaSDM.ensure ( !process.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects processToUseCase and intermediateCatchEvent \n         JavaSDM.ensure ( !processToUseCase.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects useCase and intermediateCatchEvent \n         JavaSDM.ensure ( !useCase.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects laneSet and lane \n         JavaSDM.ensure ( !laneSet.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and lane \n         JavaSDM.ensure ( !normalStep.equals (lane) );\n\n         // check isomorphic binding between objects outFlow and lane \n         JavaSDM.ensure ( !outFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToAlt and lane \n         JavaSDM.ensure ( !outFlowToAlt.equals (lane) );\n\n         // check isomorphic binding between objects process and lane \n         JavaSDM.ensure ( !process.equals (lane) );\n\n         // check isomorphic binding between objects processToUseCase and lane \n         JavaSDM.ensure ( !processToUseCase.equals (lane) );\n\n         // check isomorphic binding between objects useCase and lane \n         JavaSDM.ensure ( !useCase.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and laneSet \n         JavaSDM.ensure ( !normalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlow and laneSet \n         JavaSDM.ensure ( !outFlow.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlowToAlt and laneSet \n         JavaSDM.ensure ( !outFlowToAlt.equals (laneSet) );\n\n         // check isomorphic binding between objects process and laneSet \n         JavaSDM.ensure ( !process.equals (laneSet) );\n\n         // check isomorphic binding between objects processToUseCase and laneSet \n         JavaSDM.ensure ( !processToUseCase.equals (laneSet) );\n\n         // check isomorphic binding between objects useCase and laneSet \n         JavaSDM.ensure ( !useCase.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and normalStep \n         JavaSDM.ensure ( !outFlowToAlt.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects processToUseCase and normalStep \n         JavaSDM.ensure ( !processToUseCase.equals (normalStep) );\n\n         // check isomorphic binding between objects useCase and normalStep \n         JavaSDM.ensure ( !useCase.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and outFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects processToUseCase and outFlow \n         JavaSDM.ensure ( !processToUseCase.equals (outFlow) );\n\n         // check isomorphic binding between objects useCase and outFlow \n         JavaSDM.ensure ( !useCase.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlowToAlt \n         JavaSDM.ensure ( !process.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects processToUseCase and outFlowToAlt \n         JavaSDM.ensure ( !processToUseCase.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects useCase and outFlowToAlt \n         JavaSDM.ensure ( !useCase.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects processToUseCase and process \n         JavaSDM.ensure ( !processToUseCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and process \n         JavaSDM.ensure ( !useCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and processToUseCase \n         JavaSDM.ensure ( !useCase.equals (processToUseCase) );\n\n         // create object alt__ref__alternativeFlow\n         alt__ref__alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_outFlow\n         __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object ceFlowToAlternativeFlow__target__alternativeFlow\n         ceFlowToAlternativeFlow__target__alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object normalStep__stepAlternative__alt\n         normalStep__stepAlternative__alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlt__target__alt\n         outFlowToAlt__target__alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_ceFlow\n         __process_flowElements_ceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __outFlow_targetRef_intermediateCatchEvent\n         __outFlow_targetRef_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __ceFlow_sourceRef_intermediateCatchEvent\n         __ceFlow_sourceRef_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __intermediateCatchEvent_outgoing_ceFlow\n         __intermediateCatchEvent_outgoing_ceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object useCase__flows__alternativeFlow\n         useCase__flows__alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object ceFlowToAlternativeFlow__source__ceFlow\n         ceFlowToAlternativeFlow__source__ceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object iceToAltFlow__target__alternativeFlow\n         iceToAltFlow__target__alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __lane_flowNodeRefs_intermediateCatchEvent\n         __lane_flowNodeRefs_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __eventBasedGateway_outgoing_outFlow\n         __eventBasedGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __intermediateCatchEvent_incoming_outFlow\n         __intermediateCatchEvent_incoming_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __outFlow_sourceRef_eventBasedGateway\n         __outFlow_sourceRef_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object iceToAltFlow__source__intermediateCatchEvent\n         iceToAltFlow__source__intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_intermediateCatchEvent\n         __process_flowElements_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlt__source__outFlow\n         outFlowToAlt__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"CatchEventAfterEBGToStepRule\");\n         // assign attribute __process_flowElements_ceFlow\n         __process_flowElements_ceFlow.setName (\"flowElements\");\n         // assign attribute __process_flowElements_intermediateCatchEvent\n         __process_flowElements_intermediateCatchEvent.setName (\"flowElements\");\n         // assign attribute __process_flowElements_outFlow\n         __process_flowElements_outFlow.setName (\"flowElements\");\n         // assign attribute __outFlow_sourceRef_eventBasedGateway\n         __outFlow_sourceRef_eventBasedGateway.setName (\"sourceRef\");\n         // assign attribute __eventBasedGateway_outgoing_outFlow\n         __eventBasedGateway_outgoing_outFlow.setName (\"outgoing\");\n         // assign attribute __outFlow_targetRef_intermediateCatchEvent\n         __outFlow_targetRef_intermediateCatchEvent.setName (\"targetRef\");\n         // assign attribute __intermediateCatchEvent_incoming_outFlow\n         __intermediateCatchEvent_incoming_outFlow.setName (\"incoming\");\n         // assign attribute __ceFlow_sourceRef_intermediateCatchEvent\n         __ceFlow_sourceRef_intermediateCatchEvent.setName (\"sourceRef\");\n         // assign attribute __intermediateCatchEvent_outgoing_ceFlow\n         __intermediateCatchEvent_outgoing_ceFlow.setName (\"outgoing\");\n         // assign attribute useCase__flows__alternativeFlow\n         useCase__flows__alternativeFlow.setName (\"flows\");\n         // assign attribute normalStep__stepAlternative__alt\n         normalStep__stepAlternative__alt.setName (\"stepAlternative\");\n         // assign attribute alt__ref__alternativeFlow\n         alt__ref__alternativeFlow.setName (\"ref\");\n         // assign attribute outFlowToAlt__source__outFlow\n         outFlowToAlt__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToAlt__target__alt\n         outFlowToAlt__target__alt.setName (\"target\");\n         // assign attribute iceToAltFlow__source__intermediateCatchEvent\n         iceToAltFlow__source__intermediateCatchEvent.setName (\"source\");\n         // assign attribute iceToAltFlow__target__alternativeFlow\n         iceToAltFlow__target__alternativeFlow.setName (\"target\");\n         // assign attribute __lane_flowNodeRefs_intermediateCatchEvent\n         __lane_flowNodeRefs_intermediateCatchEvent.setName (\"flowNodeRefs\");\n         // assign attribute ceFlowToAlternativeFlow__source__ceFlow\n         ceFlowToAlternativeFlow__source__ceFlow.setName (\"source\");\n         // assign attribute ceFlowToAlternativeFlow__target__alternativeFlow\n         ceFlowToAlternativeFlow__target__alternativeFlow.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alt__ref__alternativeFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,ceFlowToAlternativeFlow__target__alternativeFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep__stepAlternative__alt,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt__target__alt,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_ceFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__outFlow_targetRef_intermediateCatchEvent,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__ceFlow_sourceRef_intermediateCatchEvent,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__intermediateCatchEvent_outgoing_ceFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCase__flows__alternativeFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,ceFlowToAlternativeFlow__source__ceFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,iceToAltFlow__target__alternativeFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__lane_flowNodeRefs_intermediateCatchEvent,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__eventBasedGateway_outgoing_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__intermediateCatchEvent_incoming_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__outFlow_sourceRef_eventBasedGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,iceToAltFlow__source__intermediateCatchEvent,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_intermediateCatchEvent,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt__source__outFlow,\"createdEdges\");\n\n         // create link\n         __process_flowElements_ceFlow.setSrc( process);\n\n\n         // create link\n         __process_flowElements_intermediateCatchEvent.setSrc( process);\n\n\n         // create link\n         __process_flowElements_outFlow.setSrc( process);\n\n\n         // create link\n         __outFlow_sourceRef_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n         // create link\n         __eventBasedGateway_outgoing_outFlow.setSrc( eventBasedGateway);\n\n\n         // create link\n         __intermediateCatchEvent_incoming_outFlow.setTrg( outFlow);\n\n\n         // create link\n         __process_flowElements_outFlow.setTrg( outFlow);\n\n\n         // create link\n         __eventBasedGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n         // create link\n         __outFlow_targetRef_intermediateCatchEvent.setSrc( outFlow);\n\n\n         // create link\n         outFlowToAlt__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         __outFlow_sourceRef_eventBasedGateway.setSrc( outFlow);\n\n\n         // create link\n         __lane_flowNodeRefs_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n         // create link\n         __process_flowElements_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n         // create link\n         __outFlow_targetRef_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n         // create link\n         __intermediateCatchEvent_outgoing_ceFlow.setSrc( intermediateCatchEvent);\n\n\n         // create link\n         __ceFlow_sourceRef_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n         // create link\n         iceToAltFlow__source__intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n         // create link\n         __intermediateCatchEvent_incoming_outFlow.setSrc( intermediateCatchEvent);\n\n\n         // create link\n         useCase__flows__alternativeFlow.setSrc( useCase);\n\n\n         // create link\n         normalStep__stepAlternative__alt.setSrc( normalStep);\n\n\n         // create link\n         normalStep__stepAlternative__alt.setTrg( alt);\n\n\n         // create link\n         alt__ref__alternativeFlow.setSrc( alt);\n\n\n         // create link\n         outFlowToAlt__target__alt.setTrg( alt);\n\n\n         // create link\n         outFlowToAlt__source__outFlow.setSrc( outFlowToAlt);\n\n\n         // create link\n         outFlowToAlt__target__alt.setSrc( outFlowToAlt);\n\n\n         // create link\n         iceToAltFlow__target__alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         useCase__flows__alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         ceFlowToAlternativeFlow__target__alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         alt__ref__alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         iceToAltFlow__target__alternativeFlow.setSrc( iceToAltFlow);\n\n\n         // create link\n         iceToAltFlow__source__intermediateCatchEvent.setSrc( iceToAltFlow);\n\n\n         // create link\n         __lane_flowNodeRefs_intermediateCatchEvent.setSrc( lane);\n\n\n         // create link\n         __intermediateCatchEvent_outgoing_ceFlow.setTrg( ceFlow);\n\n\n         // create link\n         ceFlowToAlternativeFlow__source__ceFlow.setTrg( ceFlow);\n\n\n         // create link\n         __process_flowElements_ceFlow.setTrg( ceFlow);\n\n\n         // create link\n         __ceFlow_sourceRef_intermediateCatchEvent.setSrc( ceFlow);\n\n\n         // create link\n         ceFlowToAlternativeFlow__target__alternativeFlow.setSrc( ceFlowToAlternativeFlow);\n\n\n         // create link\n         ceFlowToAlternativeFlow__source__ceFlow.setSrc( ceFlowToAlternativeFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,useCase,processToUseCase,flow,inFlowToFlow,normalStep,ebgToNormalStep,alt,outFlowToAlt,alternativeFlow,iceToAltFlow,lane,laneSet,ceFlow,ceFlowToAlternativeFlow);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      SequenceFlow ceFlow = null;\n      EventBasedGateway eventBasedGateway = null;\n      SequenceFlow inFlow = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      SequenceFlow outFlow = null;\n      bpmn2.Process process = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __processToUseCase_source_process = null;\n      EMoflonEdge __process_flowElements_ceFlow = null;\n      EMoflonEdge __process_flowElements_eventBasedGateway = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      EMoflonEdge __process_flowElements_intermediateCatchEvent = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __eventBasedGateway_incoming_inFlow = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __inFlow_targetRef_eventBasedGateway = null;\n      EMoflonEdge __outFlow_sourceRef_eventBasedGateway = null;\n      EMoflonEdge __eventBasedGateway_outgoing_outFlow = null;\n      EMoflonEdge __ebgToNormalStep_source_eventBasedGateway = null;\n      EMoflonEdge __outFlow_targetRef_intermediateCatchEvent = null;\n      EMoflonEdge __intermediateCatchEvent_incoming_outFlow = null;\n      EMoflonEdge __intermediateCatchEvent_outgoing_ceFlow = null;\n      EMoflonEdge __lane_flowNodeRefs_intermediateCatchEvent = null;\n      EMoflonEdge __ceFlow_sourceRef_intermediateCatchEvent = null;\n      EMoflonEdge __processToUseCase_target_useCase = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __ebgToNormalStep_target_normalStep = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      CSP csp = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterProcessToProcessToUseCase = null;\n      ProcessToUseCase processToUseCase = null;\n      Flow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      NormalStep normalStep = null;\n      Iterator fujaba__IterEventBasedGatewayToEbgToNormalStep = null;\n      FlowNodeToStep ebgToNormalStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"CatchEventAfterEBGToStepRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"ceFlow\"));\n\n         // ensure correct type and really bound of object ceFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         ceFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"eventBasedGateway\"));\n\n         // ensure correct type and really bound of object eventBasedGateway\n         JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n         eventBasedGateway = (EventBasedGateway) _TmpObject;\n         _TmpObject = (match.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"intermediateCatchEvent\"));\n\n         // ensure correct type and really bound of object intermediateCatchEvent\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n         _TmpObject = (match.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (match.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (match.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects inFlow and ceFlow \n         JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n         // check isomorphic binding between objects outFlow and ceFlow \n         JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link source from eventBasedGateway to ebgToNormalStep\n         fujaba__Success = false;\n\n         fujaba__IterEventBasedGatewayToEbgToNormalStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(eventBasedGateway,FlowNodeToStep.class,\"source\")).iterator ();\n\n         while ( fujaba__IterEventBasedGatewayToEbgToNormalStep.hasNext () )\n         {\n            try\n            {\n               ebgToNormalStep = (FlowNodeToStep) fujaba__IterEventBasedGatewayToEbgToNormalStep.next ();\n\n               // check object ebgToNormalStep is really bound\n               JavaSDM.ensure ( ebgToNormalStep != null );\n               // bind object\n               _TmpObject = ebgToNormalStep.getTarget ();\n\n               // ensure correct type and really bound of object normalStep\n               JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n               normalStep = (NormalStep) _TmpObject;\n\n               // iterate to-many link source from inFlow to inFlowToFlow\n               fujaba__Success = false;\n\n               fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n               while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n               {\n                  try\n                  {\n                     inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n                     // check object inFlowToFlow is really bound\n                     JavaSDM.ensure ( inFlowToFlow != null );\n                     // bind object\n                     flow = inFlowToFlow.getTarget ();\n\n                     // check object flow is really bound\n                     JavaSDM.ensure ( flow != null );\n\n                     // iterate to-many link source from process to processToUseCase\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToProcessToUseCase = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(process,ProcessToUseCase.class,\"source\")).iterator ();\n\n                     while ( fujaba__IterProcessToProcessToUseCase.hasNext () )\n                     {\n                        try\n                        {\n                           processToUseCase = (ProcessToUseCase) fujaba__IterProcessToProcessToUseCase.next ();\n\n                           // check object processToUseCase is really bound\n                           JavaSDM.ensure ( processToUseCase != null );\n                           // bind object\n                           useCase = processToUseCase.getTarget ();\n\n                           // check object useCase is really bound\n                           JavaSDM.ensure ( useCase != null );\n\n                           // story node \'find context\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object ceFlow is really bound\n                              JavaSDM.ensure ( ceFlow != null );\n                              // check object ebgToNormalStep is really bound\n                              JavaSDM.ensure ( ebgToNormalStep != null );\n                              // check object eventBasedGateway is really bound\n                              JavaSDM.ensure ( eventBasedGateway != null );\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object inFlowToFlow is really bound\n                              JavaSDM.ensure ( inFlowToFlow != null );\n                              // check object intermediateCatchEvent is really bound\n                              JavaSDM.ensure ( intermediateCatchEvent != null );\n                              // check object lane is really bound\n                              JavaSDM.ensure ( lane != null );\n                              // check object laneSet is really bound\n                              JavaSDM.ensure ( laneSet != null );\n                              // check object normalStep is really bound\n                              JavaSDM.ensure ( normalStep != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object processToUseCase is really bound\n                              JavaSDM.ensure ( processToUseCase != null );\n                              // check object useCase is really bound\n                              JavaSDM.ensure ( useCase != null );\n                              // check isomorphic binding between objects inFlow and ceFlow \n                              JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                              // check isomorphic binding between objects outFlow and ceFlow \n                              JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                              // check isomorphic binding between objects outFlow and inFlow \n                              JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                              // check link flowElements from ceFlow to process\n                              JavaSDM.ensure (process.equals (ceFlow.eContainer()\n                              ));\n\n                              // check link flowElements from eventBasedGateway to process\n                              JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from intermediateCatchEvent to process\n                              JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link flows from flow to useCase\n                              JavaSDM.ensure (useCase.equals (flow.eContainer()\n                              ));\n\n                              // check link laneSets from laneSet to process\n                              JavaSDM.ensure (process.equals (laneSet.eContainer()\n                              ));\n\n                              // check link lanes from lane to laneSet\n                              JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                              ));\n\n                              // check link source from ebgToNormalStep to eventBasedGateway\n                              JavaSDM.ensure (eventBasedGateway.equals (ebgToNormalStep.getSource ()\n                              ));\n\n                              // check link source from inFlowToFlow to inFlow\n                              JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                              ));\n\n                              // check link source from processToUseCase to process\n                              JavaSDM.ensure (process.equals (processToUseCase.getSource ()\n                              ));\n\n                              // check link sourceRef from ceFlow to intermediateCatchEvent\n                              JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n                              ));\n\n                              // check link sourceRef from outFlow to eventBasedGateway\n                              JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link steps from normalStep to flow\n                              JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                              ));\n\n                              // check link target from ebgToNormalStep to normalStep\n                              JavaSDM.ensure (normalStep.equals (ebgToNormalStep.getTarget ()\n                              ));\n\n                              // check link target from inFlowToFlow to flow\n                              JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                              ));\n\n                              // check link target from processToUseCase to useCase\n                              JavaSDM.ensure (useCase.equals (processToUseCase.getTarget ()\n                              ));\n\n                              // check link targetRef from inFlow to eventBasedGateway\n                              JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link targetRef from outFlow to intermediateCatchEvent\n                              JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                              ));\n\n                              // check link flowNodeRefs from lane to intermediateCatchEvent\n                              JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n                              // create object __process_flowElements_inFlow\n                              __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToUseCase_source_process\n                              __processToUseCase_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_ceFlow\n                              __process_flowElements_ceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_eventBasedGateway\n                              __process_flowElements_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_laneSets_laneSet\n                              __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_intermediateCatchEvent\n                              __process_flowElements_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __process_flowElements_outFlow\n                              __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __eventBasedGateway_incoming_inFlow\n                              __eventBasedGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlow_targetRef_eventBasedGateway\n                              __inFlow_targetRef_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __outFlow_sourceRef_eventBasedGateway\n                              __outFlow_sourceRef_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __eventBasedGateway_outgoing_outFlow\n                              __eventBasedGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __ebgToNormalStep_source_eventBasedGateway\n                              __ebgToNormalStep_source_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __outFlow_targetRef_intermediateCatchEvent\n                              __outFlow_targetRef_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __intermediateCatchEvent_incoming_outFlow\n                              __intermediateCatchEvent_incoming_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __intermediateCatchEvent_outgoing_ceFlow\n                              __intermediateCatchEvent_outgoing_ceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __lane_flowNodeRefs_intermediateCatchEvent\n                              __lane_flowNodeRefs_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __ceFlow_sourceRef_intermediateCatchEvent\n                              __ceFlow_sourceRef_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToUseCase_target_useCase\n                              __processToUseCase_target_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCase_flows_flow\n                              __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flow_steps_normalStep\n                              __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __ebgToNormalStep_target_normalStep\n                              __ebgToNormalStep_target_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __laneSet_lanes_lane\n                              __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __process_laneSets_laneSet\n                              __process_laneSets_laneSet.setName (\"laneSets\");\n                              // assign attribute __process_flowElements_ceFlow\n                              __process_flowElements_ceFlow.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_inFlow\n                              __process_flowElements_inFlow.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_intermediateCatchEvent\n                              __process_flowElements_intermediateCatchEvent.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_outFlow\n                              __process_flowElements_outFlow.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_eventBasedGateway\n                              __process_flowElements_eventBasedGateway.setName (\"flowElements\");\n                              // assign attribute __inFlow_targetRef_eventBasedGateway\n                              __inFlow_targetRef_eventBasedGateway.setName (\"targetRef\");\n                              // assign attribute __eventBasedGateway_incoming_inFlow\n                              __eventBasedGateway_incoming_inFlow.setName (\"incoming\");\n                              // assign attribute __outFlow_sourceRef_eventBasedGateway\n                              __outFlow_sourceRef_eventBasedGateway.setName (\"sourceRef\");\n                              // assign attribute __eventBasedGateway_outgoing_outFlow\n                              __eventBasedGateway_outgoing_outFlow.setName (\"outgoing\");\n                              // assign attribute __outFlow_targetRef_intermediateCatchEvent\n                              __outFlow_targetRef_intermediateCatchEvent.setName (\"targetRef\");\n                              // assign attribute __intermediateCatchEvent_incoming_outFlow\n                              __intermediateCatchEvent_incoming_outFlow.setName (\"incoming\");\n                              // assign attribute __ceFlow_sourceRef_intermediateCatchEvent\n                              __ceFlow_sourceRef_intermediateCatchEvent.setName (\"sourceRef\");\n                              // assign attribute __intermediateCatchEvent_outgoing_ceFlow\n                              __intermediateCatchEvent_outgoing_ceFlow.setName (\"outgoing\");\n                              // assign attribute __useCase_flows_flow\n                              __useCase_flows_flow.setName (\"flows\");\n                              // assign attribute __processToUseCase_source_process\n                              __processToUseCase_source_process.setName (\"source\");\n                              // assign attribute __processToUseCase_target_useCase\n                              __processToUseCase_target_useCase.setName (\"target\");\n                              // assign attribute __flow_steps_normalStep\n                              __flow_steps_normalStep.setName (\"steps\");\n                              // assign attribute __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow.setName (\"source\");\n                              // assign attribute __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow.setName (\"target\");\n                              // assign attribute __ebgToNormalStep_source_eventBasedGateway\n                              __ebgToNormalStep_source_eventBasedGateway.setName (\"source\");\n                              // assign attribute __ebgToNormalStep_target_normalStep\n                              __ebgToNormalStep_target_normalStep.setName (\"target\");\n                              // assign attribute __lane_flowNodeRefs_intermediateCatchEvent\n                              __lane_flowNodeRefs_intermediateCatchEvent.setName (\"flowNodeRefs\");\n                              // assign attribute __laneSet_lanes_lane\n                              __laneSet_lanes_lane.setName (\"lanes\");\n\n                              // create link\n                              __process_flowElements_inFlow.setSrc( process);\n\n\n                              // create link\n                              __processToUseCase_source_process.setTrg( process);\n\n\n                              // create link\n                              __process_flowElements_ceFlow.setSrc( process);\n\n\n                              // create link\n                              __process_flowElements_eventBasedGateway.setSrc( process);\n\n\n                              // create link\n                              __process_laneSets_laneSet.setSrc( process);\n\n\n                              // create link\n                              __process_flowElements_intermediateCatchEvent.setSrc( process);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(process);\n\n\n                              // create link\n                              __process_flowElements_outFlow.setSrc( process);\n\n\n                              // create link\n                              __eventBasedGateway_incoming_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlow_targetRef_eventBasedGateway.setSrc( inFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                              // create link\n                              __inFlow_targetRef_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n                              // create link\n                              __eventBasedGateway_incoming_inFlow.setSrc( eventBasedGateway);\n\n\n                              // create link\n                              __outFlow_sourceRef_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(eventBasedGateway);\n\n\n                              // create link\n                              __process_flowElements_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n                              // create link\n                              __eventBasedGateway_outgoing_outFlow.setSrc( eventBasedGateway);\n\n\n                              // create link\n                              __ebgToNormalStep_source_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n                              // create link\n                              __outFlow_targetRef_intermediateCatchEvent.setSrc( outFlow);\n\n\n                              // create link\n                              __process_flowElements_outFlow.setTrg( outFlow);\n\n\n                              // create link\n                              __intermediateCatchEvent_incoming_outFlow.setTrg( outFlow);\n\n\n                              // create link\n                              __eventBasedGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(outFlow);\n\n\n                              // create link\n                              __outFlow_sourceRef_eventBasedGateway.setSrc( outFlow);\n\n\n                              // create link\n                              __outFlow_targetRef_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n                              // create link\n                              __process_flowElements_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n                              // create link\n                              __intermediateCatchEvent_outgoing_ceFlow.setSrc( intermediateCatchEvent);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(intermediateCatchEvent);\n\n\n                              // create link\n                              __lane_flowNodeRefs_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n                              // create link\n                              __ceFlow_sourceRef_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n                              // create link\n                              __intermediateCatchEvent_incoming_outFlow.setSrc( intermediateCatchEvent);\n\n\n                              // create link\n                              __processToUseCase_target_useCase.setTrg( useCase);\n\n\n                              // create link\n                              __useCase_flows_flow.setSrc( useCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                              // create link\n                              __processToUseCase_target_useCase.setSrc( processToUseCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(processToUseCase);\n\n\n                              // create link\n                              __processToUseCase_source_process.setSrc( processToUseCase);\n\n\n                              // create link\n                              __flow_steps_normalStep.setSrc( flow);\n\n\n                              // create link\n                              __useCase_flows_flow.setTrg( flow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              __ebgToNormalStep_target_normalStep.setTrg( normalStep);\n\n\n                              // create link\n                              __flow_steps_normalStep.setTrg( normalStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(normalStep);\n\n\n                              // create link\n                              __ebgToNormalStep_source_eventBasedGateway.setSrc( ebgToNormalStep);\n\n\n                              // create link\n                              __ebgToNormalStep_target_normalStep.setSrc( ebgToNormalStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(ebgToNormalStep);\n\n\n                              // create link\n                              __laneSet_lanes_lane.setTrg( lane);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(lane);\n\n\n                              // create link\n                              __lane_flowNodeRefs_intermediateCatchEvent.setSrc( lane);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(laneSet);\n\n\n                              // create link\n                              __process_laneSets_laneSet.setTrg( laneSet);\n\n\n                              // create link\n                              __laneSet_lanes_lane.setSrc( laneSet);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(ceFlow);\n\n\n                              // create link\n                              __ceFlow_sourceRef_intermediateCatchEvent.setSrc( ceFlow);\n\n\n                              // create link\n                              __intermediateCatchEvent_outgoing_ceFlow.setTrg( ceFlow);\n\n\n                              // create link\n                              __process_flowElements_ceFlow.setTrg( ceFlow);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__outFlow_targetRef_intermediateCatchEvent,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__outFlow_sourceRef_eventBasedGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__lane_flowNodeRefs_intermediateCatchEvent,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_source_process,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_normalStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_eventBasedGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_intermediateCatchEvent,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__ceFlow_sourceRef_intermediateCatchEvent,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_ceFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_target_useCase,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__ebgToNormalStep_target_normalStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__intermediateCatchEvent_incoming_outFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__eventBasedGateway_incoming_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__ebgToNormalStep_source_eventBasedGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_eventBasedGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_laneSets_laneSet,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__intermediateCatchEvent_outgoing_ceFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneSet_lanes_lane,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_outFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__eventBasedGateway_outgoing_outFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,useCase,processToUseCase,flow,inFlowToFlow,normalStep,ebgToNormalStep,lane,laneSet,ceFlow));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"CatchEventAfterEBGToStepRule\");\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n\n                                    // create link\n                                    ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"process\", process);\nmatch.registerObject(\"inFlow\", inFlow);\nmatch.registerObject(\"eventBasedGateway\", eventBasedGateway);\nmatch.registerObject(\"outFlow\", outFlow);\nmatch.registerObject(\"intermediateCatchEvent\", intermediateCatchEvent);\nmatch.registerObject(\"lane\", lane);\nmatch.registerObject(\"laneSet\", laneSet);\nmatch.registerObject(\"ceFlow\", ceFlow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, EventBasedGateway eventBasedGateway,
			SequenceFlow outFlow,
			IntermediateCatchEvent intermediateCatchEvent, Lane lane,
			LaneSet laneSet, SequenceFlow ceFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_eventBasedGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"eventBasedGateway.gatewayDirection\", true, csp);\r\nvar_eventBasedGateway_gatewayDirection.setValue(eventBasedGateway.getGatewayDirection());\r\nvar_eventBasedGateway_gatewayDirection.setType(\"EObject\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_eventBasedGateway_gatewayDirection,literal0);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, EventBasedGateway eventBasedGateway,
			SequenceFlow outFlow,
			IntermediateCatchEvent intermediateCatchEvent, Lane lane,
			LaneSet laneSet, SequenceFlow ceFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_intermediateCatchEvent_id = CSPFactoryHelper.eINSTANCE.createVariable(\"intermediateCatchEvent.id\", true, csp);\r\nvar_intermediateCatchEvent_id.setValue(intermediateCatchEvent.getId());\r\nvar_intermediateCatchEvent_id.setType(\"\");\r\nVariable var_intermediateCatchEvent_name = CSPFactoryHelper.eINSTANCE.createVariable(\"intermediateCatchEvent.name\", true, csp);\r\nvar_intermediateCatchEvent_name.setValue(intermediateCatchEvent.getName());\r\nvar_intermediateCatchEvent_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_alternativeFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"alternativeFlow.name\", csp);\r\nvar_alternativeFlow_name.setType(\"\");\r\nVariable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(\"alt.condition\", csp);\r\nvar_alt_condition.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_intermediateCatchEvent_id,var_alternativeFlow_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_intermediateCatchEvent_name,var_alt_condition);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"eventBasedGateway\",eventBasedGateway);\r\nisApplicableMatch.registerObject(\"outFlow\",outFlow);\r\nisApplicableMatch.registerObject(\"intermediateCatchEvent\",intermediateCatchEvent);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"processToUseCase\",processToUseCase);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"ebgToNormalStep\",ebgToNormalStep);\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nisApplicableMatch.registerObject(\"laneSet\",laneSet);\r\nisApplicableMatch.registerObject(\"ceFlow\",ceFlow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			bpmn2.Process process, SequenceFlow inFlow,
			EventBasedGateway eventBasedGateway, SequenceFlow outFlow,
			IntermediateCatchEvent intermediateCatchEvent, UseCase useCase,
			ProcessToUseCase processToUseCase, Flow flow,
			SequenceFlowToUCFlow inFlowToFlow, NormalStep normalStep,
			FlowNodeToStep ebgToNormalStep, Lane lane, LaneSet laneSet,
			SequenceFlow ceFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"eventBasedGateway\", eventBasedGateway);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"intermediateCatchEvent\", intermediateCatchEvent);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"processToUseCase\", processToUseCase);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"ebgToNormalStep\", ebgToNormalStep);\nruleresult.registerObject(\"alt\", alt);\nruleresult.registerObject(\"outFlowToAlt\", outFlowToAlt);\nruleresult.registerObject(\"alternativeFlow\", alternativeFlow);\nruleresult.registerObject(\"iceToAltFlow\", iceToAltFlow);\nruleresult.registerObject(\"lane\", lane);\nruleresult.registerObject(\"laneSet\", laneSet);\nruleresult.registerObject(\"ceFlow\", ceFlow);\nruleresult.registerObject(\"ceFlowToAlternativeFlow\", ceFlowToAlternativeFlow);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject process,
			EObject inFlow, EObject eventBasedGateway, EObject outFlow,
			EObject intermediateCatchEvent, EObject useCase,
			EObject processToUseCase, EObject flow, EObject inFlowToFlow,
			EObject normalStep, EObject ebgToNormalStep, EObject alt,
			EObject outFlowToAlt, EObject alternativeFlow,
			EObject iceToAltFlow, EObject lane, EObject laneSet,
			EObject ceFlow, EObject ceFlowToAlternativeFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"outFlow\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow()) && match.getObject(\"intermediateCatchEvent\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getIntermediateCatchEvent()) && match.getObject(\"ceFlow\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __alt_ref_alternativeFlow = null;\n      EMoflonEdge __normalStep_stepAlternative_alt = null;\n      EMoflonEdge __useCase_flows_alternativeFlow = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object alternativeFlow is really bound\n         JavaSDM.ensure ( alternativeFlow != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects flow and alternativeFlow \n         JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,useCase,flow,normalStep,alt,alternativeFlow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object alt is really bound\n            JavaSDM.ensure ( alt != null );\n            // check object alternativeFlow is really bound\n            JavaSDM.ensure ( alternativeFlow != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check isomorphic binding between objects flow and alternativeFlow \n            JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n            // create object __alt_ref_alternativeFlow\n            __alt_ref_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __normalStep_stepAlternative_alt\n            __normalStep_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __useCase_flows_alternativeFlow\n            __useCase_flows_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __useCase_flows_alternativeFlow\n            __useCase_flows_alternativeFlow.setName (\"flows\");\n            // assign attribute __normalStep_stepAlternative_alt\n            __normalStep_stepAlternative_alt.setName (\"stepAlternative\");\n            // assign attribute __alt_ref_alternativeFlow\n            __alt_ref_alternativeFlow.setName (\"ref\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__alt_ref_alternativeFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__normalStep_stepAlternative_alt,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,alternativeFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,alt,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__useCase_flows_alternativeFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            __useCase_flows_alternativeFlow.setSrc( useCase);\n\n\n            // create link\n            __normalStep_stepAlternative_alt.setSrc( normalStep);\n\n\n            // create link\n            __normalStep_stepAlternative_alt.setTrg( alt);\n\n\n            // create link\n            __alt_ref_alternativeFlow.setSrc( alt);\n\n\n            // create link\n            __useCase_flows_alternativeFlow.setTrg( alternativeFlow);\n\n\n            // create link\n            __alt_ref_alternativeFlow.setTrg( alternativeFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object alt is really bound\n            JavaSDM.ensure ( alt != null );\n            // check object alternativeFlow is really bound\n            JavaSDM.ensure ( alternativeFlow != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check isomorphic binding between objects flow and alternativeFlow \n            JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n            // create object __useCase_flows_flow\n            __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __flow_steps_normalStep\n            __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __useCase_flows_flow\n            __useCase_flows_flow.setName (\"flows\");\n            // assign attribute __flow_steps_normalStep\n            __flow_steps_normalStep.setName (\"steps\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__useCase_flows_flow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,useCase,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flow_steps_normalStep,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,normalStep,\"contextNodes\");\n\n            // create link\n            __useCase_flows_flow.setSrc( useCase);\n\n\n            // create link\n            __flow_steps_normalStep.setSrc( flow);\n\n\n            // create link\n            __useCase_flows_flow.setTrg( flow);\n\n\n            // create link\n            __flow_steps_normalStep.setTrg( normalStep);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,useCase,flow,normalStep,alt,alternativeFlow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, UseCase useCase, Flow flow,
			NormalStep normalStep, AlternativeFlowAlternative alt,
			AlternativeFlow alternativeFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      AlternativeFlowAlternative alt = null;\n      AlternativeFlow alternativeFlow = null;\n      FlowNodeToStep ebgToNormalStep = null;\n      EventBasedGateway eventBasedGateway = null;\n      Flow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      NormalStep normalStep = null;\n      bpmn2.Process process = null;\n      ProcessToUseCase processToUseCase = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      SequenceFlow outFlow = null;\n      SequenceFlow ceFlow = null;\n      SeqFlowToAltFlowAlt outFlowToAlt = null;\n      ICEToAltFlow iceToAltFlow = null;\n      SequenceFlowToUCFlow ceFlowToAlternativeFlow = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge eventBasedGateway__outgoing__outFlow = null;\n      EMoflonEdge __useCase_flows_alternativeFlow = null;\n      EMoflonEdge ceFlow__sourceRef__intermediateCatchEvent = null;\n      EMoflonEdge iceToAltFlow__target__alternativeFlow = null;\n      EMoflonEdge iceToAltFlow__source__intermediateCatchEvent = null;\n      EMoflonEdge __normalStep_stepAlternative_alt = null;\n      EMoflonEdge outFlowToAlt__source__outFlow = null;\n      EMoflonEdge __alt_ref_alternativeFlow = null;\n      EMoflonEdge ceFlowToAlternativeFlow__source__ceFlow = null;\n      EMoflonEdge lane__flowNodeRefs__intermediateCatchEvent = null;\n      EMoflonEdge process__flowElements__ceFlow = null;\n      EMoflonEdge outFlow__sourceRef__eventBasedGateway = null;\n      EMoflonEdge intermediateCatchEvent__outgoing__ceFlow = null;\n      EMoflonEdge outFlow__targetRef__intermediateCatchEvent = null;\n      EMoflonEdge process__flowElements__intermediateCatchEvent = null;\n      EMoflonEdge process__flowElements__outFlow = null;\n      EMoflonEdge intermediateCatchEvent__incoming__outFlow = null;\n      EMoflonEdge outFlowToAlt__target__alt = null;\n      EMoflonEdge ceFlowToAlternativeFlow__target__alternativeFlow = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"alt\"));\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"alternativeFlow\"));\n\n         // ensure correct type and really bound of object alternativeFlow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         alternativeFlow = (AlternativeFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"ebgToNormalStep\"));\n\n         // ensure correct type and really bound of object ebgToNormalStep\n         JavaSDM.ensure ( _TmpObject instanceof FlowNodeToStep );\n         ebgToNormalStep = (FlowNodeToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"eventBasedGateway\"));\n\n         // ensure correct type and really bound of object eventBasedGateway\n         JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n         eventBasedGateway = (EventBasedGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToUseCase\"));\n\n         // ensure correct type and really bound of object processToUseCase\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToUseCase );\n         processToUseCase = (ProcessToUseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects flow and alternativeFlow \n         JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object intermediateCatchEvent\n         intermediateCatchEvent = Bpmn2Factory.eINSTANCE.createIntermediateCatchEvent();\n\n         // create object outFlow\n         outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n         // create object ceFlow\n         ceFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n         // create object outFlowToAlt\n         outFlowToAlt = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSeqFlowToAltFlowAlt();\n\n         // create object iceToAltFlow\n         iceToAltFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createICEToAltFlow();\n\n         // create object ceFlowToAlternativeFlow\n         ceFlowToAlternativeFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // assign attribute intermediateCatchEvent\n         intermediateCatchEvent.setId ((java.lang.String)csp.getValue(\"intermediateCatchEvent\",\"id\"));\n         // assign attribute intermediateCatchEvent\n         intermediateCatchEvent.setName ((java.lang.String)csp.getValue(\"intermediateCatchEvent\",\"name\"));\n\n         // create link\n         outFlowToAlt.setTarget( alt);\n\n\n         // create link\n         iceToAltFlow.setTarget( alternativeFlow);\n\n\n         // create link\n         ceFlowToAlternativeFlow.setTarget( alternativeFlow);\n\n\n         // create link\n         ceFlowToAlternativeFlow.setSource( ceFlow);\n\n\n         // create link\n         \tprocess.getFlowElements().add(intermediateCatchEvent); // add link\n\n\n         // create link\n         \tprocess.getFlowElements().add(outFlow); // add link\n\n\n         // create link\n         \tprocess.getFlowElements().add(ceFlow); // add link\n\n\n         // create link\n         outFlow.setSourceRef( eventBasedGateway);\n\n\n         // create link\n         intermediateCatchEvent.getIncoming().add(outFlow);\n\n\n         // create link\n         outFlowToAlt.setSource( outFlow);\n\n\n         // create link\n         iceToAltFlow.setSource( intermediateCatchEvent);\n\n\n         // create link\n         lane.getFlowNodeRefs().add(intermediateCatchEvent);\n\n\n         // create link\n         ceFlow.setSourceRef( intermediateCatchEvent);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object alternativeFlow is really bound\n         JavaSDM.ensure ( alternativeFlow != null );\n         // check object ceFlow is really bound\n         JavaSDM.ensure ( ceFlow != null );\n         // check object ceFlowToAlternativeFlow is really bound\n         JavaSDM.ensure ( ceFlowToAlternativeFlow != null );\n         // check object iceToAltFlow is really bound\n         JavaSDM.ensure ( iceToAltFlow != null );\n         // check object intermediateCatchEvent is really bound\n         JavaSDM.ensure ( intermediateCatchEvent != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToAlt is really bound\n         JavaSDM.ensure ( outFlowToAlt != null );\n         // check isomorphic binding between objects outFlow and ceFlow \n         JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,ceFlowToAlternativeFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,ceFlow,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alt,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alternativeFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,iceToAltFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,intermediateCatchEvent,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt,\"createdLinkElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object alternativeFlow is really bound\n         JavaSDM.ensure ( alternativeFlow != null );\n         // check object ceFlow is really bound\n         JavaSDM.ensure ( ceFlow != null );\n         // check object ceFlowToAlternativeFlow is really bound\n         JavaSDM.ensure ( ceFlowToAlternativeFlow != null );\n         // check object ebgToNormalStep is really bound\n         JavaSDM.ensure ( ebgToNormalStep != null );\n         // check object eventBasedGateway is really bound\n         JavaSDM.ensure ( eventBasedGateway != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object iceToAltFlow is really bound\n         JavaSDM.ensure ( iceToAltFlow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object intermediateCatchEvent is really bound\n         JavaSDM.ensure ( intermediateCatchEvent != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToAlt is really bound\n         JavaSDM.ensure ( outFlowToAlt != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToUseCase is really bound\n         JavaSDM.ensure ( processToUseCase != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects alternativeFlow and alt \n         JavaSDM.ensure ( !alternativeFlow.equals (alt) );\n\n         // check isomorphic binding between objects ceFlow and alt \n         JavaSDM.ensure ( !ceFlow.equals (alt) );\n\n         // check isomorphic binding between objects ceFlowToAlternativeFlow and alt \n         JavaSDM.ensure ( !ceFlowToAlternativeFlow.equals (alt) );\n\n         // check isomorphic binding between objects ebgToNormalStep and alt \n         JavaSDM.ensure ( !ebgToNormalStep.equals (alt) );\n\n         // check isomorphic binding between objects eventBasedGateway and alt \n         JavaSDM.ensure ( !eventBasedGateway.equals (alt) );\n\n         // check isomorphic binding between objects flow and alt \n         JavaSDM.ensure ( !flow.equals (alt) );\n\n         // check isomorphic binding between objects iceToAltFlow and alt \n         JavaSDM.ensure ( !iceToAltFlow.equals (alt) );\n\n         // check isomorphic binding between objects inFlow and alt \n         JavaSDM.ensure ( !inFlow.equals (alt) );\n\n         // check isomorphic binding between objects inFlowToFlow and alt \n         JavaSDM.ensure ( !inFlowToFlow.equals (alt) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and alt \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (alt) );\n\n         // check isomorphic binding between objects lane and alt \n         JavaSDM.ensure ( !lane.equals (alt) );\n\n         // check isomorphic binding between objects laneSet and alt \n         JavaSDM.ensure ( !laneSet.equals (alt) );\n\n         // check isomorphic binding between objects normalStep and alt \n         JavaSDM.ensure ( !normalStep.equals (alt) );\n\n         // check isomorphic binding between objects outFlow and alt \n         JavaSDM.ensure ( !outFlow.equals (alt) );\n\n         // check isomorphic binding between objects outFlowToAlt and alt \n         JavaSDM.ensure ( !outFlowToAlt.equals (alt) );\n\n         // check isomorphic binding between objects process and alt \n         JavaSDM.ensure ( !process.equals (alt) );\n\n         // check isomorphic binding between objects processToUseCase and alt \n         JavaSDM.ensure ( !processToUseCase.equals (alt) );\n\n         // check isomorphic binding between objects useCase and alt \n         JavaSDM.ensure ( !useCase.equals (alt) );\n\n         // check isomorphic binding between objects ceFlow and alternativeFlow \n         JavaSDM.ensure ( !ceFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects ceFlowToAlternativeFlow and alternativeFlow \n         JavaSDM.ensure ( !ceFlowToAlternativeFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects ebgToNormalStep and alternativeFlow \n         JavaSDM.ensure ( !ebgToNormalStep.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects eventBasedGateway and alternativeFlow \n         JavaSDM.ensure ( !eventBasedGateway.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects flow and alternativeFlow \n         JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects iceToAltFlow and alternativeFlow \n         JavaSDM.ensure ( !iceToAltFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects inFlow and alternativeFlow \n         JavaSDM.ensure ( !inFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and alternativeFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and alternativeFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects lane and alternativeFlow \n         JavaSDM.ensure ( !lane.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects laneSet and alternativeFlow \n         JavaSDM.ensure ( !laneSet.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects normalStep and alternativeFlow \n         JavaSDM.ensure ( !normalStep.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects outFlow and alternativeFlow \n         JavaSDM.ensure ( !outFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and alternativeFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects process and alternativeFlow \n         JavaSDM.ensure ( !process.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects processToUseCase and alternativeFlow \n         JavaSDM.ensure ( !processToUseCase.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects useCase and alternativeFlow \n         JavaSDM.ensure ( !useCase.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects ceFlowToAlternativeFlow and ceFlow \n         JavaSDM.ensure ( !ceFlowToAlternativeFlow.equals (ceFlow) );\n\n         // check isomorphic binding between objects ebgToNormalStep and ceFlow \n         JavaSDM.ensure ( !ebgToNormalStep.equals (ceFlow) );\n\n         // check isomorphic binding between objects eventBasedGateway and ceFlow \n         JavaSDM.ensure ( !eventBasedGateway.equals (ceFlow) );\n\n         // check isomorphic binding between objects flow and ceFlow \n         JavaSDM.ensure ( !flow.equals (ceFlow) );\n\n         // check isomorphic binding between objects iceToAltFlow and ceFlow \n         JavaSDM.ensure ( !iceToAltFlow.equals (ceFlow) );\n\n         // check isomorphic binding between objects inFlow and ceFlow \n         JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and ceFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (ceFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and ceFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (ceFlow) );\n\n         // check isomorphic binding between objects lane and ceFlow \n         JavaSDM.ensure ( !lane.equals (ceFlow) );\n\n         // check isomorphic binding between objects laneSet and ceFlow \n         JavaSDM.ensure ( !laneSet.equals (ceFlow) );\n\n         // check isomorphic binding between objects normalStep and ceFlow \n         JavaSDM.ensure ( !normalStep.equals (ceFlow) );\n\n         // check isomorphic binding between objects outFlow and ceFlow \n         JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and ceFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (ceFlow) );\n\n         // check isomorphic binding between objects process and ceFlow \n         JavaSDM.ensure ( !process.equals (ceFlow) );\n\n         // check isomorphic binding between objects processToUseCase and ceFlow \n         JavaSDM.ensure ( !processToUseCase.equals (ceFlow) );\n\n         // check isomorphic binding between objects useCase and ceFlow \n         JavaSDM.ensure ( !useCase.equals (ceFlow) );\n\n         // check isomorphic binding between objects ebgToNormalStep and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !ebgToNormalStep.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects eventBasedGateway and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !eventBasedGateway.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects flow and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !flow.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects iceToAltFlow and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !iceToAltFlow.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects inFlow and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !inFlow.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects lane and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !lane.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects laneSet and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !laneSet.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects normalStep and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !normalStep.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects outFlow and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !outFlow.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects process and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !process.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects processToUseCase and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !processToUseCase.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects useCase and ceFlowToAlternativeFlow \n         JavaSDM.ensure ( !useCase.equals (ceFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects eventBasedGateway and ebgToNormalStep \n         JavaSDM.ensure ( !eventBasedGateway.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects flow and ebgToNormalStep \n         JavaSDM.ensure ( !flow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects iceToAltFlow and ebgToNormalStep \n         JavaSDM.ensure ( !iceToAltFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and ebgToNormalStep \n         JavaSDM.ensure ( !inFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToFlow and ebgToNormalStep \n         JavaSDM.ensure ( !inFlowToFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and ebgToNormalStep \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects lane and ebgToNormalStep \n         JavaSDM.ensure ( !lane.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects laneSet and ebgToNormalStep \n         JavaSDM.ensure ( !laneSet.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects normalStep and ebgToNormalStep \n         JavaSDM.ensure ( !normalStep.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects outFlow and ebgToNormalStep \n         JavaSDM.ensure ( !outFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and ebgToNormalStep \n         JavaSDM.ensure ( !outFlowToAlt.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects process and ebgToNormalStep \n         JavaSDM.ensure ( !process.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects processToUseCase and ebgToNormalStep \n         JavaSDM.ensure ( !processToUseCase.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects useCase and ebgToNormalStep \n         JavaSDM.ensure ( !useCase.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects flow and eventBasedGateway \n         JavaSDM.ensure ( !flow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects iceToAltFlow and eventBasedGateway \n         JavaSDM.ensure ( !iceToAltFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects inFlow and eventBasedGateway \n         JavaSDM.ensure ( !inFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects inFlowToFlow and eventBasedGateway \n         JavaSDM.ensure ( !inFlowToFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and eventBasedGateway \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects lane and eventBasedGateway \n         JavaSDM.ensure ( !lane.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects laneSet and eventBasedGateway \n         JavaSDM.ensure ( !laneSet.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects normalStep and eventBasedGateway \n         JavaSDM.ensure ( !normalStep.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects outFlow and eventBasedGateway \n         JavaSDM.ensure ( !outFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects outFlowToAlt and eventBasedGateway \n         JavaSDM.ensure ( !outFlowToAlt.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects process and eventBasedGateway \n         JavaSDM.ensure ( !process.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects processToUseCase and eventBasedGateway \n         JavaSDM.ensure ( !processToUseCase.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects useCase and eventBasedGateway \n         JavaSDM.ensure ( !useCase.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects iceToAltFlow and flow \n         JavaSDM.ensure ( !iceToAltFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and flow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (flow) );\n\n         // check isomorphic binding between objects lane and flow \n         JavaSDM.ensure ( !lane.equals (flow) );\n\n         // check isomorphic binding between objects laneSet and flow \n         JavaSDM.ensure ( !laneSet.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToAlt and flow \n         JavaSDM.ensure ( !outFlowToAlt.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects processToUseCase and flow \n         JavaSDM.ensure ( !processToUseCase.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects inFlow and iceToAltFlow \n         JavaSDM.ensure ( !inFlow.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and iceToAltFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and iceToAltFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects lane and iceToAltFlow \n         JavaSDM.ensure ( !lane.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects laneSet and iceToAltFlow \n         JavaSDM.ensure ( !laneSet.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects normalStep and iceToAltFlow \n         JavaSDM.ensure ( !normalStep.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects outFlow and iceToAltFlow \n         JavaSDM.ensure ( !outFlow.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and iceToAltFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects process and iceToAltFlow \n         JavaSDM.ensure ( !process.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects processToUseCase and iceToAltFlow \n         JavaSDM.ensure ( !processToUseCase.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects useCase and iceToAltFlow \n         JavaSDM.ensure ( !useCase.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and inFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlow \n         JavaSDM.ensure ( !lane.equals (inFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and inFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects processToUseCase and inFlow \n         JavaSDM.ensure ( !processToUseCase.equals (inFlow) );\n\n         // check isomorphic binding between objects useCase and inFlow \n         JavaSDM.ensure ( !useCase.equals (inFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and inFlowToFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects lane and inFlowToFlow \n         JavaSDM.ensure ( !lane.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlowToFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects processToUseCase and inFlowToFlow \n         JavaSDM.ensure ( !processToUseCase.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects useCase and inFlowToFlow \n         JavaSDM.ensure ( !useCase.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects lane and intermediateCatchEvent \n         JavaSDM.ensure ( !lane.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects laneSet and intermediateCatchEvent \n         JavaSDM.ensure ( !laneSet.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects normalStep and intermediateCatchEvent \n         JavaSDM.ensure ( !normalStep.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects outFlow and intermediateCatchEvent \n         JavaSDM.ensure ( !outFlow.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects outFlowToAlt and intermediateCatchEvent \n         JavaSDM.ensure ( !outFlowToAlt.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects process and intermediateCatchEvent \n         JavaSDM.ensure ( !process.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects processToUseCase and intermediateCatchEvent \n         JavaSDM.ensure ( !processToUseCase.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects useCase and intermediateCatchEvent \n         JavaSDM.ensure ( !useCase.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects laneSet and lane \n         JavaSDM.ensure ( !laneSet.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and lane \n         JavaSDM.ensure ( !normalStep.equals (lane) );\n\n         // check isomorphic binding between objects outFlow and lane \n         JavaSDM.ensure ( !outFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToAlt and lane \n         JavaSDM.ensure ( !outFlowToAlt.equals (lane) );\n\n         // check isomorphic binding between objects process and lane \n         JavaSDM.ensure ( !process.equals (lane) );\n\n         // check isomorphic binding between objects processToUseCase and lane \n         JavaSDM.ensure ( !processToUseCase.equals (lane) );\n\n         // check isomorphic binding between objects useCase and lane \n         JavaSDM.ensure ( !useCase.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and laneSet \n         JavaSDM.ensure ( !normalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlow and laneSet \n         JavaSDM.ensure ( !outFlow.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlowToAlt and laneSet \n         JavaSDM.ensure ( !outFlowToAlt.equals (laneSet) );\n\n         // check isomorphic binding between objects process and laneSet \n         JavaSDM.ensure ( !process.equals (laneSet) );\n\n         // check isomorphic binding between objects processToUseCase and laneSet \n         JavaSDM.ensure ( !processToUseCase.equals (laneSet) );\n\n         // check isomorphic binding between objects useCase and laneSet \n         JavaSDM.ensure ( !useCase.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and normalStep \n         JavaSDM.ensure ( !outFlowToAlt.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects processToUseCase and normalStep \n         JavaSDM.ensure ( !processToUseCase.equals (normalStep) );\n\n         // check isomorphic binding between objects useCase and normalStep \n         JavaSDM.ensure ( !useCase.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and outFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects processToUseCase and outFlow \n         JavaSDM.ensure ( !processToUseCase.equals (outFlow) );\n\n         // check isomorphic binding between objects useCase and outFlow \n         JavaSDM.ensure ( !useCase.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlowToAlt \n         JavaSDM.ensure ( !process.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects processToUseCase and outFlowToAlt \n         JavaSDM.ensure ( !processToUseCase.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects useCase and outFlowToAlt \n         JavaSDM.ensure ( !useCase.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects processToUseCase and process \n         JavaSDM.ensure ( !processToUseCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and process \n         JavaSDM.ensure ( !useCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and processToUseCase \n         JavaSDM.ensure ( !useCase.equals (processToUseCase) );\n\n         // create object eventBasedGateway__outgoing__outFlow\n         eventBasedGateway__outgoing__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __useCase_flows_alternativeFlow\n         __useCase_flows_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object ceFlow__sourceRef__intermediateCatchEvent\n         ceFlow__sourceRef__intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object iceToAltFlow__target__alternativeFlow\n         iceToAltFlow__target__alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object iceToAltFlow__source__intermediateCatchEvent\n         iceToAltFlow__source__intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __normalStep_stepAlternative_alt\n         __normalStep_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlt__source__outFlow\n         outFlowToAlt__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __alt_ref_alternativeFlow\n         __alt_ref_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object ceFlowToAlternativeFlow__source__ceFlow\n         ceFlowToAlternativeFlow__source__ceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object lane__flowNodeRefs__intermediateCatchEvent\n         lane__flowNodeRefs__intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__ceFlow\n         process__flowElements__ceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlow__sourceRef__eventBasedGateway\n         outFlow__sourceRef__eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object intermediateCatchEvent__outgoing__ceFlow\n         intermediateCatchEvent__outgoing__ceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlow__targetRef__intermediateCatchEvent\n         outFlow__targetRef__intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__intermediateCatchEvent\n         process__flowElements__intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__outFlow\n         process__flowElements__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object intermediateCatchEvent__incoming__outFlow\n         intermediateCatchEvent__incoming__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlt__target__alt\n         outFlowToAlt__target__alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object ceFlowToAlternativeFlow__target__alternativeFlow\n         ceFlowToAlternativeFlow__target__alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"CatchEventAfterEBGToStepRule\");\n         // assign attribute process__flowElements__ceFlow\n         process__flowElements__ceFlow.setName (\"flowElements\");\n         // assign attribute process__flowElements__intermediateCatchEvent\n         process__flowElements__intermediateCatchEvent.setName (\"flowElements\");\n         // assign attribute process__flowElements__outFlow\n         process__flowElements__outFlow.setName (\"flowElements\");\n         // assign attribute outFlow__sourceRef__eventBasedGateway\n         outFlow__sourceRef__eventBasedGateway.setName (\"sourceRef\");\n         // assign attribute eventBasedGateway__outgoing__outFlow\n         eventBasedGateway__outgoing__outFlow.setName (\"outgoing\");\n         // assign attribute outFlow__targetRef__intermediateCatchEvent\n         outFlow__targetRef__intermediateCatchEvent.setName (\"targetRef\");\n         // assign attribute intermediateCatchEvent__incoming__outFlow\n         intermediateCatchEvent__incoming__outFlow.setName (\"incoming\");\n         // assign attribute ceFlow__sourceRef__intermediateCatchEvent\n         ceFlow__sourceRef__intermediateCatchEvent.setName (\"sourceRef\");\n         // assign attribute intermediateCatchEvent__outgoing__ceFlow\n         intermediateCatchEvent__outgoing__ceFlow.setName (\"outgoing\");\n         // assign attribute __useCase_flows_alternativeFlow\n         __useCase_flows_alternativeFlow.setName (\"flows\");\n         // assign attribute __normalStep_stepAlternative_alt\n         __normalStep_stepAlternative_alt.setName (\"stepAlternative\");\n         // assign attribute __alt_ref_alternativeFlow\n         __alt_ref_alternativeFlow.setName (\"ref\");\n         // assign attribute outFlowToAlt__source__outFlow\n         outFlowToAlt__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToAlt__target__alt\n         outFlowToAlt__target__alt.setName (\"target\");\n         // assign attribute iceToAltFlow__source__intermediateCatchEvent\n         iceToAltFlow__source__intermediateCatchEvent.setName (\"source\");\n         // assign attribute iceToAltFlow__target__alternativeFlow\n         iceToAltFlow__target__alternativeFlow.setName (\"target\");\n         // assign attribute lane__flowNodeRefs__intermediateCatchEvent\n         lane__flowNodeRefs__intermediateCatchEvent.setName (\"flowNodeRefs\");\n         // assign attribute ceFlowToAlternativeFlow__source__ceFlow\n         ceFlowToAlternativeFlow__source__ceFlow.setName (\"source\");\n         // assign attribute ceFlowToAlternativeFlow__target__alternativeFlow\n         ceFlowToAlternativeFlow__target__alternativeFlow.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,eventBasedGateway__outgoing__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__useCase_flows_alternativeFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,ceFlow__sourceRef__intermediateCatchEvent,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,iceToAltFlow__target__alternativeFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,iceToAltFlow__source__intermediateCatchEvent,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__normalStep_stepAlternative_alt,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__alt_ref_alternativeFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,ceFlowToAlternativeFlow__source__ceFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,lane__flowNodeRefs__intermediateCatchEvent,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__ceFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow__sourceRef__eventBasedGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,intermediateCatchEvent__outgoing__ceFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow__targetRef__intermediateCatchEvent,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__intermediateCatchEvent,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,intermediateCatchEvent__incoming__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt__target__alt,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,ceFlowToAlternativeFlow__target__alternativeFlow,\"createdEdges\");\n\n         // create link\n         process__flowElements__intermediateCatchEvent.setSrc( process);\n\n\n         // create link\n         process__flowElements__outFlow.setSrc( process);\n\n\n         // create link\n         process__flowElements__ceFlow.setSrc( process);\n\n\n         // create link\n         outFlow__sourceRef__eventBasedGateway.setTrg( eventBasedGateway);\n\n\n         // create link\n         eventBasedGateway__outgoing__outFlow.setSrc( eventBasedGateway);\n\n\n         // create link\n         outFlow__targetRef__intermediateCatchEvent.setSrc( outFlow);\n\n\n         // create link\n         eventBasedGateway__outgoing__outFlow.setTrg( outFlow);\n\n\n         // create link\n         process__flowElements__outFlow.setTrg( outFlow);\n\n\n         // create link\n         intermediateCatchEvent__incoming__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToAlt__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlow__sourceRef__eventBasedGateway.setSrc( outFlow);\n\n\n         // create link\n         iceToAltFlow__source__intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n         // create link\n         lane__flowNodeRefs__intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n         // create link\n         ceFlow__sourceRef__intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n         // create link\n         intermediateCatchEvent__outgoing__ceFlow.setSrc( intermediateCatchEvent);\n\n\n         // create link\n         process__flowElements__intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n         // create link\n         intermediateCatchEvent__incoming__outFlow.setSrc( intermediateCatchEvent);\n\n\n         // create link\n         outFlow__targetRef__intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n         // create link\n         __useCase_flows_alternativeFlow.setSrc( useCase);\n\n\n         // create link\n         __normalStep_stepAlternative_alt.setSrc( normalStep);\n\n\n         // create link\n         __normalStep_stepAlternative_alt.setTrg( alt);\n\n\n         // create link\n         __alt_ref_alternativeFlow.setSrc( alt);\n\n\n         // create link\n         outFlowToAlt__target__alt.setTrg( alt);\n\n\n         // create link\n         outFlowToAlt__target__alt.setSrc( outFlowToAlt);\n\n\n         // create link\n         outFlowToAlt__source__outFlow.setSrc( outFlowToAlt);\n\n\n         // create link\n         ceFlowToAlternativeFlow__target__alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         __useCase_flows_alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         iceToAltFlow__target__alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         __alt_ref_alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         iceToAltFlow__source__intermediateCatchEvent.setSrc( iceToAltFlow);\n\n\n         // create link\n         iceToAltFlow__target__alternativeFlow.setSrc( iceToAltFlow);\n\n\n         // create link\n         lane__flowNodeRefs__intermediateCatchEvent.setSrc( lane);\n\n\n         // create link\n         intermediateCatchEvent__outgoing__ceFlow.setTrg( ceFlow);\n\n\n         // create link\n         process__flowElements__ceFlow.setTrg( ceFlow);\n\n\n         // create link\n         ceFlow__sourceRef__intermediateCatchEvent.setSrc( ceFlow);\n\n\n         // create link\n         ceFlowToAlternativeFlow__source__ceFlow.setTrg( ceFlow);\n\n\n         // create link\n         ceFlowToAlternativeFlow__target__alternativeFlow.setSrc( ceFlowToAlternativeFlow);\n\n\n         // create link\n         ceFlowToAlternativeFlow__source__ceFlow.setSrc( ceFlowToAlternativeFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,useCase,processToUseCase,flow,inFlowToFlow,normalStep,ebgToNormalStep,alt,outFlowToAlt,alternativeFlow,iceToAltFlow,lane,laneSet,ceFlow,ceFlowToAlternativeFlow);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      AlternativeFlowAlternative alt = null;\n      AlternativeFlow alternativeFlow = null;\n      Flow flow = null;\n      NormalStep normalStep = null;\n      UseCase useCase = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __process_flowElements_eventBasedGateway = null;\n      EMoflonEdge __processToUseCase_source_process = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      EMoflonEdge __eventBasedGateway_incoming_inFlow = null;\n      EMoflonEdge __inFlow_targetRef_eventBasedGateway = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __ebgToNormalStep_source_eventBasedGateway = null;\n      EMoflonEdge __useCase_flows_alternativeFlow = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __processToUseCase_target_useCase = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __ebgToNormalStep_target_normalStep = null;\n      EMoflonEdge __normalStep_stepAlternative_alt = null;\n      EMoflonEdge __alt_ref_alternativeFlow = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      CSP csp = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      bpmn2.Process process = null;\n      Iterator fujaba__IterUseCaseToProcessToUseCase = null;\n      ProcessToUseCase processToUseCase = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      EventBasedGateway eventBasedGateway = null;\n      Iterator fujaba__IterNormalStepToEbgToNormalStep = null;\n      FlowNodeToStep ebgToNormalStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"CatchEventAfterEBGToStepRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"alt\"));\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n         _TmpObject = (match.getObject(\"alternativeFlow\"));\n\n         // ensure correct type and really bound of object alternativeFlow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         alternativeFlow = (AlternativeFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (match.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (match.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects flow and alternativeFlow \n         JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n         // iterate to-many link target from normalStep to ebgToNormalStep\n         fujaba__Success = false;\n\n         fujaba__IterNormalStepToEbgToNormalStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,FlowNodeToStep.class,\"target\")).iterator ();\n\n         while ( fujaba__IterNormalStepToEbgToNormalStep.hasNext () )\n         {\n            try\n            {\n               ebgToNormalStep = (FlowNodeToStep) fujaba__IterNormalStepToEbgToNormalStep.next ();\n\n               // check object ebgToNormalStep is really bound\n               JavaSDM.ensure ( ebgToNormalStep != null );\n               // bind object\n               _TmpObject = ebgToNormalStep.getSource ();\n\n               // ensure correct type and really bound of object eventBasedGateway\n               JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n               eventBasedGateway = (EventBasedGateway) _TmpObject;\n\n               // iterate to-many link target from flow to inFlowToFlow\n               fujaba__Success = false;\n\n               fujaba__IterFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,SequenceFlowToUCFlow.class,\"target\")).iterator ();\n\n               while ( fujaba__IterFlowToInFlowToFlow.hasNext () )\n               {\n                  try\n                  {\n                     inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterFlowToInFlowToFlow.next ();\n\n                     // check object inFlowToFlow is really bound\n                     JavaSDM.ensure ( inFlowToFlow != null );\n                     // bind object\n                     inFlow = inFlowToFlow.getSource ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n\n                     // iterate to-many link target from useCase to processToUseCase\n                     fujaba__Success = false;\n\n                     fujaba__IterUseCaseToProcessToUseCase = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(useCase,ProcessToUseCase.class,\"target\")).iterator ();\n\n                     while ( fujaba__IterUseCaseToProcessToUseCase.hasNext () )\n                     {\n                        try\n                        {\n                           processToUseCase = (ProcessToUseCase) fujaba__IterUseCaseToProcessToUseCase.next ();\n\n                           // check object processToUseCase is really bound\n                           JavaSDM.ensure ( processToUseCase != null );\n                           // bind object\n                           process = processToUseCase.getSource ();\n\n                           // check object process is really bound\n                           JavaSDM.ensure ( process != null );\n\n                           // story node \'find context\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object alt is really bound\n                              JavaSDM.ensure ( alt != null );\n                              // check object alternativeFlow is really bound\n                              JavaSDM.ensure ( alternativeFlow != null );\n                              // check object ebgToNormalStep is really bound\n                              JavaSDM.ensure ( ebgToNormalStep != null );\n                              // check object eventBasedGateway is really bound\n                              JavaSDM.ensure ( eventBasedGateway != null );\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object inFlowToFlow is really bound\n                              JavaSDM.ensure ( inFlowToFlow != null );\n                              // check object normalStep is really bound\n                              JavaSDM.ensure ( normalStep != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object processToUseCase is really bound\n                              JavaSDM.ensure ( processToUseCase != null );\n                              // check object useCase is really bound\n                              JavaSDM.ensure ( useCase != null );\n                              // check isomorphic binding between objects flow and alternativeFlow \n                              JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n                              // check link ref from alt to alternativeFlow\n                              JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n                              ));\n\n                              // check link flowElements from eventBasedGateway to process\n                              JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flows from alternativeFlow to useCase\n                              JavaSDM.ensure (useCase.equals (alternativeFlow.eContainer()\n                              ));\n\n                              // check link flows from flow to useCase\n                              JavaSDM.ensure (useCase.equals (flow.eContainer()\n                              ));\n\n                              // check link source from ebgToNormalStep to eventBasedGateway\n                              JavaSDM.ensure (eventBasedGateway.equals (ebgToNormalStep.getSource ()\n                              ));\n\n                              // check link source from inFlowToFlow to inFlow\n                              JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                              ));\n\n                              // check link source from processToUseCase to process\n                              JavaSDM.ensure (process.equals (processToUseCase.getSource ()\n                              ));\n\n                              // check link stepAlternative from alt to normalStep\n                              JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                              ));\n\n                              // check link steps from normalStep to flow\n                              JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                              ));\n\n                              // check link target from ebgToNormalStep to normalStep\n                              JavaSDM.ensure (normalStep.equals (ebgToNormalStep.getTarget ()\n                              ));\n\n                              // check link target from inFlowToFlow to flow\n                              JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                              ));\n\n                              // check link target from processToUseCase to useCase\n                              JavaSDM.ensure (useCase.equals (processToUseCase.getTarget ()\n                              ));\n\n                              // check link targetRef from inFlow to eventBasedGateway\n                              JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // iterate to-many link laneSets from process to laneSet\n                              fujaba__Success = false;\n\n                              fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                              while ( fujaba__IterProcessToLaneSet.hasNext () )\n                              {\n                                 try\n                                 {\n                                    laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                                    // check object laneSet is really bound\n                                    JavaSDM.ensure ( laneSet != null );\n                                    // iterate to-many link lanes from laneSet to lane\n                                    fujaba__Success = false;\n\n                                    fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                                    while ( fujaba__IterLaneSetToLane.hasNext () )\n                                    {\n                                       try\n                                       {\n                                          lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                          // check object lane is really bound\n                                          JavaSDM.ensure ( lane != null );\n                                          // create object __process_flowElements_inFlow\n                                          __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __process_flowElements_eventBasedGateway\n                                          __process_flowElements_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __processToUseCase_source_process\n                                          __processToUseCase_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object isApplicableMatch\n                                          isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                                          // create object __process_laneSets_laneSet\n                                          __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __eventBasedGateway_incoming_inFlow\n                                          __eventBasedGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __inFlow_targetRef_eventBasedGateway\n                                          __inFlow_targetRef_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __inFlowToFlow_source_inFlow\n                                          __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __ebgToNormalStep_source_eventBasedGateway\n                                          __ebgToNormalStep_source_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __useCase_flows_alternativeFlow\n                                          __useCase_flows_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __useCase_flows_flow\n                                          __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __processToUseCase_target_useCase\n                                          __processToUseCase_target_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __flow_steps_normalStep\n                                          __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __inFlowToFlow_target_flow\n                                          __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __ebgToNormalStep_target_normalStep\n                                          __ebgToNormalStep_target_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __normalStep_stepAlternative_alt\n                                          __normalStep_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __alt_ref_alternativeFlow\n                                          __alt_ref_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __laneSet_lanes_lane\n                                          __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // assign attribute __process_laneSets_laneSet\n                                          __process_laneSets_laneSet.setName (\"laneSets\");\n                                          // assign attribute __process_flowElements_inFlow\n                                          __process_flowElements_inFlow.setName (\"flowElements\");\n                                          // assign attribute __process_flowElements_eventBasedGateway\n                                          __process_flowElements_eventBasedGateway.setName (\"flowElements\");\n                                          // assign attribute __inFlow_targetRef_eventBasedGateway\n                                          __inFlow_targetRef_eventBasedGateway.setName (\"targetRef\");\n                                          // assign attribute __eventBasedGateway_incoming_inFlow\n                                          __eventBasedGateway_incoming_inFlow.setName (\"incoming\");\n                                          // assign attribute __useCase_flows_flow\n                                          __useCase_flows_flow.setName (\"flows\");\n                                          // assign attribute __useCase_flows_alternativeFlow\n                                          __useCase_flows_alternativeFlow.setName (\"flows\");\n                                          // assign attribute __processToUseCase_source_process\n                                          __processToUseCase_source_process.setName (\"source\");\n                                          // assign attribute __processToUseCase_target_useCase\n                                          __processToUseCase_target_useCase.setName (\"target\");\n                                          // assign attribute __flow_steps_normalStep\n                                          __flow_steps_normalStep.setName (\"steps\");\n                                          // assign attribute __inFlowToFlow_source_inFlow\n                                          __inFlowToFlow_source_inFlow.setName (\"source\");\n                                          // assign attribute __inFlowToFlow_target_flow\n                                          __inFlowToFlow_target_flow.setName (\"target\");\n                                          // assign attribute __normalStep_stepAlternative_alt\n                                          __normalStep_stepAlternative_alt.setName (\"stepAlternative\");\n                                          // assign attribute __ebgToNormalStep_source_eventBasedGateway\n                                          __ebgToNormalStep_source_eventBasedGateway.setName (\"source\");\n                                          // assign attribute __ebgToNormalStep_target_normalStep\n                                          __ebgToNormalStep_target_normalStep.setName (\"target\");\n                                          // assign attribute __alt_ref_alternativeFlow\n                                          __alt_ref_alternativeFlow.setName (\"ref\");\n                                          // assign attribute __laneSet_lanes_lane\n                                          __laneSet_lanes_lane.setName (\"lanes\");\n\n                                          // create link\n                                          __process_flowElements_inFlow.setSrc( process);\n\n\n                                          // create link\n                                          __process_flowElements_eventBasedGateway.setSrc( process);\n\n\n                                          // create link\n                                          __processToUseCase_source_process.setTrg( process);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(process);\n\n\n                                          // create link\n                                          __process_laneSets_laneSet.setSrc( process);\n\n\n                                          // create link\n                                          __eventBasedGateway_incoming_inFlow.setTrg( inFlow);\n\n\n                                          // create link\n                                          __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                                          // create link\n                                          __inFlow_targetRef_eventBasedGateway.setSrc( inFlow);\n\n\n                                          // create link\n                                          __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                                          // create link\n                                          __inFlow_targetRef_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n                                          // create link\n                                          __process_flowElements_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(eventBasedGateway);\n\n\n                                          // create link\n                                          __eventBasedGateway_incoming_inFlow.setSrc( eventBasedGateway);\n\n\n                                          // create link\n                                          __ebgToNormalStep_source_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n                                          // create link\n                                          __useCase_flows_alternativeFlow.setSrc( useCase);\n\n\n                                          // create link\n                                          __useCase_flows_flow.setSrc( useCase);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                                          // create link\n                                          __processToUseCase_target_useCase.setTrg( useCase);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(processToUseCase);\n\n\n                                          // create link\n                                          __processToUseCase_source_process.setSrc( processToUseCase);\n\n\n                                          // create link\n                                          __processToUseCase_target_useCase.setSrc( processToUseCase);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(flow);\n\n\n                                          // create link\n                                          __flow_steps_normalStep.setSrc( flow);\n\n\n                                          // create link\n                                          __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                                          // create link\n                                          __useCase_flows_flow.setTrg( flow);\n\n\n                                          // create link\n                                          __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                                          // create link\n                                          __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                                          // create link\n                                          __flow_steps_normalStep.setTrg( normalStep);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(normalStep);\n\n\n                                          // create link\n                                          __ebgToNormalStep_target_normalStep.setTrg( normalStep);\n\n\n                                          // create link\n                                          __normalStep_stepAlternative_alt.setSrc( normalStep);\n\n\n                                          // create link\n                                          __ebgToNormalStep_source_eventBasedGateway.setSrc( ebgToNormalStep);\n\n\n                                          // create link\n                                          __ebgToNormalStep_target_normalStep.setSrc( ebgToNormalStep);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(ebgToNormalStep);\n\n\n                                          // create link\n                                          __normalStep_stepAlternative_alt.setTrg( alt);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(alt);\n\n\n                                          // create link\n                                          __alt_ref_alternativeFlow.setSrc( alt);\n\n\n                                          // create link\n                                          __alt_ref_alternativeFlow.setTrg( alternativeFlow);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(alternativeFlow);\n\n\n                                          // create link\n                                          __useCase_flows_alternativeFlow.setTrg( alternativeFlow);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(lane);\n\n\n                                          // create link\n                                          __laneSet_lanes_lane.setTrg( lane);\n\n\n                                          // create link\n                                          __process_laneSets_laneSet.setTrg( laneSet);\n\n\n                                          // create link\n                                          __laneSet_lanes_lane.setSrc( laneSet);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(laneSet);\n\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_eventBasedGateway,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__normalStep_stepAlternative_alt,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__ebgToNormalStep_source_eventBasedGateway,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__eventBasedGateway_incoming_inFlow,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__ebgToNormalStep_target_normalStep,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_source_process,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__alt_ref_alternativeFlow,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneSet_lanes_lane,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_normalStep,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_target_useCase,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_eventBasedGateway,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_laneSets_laneSet,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_alternativeFlow,\"allContextElements\");\n                                          // story node \'solve CSP\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,process,inFlow,eventBasedGateway,useCase,processToUseCase,flow,inFlowToFlow,normalStep,ebgToNormalStep,alt,alternativeFlow,lane,laneSet));\n\n                                             // ensure correct type and really bound of object csp\n                                             JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                             csp = (CSP) _TmpObject;\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          // statement node \'check CSP\'\n                                          fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                                          if (fujaba__Success)\n                                          {\n                                             // story node \'add match to rule result\'\n                                             try \n                                             {\n                                                fujaba__Success = false; \n\n                                                // check object isApplicableMatch is really bound\n                                                JavaSDM.ensure ( isApplicableMatch != null );\n                                                // check object ruleresult is really bound\n                                                JavaSDM.ensure ( ruleresult != null );\n                                                // assign attribute isApplicableMatch\n                                                isApplicableMatch.setRuleName (\"CatchEventAfterEBGToStepRule\");\n                                                // assign attribute ruleresult\n                                                ruleresult.setSuccess (true);\n\n                                                // create link\n                                                ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                                                fujaba__Success = true;\n                                             }\n                                             catch ( JavaSDMException fujaba__InternalException )\n                                             {\n                                                fujaba__Success = false;\n                                             }\n\n\n                                          }\n                                          else\n                                          {\n\n                                          }\n\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n                                    }\n                                    JavaSDM.ensure (fujaba__Success);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n                              }\n                              JavaSDM.ensure (fujaba__Success);\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"useCase\", useCase);\nmatch.registerObject(\"flow\", flow);\nmatch.registerObject(\"normalStep\", normalStep);\nmatch.registerObject(\"alt\", alt);\nmatch.registerObject(\"alternativeFlow\", alternativeFlow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, UseCase useCase, Flow flow,
			NormalStep normalStep, AlternativeFlowAlternative alt,
			AlternativeFlow alternativeFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, UseCase useCase, Flow flow,
			NormalStep normalStep, AlternativeFlowAlternative alt,
			AlternativeFlow alternativeFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_alternativeFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"alternativeFlow.name\", true, csp);\r\nvar_alternativeFlow_name.setValue(alternativeFlow.getName());\r\nvar_alternativeFlow_name.setType(\"\");\r\nVariable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(\"alt.condition\", true, csp);\r\nvar_alt_condition.setValue(alt.getCondition());\r\nvar_alt_condition.setType(\"\");\r\nVariable var_eventBasedGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"eventBasedGateway.gatewayDirection\", true, csp);\r\nvar_eventBasedGateway_gatewayDirection.setValue(eventBasedGateway.getGatewayDirection());\r\nvar_eventBasedGateway_gatewayDirection.setType(\"EObject\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_intermediateCatchEvent_id = CSPFactoryHelper.eINSTANCE.createVariable(\"intermediateCatchEvent.id\", csp);\r\nvar_intermediateCatchEvent_id.setType(\"\");\r\nVariable var_intermediateCatchEvent_name = CSPFactoryHelper.eINSTANCE.createVariable(\"intermediateCatchEvent.name\", csp);\r\nvar_intermediateCatchEvent_name.setType(\"\");\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();Eq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_eventBasedGateway_gatewayDirection,literal0);\r\neq.setRuleName(\"\");\r\neq.solve(var_intermediateCatchEvent_id,var_alternativeFlow_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_intermediateCatchEvent_name,var_alt_condition);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"eventBasedGateway\",eventBasedGateway);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"processToUseCase\",processToUseCase);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"ebgToNormalStep\",ebgToNormalStep);\r\nisApplicableMatch.registerObject(\"alt\",alt);\r\nisApplicableMatch.registerObject(\"alternativeFlow\",alternativeFlow);\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nisApplicableMatch.registerObject(\"laneSet\",laneSet);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			bpmn2.Process process, SequenceFlow inFlow,
			EventBasedGateway eventBasedGateway, UseCase useCase,
			ProcessToUseCase processToUseCase, Flow flow,
			SequenceFlowToUCFlow inFlowToFlow, NormalStep normalStep,
			FlowNodeToStep ebgToNormalStep, AlternativeFlowAlternative alt,
			AlternativeFlow alternativeFlow, Lane lane, LaneSet laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"eventBasedGateway\", eventBasedGateway);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"intermediateCatchEvent\", intermediateCatchEvent);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"processToUseCase\", processToUseCase);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"ebgToNormalStep\", ebgToNormalStep);\nruleresult.registerObject(\"alt\", alt);\nruleresult.registerObject(\"outFlowToAlt\", outFlowToAlt);\nruleresult.registerObject(\"alternativeFlow\", alternativeFlow);\nruleresult.registerObject(\"iceToAltFlow\", iceToAltFlow);\nruleresult.registerObject(\"lane\", lane);\nruleresult.registerObject(\"laneSet\", laneSet);\nruleresult.registerObject(\"ceFlow\", ceFlow);\nruleresult.registerObject(\"ceFlowToAlternativeFlow\", ceFlowToAlternativeFlow);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject process,
			EObject inFlow, EObject eventBasedGateway, EObject outFlow,
			EObject intermediateCatchEvent, EObject useCase,
			EObject processToUseCase, EObject flow, EObject inFlowToFlow,
			EObject normalStep, EObject ebgToNormalStep, EObject alt,
			EObject outFlowToAlt, EObject alternativeFlow,
			EObject iceToAltFlow, EObject lane, EObject laneSet,
			EObject ceFlow, EObject ceFlowToAlternativeFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"alt\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getAlternativeFlowAlternative()) && match.getObject(\"alternativeFlow\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getAlternativeFlow());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_ceFlow_flowElements_119809 = null;\n      FlowElementsContainer __DEC_intermediateCatchEvent_flowElements_414372 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_229956 = null;\n      Iterator fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_400321 = null;\n      SequenceFlow __DEC_intermediateCatchEvent_targetRef_400321 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterIntermediateCatchEventToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToOutFlow = null;\n      SequenceFlow outFlow = null;\n      Iterator fujaba__IterProcessToIntermediateCatchEvent = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterProcessToEventBasedGateway = null;\n      EventBasedGateway eventBasedGateway = null;\n      SequenceFlow ceFlow = null;\n      bpmn2.Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object ceFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         ceFlow = (SequenceFlow) _TmpObject;\n\n         // check link flowElements from ceFlow to process\n         JavaSDM.ensure (process.equals (ceFlow.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to eventBasedGateway\n         fujaba__Success = false;\n\n         fujaba__IterProcessToEventBasedGateway = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToEventBasedGateway.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToEventBasedGateway.next ();\n\n               // ensure correct type and really bound of object eventBasedGateway\n               JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n               eventBasedGateway = (EventBasedGateway) _TmpObject;\n               // iterate to-many link flowElements from process to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n                     // ensure correct type and really bound of object inFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     inFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects inFlow and ceFlow \n                     JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                     // check link targetRef from inFlow to eventBasedGateway\n                     JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                     ));\n\n                     // iterate to-many link flowElements from process to intermediateCatchEvent\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToIntermediateCatchEvent = new ArrayList(process.getFlowElements()).iterator ();\n\n                     while ( fujaba__IterProcessToIntermediateCatchEvent.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterProcessToIntermediateCatchEvent.next ();\n\n                           // ensure correct type and really bound of object intermediateCatchEvent\n                           JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n                           intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n                           // check link sourceRef from ceFlow to intermediateCatchEvent\n                           JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n                           ));\n\n                           // iterate to-many link flowElements from process to outFlow\n                           fujaba__Success = false;\n\n                           fujaba__IterProcessToOutFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n                           while ( fujaba__IterProcessToOutFlow.hasNext () )\n                           {\n                              try\n                              {\n                                 _TmpObject =  fujaba__IterProcessToOutFlow.next ();\n\n                                 // ensure correct type and really bound of object outFlow\n                                 JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                                 outFlow = (SequenceFlow) _TmpObject;\n                                 // check isomorphic binding between objects outFlow and ceFlow \n                                 JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                                 // check isomorphic binding between objects outFlow and inFlow \n                                 JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                 // check link sourceRef from outFlow to eventBasedGateway\n                                 JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                                 ));\n\n                                 // check link targetRef from outFlow to intermediateCatchEvent\n                                 JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                                 ));\n\n                                 // iterate to-many link flowNodeRefs from intermediateCatchEvent to lane\n                                 fujaba__Success = false;\n\n                                 fujaba__IterIntermediateCatchEventToLane = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(intermediateCatchEvent,Lane.class,\"flowNodeRefs\")).iterator ();\n\n                                 while ( fujaba__IterIntermediateCatchEventToLane.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       lane = (Lane) fujaba__IterIntermediateCatchEventToLane.next ();\n\n                                       // check object lane is really bound\n                                       JavaSDM.ensure ( lane != null );\n                                       // iterate to-many link laneSets from process to laneSet\n                                       fujaba__Success = false;\n\n                                       fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                                       while ( fujaba__IterProcessToLaneSet.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                                             // check object laneSet is really bound\n                                             JavaSDM.ensure ( laneSet != null );\n                                             // check link lanes from lane to laneSet\n                                             JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                             ));\n\n                                             // story node \'test core match and DECs\'\n                                             try \n                                             {\n                                                fujaba__Success = false; \n\n                                                // check negative bindings\n                                                try\n                                                {\n                                                   fujaba__Success = false;\n\n                                                   // bind object\n                                                   __DEC_ceFlow_flowElements_119809 = ceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) ceFlow.eContainer() : null;\n\n                                                   // check object __DEC_ceFlow_flowElements_119809 is really bound\n                                                   JavaSDM.ensure ( __DEC_ceFlow_flowElements_119809 != null );\n\n                                                   // check if contained via correct reference\n                                                   JavaSDM.ensure(__DEC_ceFlow_flowElements_119809.getFlowElements().contains(ceFlow));\n\n                                                   // check isomorphic binding between objects __DEC_ceFlow_flowElements_119809 and process \n                                                   JavaSDM.ensure ( !__DEC_ceFlow_flowElements_119809.equals (process) );\n\n\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n\n                                                fujaba__Success = !(fujaba__Success);\n\n                                                JavaSDM.ensure ( fujaba__Success );\n\n                                                // check negative bindings\n                                                try\n                                                {\n                                                   fujaba__Success = false;\n\n                                                   // bind object\n                                                   __DEC_intermediateCatchEvent_flowElements_414372 = intermediateCatchEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) intermediateCatchEvent.eContainer() : null;\n\n                                                   // check object __DEC_intermediateCatchEvent_flowElements_414372 is really bound\n                                                   JavaSDM.ensure ( __DEC_intermediateCatchEvent_flowElements_414372 != null );\n\n                                                   // check if contained via correct reference\n                                                   JavaSDM.ensure(__DEC_intermediateCatchEvent_flowElements_414372.getFlowElements().contains(intermediateCatchEvent));\n\n                                                   // check isomorphic binding between objects __DEC_intermediateCatchEvent_flowElements_414372 and process \n                                                   JavaSDM.ensure ( !__DEC_intermediateCatchEvent_flowElements_414372.equals (process) );\n\n\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n\n                                                fujaba__Success = !(fujaba__Success);\n\n                                                JavaSDM.ensure ( fujaba__Success );\n\n                                                // check negative bindings\n                                                try\n                                                {\n                                                   fujaba__Success = false;\n\n                                                   // bind object\n                                                   __DEC_outFlow_flowElements_229956 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                                   // check object __DEC_outFlow_flowElements_229956 is really bound\n                                                   JavaSDM.ensure ( __DEC_outFlow_flowElements_229956 != null );\n\n                                                   // check if contained via correct reference\n                                                   JavaSDM.ensure(__DEC_outFlow_flowElements_229956.getFlowElements().contains(outFlow));\n\n                                                   // check isomorphic binding between objects __DEC_outFlow_flowElements_229956 and process \n                                                   JavaSDM.ensure ( !__DEC_outFlow_flowElements_229956.equals (process) );\n\n\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n\n                                                fujaba__Success = !(fujaba__Success);\n\n                                                JavaSDM.ensure ( fujaba__Success );\n\n                                                // negative check for link default from ceFlow\n                                                JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(ceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                                // negative check for link default from outFlow\n                                                JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                                // check negative bindings\n                                                try\n                                                {\n                                                   fujaba__Success = false;\n\n                                                   // iterate to-many link targetRef from intermediateCatchEvent to __DEC_intermediateCatchEvent_targetRef_400321\n                                                   fujaba__Success = false;\n\n                                                   fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_400321 = new ArrayList(intermediateCatchEvent.getIncoming()).iterator ();\n\n                                                   while ( !(fujaba__Success) && fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_400321.hasNext () )\n                                                   {\n                                                      try\n                                                      {\n                                                         __DEC_intermediateCatchEvent_targetRef_400321 = (SequenceFlow) fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_400321.next ();\n\n                                                         // check object __DEC_intermediateCatchEvent_targetRef_400321 is really bound\n                                                         JavaSDM.ensure ( __DEC_intermediateCatchEvent_targetRef_400321 != null );\n                                                         // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_400321 and ceFlow \n                                                         JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_400321.equals (ceFlow) );\n\n                                                         // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_400321 and inFlow \n                                                         JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_400321.equals (inFlow) );\n\n                                                         // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_400321 and outFlow \n                                                         JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_400321.equals (outFlow) );\n\n\n                                                         fujaba__Success = true;\n                                                      }\n                                                      catch ( JavaSDMException fujaba__InternalException )\n                                                      {\n                                                         fujaba__Success = false;\n                                                      }\n                                                   }\n                                                   JavaSDM.ensure (fujaba__Success);\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n\n                                                fujaba__Success = !(fujaba__Success);\n\n                                                JavaSDM.ensure ( fujaba__Success );\n\n                                                // check object _edge_flowElements is really bound\n                                                JavaSDM.ensure ( _edge_flowElements != null );\n                                                // check object ceFlow is really bound\n                                                JavaSDM.ensure ( ceFlow != null );\n                                                // check object eventBasedGateway is really bound\n                                                JavaSDM.ensure ( eventBasedGateway != null );\n                                                // check object inFlow is really bound\n                                                JavaSDM.ensure ( inFlow != null );\n                                                // check object intermediateCatchEvent is really bound\n                                                JavaSDM.ensure ( intermediateCatchEvent != null );\n                                                // check object lane is really bound\n                                                JavaSDM.ensure ( lane != null );\n                                                // check object laneSet is really bound\n                                                JavaSDM.ensure ( laneSet != null );\n                                                // check object outFlow is really bound\n                                                JavaSDM.ensure ( outFlow != null );\n                                                // check object process is really bound\n                                                JavaSDM.ensure ( process != null );\n                                                // check isomorphic binding between objects inFlow and ceFlow \n                                                JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                                                // check isomorphic binding between objects outFlow and ceFlow \n                                                JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                                                // check isomorphic binding between objects outFlow and inFlow \n                                                JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                                // check link flowElements from ceFlow to process\n                                                JavaSDM.ensure (process.equals (ceFlow.eContainer()\n                                                ));\n\n                                                // check link flowElements from eventBasedGateway to process\n                                                JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                                                ));\n\n                                                // check link flowElements from inFlow to process\n                                                JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                                ));\n\n                                                // check link flowElements from intermediateCatchEvent to process\n                                                JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                                                ));\n\n                                                // check link flowElements from outFlow to process\n                                                JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                                ));\n\n                                                // check link laneSets from laneSet to process\n                                                JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                                ));\n\n                                                // check link lanes from lane to laneSet\n                                                JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                                ));\n\n                                                // check link sourceRef from ceFlow to intermediateCatchEvent\n                                                JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n                                                ));\n\n                                                // check link sourceRef from outFlow to eventBasedGateway\n                                                JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                                                ));\n\n                                                // check link src from _edge_flowElements to process\n                                                JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                                                ));\n\n                                                // check link targetRef from inFlow to eventBasedGateway\n                                                JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                                                ));\n\n                                                // check link targetRef from outFlow to intermediateCatchEvent\n                                                JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                                                ));\n\n                                                // check link targetRef from ceFlow to intermediateCatchEvent\n                                                JavaSDM.ensure (!(intermediateCatchEvent.equals (ceFlow.getTargetRef ()\n                                                )));\n\n                                                // check link targetRef from inFlow to intermediateCatchEvent\n                                                JavaSDM.ensure (!(intermediateCatchEvent.equals (inFlow.getTargetRef ()\n                                                )));\n\n                                                // check link trg from _edge_flowElements to ceFlow\n                                                JavaSDM.ensure (ceFlow.equals (_edge_flowElements.getTrg ()\n                                                ));\n\n                                                // check link flowNodeRefs from lane to intermediateCatchEvent\n                                                JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n                                                // create object match\n                                                match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                                // assign attribute match\n                                                match.setRuleName (__eClass.getName());\n                                                // statement node \'bookkeeping with generic isAppropriate method\'\n                                                fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,lane,laneSet,ceFlow);\n                                                if (fujaba__Success)\n                                                {\n                                                   // statement node \'Ensure that the correct types of elements are matched\'\n                                                   fujaba__Success = this.checkTypes_FWD(match);\n                                                   if (fujaba__Success)\n                                                   {\n                                                      // story node \'Add match to rule result\'\n                                                      try \n                                                      {\n                                                         fujaba__Success = false; \n\n                                                         // check object __performOperation is really bound\n                                                         JavaSDM.ensure ( __performOperation != null );\n                                                         // check object __result is really bound\n                                                         JavaSDM.ensure ( __result != null );\n                                                         // check object match is really bound\n                                                         JavaSDM.ensure ( match != null );\n\n                                                         // create link\n                                                         org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                                         // create link\n                                                         __result.getContents().add(match);\n\n                                                         fujaba__Success = true;\n                                                      }\n                                                      catch ( JavaSDMException fujaba__InternalException )\n                                                      {\n                                                         fujaba__Success = false;\n                                                      }\n\n\n                                                   }\n                                                   else\n                                                   {\n\n                                                   }\n\n                                                }\n                                                else\n                                                {\n\n                                                }\n                                                fujaba__Success = true;\n                                             }\n                                             catch ( JavaSDMException fujaba__InternalException )\n                                             {\n                                                fujaba__Success = false;\n                                             }\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_67(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_ceFlow_flowElements_541754 = null;\n      FlowElementsContainer __DEC_intermediateCatchEvent_flowElements_310028 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_418274 = null;\n      Iterator fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_550656 = null;\n      SequenceFlow __DEC_intermediateCatchEvent_targetRef_550656 = null;\n      Match match = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      EventBasedGateway eventBasedGateway = null;\n      Iterator fujaba__IterProcessToOutFlow = null;\n      SequenceFlow outFlow = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterProcessToCeFlow = null;\n      SequenceFlow ceFlow = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      bpmn2.Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object intermediateCatchEvent\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n\n         // check link flowElements from intermediateCatchEvent to process\n         JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to ceFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToCeFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToCeFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToCeFlow.next ();\n\n               // ensure correct type and really bound of object ceFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               ceFlow = (SequenceFlow) _TmpObject;\n               // check link sourceRef from ceFlow to intermediateCatchEvent\n               JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n               ));\n\n               // iterate to-many link flowElements from process to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n                     // ensure correct type and really bound of object inFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     inFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects inFlow and ceFlow \n                     JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                     // iterate to-many link flowElements from process to outFlow\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToOutFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n                     while ( fujaba__IterProcessToOutFlow.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterProcessToOutFlow.next ();\n\n                           // ensure correct type and really bound of object outFlow\n                           JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                           outFlow = (SequenceFlow) _TmpObject;\n                           // check isomorphic binding between objects outFlow and ceFlow \n                           JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                           // check isomorphic binding between objects outFlow and inFlow \n                           JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                           // bind object\n                           _TmpObject = outFlow.getSourceRef ();\n\n                           // ensure correct type and really bound of object eventBasedGateway\n                           JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n                           eventBasedGateway = (EventBasedGateway) _TmpObject;\n\n                           // check link flowElements from eventBasedGateway to process\n                           JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                           ));\n\n                           // check link targetRef from inFlow to eventBasedGateway\n                           JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                           ));\n\n                           // check link targetRef from outFlow to intermediateCatchEvent\n                           JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                           ));\n\n                           // iterate to-many link laneSets from process to laneSet\n                           fujaba__Success = false;\n\n                           fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                           while ( fujaba__IterProcessToLaneSet.hasNext () )\n                           {\n                              try\n                              {\n                                 laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                                 // check object laneSet is really bound\n                                 JavaSDM.ensure ( laneSet != null );\n                                 // iterate to-many link lanes from laneSet to lane\n                                 fujaba__Success = false;\n\n                                 fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                                 while ( fujaba__IterLaneSetToLane.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                       // check object lane is really bound\n                                       JavaSDM.ensure ( lane != null );\n                                       // check link flowNodeRefs from lane to intermediateCatchEvent\n                                       JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n                                       // story node \'test core match and DECs\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_ceFlow_flowElements_541754 = ceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) ceFlow.eContainer() : null;\n\n                                             // check object __DEC_ceFlow_flowElements_541754 is really bound\n                                             JavaSDM.ensure ( __DEC_ceFlow_flowElements_541754 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_ceFlow_flowElements_541754.getFlowElements().contains(ceFlow));\n\n                                             // check isomorphic binding between objects __DEC_ceFlow_flowElements_541754 and process \n                                             JavaSDM.ensure ( !__DEC_ceFlow_flowElements_541754.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_intermediateCatchEvent_flowElements_310028 = intermediateCatchEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) intermediateCatchEvent.eContainer() : null;\n\n                                             // check object __DEC_intermediateCatchEvent_flowElements_310028 is really bound\n                                             JavaSDM.ensure ( __DEC_intermediateCatchEvent_flowElements_310028 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_intermediateCatchEvent_flowElements_310028.getFlowElements().contains(intermediateCatchEvent));\n\n                                             // check isomorphic binding between objects __DEC_intermediateCatchEvent_flowElements_310028 and process \n                                             JavaSDM.ensure ( !__DEC_intermediateCatchEvent_flowElements_310028.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_outFlow_flowElements_418274 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                             // check object __DEC_outFlow_flowElements_418274 is really bound\n                                             JavaSDM.ensure ( __DEC_outFlow_flowElements_418274 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_outFlow_flowElements_418274.getFlowElements().contains(outFlow));\n\n                                             // check isomorphic binding between objects __DEC_outFlow_flowElements_418274 and process \n                                             JavaSDM.ensure ( !__DEC_outFlow_flowElements_418274.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // negative check for link default from ceFlow\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(ceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                          // negative check for link default from outFlow\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // iterate to-many link targetRef from intermediateCatchEvent to __DEC_intermediateCatchEvent_targetRef_550656\n                                             fujaba__Success = false;\n\n                                             fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_550656 = new ArrayList(intermediateCatchEvent.getIncoming()).iterator ();\n\n                                             while ( !(fujaba__Success) && fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_550656.hasNext () )\n                                             {\n                                                try\n                                                {\n                                                   __DEC_intermediateCatchEvent_targetRef_550656 = (SequenceFlow) fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_550656.next ();\n\n                                                   // check object __DEC_intermediateCatchEvent_targetRef_550656 is really bound\n                                                   JavaSDM.ensure ( __DEC_intermediateCatchEvent_targetRef_550656 != null );\n                                                   // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_550656 and ceFlow \n                                                   JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_550656.equals (ceFlow) );\n\n                                                   // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_550656 and inFlow \n                                                   JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_550656.equals (inFlow) );\n\n                                                   // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_550656 and outFlow \n                                                   JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_550656.equals (outFlow) );\n\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n                                             }\n                                             JavaSDM.ensure (fujaba__Success);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check object _edge_flowElements is really bound\n                                          JavaSDM.ensure ( _edge_flowElements != null );\n                                          // check object ceFlow is really bound\n                                          JavaSDM.ensure ( ceFlow != null );\n                                          // check object eventBasedGateway is really bound\n                                          JavaSDM.ensure ( eventBasedGateway != null );\n                                          // check object inFlow is really bound\n                                          JavaSDM.ensure ( inFlow != null );\n                                          // check object intermediateCatchEvent is really bound\n                                          JavaSDM.ensure ( intermediateCatchEvent != null );\n                                          // check object lane is really bound\n                                          JavaSDM.ensure ( lane != null );\n                                          // check object laneSet is really bound\n                                          JavaSDM.ensure ( laneSet != null );\n                                          // check object outFlow is really bound\n                                          JavaSDM.ensure ( outFlow != null );\n                                          // check object process is really bound\n                                          JavaSDM.ensure ( process != null );\n                                          // check isomorphic binding between objects inFlow and ceFlow \n                                          JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                                          // check isomorphic binding between objects outFlow and ceFlow \n                                          JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                                          // check isomorphic binding between objects outFlow and inFlow \n                                          JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                          // check link flowElements from ceFlow to process\n                                          JavaSDM.ensure (process.equals (ceFlow.eContainer()\n                                          ));\n\n                                          // check link flowElements from eventBasedGateway to process\n                                          JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                                          ));\n\n                                          // check link flowElements from inFlow to process\n                                          JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                          ));\n\n                                          // check link flowElements from intermediateCatchEvent to process\n                                          JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                                          ));\n\n                                          // check link flowElements from outFlow to process\n                                          JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                          ));\n\n                                          // check link laneSets from laneSet to process\n                                          JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                          ));\n\n                                          // check link lanes from lane to laneSet\n                                          JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                          ));\n\n                                          // check link sourceRef from ceFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n                                          ));\n\n                                          // check link sourceRef from outFlow to eventBasedGateway\n                                          JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                                          ));\n\n                                          // check link src from _edge_flowElements to process\n                                          JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                                          ));\n\n                                          // check link targetRef from inFlow to eventBasedGateway\n                                          JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                                          ));\n\n                                          // check link targetRef from outFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                                          ));\n\n                                          // check link targetRef from ceFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (!(intermediateCatchEvent.equals (ceFlow.getTargetRef ()\n                                          )));\n\n                                          // check link targetRef from inFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (!(intermediateCatchEvent.equals (inFlow.getTargetRef ()\n                                          )));\n\n                                          // check link trg from _edge_flowElements to intermediateCatchEvent\n                                          JavaSDM.ensure (intermediateCatchEvent.equals (_edge_flowElements.getTrg ()\n                                          ));\n\n                                          // check link flowNodeRefs from lane to intermediateCatchEvent\n                                          JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n                                          // create object match\n                                          match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                          // assign attribute match\n                                          match.setRuleName (__eClass.getName());\n                                          // statement node \'bookkeeping with generic isAppropriate method\'\n                                          fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,lane,laneSet,ceFlow);\n                                          if (fujaba__Success)\n                                          {\n                                             // statement node \'Ensure that the correct types of elements are matched\'\n                                             fujaba__Success = this.checkTypes_FWD(match);\n                                             if (fujaba__Success)\n                                             {\n                                                // story node \'Add match to rule result\'\n                                                try \n                                                {\n                                                   fujaba__Success = false; \n\n                                                   // check object __performOperation is really bound\n                                                   JavaSDM.ensure ( __performOperation != null );\n                                                   // check object __result is really bound\n                                                   JavaSDM.ensure ( __result != null );\n                                                   // check object match is really bound\n                                                   JavaSDM.ensure ( match != null );\n\n                                                   // create link\n                                                   org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                                   // create link\n                                                   __result.getContents().add(match);\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n\n\n                                             }\n                                             else\n                                             {\n\n                                             }\n\n                                          }\n                                          else\n                                          {\n\n                                          }\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_68(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_ceFlow_flowElements_332993 = null;\n      FlowElementsContainer __DEC_intermediateCatchEvent_flowElements_457385 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_803028 = null;\n      Iterator fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_661586 = null;\n      SequenceFlow __DEC_intermediateCatchEvent_targetRef_661586 = null;\n      Match match = null;\n      Iterator fujaba__IterIntermediateCatchEventToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterProcessToEventBasedGateway = null;\n      EventBasedGateway eventBasedGateway = null;\n      Iterator fujaba__IterProcessToCeFlow = null;\n      SequenceFlow ceFlow = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      SequenceFlow outFlow = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      bpmn2.Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // iterate to-many link laneSets from process to laneSet\n         fujaba__Success = false;\n\n         fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n         while ( fujaba__IterProcessToLaneSet.hasNext () )\n         {\n            try\n            {\n               laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n               // check object laneSet is really bound\n               JavaSDM.ensure ( laneSet != null );\n               // bind object\n               _TmpObject = _edge_flowElements.getTrg ();\n\n               // ensure correct type and really bound of object outFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               outFlow = (SequenceFlow) _TmpObject;\n\n               // check link flowElements from outFlow to process\n               JavaSDM.ensure (process.equals (outFlow.eContainer()\n               ));\n\n               // bind object\n               _TmpObject = outFlow.getTargetRef ();\n\n               // ensure correct type and really bound of object intermediateCatchEvent\n               JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n               intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n\n               // check link flowElements from intermediateCatchEvent to process\n               JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n               ));\n\n               // iterate to-many link flowElements from process to ceFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToCeFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToCeFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToCeFlow.next ();\n\n                     // ensure correct type and really bound of object ceFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     ceFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects outFlow and ceFlow \n                     JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                     // check link sourceRef from ceFlow to intermediateCatchEvent\n                     JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n                     ));\n\n                     // iterate to-many link flowElements from process to eventBasedGateway\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToEventBasedGateway = new ArrayList(process.getFlowElements()).iterator ();\n\n                     while ( fujaba__IterProcessToEventBasedGateway.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterProcessToEventBasedGateway.next ();\n\n                           // ensure correct type and really bound of object eventBasedGateway\n                           JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n                           eventBasedGateway = (EventBasedGateway) _TmpObject;\n                           // check link sourceRef from outFlow to eventBasedGateway\n                           JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                           ));\n\n                           // iterate to-many link flowElements from process to inFlow\n                           fujaba__Success = false;\n\n                           fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n                           while ( fujaba__IterProcessToInFlow.hasNext () )\n                           {\n                              try\n                              {\n                                 _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n                                 // ensure correct type and really bound of object inFlow\n                                 JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                                 inFlow = (SequenceFlow) _TmpObject;\n                                 // check isomorphic binding between objects inFlow and ceFlow \n                                 JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                                 // check isomorphic binding between objects outFlow and inFlow \n                                 JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                 // check link targetRef from inFlow to eventBasedGateway\n                                 JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                                 ));\n\n                                 // iterate to-many link flowNodeRefs from intermediateCatchEvent to lane\n                                 fujaba__Success = false;\n\n                                 fujaba__IterIntermediateCatchEventToLane = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(intermediateCatchEvent,Lane.class,\"flowNodeRefs\")).iterator ();\n\n                                 while ( fujaba__IterIntermediateCatchEventToLane.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       lane = (Lane) fujaba__IterIntermediateCatchEventToLane.next ();\n\n                                       // check object lane is really bound\n                                       JavaSDM.ensure ( lane != null );\n                                       // check link lanes from lane to laneSet\n                                       JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                       ));\n\n                                       // story node \'test core match and DECs\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_ceFlow_flowElements_332993 = ceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) ceFlow.eContainer() : null;\n\n                                             // check object __DEC_ceFlow_flowElements_332993 is really bound\n                                             JavaSDM.ensure ( __DEC_ceFlow_flowElements_332993 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_ceFlow_flowElements_332993.getFlowElements().contains(ceFlow));\n\n                                             // check isomorphic binding between objects __DEC_ceFlow_flowElements_332993 and process \n                                             JavaSDM.ensure ( !__DEC_ceFlow_flowElements_332993.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_intermediateCatchEvent_flowElements_457385 = intermediateCatchEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) intermediateCatchEvent.eContainer() : null;\n\n                                             // check object __DEC_intermediateCatchEvent_flowElements_457385 is really bound\n                                             JavaSDM.ensure ( __DEC_intermediateCatchEvent_flowElements_457385 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_intermediateCatchEvent_flowElements_457385.getFlowElements().contains(intermediateCatchEvent));\n\n                                             // check isomorphic binding between objects __DEC_intermediateCatchEvent_flowElements_457385 and process \n                                             JavaSDM.ensure ( !__DEC_intermediateCatchEvent_flowElements_457385.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_outFlow_flowElements_803028 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                             // check object __DEC_outFlow_flowElements_803028 is really bound\n                                             JavaSDM.ensure ( __DEC_outFlow_flowElements_803028 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_outFlow_flowElements_803028.getFlowElements().contains(outFlow));\n\n                                             // check isomorphic binding between objects __DEC_outFlow_flowElements_803028 and process \n                                             JavaSDM.ensure ( !__DEC_outFlow_flowElements_803028.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // negative check for link default from ceFlow\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(ceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                          // negative check for link default from outFlow\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // iterate to-many link targetRef from intermediateCatchEvent to __DEC_intermediateCatchEvent_targetRef_661586\n                                             fujaba__Success = false;\n\n                                             fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_661586 = new ArrayList(intermediateCatchEvent.getIncoming()).iterator ();\n\n                                             while ( !(fujaba__Success) && fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_661586.hasNext () )\n                                             {\n                                                try\n                                                {\n                                                   __DEC_intermediateCatchEvent_targetRef_661586 = (SequenceFlow) fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_661586.next ();\n\n                                                   // check object __DEC_intermediateCatchEvent_targetRef_661586 is really bound\n                                                   JavaSDM.ensure ( __DEC_intermediateCatchEvent_targetRef_661586 != null );\n                                                   // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_661586 and ceFlow \n                                                   JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_661586.equals (ceFlow) );\n\n                                                   // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_661586 and inFlow \n                                                   JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_661586.equals (inFlow) );\n\n                                                   // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_661586 and outFlow \n                                                   JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_661586.equals (outFlow) );\n\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n                                             }\n                                             JavaSDM.ensure (fujaba__Success);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check object _edge_flowElements is really bound\n                                          JavaSDM.ensure ( _edge_flowElements != null );\n                                          // check object ceFlow is really bound\n                                          JavaSDM.ensure ( ceFlow != null );\n                                          // check object eventBasedGateway is really bound\n                                          JavaSDM.ensure ( eventBasedGateway != null );\n                                          // check object inFlow is really bound\n                                          JavaSDM.ensure ( inFlow != null );\n                                          // check object intermediateCatchEvent is really bound\n                                          JavaSDM.ensure ( intermediateCatchEvent != null );\n                                          // check object lane is really bound\n                                          JavaSDM.ensure ( lane != null );\n                                          // check object laneSet is really bound\n                                          JavaSDM.ensure ( laneSet != null );\n                                          // check object outFlow is really bound\n                                          JavaSDM.ensure ( outFlow != null );\n                                          // check object process is really bound\n                                          JavaSDM.ensure ( process != null );\n                                          // check isomorphic binding between objects inFlow and ceFlow \n                                          JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                                          // check isomorphic binding between objects outFlow and ceFlow \n                                          JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                                          // check isomorphic binding between objects outFlow and inFlow \n                                          JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                          // check link flowElements from ceFlow to process\n                                          JavaSDM.ensure (process.equals (ceFlow.eContainer()\n                                          ));\n\n                                          // check link flowElements from eventBasedGateway to process\n                                          JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                                          ));\n\n                                          // check link flowElements from inFlow to process\n                                          JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                          ));\n\n                                          // check link flowElements from intermediateCatchEvent to process\n                                          JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                                          ));\n\n                                          // check link flowElements from outFlow to process\n                                          JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                          ));\n\n                                          // check link laneSets from laneSet to process\n                                          JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                          ));\n\n                                          // check link lanes from lane to laneSet\n                                          JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                          ));\n\n                                          // check link sourceRef from ceFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n                                          ));\n\n                                          // check link sourceRef from outFlow to eventBasedGateway\n                                          JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                                          ));\n\n                                          // check link src from _edge_flowElements to process\n                                          JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                                          ));\n\n                                          // check link targetRef from inFlow to eventBasedGateway\n                                          JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                                          ));\n\n                                          // check link targetRef from outFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                                          ));\n\n                                          // check link targetRef from ceFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (!(intermediateCatchEvent.equals (ceFlow.getTargetRef ()\n                                          )));\n\n                                          // check link targetRef from inFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (!(intermediateCatchEvent.equals (inFlow.getTargetRef ()\n                                          )));\n\n                                          // check link trg from _edge_flowElements to outFlow\n                                          JavaSDM.ensure (outFlow.equals (_edge_flowElements.getTrg ()\n                                          ));\n\n                                          // check link flowNodeRefs from lane to intermediateCatchEvent\n                                          JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n                                          // create object match\n                                          match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                          // assign attribute match\n                                          match.setRuleName (__eClass.getName());\n                                          // statement node \'bookkeeping with generic isAppropriate method\'\n                                          fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,lane,laneSet,ceFlow);\n                                          if (fujaba__Success)\n                                          {\n                                             // statement node \'Ensure that the correct types of elements are matched\'\n                                             fujaba__Success = this.checkTypes_FWD(match);\n                                             if (fujaba__Success)\n                                             {\n                                                // story node \'Add match to rule result\'\n                                                try \n                                                {\n                                                   fujaba__Success = false; \n\n                                                   // check object __performOperation is really bound\n                                                   JavaSDM.ensure ( __performOperation != null );\n                                                   // check object __result is really bound\n                                                   JavaSDM.ensure ( __result != null );\n                                                   // check object match is really bound\n                                                   JavaSDM.ensure ( match != null );\n\n                                                   // create link\n                                                   org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                                   // create link\n                                                   __result.getContents().add(match);\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n\n\n                                             }\n                                             else\n                                             {\n\n                                             }\n\n                                          }\n                                          else\n                                          {\n\n                                          }\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_69(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_ceFlow_flowElements_126011 = null;\n      FlowElementsContainer __DEC_intermediateCatchEvent_flowElements_352767 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_315814 = null;\n      Iterator fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_758723 = null;\n      SequenceFlow __DEC_intermediateCatchEvent_targetRef_758723 = null;\n      Match match = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterProcessToCeFlow = null;\n      SequenceFlow ceFlow = null;\n      EventBasedGateway eventBasedGateway = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      bpmn2.Process process = null;\n      SequenceFlow outFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sourceRef is really bound\n         JavaSDM.ensure ( _edge_sourceRef != null );\n         // bind object\n         _TmpObject = _edge_sourceRef.getSrc ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = outFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) outFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(outFlow));\n\n         // bind object\n         _TmpObject = outFlow.getTargetRef ();\n\n         // ensure correct type and really bound of object intermediateCatchEvent\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n\n         // check link flowElements from intermediateCatchEvent to process\n         JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n         ));\n\n         // bind object\n         _TmpObject = _edge_sourceRef.getTrg ();\n\n         // ensure correct type and really bound of object eventBasedGateway\n         JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n         eventBasedGateway = (EventBasedGateway) _TmpObject;\n\n         // check link flowElements from eventBasedGateway to process\n         JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n         ));\n\n         // check link sourceRef from outFlow to eventBasedGateway\n         JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link flowElements from process to ceFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToCeFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToCeFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToCeFlow.next ();\n\n               // ensure correct type and really bound of object ceFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               ceFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and ceFlow \n               JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n               // check link sourceRef from ceFlow to intermediateCatchEvent\n               JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n               ));\n\n               // iterate to-many link flowElements from process to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n                     // ensure correct type and really bound of object inFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     inFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects inFlow and ceFlow \n                     JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link targetRef from inFlow to eventBasedGateway\n                     JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                     ));\n\n                     // iterate to-many link laneSets from process to laneSet\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                     while ( fujaba__IterProcessToLaneSet.hasNext () )\n                     {\n                        try\n                        {\n                           laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                           // check object laneSet is really bound\n                           JavaSDM.ensure ( laneSet != null );\n                           // iterate to-many link lanes from laneSet to lane\n                           fujaba__Success = false;\n\n                           fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                           while ( fujaba__IterLaneSetToLane.hasNext () )\n                           {\n                              try\n                              {\n                                 lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                 // check object lane is really bound\n                                 JavaSDM.ensure ( lane != null );\n                                 // check link flowNodeRefs from lane to intermediateCatchEvent\n                                 JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_ceFlow_flowElements_126011 = ceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) ceFlow.eContainer() : null;\n\n                                       // check object __DEC_ceFlow_flowElements_126011 is really bound\n                                       JavaSDM.ensure ( __DEC_ceFlow_flowElements_126011 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_ceFlow_flowElements_126011.getFlowElements().contains(ceFlow));\n\n                                       // check isomorphic binding between objects __DEC_ceFlow_flowElements_126011 and process \n                                       JavaSDM.ensure ( !__DEC_ceFlow_flowElements_126011.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_intermediateCatchEvent_flowElements_352767 = intermediateCatchEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) intermediateCatchEvent.eContainer() : null;\n\n                                       // check object __DEC_intermediateCatchEvent_flowElements_352767 is really bound\n                                       JavaSDM.ensure ( __DEC_intermediateCatchEvent_flowElements_352767 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_intermediateCatchEvent_flowElements_352767.getFlowElements().contains(intermediateCatchEvent));\n\n                                       // check isomorphic binding between objects __DEC_intermediateCatchEvent_flowElements_352767 and process \n                                       JavaSDM.ensure ( !__DEC_intermediateCatchEvent_flowElements_352767.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_outFlow_flowElements_315814 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                       // check object __DEC_outFlow_flowElements_315814 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_flowElements_315814 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_outFlow_flowElements_315814.getFlowElements().contains(outFlow));\n\n                                       // check isomorphic binding between objects __DEC_outFlow_flowElements_315814 and process \n                                       JavaSDM.ensure ( !__DEC_outFlow_flowElements_315814.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link default from ceFlow\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(ceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                    // negative check for link default from outFlow\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link targetRef from intermediateCatchEvent to __DEC_intermediateCatchEvent_targetRef_758723\n                                       fujaba__Success = false;\n\n                                       fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_758723 = new ArrayList(intermediateCatchEvent.getIncoming()).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_758723.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_intermediateCatchEvent_targetRef_758723 = (SequenceFlow) fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_758723.next ();\n\n                                             // check object __DEC_intermediateCatchEvent_targetRef_758723 is really bound\n                                             JavaSDM.ensure ( __DEC_intermediateCatchEvent_targetRef_758723 != null );\n                                             // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_758723 and ceFlow \n                                             JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_758723.equals (ceFlow) );\n\n                                             // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_758723 and inFlow \n                                             JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_758723.equals (inFlow) );\n\n                                             // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_758723 and outFlow \n                                             JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_758723.equals (outFlow) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_sourceRef is really bound\n                                    JavaSDM.ensure ( _edge_sourceRef != null );\n                                    // check object ceFlow is really bound\n                                    JavaSDM.ensure ( ceFlow != null );\n                                    // check object eventBasedGateway is really bound\n                                    JavaSDM.ensure ( eventBasedGateway != null );\n                                    // check object inFlow is really bound\n                                    JavaSDM.ensure ( inFlow != null );\n                                    // check object intermediateCatchEvent is really bound\n                                    JavaSDM.ensure ( intermediateCatchEvent != null );\n                                    // check object lane is really bound\n                                    JavaSDM.ensure ( lane != null );\n                                    // check object laneSet is really bound\n                                    JavaSDM.ensure ( laneSet != null );\n                                    // check object outFlow is really bound\n                                    JavaSDM.ensure ( outFlow != null );\n                                    // check object process is really bound\n                                    JavaSDM.ensure ( process != null );\n                                    // check isomorphic binding between objects inFlow and ceFlow \n                                    JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                                    // check isomorphic binding between objects outFlow and ceFlow \n                                    JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                                    // check isomorphic binding between objects outFlow and inFlow \n                                    JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                    // check link flowElements from ceFlow to process\n                                    JavaSDM.ensure (process.equals (ceFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from eventBasedGateway to process\n                                    JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                                    ));\n\n                                    // check link flowElements from inFlow to process\n                                    JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from intermediateCatchEvent to process\n                                    JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                                    ));\n\n                                    // check link flowElements from outFlow to process\n                                    JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                    ));\n\n                                    // check link laneSets from laneSet to process\n                                    JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                    ));\n\n                                    // check link lanes from lane to laneSet\n                                    JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                    ));\n\n                                    // check link sourceRef from ceFlow to intermediateCatchEvent\n                                    JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n                                    ));\n\n                                    // check link sourceRef from outFlow to eventBasedGateway\n                                    JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                                    ));\n\n                                    // check link src from _edge_sourceRef to outFlow\n                                    JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                                    ));\n\n                                    // check link targetRef from inFlow to eventBasedGateway\n                                    JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                                    ));\n\n                                    // check link targetRef from outFlow to intermediateCatchEvent\n                                    JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                                    ));\n\n                                    // check link targetRef from ceFlow to intermediateCatchEvent\n                                    JavaSDM.ensure (!(intermediateCatchEvent.equals (ceFlow.getTargetRef ()\n                                    )));\n\n                                    // check link targetRef from inFlow to intermediateCatchEvent\n                                    JavaSDM.ensure (!(intermediateCatchEvent.equals (inFlow.getTargetRef ()\n                                    )));\n\n                                    // check link trg from _edge_sourceRef to eventBasedGateway\n                                    JavaSDM.ensure (eventBasedGateway.equals (_edge_sourceRef.getTrg ()\n                                    ));\n\n                                    // check link flowNodeRefs from lane to intermediateCatchEvent\n                                    JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,lane,laneSet,ceFlow);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_FWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_70(
			EMoflonEdge _edge_sourceRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_ceFlow_flowElements_749154 = null;\n      FlowElementsContainer __DEC_intermediateCatchEvent_flowElements_272409 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_492553 = null;\n      Iterator fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_266235 = null;\n      SequenceFlow __DEC_intermediateCatchEvent_targetRef_266235 = null;\n      Match match = null;\n      Iterator fujaba__IterEventBasedGatewayTo_edge_sourceRef = null;\n      EMoflonEdge _edge_sourceRef = null;\n      Iterator fujaba__IterEventBasedGatewayToInFlow = null;\n      SequenceFlow inFlow = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      Iterator fujaba__IterProcessToCeFlow = null;\n      SequenceFlow ceFlow = null;\n      SequenceFlow outFlow = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      bpmn2.Process process = null;\n      EventBasedGateway eventBasedGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_outgoing is really bound\n         JavaSDM.ensure ( _edge_outgoing != null );\n         // bind object\n         _TmpObject = _edge_outgoing.getSrc ();\n\n         // ensure correct type and really bound of object eventBasedGateway\n         JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n         eventBasedGateway = (EventBasedGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = eventBasedGateway.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) eventBasedGateway.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(eventBasedGateway));\n\n         // iterate to-many link laneSets from process to laneSet\n         fujaba__Success = false;\n\n         fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n         while ( fujaba__IterProcessToLaneSet.hasNext () )\n         {\n            try\n            {\n               laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n               // check object laneSet is really bound\n               JavaSDM.ensure ( laneSet != null );\n               // iterate to-many link lanes from laneSet to lane\n               fujaba__Success = false;\n\n               fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n               while ( fujaba__IterLaneSetToLane.hasNext () )\n               {\n                  try\n                  {\n                     lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                     // check object lane is really bound\n                     JavaSDM.ensure ( lane != null );\n                     // bind object\n                     _TmpObject = _edge_outgoing.getTrg ();\n\n                     // ensure correct type and really bound of object outFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     outFlow = (SequenceFlow) _TmpObject;\n\n                     // check link flowElements from outFlow to process\n                     JavaSDM.ensure (process.equals (outFlow.eContainer()\n                     ));\n\n                     // check link sourceRef from outFlow to eventBasedGateway\n                     JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                     ));\n\n                     // iterate to-many link flowElements from process to ceFlow\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToCeFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n                     while ( fujaba__IterProcessToCeFlow.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterProcessToCeFlow.next ();\n\n                           // ensure correct type and really bound of object ceFlow\n                           JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                           ceFlow = (SequenceFlow) _TmpObject;\n                           // check isomorphic binding between objects outFlow and ceFlow \n                           JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                           // bind object\n                           _TmpObject = ceFlow.getSourceRef ();\n\n                           // ensure correct type and really bound of object intermediateCatchEvent\n                           JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n                           intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n\n                           // check link flowElements from intermediateCatchEvent to process\n                           JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                           ));\n\n                           // check link targetRef from outFlow to intermediateCatchEvent\n                           JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                           ));\n\n                           // check link flowNodeRefs from lane to intermediateCatchEvent\n                           JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n                           // iterate to-many link targetRef from eventBasedGateway to inFlow\n                           fujaba__Success = false;\n\n                           fujaba__IterEventBasedGatewayToInFlow = new ArrayList(eventBasedGateway.getIncoming()).iterator ();\n\n                           while ( fujaba__IterEventBasedGatewayToInFlow.hasNext () )\n                           {\n                              try\n                              {\n                                 inFlow = (SequenceFlow) fujaba__IterEventBasedGatewayToInFlow.next ();\n\n                                 // check object inFlow is really bound\n                                 JavaSDM.ensure ( inFlow != null );\n                                 // check isomorphic binding between objects inFlow and ceFlow \n                                 JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                                 // check isomorphic binding between objects outFlow and inFlow \n                                 JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                 // check link flowElements from inFlow to process\n                                 JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                 ));\n\n                                 // iterate to-many link trg from eventBasedGateway to _edge_sourceRef\n                                 fujaba__Success = false;\n\n                                 fujaba__IterEventBasedGatewayTo_edge_sourceRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(eventBasedGateway,EMoflonEdge.class,\"trg\")).iterator ();\n\n                                 while ( fujaba__IterEventBasedGatewayTo_edge_sourceRef.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       _edge_sourceRef = (EMoflonEdge) fujaba__IterEventBasedGatewayTo_edge_sourceRef.next ();\n\n                                       // check object _edge_sourceRef is really bound\n                                       JavaSDM.ensure ( _edge_sourceRef != null );\n                                       // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                                       JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                                       // check link src from _edge_sourceRef to outFlow\n                                       JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                                       ));\n\n                                       // story node \'test core match and DECs\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_ceFlow_flowElements_749154 = ceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) ceFlow.eContainer() : null;\n\n                                             // check object __DEC_ceFlow_flowElements_749154 is really bound\n                                             JavaSDM.ensure ( __DEC_ceFlow_flowElements_749154 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_ceFlow_flowElements_749154.getFlowElements().contains(ceFlow));\n\n                                             // check isomorphic binding between objects __DEC_ceFlow_flowElements_749154 and process \n                                             JavaSDM.ensure ( !__DEC_ceFlow_flowElements_749154.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_intermediateCatchEvent_flowElements_272409 = intermediateCatchEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) intermediateCatchEvent.eContainer() : null;\n\n                                             // check object __DEC_intermediateCatchEvent_flowElements_272409 is really bound\n                                             JavaSDM.ensure ( __DEC_intermediateCatchEvent_flowElements_272409 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_intermediateCatchEvent_flowElements_272409.getFlowElements().contains(intermediateCatchEvent));\n\n                                             // check isomorphic binding between objects __DEC_intermediateCatchEvent_flowElements_272409 and process \n                                             JavaSDM.ensure ( !__DEC_intermediateCatchEvent_flowElements_272409.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_outFlow_flowElements_492553 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                             // check object __DEC_outFlow_flowElements_492553 is really bound\n                                             JavaSDM.ensure ( __DEC_outFlow_flowElements_492553 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_outFlow_flowElements_492553.getFlowElements().contains(outFlow));\n\n                                             // check isomorphic binding between objects __DEC_outFlow_flowElements_492553 and process \n                                             JavaSDM.ensure ( !__DEC_outFlow_flowElements_492553.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // negative check for link default from ceFlow\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(ceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                          // negative check for link default from outFlow\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // iterate to-many link targetRef from intermediateCatchEvent to __DEC_intermediateCatchEvent_targetRef_266235\n                                             fujaba__Success = false;\n\n                                             fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_266235 = new ArrayList(intermediateCatchEvent.getIncoming()).iterator ();\n\n                                             while ( !(fujaba__Success) && fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_266235.hasNext () )\n                                             {\n                                                try\n                                                {\n                                                   __DEC_intermediateCatchEvent_targetRef_266235 = (SequenceFlow) fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_266235.next ();\n\n                                                   // check object __DEC_intermediateCatchEvent_targetRef_266235 is really bound\n                                                   JavaSDM.ensure ( __DEC_intermediateCatchEvent_targetRef_266235 != null );\n                                                   // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_266235 and ceFlow \n                                                   JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_266235.equals (ceFlow) );\n\n                                                   // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_266235 and inFlow \n                                                   JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_266235.equals (inFlow) );\n\n                                                   // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_266235 and outFlow \n                                                   JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_266235.equals (outFlow) );\n\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n                                             }\n                                             JavaSDM.ensure (fujaba__Success);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check object _edge_outgoing is really bound\n                                          JavaSDM.ensure ( _edge_outgoing != null );\n                                          // check object _edge_sourceRef is really bound\n                                          JavaSDM.ensure ( _edge_sourceRef != null );\n                                          // check object ceFlow is really bound\n                                          JavaSDM.ensure ( ceFlow != null );\n                                          // check object eventBasedGateway is really bound\n                                          JavaSDM.ensure ( eventBasedGateway != null );\n                                          // check object inFlow is really bound\n                                          JavaSDM.ensure ( inFlow != null );\n                                          // check object intermediateCatchEvent is really bound\n                                          JavaSDM.ensure ( intermediateCatchEvent != null );\n                                          // check object lane is really bound\n                                          JavaSDM.ensure ( lane != null );\n                                          // check object laneSet is really bound\n                                          JavaSDM.ensure ( laneSet != null );\n                                          // check object outFlow is really bound\n                                          JavaSDM.ensure ( outFlow != null );\n                                          // check object process is really bound\n                                          JavaSDM.ensure ( process != null );\n                                          // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                                          JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                                          // check isomorphic binding between objects inFlow and ceFlow \n                                          JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                                          // check isomorphic binding between objects outFlow and ceFlow \n                                          JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                                          // check isomorphic binding between objects outFlow and inFlow \n                                          JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                          // check link flowElements from ceFlow to process\n                                          JavaSDM.ensure (process.equals (ceFlow.eContainer()\n                                          ));\n\n                                          // check link flowElements from eventBasedGateway to process\n                                          JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                                          ));\n\n                                          // check link flowElements from inFlow to process\n                                          JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                          ));\n\n                                          // check link flowElements from intermediateCatchEvent to process\n                                          JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                                          ));\n\n                                          // check link flowElements from outFlow to process\n                                          JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                          ));\n\n                                          // check link laneSets from laneSet to process\n                                          JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                          ));\n\n                                          // check link lanes from lane to laneSet\n                                          JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                          ));\n\n                                          // check link sourceRef from ceFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n                                          ));\n\n                                          // check link sourceRef from outFlow to eventBasedGateway\n                                          JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                                          ));\n\n                                          // check link src from _edge_outgoing to eventBasedGateway\n                                          JavaSDM.ensure (eventBasedGateway.equals (_edge_outgoing.getSrc ()\n                                          ));\n\n                                          // check link src from _edge_sourceRef to outFlow\n                                          JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                                          ));\n\n                                          // check link targetRef from inFlow to eventBasedGateway\n                                          JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                                          ));\n\n                                          // check link targetRef from outFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                                          ));\n\n                                          // check link targetRef from ceFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (!(intermediateCatchEvent.equals (ceFlow.getTargetRef ()\n                                          )));\n\n                                          // check link targetRef from inFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (!(intermediateCatchEvent.equals (inFlow.getTargetRef ()\n                                          )));\n\n                                          // check link trg from _edge_outgoing to outFlow\n                                          JavaSDM.ensure (outFlow.equals (_edge_outgoing.getTrg ()\n                                          ));\n\n                                          // check link trg from _edge_sourceRef to eventBasedGateway\n                                          JavaSDM.ensure (eventBasedGateway.equals (_edge_sourceRef.getTrg ()\n                                          ));\n\n                                          // check link flowNodeRefs from lane to intermediateCatchEvent\n                                          JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n                                          // create object match\n                                          match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                          // assign attribute match\n                                          match.setRuleName (__eClass.getName());\n                                          // statement node \'bookkeeping with generic isAppropriate method\'\n                                          fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,lane,laneSet,ceFlow);\n                                          if (fujaba__Success)\n                                          {\n                                             // statement node \'Ensure that the correct types of elements are matched\'\n                                             fujaba__Success = this.checkTypes_FWD(match);\n                                             if (fujaba__Success)\n                                             {\n                                                // story node \'Add match to rule result\'\n                                                try \n                                                {\n                                                   fujaba__Success = false; \n\n                                                   // check object __performOperation is really bound\n                                                   JavaSDM.ensure ( __performOperation != null );\n                                                   // check object __result is really bound\n                                                   JavaSDM.ensure ( __result != null );\n                                                   // check object match is really bound\n                                                   JavaSDM.ensure ( match != null );\n\n                                                   // create link\n                                                   org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                                   // create link\n                                                   __result.getContents().add(match);\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n\n\n                                             }\n                                             else\n                                             {\n\n                                             }\n\n                                          }\n                                          else\n                                          {\n\n                                          }\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_71(EMoflonEdge _edge_outgoing);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_ceFlow_flowElements_883696 = null;\n      FlowElementsContainer __DEC_intermediateCatchEvent_flowElements_366172 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_96142 = null;\n      Iterator fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_251252 = null;\n      SequenceFlow __DEC_intermediateCatchEvent_targetRef_251252 = null;\n      Match match = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterProcessToCeFlow = null;\n      SequenceFlow ceFlow = null;\n      EventBasedGateway eventBasedGateway = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      bpmn2.Process process = null;\n      SequenceFlow outFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_targetRef is really bound\n         JavaSDM.ensure ( _edge_targetRef != null );\n         // bind object\n         _TmpObject = _edge_targetRef.getSrc ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = outFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) outFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(outFlow));\n\n         // bind object\n         _TmpObject = _edge_targetRef.getTrg ();\n\n         // ensure correct type and really bound of object intermediateCatchEvent\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n\n         // check link flowElements from intermediateCatchEvent to process\n         JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n         ));\n\n         // bind object\n         _TmpObject = outFlow.getSourceRef ();\n\n         // ensure correct type and really bound of object eventBasedGateway\n         JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n         eventBasedGateway = (EventBasedGateway) _TmpObject;\n\n         // check link flowElements from eventBasedGateway to process\n         JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n         ));\n\n         // check link targetRef from outFlow to intermediateCatchEvent\n         JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link flowElements from process to ceFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToCeFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToCeFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToCeFlow.next ();\n\n               // ensure correct type and really bound of object ceFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               ceFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and ceFlow \n               JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n               // check link sourceRef from ceFlow to intermediateCatchEvent\n               JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n               ));\n\n               // iterate to-many link flowElements from process to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n                     // ensure correct type and really bound of object inFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     inFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects inFlow and ceFlow \n                     JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link targetRef from inFlow to eventBasedGateway\n                     JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                     ));\n\n                     // iterate to-many link laneSets from process to laneSet\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                     while ( fujaba__IterProcessToLaneSet.hasNext () )\n                     {\n                        try\n                        {\n                           laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                           // check object laneSet is really bound\n                           JavaSDM.ensure ( laneSet != null );\n                           // iterate to-many link lanes from laneSet to lane\n                           fujaba__Success = false;\n\n                           fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                           while ( fujaba__IterLaneSetToLane.hasNext () )\n                           {\n                              try\n                              {\n                                 lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                 // check object lane is really bound\n                                 JavaSDM.ensure ( lane != null );\n                                 // check link flowNodeRefs from lane to intermediateCatchEvent\n                                 JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_ceFlow_flowElements_883696 = ceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) ceFlow.eContainer() : null;\n\n                                       // check object __DEC_ceFlow_flowElements_883696 is really bound\n                                       JavaSDM.ensure ( __DEC_ceFlow_flowElements_883696 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_ceFlow_flowElements_883696.getFlowElements().contains(ceFlow));\n\n                                       // check isomorphic binding between objects __DEC_ceFlow_flowElements_883696 and process \n                                       JavaSDM.ensure ( !__DEC_ceFlow_flowElements_883696.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_intermediateCatchEvent_flowElements_366172 = intermediateCatchEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) intermediateCatchEvent.eContainer() : null;\n\n                                       // check object __DEC_intermediateCatchEvent_flowElements_366172 is really bound\n                                       JavaSDM.ensure ( __DEC_intermediateCatchEvent_flowElements_366172 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_intermediateCatchEvent_flowElements_366172.getFlowElements().contains(intermediateCatchEvent));\n\n                                       // check isomorphic binding between objects __DEC_intermediateCatchEvent_flowElements_366172 and process \n                                       JavaSDM.ensure ( !__DEC_intermediateCatchEvent_flowElements_366172.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_outFlow_flowElements_96142 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                       // check object __DEC_outFlow_flowElements_96142 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_flowElements_96142 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_outFlow_flowElements_96142.getFlowElements().contains(outFlow));\n\n                                       // check isomorphic binding between objects __DEC_outFlow_flowElements_96142 and process \n                                       JavaSDM.ensure ( !__DEC_outFlow_flowElements_96142.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link default from ceFlow\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(ceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                    // negative check for link default from outFlow\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link targetRef from intermediateCatchEvent to __DEC_intermediateCatchEvent_targetRef_251252\n                                       fujaba__Success = false;\n\n                                       fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_251252 = new ArrayList(intermediateCatchEvent.getIncoming()).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_251252.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_intermediateCatchEvent_targetRef_251252 = (SequenceFlow) fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_251252.next ();\n\n                                             // check object __DEC_intermediateCatchEvent_targetRef_251252 is really bound\n                                             JavaSDM.ensure ( __DEC_intermediateCatchEvent_targetRef_251252 != null );\n                                             // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_251252 and ceFlow \n                                             JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_251252.equals (ceFlow) );\n\n                                             // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_251252 and inFlow \n                                             JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_251252.equals (inFlow) );\n\n                                             // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_251252 and outFlow \n                                             JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_251252.equals (outFlow) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_targetRef is really bound\n                                    JavaSDM.ensure ( _edge_targetRef != null );\n                                    // check object ceFlow is really bound\n                                    JavaSDM.ensure ( ceFlow != null );\n                                    // check object eventBasedGateway is really bound\n                                    JavaSDM.ensure ( eventBasedGateway != null );\n                                    // check object inFlow is really bound\n                                    JavaSDM.ensure ( inFlow != null );\n                                    // check object intermediateCatchEvent is really bound\n                                    JavaSDM.ensure ( intermediateCatchEvent != null );\n                                    // check object lane is really bound\n                                    JavaSDM.ensure ( lane != null );\n                                    // check object laneSet is really bound\n                                    JavaSDM.ensure ( laneSet != null );\n                                    // check object outFlow is really bound\n                                    JavaSDM.ensure ( outFlow != null );\n                                    // check object process is really bound\n                                    JavaSDM.ensure ( process != null );\n                                    // check isomorphic binding between objects inFlow and ceFlow \n                                    JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                                    // check isomorphic binding between objects outFlow and ceFlow \n                                    JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                                    // check isomorphic binding between objects outFlow and inFlow \n                                    JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                    // check link flowElements from ceFlow to process\n                                    JavaSDM.ensure (process.equals (ceFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from eventBasedGateway to process\n                                    JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                                    ));\n\n                                    // check link flowElements from inFlow to process\n                                    JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from intermediateCatchEvent to process\n                                    JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                                    ));\n\n                                    // check link flowElements from outFlow to process\n                                    JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                    ));\n\n                                    // check link laneSets from laneSet to process\n                                    JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                    ));\n\n                                    // check link lanes from lane to laneSet\n                                    JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                    ));\n\n                                    // check link sourceRef from ceFlow to intermediateCatchEvent\n                                    JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n                                    ));\n\n                                    // check link sourceRef from outFlow to eventBasedGateway\n                                    JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                                    ));\n\n                                    // check link src from _edge_targetRef to outFlow\n                                    JavaSDM.ensure (outFlow.equals (_edge_targetRef.getSrc ()\n                                    ));\n\n                                    // check link targetRef from inFlow to eventBasedGateway\n                                    JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                                    ));\n\n                                    // check link targetRef from outFlow to intermediateCatchEvent\n                                    JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                                    ));\n\n                                    // check link targetRef from ceFlow to intermediateCatchEvent\n                                    JavaSDM.ensure (!(intermediateCatchEvent.equals (ceFlow.getTargetRef ()\n                                    )));\n\n                                    // check link targetRef from inFlow to intermediateCatchEvent\n                                    JavaSDM.ensure (!(intermediateCatchEvent.equals (inFlow.getTargetRef ()\n                                    )));\n\n                                    // check link trg from _edge_targetRef to intermediateCatchEvent\n                                    JavaSDM.ensure (intermediateCatchEvent.equals (_edge_targetRef.getTrg ()\n                                    ));\n\n                                    // check link flowNodeRefs from lane to intermediateCatchEvent\n                                    JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,lane,laneSet,ceFlow);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_FWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_72(
			EMoflonEdge _edge_targetRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_ceFlow_flowElements_991735 = null;\n      FlowElementsContainer __DEC_intermediateCatchEvent_flowElements_768931 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_201413 = null;\n      Iterator fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_493111 = null;\n      SequenceFlow __DEC_intermediateCatchEvent_targetRef_493111 = null;\n      Match match = null;\n      Iterator fujaba__IterOutFlowTo_edge_targetRef = null;\n      EMoflonEdge _edge_targetRef = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterProcessToCeFlow = null;\n      SequenceFlow ceFlow = null;\n      EventBasedGateway eventBasedGateway = null;\n      bpmn2.Process process = null;\n      SequenceFlow outFlow = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_incoming is really bound\n         JavaSDM.ensure ( _edge_incoming != null );\n         // bind object\n         _TmpObject = _edge_incoming.getSrc ();\n\n         // ensure correct type and really bound of object intermediateCatchEvent\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_incoming.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = outFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) outFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(outFlow));\n\n         // check link flowElements from intermediateCatchEvent to process\n         JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n         ));\n\n         // bind object\n         _TmpObject = outFlow.getSourceRef ();\n\n         // ensure correct type and really bound of object eventBasedGateway\n         JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n         eventBasedGateway = (EventBasedGateway) _TmpObject;\n\n         // check link flowElements from eventBasedGateway to process\n         JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n         ));\n\n         // check link targetRef from outFlow to intermediateCatchEvent\n         JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link flowElements from process to ceFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToCeFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToCeFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToCeFlow.next ();\n\n               // ensure correct type and really bound of object ceFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               ceFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and ceFlow \n               JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n               // check link sourceRef from ceFlow to intermediateCatchEvent\n               JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n               ));\n\n               // iterate to-many link flowElements from process to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n                     // ensure correct type and really bound of object inFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     inFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects inFlow and ceFlow \n                     JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link targetRef from inFlow to eventBasedGateway\n                     JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                     ));\n\n                     // iterate to-many link laneSets from process to laneSet\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                     while ( fujaba__IterProcessToLaneSet.hasNext () )\n                     {\n                        try\n                        {\n                           laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                           // check object laneSet is really bound\n                           JavaSDM.ensure ( laneSet != null );\n                           // iterate to-many link lanes from laneSet to lane\n                           fujaba__Success = false;\n\n                           fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                           while ( fujaba__IterLaneSetToLane.hasNext () )\n                           {\n                              try\n                              {\n                                 lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                 // check object lane is really bound\n                                 JavaSDM.ensure ( lane != null );\n                                 // check link flowNodeRefs from lane to intermediateCatchEvent\n                                 JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n                                 // iterate to-many link src from outFlow to _edge_targetRef\n                                 fujaba__Success = false;\n\n                                 fujaba__IterOutFlowTo_edge_targetRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,EMoflonEdge.class,\"src\")).iterator ();\n\n                                 while ( fujaba__IterOutFlowTo_edge_targetRef.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       _edge_targetRef = (EMoflonEdge) fujaba__IterOutFlowTo_edge_targetRef.next ();\n\n                                       // check object _edge_targetRef is really bound\n                                       JavaSDM.ensure ( _edge_targetRef != null );\n                                       // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                                       JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                                       // check link trg from _edge_targetRef to intermediateCatchEvent\n                                       JavaSDM.ensure (intermediateCatchEvent.equals (_edge_targetRef.getTrg ()\n                                       ));\n\n                                       // story node \'test core match and DECs\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_ceFlow_flowElements_991735 = ceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) ceFlow.eContainer() : null;\n\n                                             // check object __DEC_ceFlow_flowElements_991735 is really bound\n                                             JavaSDM.ensure ( __DEC_ceFlow_flowElements_991735 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_ceFlow_flowElements_991735.getFlowElements().contains(ceFlow));\n\n                                             // check isomorphic binding between objects __DEC_ceFlow_flowElements_991735 and process \n                                             JavaSDM.ensure ( !__DEC_ceFlow_flowElements_991735.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_intermediateCatchEvent_flowElements_768931 = intermediateCatchEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) intermediateCatchEvent.eContainer() : null;\n\n                                             // check object __DEC_intermediateCatchEvent_flowElements_768931 is really bound\n                                             JavaSDM.ensure ( __DEC_intermediateCatchEvent_flowElements_768931 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_intermediateCatchEvent_flowElements_768931.getFlowElements().contains(intermediateCatchEvent));\n\n                                             // check isomorphic binding between objects __DEC_intermediateCatchEvent_flowElements_768931 and process \n                                             JavaSDM.ensure ( !__DEC_intermediateCatchEvent_flowElements_768931.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_outFlow_flowElements_201413 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                             // check object __DEC_outFlow_flowElements_201413 is really bound\n                                             JavaSDM.ensure ( __DEC_outFlow_flowElements_201413 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_outFlow_flowElements_201413.getFlowElements().contains(outFlow));\n\n                                             // check isomorphic binding between objects __DEC_outFlow_flowElements_201413 and process \n                                             JavaSDM.ensure ( !__DEC_outFlow_flowElements_201413.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // negative check for link default from ceFlow\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(ceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                          // negative check for link default from outFlow\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // iterate to-many link targetRef from intermediateCatchEvent to __DEC_intermediateCatchEvent_targetRef_493111\n                                             fujaba__Success = false;\n\n                                             fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_493111 = new ArrayList(intermediateCatchEvent.getIncoming()).iterator ();\n\n                                             while ( !(fujaba__Success) && fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_493111.hasNext () )\n                                             {\n                                                try\n                                                {\n                                                   __DEC_intermediateCatchEvent_targetRef_493111 = (SequenceFlow) fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_493111.next ();\n\n                                                   // check object __DEC_intermediateCatchEvent_targetRef_493111 is really bound\n                                                   JavaSDM.ensure ( __DEC_intermediateCatchEvent_targetRef_493111 != null );\n                                                   // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_493111 and ceFlow \n                                                   JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_493111.equals (ceFlow) );\n\n                                                   // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_493111 and inFlow \n                                                   JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_493111.equals (inFlow) );\n\n                                                   // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_493111 and outFlow \n                                                   JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_493111.equals (outFlow) );\n\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n                                             }\n                                             JavaSDM.ensure (fujaba__Success);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check object _edge_incoming is really bound\n                                          JavaSDM.ensure ( _edge_incoming != null );\n                                          // check object _edge_targetRef is really bound\n                                          JavaSDM.ensure ( _edge_targetRef != null );\n                                          // check object ceFlow is really bound\n                                          JavaSDM.ensure ( ceFlow != null );\n                                          // check object eventBasedGateway is really bound\n                                          JavaSDM.ensure ( eventBasedGateway != null );\n                                          // check object inFlow is really bound\n                                          JavaSDM.ensure ( inFlow != null );\n                                          // check object intermediateCatchEvent is really bound\n                                          JavaSDM.ensure ( intermediateCatchEvent != null );\n                                          // check object lane is really bound\n                                          JavaSDM.ensure ( lane != null );\n                                          // check object laneSet is really bound\n                                          JavaSDM.ensure ( laneSet != null );\n                                          // check object outFlow is really bound\n                                          JavaSDM.ensure ( outFlow != null );\n                                          // check object process is really bound\n                                          JavaSDM.ensure ( process != null );\n                                          // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                                          JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                                          // check isomorphic binding between objects inFlow and ceFlow \n                                          JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                                          // check isomorphic binding between objects outFlow and ceFlow \n                                          JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                                          // check isomorphic binding between objects outFlow and inFlow \n                                          JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                          // check link flowElements from ceFlow to process\n                                          JavaSDM.ensure (process.equals (ceFlow.eContainer()\n                                          ));\n\n                                          // check link flowElements from eventBasedGateway to process\n                                          JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                                          ));\n\n                                          // check link flowElements from inFlow to process\n                                          JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                          ));\n\n                                          // check link flowElements from intermediateCatchEvent to process\n                                          JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                                          ));\n\n                                          // check link flowElements from outFlow to process\n                                          JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                          ));\n\n                                          // check link laneSets from laneSet to process\n                                          JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                          ));\n\n                                          // check link lanes from lane to laneSet\n                                          JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                          ));\n\n                                          // check link sourceRef from ceFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n                                          ));\n\n                                          // check link sourceRef from outFlow to eventBasedGateway\n                                          JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                                          ));\n\n                                          // check link src from _edge_incoming to intermediateCatchEvent\n                                          JavaSDM.ensure (intermediateCatchEvent.equals (_edge_incoming.getSrc ()\n                                          ));\n\n                                          // check link src from _edge_targetRef to outFlow\n                                          JavaSDM.ensure (outFlow.equals (_edge_targetRef.getSrc ()\n                                          ));\n\n                                          // check link targetRef from inFlow to eventBasedGateway\n                                          JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                                          ));\n\n                                          // check link targetRef from outFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                                          ));\n\n                                          // check link targetRef from ceFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (!(intermediateCatchEvent.equals (ceFlow.getTargetRef ()\n                                          )));\n\n                                          // check link targetRef from inFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (!(intermediateCatchEvent.equals (inFlow.getTargetRef ()\n                                          )));\n\n                                          // check link trg from _edge_incoming to outFlow\n                                          JavaSDM.ensure (outFlow.equals (_edge_incoming.getTrg ()\n                                          ));\n\n                                          // check link trg from _edge_targetRef to intermediateCatchEvent\n                                          JavaSDM.ensure (intermediateCatchEvent.equals (_edge_targetRef.getTrg ()\n                                          ));\n\n                                          // check link flowNodeRefs from lane to intermediateCatchEvent\n                                          JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n                                          // create object match\n                                          match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                          // assign attribute match\n                                          match.setRuleName (__eClass.getName());\n                                          // statement node \'bookkeeping with generic isAppropriate method\'\n                                          fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,lane,laneSet,ceFlow);\n                                          if (fujaba__Success)\n                                          {\n                                             // statement node \'Ensure that the correct types of elements are matched\'\n                                             fujaba__Success = this.checkTypes_FWD(match);\n                                             if (fujaba__Success)\n                                             {\n                                                // story node \'Add match to rule result\'\n                                                try \n                                                {\n                                                   fujaba__Success = false; \n\n                                                   // check object __performOperation is really bound\n                                                   JavaSDM.ensure ( __performOperation != null );\n                                                   // check object __result is really bound\n                                                   JavaSDM.ensure ( __result != null );\n                                                   // check object match is really bound\n                                                   JavaSDM.ensure ( match != null );\n\n                                                   // create link\n                                                   org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                                   // create link\n                                                   __result.getContents().add(match);\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n\n\n                                             }\n                                             else\n                                             {\n\n                                             }\n\n                                          }\n                                          else\n                                          {\n\n                                          }\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_73(EMoflonEdge _edge_incoming);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_ceFlow_flowElements_619359 = null;\n      FlowElementsContainer __DEC_intermediateCatchEvent_flowElements_366721 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_20121 = null;\n      Iterator fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_682823 = null;\n      SequenceFlow __DEC_intermediateCatchEvent_targetRef_682823 = null;\n      Match match = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      EventBasedGateway eventBasedGateway = null;\n      Iterator fujaba__IterProcessToOutFlow = null;\n      SequenceFlow outFlow = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      bpmn2.Process process = null;\n      SequenceFlow ceFlow = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sourceRef is really bound\n         JavaSDM.ensure ( _edge_sourceRef != null );\n         // bind object\n         _TmpObject = _edge_sourceRef.getTrg ();\n\n         // ensure correct type and really bound of object intermediateCatchEvent\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_sourceRef.getSrc ();\n\n         // ensure correct type and really bound of object ceFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         ceFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = ceFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) ceFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(ceFlow));\n\n         // check link flowElements from intermediateCatchEvent to process\n         JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n         ));\n\n         // check link sourceRef from ceFlow to intermediateCatchEvent\n         JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects inFlow and ceFlow \n               JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n               // iterate to-many link flowElements from process to outFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToOutFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToOutFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToOutFlow.next ();\n\n                     // ensure correct type and really bound of object outFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     outFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects outFlow and ceFlow \n                     JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // bind object\n                     _TmpObject = outFlow.getSourceRef ();\n\n                     // ensure correct type and really bound of object eventBasedGateway\n                     JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n                     eventBasedGateway = (EventBasedGateway) _TmpObject;\n\n                     // check link flowElements from eventBasedGateway to process\n                     JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                     ));\n\n                     // check link targetRef from inFlow to eventBasedGateway\n                     JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                     ));\n\n                     // check link targetRef from outFlow to intermediateCatchEvent\n                     JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                     ));\n\n                     // iterate to-many link laneSets from process to laneSet\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                     while ( fujaba__IterProcessToLaneSet.hasNext () )\n                     {\n                        try\n                        {\n                           laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                           // check object laneSet is really bound\n                           JavaSDM.ensure ( laneSet != null );\n                           // iterate to-many link lanes from laneSet to lane\n                           fujaba__Success = false;\n\n                           fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                           while ( fujaba__IterLaneSetToLane.hasNext () )\n                           {\n                              try\n                              {\n                                 lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                 // check object lane is really bound\n                                 JavaSDM.ensure ( lane != null );\n                                 // check link flowNodeRefs from lane to intermediateCatchEvent\n                                 JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_ceFlow_flowElements_619359 = ceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) ceFlow.eContainer() : null;\n\n                                       // check object __DEC_ceFlow_flowElements_619359 is really bound\n                                       JavaSDM.ensure ( __DEC_ceFlow_flowElements_619359 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_ceFlow_flowElements_619359.getFlowElements().contains(ceFlow));\n\n                                       // check isomorphic binding between objects __DEC_ceFlow_flowElements_619359 and process \n                                       JavaSDM.ensure ( !__DEC_ceFlow_flowElements_619359.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_intermediateCatchEvent_flowElements_366721 = intermediateCatchEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) intermediateCatchEvent.eContainer() : null;\n\n                                       // check object __DEC_intermediateCatchEvent_flowElements_366721 is really bound\n                                       JavaSDM.ensure ( __DEC_intermediateCatchEvent_flowElements_366721 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_intermediateCatchEvent_flowElements_366721.getFlowElements().contains(intermediateCatchEvent));\n\n                                       // check isomorphic binding between objects __DEC_intermediateCatchEvent_flowElements_366721 and process \n                                       JavaSDM.ensure ( !__DEC_intermediateCatchEvent_flowElements_366721.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_outFlow_flowElements_20121 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                       // check object __DEC_outFlow_flowElements_20121 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_flowElements_20121 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_outFlow_flowElements_20121.getFlowElements().contains(outFlow));\n\n                                       // check isomorphic binding between objects __DEC_outFlow_flowElements_20121 and process \n                                       JavaSDM.ensure ( !__DEC_outFlow_flowElements_20121.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link default from ceFlow\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(ceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                    // negative check for link default from outFlow\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link targetRef from intermediateCatchEvent to __DEC_intermediateCatchEvent_targetRef_682823\n                                       fujaba__Success = false;\n\n                                       fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_682823 = new ArrayList(intermediateCatchEvent.getIncoming()).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_682823.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_intermediateCatchEvent_targetRef_682823 = (SequenceFlow) fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_682823.next ();\n\n                                             // check object __DEC_intermediateCatchEvent_targetRef_682823 is really bound\n                                             JavaSDM.ensure ( __DEC_intermediateCatchEvent_targetRef_682823 != null );\n                                             // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_682823 and ceFlow \n                                             JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_682823.equals (ceFlow) );\n\n                                             // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_682823 and inFlow \n                                             JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_682823.equals (inFlow) );\n\n                                             // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_682823 and outFlow \n                                             JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_682823.equals (outFlow) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_sourceRef is really bound\n                                    JavaSDM.ensure ( _edge_sourceRef != null );\n                                    // check object ceFlow is really bound\n                                    JavaSDM.ensure ( ceFlow != null );\n                                    // check object eventBasedGateway is really bound\n                                    JavaSDM.ensure ( eventBasedGateway != null );\n                                    // check object inFlow is really bound\n                                    JavaSDM.ensure ( inFlow != null );\n                                    // check object intermediateCatchEvent is really bound\n                                    JavaSDM.ensure ( intermediateCatchEvent != null );\n                                    // check object lane is really bound\n                                    JavaSDM.ensure ( lane != null );\n                                    // check object laneSet is really bound\n                                    JavaSDM.ensure ( laneSet != null );\n                                    // check object outFlow is really bound\n                                    JavaSDM.ensure ( outFlow != null );\n                                    // check object process is really bound\n                                    JavaSDM.ensure ( process != null );\n                                    // check isomorphic binding between objects inFlow and ceFlow \n                                    JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                                    // check isomorphic binding between objects outFlow and ceFlow \n                                    JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                                    // check isomorphic binding between objects outFlow and inFlow \n                                    JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                    // check link flowElements from ceFlow to process\n                                    JavaSDM.ensure (process.equals (ceFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from eventBasedGateway to process\n                                    JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                                    ));\n\n                                    // check link flowElements from inFlow to process\n                                    JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from intermediateCatchEvent to process\n                                    JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                                    ));\n\n                                    // check link flowElements from outFlow to process\n                                    JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                    ));\n\n                                    // check link laneSets from laneSet to process\n                                    JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                    ));\n\n                                    // check link lanes from lane to laneSet\n                                    JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                    ));\n\n                                    // check link sourceRef from ceFlow to intermediateCatchEvent\n                                    JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n                                    ));\n\n                                    // check link sourceRef from outFlow to eventBasedGateway\n                                    JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                                    ));\n\n                                    // check link src from _edge_sourceRef to ceFlow\n                                    JavaSDM.ensure (ceFlow.equals (_edge_sourceRef.getSrc ()\n                                    ));\n\n                                    // check link targetRef from inFlow to eventBasedGateway\n                                    JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                                    ));\n\n                                    // check link targetRef from outFlow to intermediateCatchEvent\n                                    JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                                    ));\n\n                                    // check link targetRef from ceFlow to intermediateCatchEvent\n                                    JavaSDM.ensure (!(intermediateCatchEvent.equals (ceFlow.getTargetRef ()\n                                    )));\n\n                                    // check link targetRef from inFlow to intermediateCatchEvent\n                                    JavaSDM.ensure (!(intermediateCatchEvent.equals (inFlow.getTargetRef ()\n                                    )));\n\n                                    // check link trg from _edge_sourceRef to intermediateCatchEvent\n                                    JavaSDM.ensure (intermediateCatchEvent.equals (_edge_sourceRef.getTrg ()\n                                    ));\n\n                                    // check link flowNodeRefs from lane to intermediateCatchEvent\n                                    JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,lane,laneSet,ceFlow);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_FWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_74(
			EMoflonEdge _edge_sourceRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_ceFlow_flowElements_461127 = null;\n      FlowElementsContainer __DEC_intermediateCatchEvent_flowElements_538803 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_499300 = null;\n      Iterator fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_187556 = null;\n      SequenceFlow __DEC_intermediateCatchEvent_targetRef_187556 = null;\n      Match match = null;\n      Iterator fujaba__IterCeFlowTo_edge_sourceRef = null;\n      EMoflonEdge _edge_sourceRef = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterIntermediateCatchEventToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToOutFlow = null;\n      SequenceFlow outFlow = null;\n      EventBasedGateway eventBasedGateway = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      bpmn2.Process process = null;\n      SequenceFlow ceFlow = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_outgoing is really bound\n         JavaSDM.ensure ( _edge_outgoing != null );\n         // bind object\n         _TmpObject = _edge_outgoing.getSrc ();\n\n         // ensure correct type and really bound of object intermediateCatchEvent\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_outgoing.getTrg ();\n\n         // ensure correct type and really bound of object ceFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         ceFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = ceFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) ceFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(ceFlow));\n\n         // check link flowElements from intermediateCatchEvent to process\n         JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n         ));\n\n         // check link sourceRef from ceFlow to intermediateCatchEvent\n         JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects inFlow and ceFlow \n               JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n               // bind object\n               _TmpObject = inFlow.getTargetRef ();\n\n               // ensure correct type and really bound of object eventBasedGateway\n               JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n               eventBasedGateway = (EventBasedGateway) _TmpObject;\n\n               // check link flowElements from eventBasedGateway to process\n               JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n               ));\n\n               // iterate to-many link flowElements from process to outFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToOutFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToOutFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToOutFlow.next ();\n\n                     // ensure correct type and really bound of object outFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     outFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects outFlow and ceFlow \n                     JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link sourceRef from outFlow to eventBasedGateway\n                     JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                     ));\n\n                     // check link targetRef from outFlow to intermediateCatchEvent\n                     JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                     ));\n\n                     // iterate to-many link flowNodeRefs from intermediateCatchEvent to lane\n                     fujaba__Success = false;\n\n                     fujaba__IterIntermediateCatchEventToLane = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(intermediateCatchEvent,Lane.class,\"flowNodeRefs\")).iterator ();\n\n                     while ( fujaba__IterIntermediateCatchEventToLane.hasNext () )\n                     {\n                        try\n                        {\n                           lane = (Lane) fujaba__IterIntermediateCatchEventToLane.next ();\n\n                           // check object lane is really bound\n                           JavaSDM.ensure ( lane != null );\n                           // iterate to-many link laneSets from process to laneSet\n                           fujaba__Success = false;\n\n                           fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                           while ( fujaba__IterProcessToLaneSet.hasNext () )\n                           {\n                              try\n                              {\n                                 laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                                 // check object laneSet is really bound\n                                 JavaSDM.ensure ( laneSet != null );\n                                 // check link lanes from lane to laneSet\n                                 JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                 ));\n\n                                 // iterate to-many link src from ceFlow to _edge_sourceRef\n                                 fujaba__Success = false;\n\n                                 fujaba__IterCeFlowTo_edge_sourceRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(ceFlow,EMoflonEdge.class,\"src\")).iterator ();\n\n                                 while ( fujaba__IterCeFlowTo_edge_sourceRef.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       _edge_sourceRef = (EMoflonEdge) fujaba__IterCeFlowTo_edge_sourceRef.next ();\n\n                                       // check object _edge_sourceRef is really bound\n                                       JavaSDM.ensure ( _edge_sourceRef != null );\n                                       // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                                       JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                                       // check link trg from _edge_sourceRef to intermediateCatchEvent\n                                       JavaSDM.ensure (intermediateCatchEvent.equals (_edge_sourceRef.getTrg ()\n                                       ));\n\n                                       // story node \'test core match and DECs\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_ceFlow_flowElements_461127 = ceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) ceFlow.eContainer() : null;\n\n                                             // check object __DEC_ceFlow_flowElements_461127 is really bound\n                                             JavaSDM.ensure ( __DEC_ceFlow_flowElements_461127 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_ceFlow_flowElements_461127.getFlowElements().contains(ceFlow));\n\n                                             // check isomorphic binding between objects __DEC_ceFlow_flowElements_461127 and process \n                                             JavaSDM.ensure ( !__DEC_ceFlow_flowElements_461127.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_intermediateCatchEvent_flowElements_538803 = intermediateCatchEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) intermediateCatchEvent.eContainer() : null;\n\n                                             // check object __DEC_intermediateCatchEvent_flowElements_538803 is really bound\n                                             JavaSDM.ensure ( __DEC_intermediateCatchEvent_flowElements_538803 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_intermediateCatchEvent_flowElements_538803.getFlowElements().contains(intermediateCatchEvent));\n\n                                             // check isomorphic binding between objects __DEC_intermediateCatchEvent_flowElements_538803 and process \n                                             JavaSDM.ensure ( !__DEC_intermediateCatchEvent_flowElements_538803.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_outFlow_flowElements_499300 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                             // check object __DEC_outFlow_flowElements_499300 is really bound\n                                             JavaSDM.ensure ( __DEC_outFlow_flowElements_499300 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_outFlow_flowElements_499300.getFlowElements().contains(outFlow));\n\n                                             // check isomorphic binding between objects __DEC_outFlow_flowElements_499300 and process \n                                             JavaSDM.ensure ( !__DEC_outFlow_flowElements_499300.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // negative check for link default from ceFlow\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(ceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                          // negative check for link default from outFlow\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // iterate to-many link targetRef from intermediateCatchEvent to __DEC_intermediateCatchEvent_targetRef_187556\n                                             fujaba__Success = false;\n\n                                             fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_187556 = new ArrayList(intermediateCatchEvent.getIncoming()).iterator ();\n\n                                             while ( !(fujaba__Success) && fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_187556.hasNext () )\n                                             {\n                                                try\n                                                {\n                                                   __DEC_intermediateCatchEvent_targetRef_187556 = (SequenceFlow) fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_187556.next ();\n\n                                                   // check object __DEC_intermediateCatchEvent_targetRef_187556 is really bound\n                                                   JavaSDM.ensure ( __DEC_intermediateCatchEvent_targetRef_187556 != null );\n                                                   // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_187556 and ceFlow \n                                                   JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_187556.equals (ceFlow) );\n\n                                                   // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_187556 and inFlow \n                                                   JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_187556.equals (inFlow) );\n\n                                                   // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_187556 and outFlow \n                                                   JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_187556.equals (outFlow) );\n\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n                                             }\n                                             JavaSDM.ensure (fujaba__Success);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check object _edge_outgoing is really bound\n                                          JavaSDM.ensure ( _edge_outgoing != null );\n                                          // check object _edge_sourceRef is really bound\n                                          JavaSDM.ensure ( _edge_sourceRef != null );\n                                          // check object ceFlow is really bound\n                                          JavaSDM.ensure ( ceFlow != null );\n                                          // check object eventBasedGateway is really bound\n                                          JavaSDM.ensure ( eventBasedGateway != null );\n                                          // check object inFlow is really bound\n                                          JavaSDM.ensure ( inFlow != null );\n                                          // check object intermediateCatchEvent is really bound\n                                          JavaSDM.ensure ( intermediateCatchEvent != null );\n                                          // check object lane is really bound\n                                          JavaSDM.ensure ( lane != null );\n                                          // check object laneSet is really bound\n                                          JavaSDM.ensure ( laneSet != null );\n                                          // check object outFlow is really bound\n                                          JavaSDM.ensure ( outFlow != null );\n                                          // check object process is really bound\n                                          JavaSDM.ensure ( process != null );\n                                          // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                                          JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                                          // check isomorphic binding between objects inFlow and ceFlow \n                                          JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                                          // check isomorphic binding between objects outFlow and ceFlow \n                                          JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                                          // check isomorphic binding between objects outFlow and inFlow \n                                          JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                          // check link flowElements from ceFlow to process\n                                          JavaSDM.ensure (process.equals (ceFlow.eContainer()\n                                          ));\n\n                                          // check link flowElements from eventBasedGateway to process\n                                          JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                                          ));\n\n                                          // check link flowElements from inFlow to process\n                                          JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                          ));\n\n                                          // check link flowElements from intermediateCatchEvent to process\n                                          JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                                          ));\n\n                                          // check link flowElements from outFlow to process\n                                          JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                          ));\n\n                                          // check link laneSets from laneSet to process\n                                          JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                          ));\n\n                                          // check link lanes from lane to laneSet\n                                          JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                          ));\n\n                                          // check link sourceRef from ceFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n                                          ));\n\n                                          // check link sourceRef from outFlow to eventBasedGateway\n                                          JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                                          ));\n\n                                          // check link src from _edge_outgoing to intermediateCatchEvent\n                                          JavaSDM.ensure (intermediateCatchEvent.equals (_edge_outgoing.getSrc ()\n                                          ));\n\n                                          // check link src from _edge_sourceRef to ceFlow\n                                          JavaSDM.ensure (ceFlow.equals (_edge_sourceRef.getSrc ()\n                                          ));\n\n                                          // check link targetRef from inFlow to eventBasedGateway\n                                          JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                                          ));\n\n                                          // check link targetRef from outFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                                          ));\n\n                                          // check link targetRef from ceFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (!(intermediateCatchEvent.equals (ceFlow.getTargetRef ()\n                                          )));\n\n                                          // check link targetRef from inFlow to intermediateCatchEvent\n                                          JavaSDM.ensure (!(intermediateCatchEvent.equals (inFlow.getTargetRef ()\n                                          )));\n\n                                          // check link trg from _edge_outgoing to ceFlow\n                                          JavaSDM.ensure (ceFlow.equals (_edge_outgoing.getTrg ()\n                                          ));\n\n                                          // check link trg from _edge_sourceRef to intermediateCatchEvent\n                                          JavaSDM.ensure (intermediateCatchEvent.equals (_edge_sourceRef.getTrg ()\n                                          ));\n\n                                          // check link flowNodeRefs from lane to intermediateCatchEvent\n                                          JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n                                          // create object match\n                                          match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                          // assign attribute match\n                                          match.setRuleName (__eClass.getName());\n                                          // statement node \'bookkeeping with generic isAppropriate method\'\n                                          fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,lane,laneSet,ceFlow);\n                                          if (fujaba__Success)\n                                          {\n                                             // statement node \'Ensure that the correct types of elements are matched\'\n                                             fujaba__Success = this.checkTypes_FWD(match);\n                                             if (fujaba__Success)\n                                             {\n                                                // story node \'Add match to rule result\'\n                                                try \n                                                {\n                                                   fujaba__Success = false; \n\n                                                   // check object __performOperation is really bound\n                                                   JavaSDM.ensure ( __performOperation != null );\n                                                   // check object __result is really bound\n                                                   JavaSDM.ensure ( __result != null );\n                                                   // check object match is really bound\n                                                   JavaSDM.ensure ( match != null );\n\n                                                   // create link\n                                                   org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                                   // create link\n                                                   __result.getContents().add(match);\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n\n\n                                             }\n                                             else\n                                             {\n\n                                             }\n\n                                          }\n                                          else\n                                          {\n\n                                          }\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_75(EMoflonEdge _edge_outgoing);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCase __DEC_alternativeFlow_flows_141509 = null;\n      NormalStep __DEC_alt_stepAlternative_433319 = null;\n      Iterator fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_733416 = null;\n      AlternativeFlowAlternative __DEC_alternativeFlow_ref_733416 = null;\n      Match match = null;\n      Iterator fujaba__IterFlowToNormalStep = null;\n      NormalStep normalStep = null;\n      Iterator fujaba__IterUseCaseToFlow = null;\n      Flow flow = null;\n      Iterator fujaba__IterAlternativeFlowToAlt = null;\n      AlternativeFlowAlternative alt = null;\n      AlternativeFlow alternativeFlow = null;\n      UseCase useCase = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flows is really bound\n         JavaSDM.ensure ( _edge_flows != null );\n         // bind object\n         _TmpObject = _edge_flows.getSrc ();\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flows.getTrg ();\n\n         // ensure correct type and really bound of object alternativeFlow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         alternativeFlow = (AlternativeFlow) _TmpObject;\n\n         // check link flows from alternativeFlow to useCase\n         JavaSDM.ensure (useCase.equals (alternativeFlow.eContainer()\n         ));\n\n         // iterate to-many link ref from alternativeFlow to alt\n         fujaba__Success = false;\n\n         fujaba__IterAlternativeFlowToAlt = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(alternativeFlow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n         while ( fujaba__IterAlternativeFlowToAlt.hasNext () )\n         {\n            try\n            {\n               alt = (AlternativeFlowAlternative) fujaba__IterAlternativeFlowToAlt.next ();\n\n               // check object alt is really bound\n               JavaSDM.ensure ( alt != null );\n               // iterate to-many link flows from useCase to flow\n               fujaba__Success = false;\n\n               fujaba__IterUseCaseToFlow = new ArrayList(useCase.getFlows()).iterator ();\n\n               while ( fujaba__IterUseCaseToFlow.hasNext () )\n               {\n                  try\n                  {\n                     flow = (Flow) fujaba__IterUseCaseToFlow.next ();\n\n                     // check object flow is really bound\n                     JavaSDM.ensure ( flow != null );\n                     // check isomorphic binding between objects flow and alternativeFlow \n                     JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n                     // iterate to-many link steps from flow to normalStep\n                     fujaba__Success = false;\n\n                     fujaba__IterFlowToNormalStep = new ArrayList(flow.getSteps()).iterator ();\n\n                     while ( fujaba__IterFlowToNormalStep.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterFlowToNormalStep.next ();\n\n                           // ensure correct type and really bound of object normalStep\n                           JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n                           normalStep = (NormalStep) _TmpObject;\n                           // check link stepAlternative from alt to normalStep\n                           JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_alternativeFlow_flows_141509 = alternativeFlow.eContainer() instanceof UseCase ? (UseCase) alternativeFlow.eContainer() : null;\n\n                                 // check object __DEC_alternativeFlow_flows_141509 is really bound\n                                 JavaSDM.ensure ( __DEC_alternativeFlow_flows_141509 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_alternativeFlow_flows_141509.getFlows().contains(alternativeFlow));\n\n                                 // check isomorphic binding between objects __DEC_alternativeFlow_flows_141509 and useCase \n                                 JavaSDM.ensure ( !__DEC_alternativeFlow_flows_141509.equals (useCase) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_alt_stepAlternative_433319 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt.eContainer() : null;\n\n                                 // check object __DEC_alt_stepAlternative_433319 is really bound\n                                 JavaSDM.ensure ( __DEC_alt_stepAlternative_433319 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_alt_stepAlternative_433319.getStepAlternative().contains(alt));\n\n                                 // check isomorphic binding between objects __DEC_alt_stepAlternative_433319 and normalStep \n                                 JavaSDM.ensure ( !__DEC_alt_stepAlternative_433319.equals (normalStep) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link ref from alternativeFlow to __DEC_alternativeFlow_ref_733416\n                                 fujaba__Success = false;\n\n                                 fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_733416 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(alternativeFlow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_733416.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_alternativeFlow_ref_733416 = (AlternativeFlowAlternative) fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_733416.next ();\n\n                                       // check object __DEC_alternativeFlow_ref_733416 is really bound\n                                       JavaSDM.ensure ( __DEC_alternativeFlow_ref_733416 != null );\n                                       // check isomorphic binding between objects __DEC_alternativeFlow_ref_733416 and alt \n                                       JavaSDM.ensure ( !__DEC_alternativeFlow_ref_733416.equals (alt) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_flows is really bound\n                              JavaSDM.ensure ( _edge_flows != null );\n                              // check object alt is really bound\n                              JavaSDM.ensure ( alt != null );\n                              // check object alternativeFlow is really bound\n                              JavaSDM.ensure ( alternativeFlow != null );\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object normalStep is really bound\n                              JavaSDM.ensure ( normalStep != null );\n                              // check object useCase is really bound\n                              JavaSDM.ensure ( useCase != null );\n                              // check isomorphic binding between objects flow and alternativeFlow \n                              JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n                              // check link ref from alt to alternativeFlow\n                              JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n                              ));\n\n                              // check link flows from alternativeFlow to useCase\n                              JavaSDM.ensure (useCase.equals (alternativeFlow.eContainer()\n                              ));\n\n                              // check link flows from flow to useCase\n                              JavaSDM.ensure (useCase.equals (flow.eContainer()\n                              ));\n\n                              // check link src from _edge_flows to useCase\n                              JavaSDM.ensure (useCase.equals (_edge_flows.getSrc ()\n                              ));\n\n                              // check link stepAlternative from alt to normalStep\n                              JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                              ));\n\n                              // check link steps from normalStep to flow\n                              JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                              ));\n\n                              // check link trg from _edge_flows to alternativeFlow\n                              JavaSDM.ensure (alternativeFlow.equals (_edge_flows.getTrg ()\n                              ));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,useCase,flow,normalStep,alt,alternativeFlow);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_26(EMoflonEdge _edge_flows);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCase __DEC_alternativeFlow_flows_187484 = null;\n      NormalStep __DEC_alt_stepAlternative_798353 = null;\n      Iterator fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_261160 = null;\n      AlternativeFlowAlternative __DEC_alternativeFlow_ref_261160 = null;\n      Match match = null;\n      Iterator fujaba__IterUseCaseToAlternativeFlow = null;\n      AlternativeFlow alternativeFlow = null;\n      UseCase useCase = null;\n      Flow flow = null;\n      AlternativeFlowAlternative alt = null;\n      NormalStep normalStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_stepAlternative is really bound\n         JavaSDM.ensure ( _edge_stepAlternative != null );\n         // bind object\n         _TmpObject = _edge_stepAlternative.getSrc ();\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_stepAlternative.getTrg ();\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n\n         // check link stepAlternative from alt to normalStep\n         JavaSDM.ensure (normalStep.equals (alt.eContainer()\n         ));\n\n         // bind object\n         flow = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(normalStep));\n\n         // bind object\n         useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow.eContainer() : null;\n\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(useCase.getFlows().contains(flow));\n\n         // iterate to-many link flows from useCase to alternativeFlow\n         fujaba__Success = false;\n\n         fujaba__IterUseCaseToAlternativeFlow = new ArrayList(useCase.getFlows()).iterator ();\n\n         while ( fujaba__IterUseCaseToAlternativeFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterUseCaseToAlternativeFlow.next ();\n\n               // ensure correct type and really bound of object alternativeFlow\n               JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n               alternativeFlow = (AlternativeFlow) _TmpObject;\n               // check isomorphic binding between objects flow and alternativeFlow \n               JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n               // check link ref from alt to alternativeFlow\n               JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_alternativeFlow_flows_187484 = alternativeFlow.eContainer() instanceof UseCase ? (UseCase) alternativeFlow.eContainer() : null;\n\n                     // check object __DEC_alternativeFlow_flows_187484 is really bound\n                     JavaSDM.ensure ( __DEC_alternativeFlow_flows_187484 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_alternativeFlow_flows_187484.getFlows().contains(alternativeFlow));\n\n                     // check isomorphic binding between objects __DEC_alternativeFlow_flows_187484 and useCase \n                     JavaSDM.ensure ( !__DEC_alternativeFlow_flows_187484.equals (useCase) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_alt_stepAlternative_798353 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt.eContainer() : null;\n\n                     // check object __DEC_alt_stepAlternative_798353 is really bound\n                     JavaSDM.ensure ( __DEC_alt_stepAlternative_798353 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_alt_stepAlternative_798353.getStepAlternative().contains(alt));\n\n                     // check isomorphic binding between objects __DEC_alt_stepAlternative_798353 and normalStep \n                     JavaSDM.ensure ( !__DEC_alt_stepAlternative_798353.equals (normalStep) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link ref from alternativeFlow to __DEC_alternativeFlow_ref_261160\n                     fujaba__Success = false;\n\n                     fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_261160 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(alternativeFlow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_261160.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_alternativeFlow_ref_261160 = (AlternativeFlowAlternative) fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_261160.next ();\n\n                           // check object __DEC_alternativeFlow_ref_261160 is really bound\n                           JavaSDM.ensure ( __DEC_alternativeFlow_ref_261160 != null );\n                           // check isomorphic binding between objects __DEC_alternativeFlow_ref_261160 and alt \n                           JavaSDM.ensure ( !__DEC_alternativeFlow_ref_261160.equals (alt) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_stepAlternative is really bound\n                  JavaSDM.ensure ( _edge_stepAlternative != null );\n                  // check object alt is really bound\n                  JavaSDM.ensure ( alt != null );\n                  // check object alternativeFlow is really bound\n                  JavaSDM.ensure ( alternativeFlow != null );\n                  // check object flow is really bound\n                  JavaSDM.ensure ( flow != null );\n                  // check object normalStep is really bound\n                  JavaSDM.ensure ( normalStep != null );\n                  // check object useCase is really bound\n                  JavaSDM.ensure ( useCase != null );\n                  // check isomorphic binding between objects flow and alternativeFlow \n                  JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n                  // check link ref from alt to alternativeFlow\n                  JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n                  ));\n\n                  // check link flows from alternativeFlow to useCase\n                  JavaSDM.ensure (useCase.equals (alternativeFlow.eContainer()\n                  ));\n\n                  // check link flows from flow to useCase\n                  JavaSDM.ensure (useCase.equals (flow.eContainer()\n                  ));\n\n                  // check link src from _edge_stepAlternative to normalStep\n                  JavaSDM.ensure (normalStep.equals (_edge_stepAlternative.getSrc ()\n                  ));\n\n                  // check link stepAlternative from alt to normalStep\n                  JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                  ));\n\n                  // check link steps from normalStep to flow\n                  JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                  ));\n\n                  // check link trg from _edge_stepAlternative to alt\n                  JavaSDM.ensure (alt.equals (_edge_stepAlternative.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,useCase,flow,normalStep,alt,alternativeFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_27(
			EMoflonEdge _edge_stepAlternative);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCase __DEC_alternativeFlow_flows_981483 = null;\n      NormalStep __DEC_alt_stepAlternative_399257 = null;\n      Iterator fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_792971 = null;\n      AlternativeFlowAlternative __DEC_alternativeFlow_ref_792971 = null;\n      Match match = null;\n      Iterator fujaba__IterFlowToNormalStep = null;\n      NormalStep normalStep = null;\n      Iterator fujaba__IterUseCaseToFlow = null;\n      Flow flow = null;\n      UseCase useCase = null;\n      AlternativeFlow alternativeFlow = null;\n      AlternativeFlowAlternative alt = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_ref is really bound\n         JavaSDM.ensure ( _edge_ref != null );\n         // bind object\n         _TmpObject = _edge_ref.getSrc ();\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_ref.getTrg ();\n\n         // ensure correct type and really bound of object alternativeFlow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         alternativeFlow = (AlternativeFlow) _TmpObject;\n\n         // check link ref from alt to alternativeFlow\n         JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n         ));\n\n         // bind object\n         useCase = alternativeFlow.eContainer() instanceof UseCase ? (UseCase) alternativeFlow.eContainer() : null;\n\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(useCase.getFlows().contains(alternativeFlow));\n\n         // iterate to-many link flows from useCase to flow\n         fujaba__Success = false;\n\n         fujaba__IterUseCaseToFlow = new ArrayList(useCase.getFlows()).iterator ();\n\n         while ( fujaba__IterUseCaseToFlow.hasNext () )\n         {\n            try\n            {\n               flow = (Flow) fujaba__IterUseCaseToFlow.next ();\n\n               // check object flow is really bound\n               JavaSDM.ensure ( flow != null );\n               // check isomorphic binding between objects flow and alternativeFlow \n               JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n               // iterate to-many link steps from flow to normalStep\n               fujaba__Success = false;\n\n               fujaba__IterFlowToNormalStep = new ArrayList(flow.getSteps()).iterator ();\n\n               while ( fujaba__IterFlowToNormalStep.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterFlowToNormalStep.next ();\n\n                     // ensure correct type and really bound of object normalStep\n                     JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n                     normalStep = (NormalStep) _TmpObject;\n                     // check link stepAlternative from alt to normalStep\n                     JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_alternativeFlow_flows_981483 = alternativeFlow.eContainer() instanceof UseCase ? (UseCase) alternativeFlow.eContainer() : null;\n\n                           // check object __DEC_alternativeFlow_flows_981483 is really bound\n                           JavaSDM.ensure ( __DEC_alternativeFlow_flows_981483 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_alternativeFlow_flows_981483.getFlows().contains(alternativeFlow));\n\n                           // check isomorphic binding between objects __DEC_alternativeFlow_flows_981483 and useCase \n                           JavaSDM.ensure ( !__DEC_alternativeFlow_flows_981483.equals (useCase) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_alt_stepAlternative_399257 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt.eContainer() : null;\n\n                           // check object __DEC_alt_stepAlternative_399257 is really bound\n                           JavaSDM.ensure ( __DEC_alt_stepAlternative_399257 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_alt_stepAlternative_399257.getStepAlternative().contains(alt));\n\n                           // check isomorphic binding between objects __DEC_alt_stepAlternative_399257 and normalStep \n                           JavaSDM.ensure ( !__DEC_alt_stepAlternative_399257.equals (normalStep) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link ref from alternativeFlow to __DEC_alternativeFlow_ref_792971\n                           fujaba__Success = false;\n\n                           fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_792971 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(alternativeFlow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_792971.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_alternativeFlow_ref_792971 = (AlternativeFlowAlternative) fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_792971.next ();\n\n                                 // check object __DEC_alternativeFlow_ref_792971 is really bound\n                                 JavaSDM.ensure ( __DEC_alternativeFlow_ref_792971 != null );\n                                 // check isomorphic binding between objects __DEC_alternativeFlow_ref_792971 and alt \n                                 JavaSDM.ensure ( !__DEC_alternativeFlow_ref_792971.equals (alt) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_ref is really bound\n                        JavaSDM.ensure ( _edge_ref != null );\n                        // check object alt is really bound\n                        JavaSDM.ensure ( alt != null );\n                        // check object alternativeFlow is really bound\n                        JavaSDM.ensure ( alternativeFlow != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object normalStep is really bound\n                        JavaSDM.ensure ( normalStep != null );\n                        // check object useCase is really bound\n                        JavaSDM.ensure ( useCase != null );\n                        // check isomorphic binding between objects flow and alternativeFlow \n                        JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n                        // check link ref from alt to alternativeFlow\n                        JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n                        ));\n\n                        // check link flows from alternativeFlow to useCase\n                        JavaSDM.ensure (useCase.equals (alternativeFlow.eContainer()\n                        ));\n\n                        // check link flows from flow to useCase\n                        JavaSDM.ensure (useCase.equals (flow.eContainer()\n                        ));\n\n                        // check link src from _edge_ref to alt\n                        JavaSDM.ensure (alt.equals (_edge_ref.getSrc ()\n                        ));\n\n                        // check link stepAlternative from alt to normalStep\n                        JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                        ));\n\n                        // check link steps from normalStep to flow\n                        JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                        ));\n\n                        // check link trg from _edge_ref to alternativeFlow\n                        JavaSDM.ensure (alternativeFlow.equals (_edge_ref.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,useCase,flow,normalStep,alt,alternativeFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_28(EMoflonEdge _edge_ref);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_ceFlow_flowElements_302187 = null;\n      FlowElementsContainer __DEC_intermediateCatchEvent_flowElements_40451 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_813672 = null;\n      Iterator fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_676536 = null;\n      SequenceFlow __DEC_intermediateCatchEvent_targetRef_676536 = null;\n      Match match = null;\n      Iterator fujaba__IterIntermediateCatchEventToOutFlow = null;\n      SequenceFlow outFlow = null;\n      EventBasedGateway eventBasedGateway = null;\n      Iterator fujaba__IterIntermediateCatchEventToCeFlow = null;\n      SequenceFlow ceFlow = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      bpmn2.Process process = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      Lane lane = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowNodeRefs is really bound\n         JavaSDM.ensure ( _edge_flowNodeRefs != null );\n         // bind object\n         _TmpObject = _edge_flowNodeRefs.getSrc ();\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowNodeRefs.getTrg ();\n\n         // ensure correct type and really bound of object intermediateCatchEvent\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n\n         // bind object\n         _TmpObject = intermediateCatchEvent.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) intermediateCatchEvent.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(intermediateCatchEvent));\n\n         // check link flowNodeRefs from lane to intermediateCatchEvent\n         JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // iterate to-many link laneSets from process to laneSet\n               fujaba__Success = false;\n\n               fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n               while ( fujaba__IterProcessToLaneSet.hasNext () )\n               {\n                  try\n                  {\n                     laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                     // check object laneSet is really bound\n                     JavaSDM.ensure ( laneSet != null );\n                     // check link lanes from lane to laneSet\n                     JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                     ));\n\n                     // iterate to-many link sourceRef from intermediateCatchEvent to ceFlow\n                     fujaba__Success = false;\n\n                     fujaba__IterIntermediateCatchEventToCeFlow = new ArrayList(intermediateCatchEvent.getOutgoing()).iterator ();\n\n                     while ( fujaba__IterIntermediateCatchEventToCeFlow.hasNext () )\n                     {\n                        try\n                        {\n                           ceFlow = (SequenceFlow) fujaba__IterIntermediateCatchEventToCeFlow.next ();\n\n                           // check object ceFlow is really bound\n                           JavaSDM.ensure ( ceFlow != null );\n                           // check isomorphic binding between objects inFlow and ceFlow \n                           JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                           // check link flowElements from ceFlow to process\n                           JavaSDM.ensure (process.equals (ceFlow.eContainer()\n                           ));\n\n                           // bind object\n                           _TmpObject = inFlow.getTargetRef ();\n\n                           // ensure correct type and really bound of object eventBasedGateway\n                           JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n                           eventBasedGateway = (EventBasedGateway) _TmpObject;\n\n                           // check link flowElements from eventBasedGateway to process\n                           JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                           ));\n\n                           // iterate to-many link targetRef from intermediateCatchEvent to outFlow\n                           fujaba__Success = false;\n\n                           fujaba__IterIntermediateCatchEventToOutFlow = new ArrayList(intermediateCatchEvent.getIncoming()).iterator ();\n\n                           while ( fujaba__IterIntermediateCatchEventToOutFlow.hasNext () )\n                           {\n                              try\n                              {\n                                 outFlow = (SequenceFlow) fujaba__IterIntermediateCatchEventToOutFlow.next ();\n\n                                 // check object outFlow is really bound\n                                 JavaSDM.ensure ( outFlow != null );\n                                 // check isomorphic binding between objects outFlow and ceFlow \n                                 JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                                 // check isomorphic binding between objects outFlow and inFlow \n                                 JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                 // check link flowElements from outFlow to process\n                                 JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                 ));\n\n                                 // check link sourceRef from outFlow to eventBasedGateway\n                                 JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                                 ));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_ceFlow_flowElements_302187 = ceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) ceFlow.eContainer() : null;\n\n                                       // check object __DEC_ceFlow_flowElements_302187 is really bound\n                                       JavaSDM.ensure ( __DEC_ceFlow_flowElements_302187 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_ceFlow_flowElements_302187.getFlowElements().contains(ceFlow));\n\n                                       // check isomorphic binding between objects __DEC_ceFlow_flowElements_302187 and process \n                                       JavaSDM.ensure ( !__DEC_ceFlow_flowElements_302187.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_intermediateCatchEvent_flowElements_40451 = intermediateCatchEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) intermediateCatchEvent.eContainer() : null;\n\n                                       // check object __DEC_intermediateCatchEvent_flowElements_40451 is really bound\n                                       JavaSDM.ensure ( __DEC_intermediateCatchEvent_flowElements_40451 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_intermediateCatchEvent_flowElements_40451.getFlowElements().contains(intermediateCatchEvent));\n\n                                       // check isomorphic binding between objects __DEC_intermediateCatchEvent_flowElements_40451 and process \n                                       JavaSDM.ensure ( !__DEC_intermediateCatchEvent_flowElements_40451.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_outFlow_flowElements_813672 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                       // check object __DEC_outFlow_flowElements_813672 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_flowElements_813672 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_outFlow_flowElements_813672.getFlowElements().contains(outFlow));\n\n                                       // check isomorphic binding between objects __DEC_outFlow_flowElements_813672 and process \n                                       JavaSDM.ensure ( !__DEC_outFlow_flowElements_813672.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link default from ceFlow\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(ceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                    // negative check for link default from outFlow\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link targetRef from intermediateCatchEvent to __DEC_intermediateCatchEvent_targetRef_676536\n                                       fujaba__Success = false;\n\n                                       fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_676536 = new ArrayList(intermediateCatchEvent.getIncoming()).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_676536.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_intermediateCatchEvent_targetRef_676536 = (SequenceFlow) fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_676536.next ();\n\n                                             // check object __DEC_intermediateCatchEvent_targetRef_676536 is really bound\n                                             JavaSDM.ensure ( __DEC_intermediateCatchEvent_targetRef_676536 != null );\n                                             // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_676536 and ceFlow \n                                             JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_676536.equals (ceFlow) );\n\n                                             // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_676536 and inFlow \n                                             JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_676536.equals (inFlow) );\n\n                                             // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_676536 and outFlow \n                                             JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_676536.equals (outFlow) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_flowNodeRefs is really bound\n                                    JavaSDM.ensure ( _edge_flowNodeRefs != null );\n                                    // check object ceFlow is really bound\n                                    JavaSDM.ensure ( ceFlow != null );\n                                    // check object eventBasedGateway is really bound\n                                    JavaSDM.ensure ( eventBasedGateway != null );\n                                    // check object inFlow is really bound\n                                    JavaSDM.ensure ( inFlow != null );\n                                    // check object intermediateCatchEvent is really bound\n                                    JavaSDM.ensure ( intermediateCatchEvent != null );\n                                    // check object lane is really bound\n                                    JavaSDM.ensure ( lane != null );\n                                    // check object laneSet is really bound\n                                    JavaSDM.ensure ( laneSet != null );\n                                    // check object outFlow is really bound\n                                    JavaSDM.ensure ( outFlow != null );\n                                    // check object process is really bound\n                                    JavaSDM.ensure ( process != null );\n                                    // check isomorphic binding between objects inFlow and ceFlow \n                                    JavaSDM.ensure ( !inFlow.equals (ceFlow) );\n\n                                    // check isomorphic binding between objects outFlow and ceFlow \n                                    JavaSDM.ensure ( !outFlow.equals (ceFlow) );\n\n                                    // check isomorphic binding between objects outFlow and inFlow \n                                    JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                    // check link flowElements from ceFlow to process\n                                    JavaSDM.ensure (process.equals (ceFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from eventBasedGateway to process\n                                    JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                                    ));\n\n                                    // check link flowElements from inFlow to process\n                                    JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from intermediateCatchEvent to process\n                                    JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                                    ));\n\n                                    // check link flowElements from outFlow to process\n                                    JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                    ));\n\n                                    // check link laneSets from laneSet to process\n                                    JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                    ));\n\n                                    // check link lanes from lane to laneSet\n                                    JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                    ));\n\n                                    // check link sourceRef from ceFlow to intermediateCatchEvent\n                                    JavaSDM.ensure (intermediateCatchEvent.equals (ceFlow.getSourceRef ()\n                                    ));\n\n                                    // check link sourceRef from outFlow to eventBasedGateway\n                                    JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                                    ));\n\n                                    // check link src from _edge_flowNodeRefs to lane\n                                    JavaSDM.ensure (lane.equals (_edge_flowNodeRefs.getSrc ()\n                                    ));\n\n                                    // check link targetRef from inFlow to eventBasedGateway\n                                    JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                                    ));\n\n                                    // check link targetRef from outFlow to intermediateCatchEvent\n                                    JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                                    ));\n\n                                    // check link targetRef from ceFlow to intermediateCatchEvent\n                                    JavaSDM.ensure (!(intermediateCatchEvent.equals (ceFlow.getTargetRef ()\n                                    )));\n\n                                    // check link targetRef from inFlow to intermediateCatchEvent\n                                    JavaSDM.ensure (!(intermediateCatchEvent.equals (inFlow.getTargetRef ()\n                                    )));\n\n                                    // check link trg from _edge_flowNodeRefs to intermediateCatchEvent\n                                    JavaSDM.ensure (intermediateCatchEvent.equals (_edge_flowNodeRefs.getTrg ()\n                                    ));\n\n                                    // check link flowNodeRefs from lane to intermediateCatchEvent\n                                    JavaSDM.ensure (lane.getFlowNodeRefs ().contains (intermediateCatchEvent));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,lane,laneSet,ceFlow);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_FWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_76(
			EMoflonEdge _edge_flowNodeRefs);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // CatchEventAfterEBGToStepRule
